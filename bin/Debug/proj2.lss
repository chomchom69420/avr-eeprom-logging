
bin/Debug/proj2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d8  00800100  000027b0  00002844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002788  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .siminfo      00000028  00002788  00002788  0000281c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000001ba  008001d8  008001d8  0000291c  2**0
                  ALLOC
  4 .stab         000033cc  00000000  00000000  0000291c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000021c1  00000000  00000000  00005ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00007ea9  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007ebc  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  00007efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  000084f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  00008a92  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  00008aac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 ab 02 	jmp	0x556	; 0x556 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 ee 0e 	jmp	0x1ddc	; 0x1ddc <__vector_18>
      4c:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__vector_22>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 eb       	ldi	r30, 0xB0	; 176
      7c:	f7 e2       	ldi	r31, 0x27	; 39
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 3d       	cpi	r26, 0xD8	; 216
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a8 ed       	ldi	r26, 0xD8	; 216
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 39       	cpi	r26, 0x92	; 146
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <main>
      9e:	0c 94 c2 13 	jmp	0x2784	; 0x2784 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <config_init>:
    .use_static_ip=0,
    .static_ip={192, 168, 1, 100},
    .checksum=0};

void config_init()
{
      a6:	ef 92       	push	r14
      a8:	ff 92       	push	r15
      aa:	0f 93       	push	r16
      ac:	1f 93       	push	r17
      ae:	cf 93       	push	r28
      b0:	df 93       	push	r29
      b2:	cd b7       	in	r28, 0x3d	; 61
      b4:	de b7       	in	r29, 0x3e	; 62
      b6:	28 97       	sbiw	r28, 0x08	; 8
      b8:	0f b6       	in	r0, 0x3f	; 63
      ba:	f8 94       	cli
      bc:	de bf       	out	0x3e, r29	; 62
      be:	0f be       	out	0x3f, r0	; 63
      c0:	cd bf       	out	0x3d, r28	; 61
        modified=0;

    }


}
      c2:	0d b7       	in	r16, 0x3d	; 61
      c4:	1e b7       	in	r17, 0x3e	; 62
    .static_ip={192, 168, 1, 100},
    .checksum=0};

void config_init()
{
    while(eeprom_isbusy());  //waits for EEPROM to get out of busy state
      c6:	00 00       	nop
      c8:	0e 94 03 03 	call	0x606	; 0x606 <eeprom_isbusy>
      cc:	89 2b       	or	r24, r25
      ce:	e1 f7       	brne	.-8      	; 0xc8 <config_init+0x22>

    //initialize config
    unsigned int base_addr=0x040;
      d0:	80 e4       	ldi	r24, 0x40	; 64
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	9a 83       	std	Y+2, r25	; 0x02
      d6:	89 83       	std	Y+1, r24	; 0x01
    int size = sizeof(config_struct);
      d8:	82 e1       	ldi	r24, 0x12	; 18
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	9c 83       	std	Y+4, r25	; 0x04
      de:	8b 83       	std	Y+3, r24	; 0x03
    unsigned char buf[size];
      e0:	8b 81       	ldd	r24, Y+3	; 0x03
      e2:	9c 81       	ldd	r25, Y+4	; 0x04
      e4:	2d b7       	in	r18, 0x3d	; 61
      e6:	3e b7       	in	r19, 0x3e	; 62
      e8:	79 01       	movw	r14, r18
      ea:	9c 01       	movw	r18, r24
      ec:	21 50       	subi	r18, 0x01	; 1
      ee:	31 09       	sbc	r19, r1
      f0:	3e 83       	std	Y+6, r19	; 0x06
      f2:	2d 83       	std	Y+5, r18	; 0x05
      f4:	2d b7       	in	r18, 0x3d	; 61
      f6:	3e b7       	in	r19, 0x3e	; 62
      f8:	28 1b       	sub	r18, r24
      fa:	39 0b       	sbc	r19, r25
      fc:	0f b6       	in	r0, 0x3f	; 63
      fe:	f8 94       	cli
     100:	3e bf       	out	0x3e, r19	; 62
     102:	0f be       	out	0x3f, r0	; 63
     104:	2d bf       	out	0x3d, r18	; 61
     106:	8d b7       	in	r24, 0x3d	; 61
     108:	9e b7       	in	r25, 0x3e	; 62
     10a:	01 96       	adiw	r24, 0x01	; 1
     10c:	98 87       	std	Y+8, r25	; 0x08
     10e:	8f 83       	std	Y+7, r24	; 0x07
    eeprom_readbuf(base_addr, buf, size);
     110:	4b 81       	ldd	r20, Y+3	; 0x03
     112:	2f 81       	ldd	r18, Y+7	; 0x07
     114:	38 85       	ldd	r19, Y+8	; 0x08
     116:	89 81       	ldd	r24, Y+1	; 0x01
     118:	9a 81       	ldd	r25, Y+2	; 0x02
     11a:	b9 01       	movw	r22, r18
     11c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <eeprom_readbuf>

    memcpy((unsigned char*)&config, (unsigned char*)buf, size);
     120:	2b 81       	ldd	r18, Y+3	; 0x03
     122:	3c 81       	ldd	r19, Y+4	; 0x04
     124:	8f 81       	ldd	r24, Y+7	; 0x07
     126:	98 85       	ldd	r25, Y+8	; 0x08
     128:	a9 01       	movw	r20, r18
     12a:	bc 01       	movw	r22, r24
     12c:	85 ec       	ldi	r24, 0xC5	; 197
     12e:	92 e0       	ldi	r25, 0x02	; 2
     130:	0e 94 b0 13 	call	0x2760	; 0x2760 <memcpy>

    if(!config_is_data_valid())
     134:	0e 94 cc 00 	call	0x198	; 0x198 <config_is_data_valid>
     138:	89 2b       	or	r24, r25
     13a:	b1 f4       	brne	.+44     	; 0x168 <config_init+0xc2>
    {

        //Write default values to EEPROM location 0x040
        config_write_defaults();
     13c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <config_write_defaults>

        //Initialize config by reading location 0x040
        eeprom_readbuf(base_addr, (unsigned char*)buf, size);
     140:	4b 81       	ldd	r20, Y+3	; 0x03
     142:	2f 81       	ldd	r18, Y+7	; 0x07
     144:	38 85       	ldd	r19, Y+8	; 0x08
     146:	89 81       	ldd	r24, Y+1	; 0x01
     148:	9a 81       	ldd	r25, Y+2	; 0x02
     14a:	b9 01       	movw	r22, r18
     14c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <eeprom_readbuf>
        memcpy((unsigned char*)&config, (unsigned char*)buf, size);
     150:	2b 81       	ldd	r18, Y+3	; 0x03
     152:	3c 81       	ldd	r19, Y+4	; 0x04
     154:	8f 81       	ldd	r24, Y+7	; 0x07
     156:	98 85       	ldd	r25, Y+8	; 0x08
     158:	a9 01       	movw	r20, r18
     15a:	bc 01       	movw	r22, r24
     15c:	85 ec       	ldi	r24, 0xC5	; 197
     15e:	92 e0       	ldi	r25, 0x02	; 2
     160:	0e 94 b0 13 	call	0x2760	; 0x2760 <memcpy>

        //Clearing modified flag
        modified=0;
     164:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <modified>
     168:	0f b6       	in	r0, 0x3f	; 63
     16a:	f8 94       	cli
     16c:	fe be       	out	0x3e, r15	; 62
     16e:	0f be       	out	0x3f, r0	; 63
     170:	ed be       	out	0x3d, r14	; 61

    }


}
     172:	00 00       	nop
     174:	0f b6       	in	r0, 0x3f	; 63
     176:	f8 94       	cli
     178:	1e bf       	out	0x3e, r17	; 62
     17a:	0f be       	out	0x3f, r0	; 63
     17c:	0d bf       	out	0x3d, r16	; 61
     17e:	28 96       	adiw	r28, 0x08	; 8
     180:	0f b6       	in	r0, 0x3f	; 63
     182:	f8 94       	cli
     184:	de bf       	out	0x3e, r29	; 62
     186:	0f be       	out	0x3f, r0	; 63
     188:	cd bf       	out	0x3d, r28	; 61
     18a:	df 91       	pop	r29
     18c:	cf 91       	pop	r28
     18e:	1f 91       	pop	r17
     190:	0f 91       	pop	r16
     192:	ff 90       	pop	r15
     194:	ef 90       	pop	r14
     196:	08 95       	ret

00000198 <config_is_data_valid>:

int config_is_data_valid()
{
     198:	cf 93       	push	r28
     19a:	df 93       	push	r29
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
    return (config.token=="ASU") && is_checksum_valid((unsigned char*)&config, sizeof(config_struct));
     1a0:	85 ec       	ldi	r24, 0xC5	; 197
     1a2:	92 e0       	ldi	r25, 0x02	; 2
     1a4:	8d 55       	subi	r24, 0x5D	; 93
     1a6:	91 40       	sbci	r25, 0x01	; 1
     1a8:	59 f4       	brne	.+22     	; 0x1c0 <config_is_data_valid+0x28>
     1aa:	62 e1       	ldi	r22, 0x12	; 18
     1ac:	70 e0       	ldi	r23, 0x00	; 0
     1ae:	85 ec       	ldi	r24, 0xC5	; 197
     1b0:	92 e0       	ldi	r25, 0x02	; 2
     1b2:	0e 94 ee 06 	call	0xddc	; 0xddc <is_checksum_valid>
     1b6:	89 2b       	or	r24, r25
     1b8:	19 f0       	breq	.+6      	; 0x1c0 <config_is_data_valid+0x28>
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <config_is_data_valid+0x2c>
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	90 e0       	ldi	r25, 0x00	; 0
}
     1c4:	df 91       	pop	r29
     1c6:	cf 91       	pop	r28
     1c8:	08 95       	ret

000001ca <config_set_modified>:

void config_set_modified()
{
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
    modified=1;
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <modified>
}
     1d8:	00 00       	nop
     1da:	df 91       	pop	r29
     1dc:	cf 91       	pop	r28
     1de:	08 95       	ret

000001e0 <config_update>:

void config_update()
{
     1e0:	ef 92       	push	r14
     1e2:	ff 92       	push	r15
     1e4:	0f 93       	push	r16
     1e6:	1f 93       	push	r17
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
     1f0:	28 97       	sbiw	r28, 0x08	; 8
     1f2:	0f b6       	in	r0, 0x3f	; 63
     1f4:	f8 94       	cli
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	0f be       	out	0x3f, r0	; 63
     1fa:	cd bf       	out	0x3d, r28	; 61
        //Clearing modified flag
        modified=0;

    }

}
     1fc:	0d b7       	in	r16, 0x3d	; 61
     1fe:	1e b7       	in	r17, 0x3e	; 62
    modified=1;
}

void config_update()
{
    if(!eeprom_isbusy() && modified)
     200:	0e 94 03 03 	call	0x606	; 0x606 <eeprom_isbusy>
     204:	89 2b       	or	r24, r25
     206:	c9 f5       	brne	.+114    	; 0x27a <config_update+0x9a>
     208:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <modified>
     20c:	88 23       	and	r24, r24
     20e:	a9 f1       	breq	.+106    	; 0x27a <config_update+0x9a>
    {
     210:	8d b7       	in	r24, 0x3d	; 61
     212:	9e b7       	in	r25, 0x3e	; 62
     214:	7c 01       	movw	r14, r24
        //Update the checksum
        update_checksum((unsigned char*)&config, sizeof(config));
     216:	62 e1       	ldi	r22, 0x12	; 18
     218:	70 e0       	ldi	r23, 0x00	; 0
     21a:	85 ec       	ldi	r24, 0xC5	; 197
     21c:	92 e0       	ldi	r25, 0x02	; 2
     21e:	0e 94 c4 06 	call	0xd88	; 0xd88 <update_checksum>

        //Write config to eeprom
        unsigned int base_addr = 0x040;
     222:	80 e4       	ldi	r24, 0x40	; 64
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	9a 83       	std	Y+2, r25	; 0x02
     228:	89 83       	std	Y+1, r24	; 0x01
        int size = sizeof(config_struct);
     22a:	82 e1       	ldi	r24, 0x12	; 18
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	9c 83       	std	Y+4, r25	; 0x04
     230:	8b 83       	std	Y+3, r24	; 0x03
        unsigned char buf[size];
     232:	8b 81       	ldd	r24, Y+3	; 0x03
     234:	9c 81       	ldd	r25, Y+4	; 0x04
     236:	9c 01       	movw	r18, r24
     238:	21 50       	subi	r18, 0x01	; 1
     23a:	31 09       	sbc	r19, r1
     23c:	3e 83       	std	Y+6, r19	; 0x06
     23e:	2d 83       	std	Y+5, r18	; 0x05
     240:	2d b7       	in	r18, 0x3d	; 61
     242:	3e b7       	in	r19, 0x3e	; 62
     244:	28 1b       	sub	r18, r24
     246:	39 0b       	sbc	r19, r25
     248:	0f b6       	in	r0, 0x3f	; 63
     24a:	f8 94       	cli
     24c:	3e bf       	out	0x3e, r19	; 62
     24e:	0f be       	out	0x3f, r0	; 63
     250:	2d bf       	out	0x3d, r18	; 61
     252:	8d b7       	in	r24, 0x3d	; 61
     254:	9e b7       	in	r25, 0x3e	; 62
     256:	01 96       	adiw	r24, 0x01	; 1
     258:	98 87       	std	Y+8, r25	; 0x08
     25a:	8f 83       	std	Y+7, r24	; 0x07
        eeprom_writebuf(base_addr, (unsigned char*)buf, size);
     25c:	4b 81       	ldd	r20, Y+3	; 0x03
     25e:	2f 81       	ldd	r18, Y+7	; 0x07
     260:	38 85       	ldd	r19, Y+8	; 0x08
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	9a 81       	ldd	r25, Y+2	; 0x02
     266:	b9 01       	movw	r22, r18
     268:	0e 94 12 03 	call	0x624	; 0x624 <eeprom_writebuf>

        //Clearing modified flag
        modified=0;
     26c:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <modified>
     270:	0f b6       	in	r0, 0x3f	; 63
     272:	f8 94       	cli
     274:	fe be       	out	0x3e, r15	; 62
     276:	0f be       	out	0x3f, r0	; 63
     278:	ed be       	out	0x3d, r14	; 61

    }

}
     27a:	00 00       	nop
     27c:	0f b6       	in	r0, 0x3f	; 63
     27e:	f8 94       	cli
     280:	1e bf       	out	0x3e, r17	; 62
     282:	0f be       	out	0x3f, r0	; 63
     284:	0d bf       	out	0x3d, r16	; 61
     286:	28 96       	adiw	r28, 0x08	; 8
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	f8 94       	cli
     28c:	de bf       	out	0x3e, r29	; 62
     28e:	0f be       	out	0x3f, r0	; 63
     290:	cd bf       	out	0x3d, r28	; 61
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	1f 91       	pop	r17
     298:	0f 91       	pop	r16
     29a:	ff 90       	pop	r15
     29c:	ef 90       	pop	r14
     29e:	08 95       	ret

000002a0 <config_write_defaults>:

void config_write_defaults()
{
     2a0:	ef 92       	push	r14
     2a2:	ff 92       	push	r15
     2a4:	0f 93       	push	r16
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
     2b0:	28 97       	sbiw	r28, 0x08	; 8
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	f8 94       	cli
     2b6:	de bf       	out	0x3e, r29	; 62
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	cd bf       	out	0x3d, r28	; 61
    int size = sizeof(config_struct);
    unsigned char buf[size];
    memcpy((unsigned char*)buf, (unsigned char*)&config_defaults, size);

    eeprom_writebuf(base_addr, (unsigned char*)buf, size);
}
     2bc:	0d b7       	in	r16, 0x3d	; 61
     2be:	1e b7       	in	r17, 0x3e	; 62
    }

}

void config_write_defaults()
{
     2c0:	8d b7       	in	r24, 0x3d	; 61
     2c2:	9e b7       	in	r25, 0x3e	; 62
     2c4:	7c 01       	movw	r14, r24
    update_checksum((unsigned char*)&config, sizeof(config));
     2c6:	62 e1       	ldi	r22, 0x12	; 18
     2c8:	70 e0       	ldi	r23, 0x00	; 0
     2ca:	85 ec       	ldi	r24, 0xC5	; 197
     2cc:	92 e0       	ldi	r25, 0x02	; 2
     2ce:	0e 94 c4 06 	call	0xd88	; 0xd88 <update_checksum>

    //Writing defaults to eeprom
    unsigned int base_addr = 0x040;
     2d2:	80 e4       	ldi	r24, 0x40	; 64
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	9a 83       	std	Y+2, r25	; 0x02
     2d8:	89 83       	std	Y+1, r24	; 0x01
    int size = sizeof(config_struct);
     2da:	82 e1       	ldi	r24, 0x12	; 18
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	9c 83       	std	Y+4, r25	; 0x04
     2e0:	8b 83       	std	Y+3, r24	; 0x03
    unsigned char buf[size];
     2e2:	8b 81       	ldd	r24, Y+3	; 0x03
     2e4:	9c 81       	ldd	r25, Y+4	; 0x04
     2e6:	9c 01       	movw	r18, r24
     2e8:	21 50       	subi	r18, 0x01	; 1
     2ea:	31 09       	sbc	r19, r1
     2ec:	3e 83       	std	Y+6, r19	; 0x06
     2ee:	2d 83       	std	Y+5, r18	; 0x05
     2f0:	2d b7       	in	r18, 0x3d	; 61
     2f2:	3e b7       	in	r19, 0x3e	; 62
     2f4:	28 1b       	sub	r18, r24
     2f6:	39 0b       	sbc	r19, r25
     2f8:	0f b6       	in	r0, 0x3f	; 63
     2fa:	f8 94       	cli
     2fc:	3e bf       	out	0x3e, r19	; 62
     2fe:	0f be       	out	0x3f, r0	; 63
     300:	2d bf       	out	0x3d, r18	; 61
     302:	8d b7       	in	r24, 0x3d	; 61
     304:	9e b7       	in	r25, 0x3e	; 62
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	98 87       	std	Y+8, r25	; 0x08
     30a:	8f 83       	std	Y+7, r24	; 0x07
    memcpy((unsigned char*)buf, (unsigned char*)&config_defaults, size);
     30c:	2b 81       	ldd	r18, Y+3	; 0x03
     30e:	3c 81       	ldd	r19, Y+4	; 0x04
     310:	8f 81       	ldd	r24, Y+7	; 0x07
     312:	98 85       	ldd	r25, Y+8	; 0x08
     314:	a9 01       	movw	r20, r18
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	71 e0       	ldi	r23, 0x01	; 1
     31a:	0e 94 b0 13 	call	0x2760	; 0x2760 <memcpy>

    eeprom_writebuf(base_addr, (unsigned char*)buf, size);
     31e:	4b 81       	ldd	r20, Y+3	; 0x03
     320:	2f 81       	ldd	r18, Y+7	; 0x07
     322:	38 85       	ldd	r19, Y+8	; 0x08
     324:	89 81       	ldd	r24, Y+1	; 0x01
     326:	9a 81       	ldd	r25, Y+2	; 0x02
     328:	b9 01       	movw	r22, r18
     32a:	0e 94 12 03 	call	0x624	; 0x624 <eeprom_writebuf>
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	f8 94       	cli
     332:	fe be       	out	0x3e, r15	; 62
     334:	0f be       	out	0x3f, r0	; 63
     336:	ed be       	out	0x3d, r14	; 61
}
     338:	00 00       	nop
     33a:	0f b6       	in	r0, 0x3f	; 63
     33c:	f8 94       	cli
     33e:	1e bf       	out	0x3e, r17	; 62
     340:	0f be       	out	0x3f, r0	; 63
     342:	0d bf       	out	0x3d, r16	; 61
     344:	28 96       	adiw	r28, 0x08	; 8
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	f8 94       	cli
     34a:	de bf       	out	0x3e, r29	; 62
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	cd bf       	out	0x3d, r28	; 61
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	1f 91       	pop	r17
     356:	0f 91       	pop	r16
     358:	ff 90       	pop	r15
     35a:	ef 90       	pop	r14
     35c:	08 95       	ret

0000035e <delay_init>:
static unsigned int limit[2] = {0, 0};
static unsigned char initialized = 0;

typedef void (*func_t)(void);

void delay_init() {
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	00 d0       	rcall	.+0      	; 0x364 <delay_init+0x6>
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
    if (!initialized) {
     368:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <initialized>
     36c:	88 23       	and	r24, r24
     36e:	89 f5       	brne	.+98     	; 0x3d2 <delay_init+0x74>
        /*

        unsigned int PRESCALER_VALUE = 64;
        */

        unsigned int COMPARE_VALUE = 250;
     370:	8a ef       	ldi	r24, 0xFA	; 250
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	9a 83       	std	Y+2, r25	; 0x02
     376:	89 83       	std	Y+1, r24	; 0x01



        OCR0A = COMPARE_VALUE-1; // Set timer0 compare value to 250-1 = 249
     378:	87 e4       	ldi	r24, 0x47	; 71
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	29 81       	ldd	r18, Y+1	; 0x01
     37e:	21 50       	subi	r18, 0x01	; 1
     380:	fc 01       	movw	r30, r24
     382:	20 83       	st	Z, r18

        // Set CTC mode and correct clock divisor
        TCCR0A |= (1 << WGM01); // Set CTC mode //WGM01
     384:	84 e4       	ldi	r24, 0x44	; 68
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	24 e4       	ldi	r18, 0x44	; 68
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	f9 01       	movw	r30, r18
     38e:	20 81       	ld	r18, Z
     390:	22 60       	ori	r18, 0x02	; 2
     392:	fc 01       	movw	r30, r24
     394:	20 83       	st	Z, r18
        TCCR0B |= (1 << CS01) | (1 << CS00); // Set clock divisor (prescaler value = 64)  CS00/CS01
     396:	85 e4       	ldi	r24, 0x45	; 69
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	25 e4       	ldi	r18, 0x45	; 69
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	f9 01       	movw	r30, r18
     3a0:	20 81       	ld	r18, Z
     3a2:	23 60       	ori	r18, 0x03	; 3
     3a4:	fc 01       	movw	r30, r24
     3a6:	20 83       	st	Z, r18

        // Enable global interrupts
        // __builtin_avr_sei();
        SREG |= (1<<I_SREG);
     3a8:	8f e5       	ldi	r24, 0x5F	; 95
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	2f e5       	ldi	r18, 0x5F	; 95
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	f9 01       	movw	r30, r18
     3b2:	20 81       	ld	r18, Z
     3b4:	20 68       	ori	r18, 0x80	; 128
     3b6:	fc 01       	movw	r30, r24
     3b8:	20 83       	st	Z, r18

        // Enable interrupts on output compare A
        TIMSK0 |= (1 << OCIE0A);  //OCIE0A
     3ba:	8e e6       	ldi	r24, 0x6E	; 110
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	2e e6       	ldi	r18, 0x6E	; 110
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	f9 01       	movw	r30, r18
     3c4:	20 81       	ld	r18, Z
     3c6:	22 60       	ori	r18, 0x02	; 2
     3c8:	fc 01       	movw	r30, r24
     3ca:	20 83       	st	Z, r18

        // Stop further initialization by setting initialized to 1
        initialized = 1;
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <initialized>
    }
}
     3d2:	00 00       	nop
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	df 91       	pop	r29
     3da:	cf 91       	pop	r28
     3dc:	08 95       	ret

000003de <delay_get>:


unsigned int delay_get(unsigned int num) {
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	00 d0       	rcall	.+0      	; 0x3e4 <delay_get+0x6>
     3e4:	00 d0       	rcall	.+0      	; 0x3e6 <delay_get+0x8>
     3e6:	00 d0       	rcall	.+0      	; 0x3e8 <delay_get+0xa>
     3e8:	cd b7       	in	r28, 0x3d	; 61
     3ea:	de b7       	in	r29, 0x3e	; 62
     3ec:	9e 83       	std	Y+6, r25	; 0x06
     3ee:	8d 83       	std	Y+5, r24	; 0x05

    unsigned int count_value;

    // Get global interrupt enable bit state
    unsigned int sreg_state = SREG & (1 << I_SREG);
     3f0:	8f e5       	ldi	r24, 0x5F	; 95
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	fc 01       	movw	r30, r24
     3f6:	80 81       	ld	r24, Z
     3f8:	08 2e       	mov	r0, r24
     3fa:	00 0c       	add	r0, r0
     3fc:	99 0b       	sbc	r25, r25
     3fe:	80 78       	andi	r24, 0x80	; 128
     400:	99 27       	eor	r25, r25
     402:	9a 83       	std	Y+2, r25	; 0x02
     404:	89 83       	std	Y+1, r24	; 0x01

    // Disable interrupts
    // __builtin_avr_cli(); //
    SREG &= ~(1<<I_SREG);
     406:	8f e5       	ldi	r24, 0x5F	; 95
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	2f e5       	ldi	r18, 0x5F	; 95
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	f9 01       	movw	r30, r18
     410:	20 81       	ld	r18, Z
     412:	2f 77       	andi	r18, 0x7F	; 127
     414:	fc 01       	movw	r30, r24
     416:	20 83       	st	Z, r18

    // Get the delay_count[num] value
    count_value = delay_count[num];
     418:	8d 81       	ldd	r24, Y+5	; 0x05
     41a:	9e 81       	ldd	r25, Y+6	; 0x06
     41c:	88 0f       	add	r24, r24
     41e:	99 1f       	adc	r25, r25
     420:	88 52       	subi	r24, 0x28	; 40
     422:	9e 4f       	sbci	r25, 0xFE	; 254
     424:	fc 01       	movw	r30, r24
     426:	80 81       	ld	r24, Z
     428:	91 81       	ldd	r25, Z+1	; 0x01
     42a:	9c 83       	std	Y+4, r25	; 0x04
     42c:	8b 83       	std	Y+3, r24	; 0x03

    // Restore global interrupt state
    if (sreg_state) {
     42e:	89 81       	ldd	r24, Y+1	; 0x01
     430:	9a 81       	ldd	r25, Y+2	; 0x02
     432:	89 2b       	or	r24, r25
     434:	49 f0       	breq	.+18     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
        SREG |= (1<<I_SREG); //Enable interrupts
     436:	8f e5       	ldi	r24, 0x5F	; 95
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	2f e5       	ldi	r18, 0x5F	; 95
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	f9 01       	movw	r30, r18
     440:	20 81       	ld	r18, Z
     442:	20 68       	ori	r18, 0x80	; 128
     444:	fc 01       	movw	r30, r24
     446:	20 83       	st	Z, r18
    }

    // Return the count value
    return count_value;
     448:	8b 81       	ldd	r24, Y+3	; 0x03
     44a:	9c 81       	ldd	r25, Y+4	; 0x04
}
     44c:	26 96       	adiw	r28, 0x06	; 6
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	f8 94       	cli
     452:	de bf       	out	0x3e, r29	; 62
     454:	0f be       	out	0x3f, r0	; 63
     456:	cd bf       	out	0x3d, r28	; 61
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	08 95       	ret

0000045e <delay_set>:


void delay_set(unsigned int num, unsigned int time) {
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	00 d0       	rcall	.+0      	; 0x464 <delay_set+0x6>
     464:	00 d0       	rcall	.+0      	; 0x466 <delay_set+0x8>
     466:	00 d0       	rcall	.+0      	; 0x468 <delay_set+0xa>
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	9c 83       	std	Y+4, r25	; 0x04
     46e:	8b 83       	std	Y+3, r24	; 0x03
     470:	7e 83       	std	Y+6, r23	; 0x06
     472:	6d 83       	std	Y+5, r22	; 0x05

    // If not initialized, initialize the delay counter
    if (!initialized) {
     474:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <initialized>
     478:	88 23       	and	r24, r24
     47a:	11 f4       	brne	.+4      	; 0x480 <delay_set+0x22>
        delay_init();
     47c:	0e 94 af 01 	call	0x35e	; 0x35e <delay_init>
    }
    // Get global interrupt enable bit state
    unsigned int sreg_state = SREG & (1 << 7);
     480:	8f e5       	ldi	r24, 0x5F	; 95
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	fc 01       	movw	r30, r24
     486:	80 81       	ld	r24, Z
     488:	08 2e       	mov	r0, r24
     48a:	00 0c       	add	r0, r0
     48c:	99 0b       	sbc	r25, r25
     48e:	80 78       	andi	r24, 0x80	; 128
     490:	99 27       	eor	r25, r25
     492:	9a 83       	std	Y+2, r25	; 0x02
     494:	89 83       	std	Y+1, r24	; 0x01

    // Disable Interrupts
    SREG &= ~(1<<I_SREG); //cli()
     496:	8f e5       	ldi	r24, 0x5F	; 95
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	2f e5       	ldi	r18, 0x5F	; 95
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	f9 01       	movw	r30, r18
     4a0:	20 81       	ld	r18, Z
     4a2:	2f 77       	andi	r18, 0x7F	; 127
     4a4:	fc 01       	movw	r30, r24
     4a6:	20 83       	st	Z, r18

    // Set the limit for delay[num] and clear the count for delay[num]
    limit[num] = time;
     4a8:	8b 81       	ldd	r24, Y+3	; 0x03
     4aa:	9c 81       	ldd	r25, Y+4	; 0x04
     4ac:	88 0f       	add	r24, r24
     4ae:	99 1f       	adc	r25, r25
     4b0:	84 52       	subi	r24, 0x24	; 36
     4b2:	9e 4f       	sbci	r25, 0xFE	; 254
     4b4:	2d 81       	ldd	r18, Y+5	; 0x05
     4b6:	3e 81       	ldd	r19, Y+6	; 0x06
     4b8:	fc 01       	movw	r30, r24
     4ba:	31 83       	std	Z+1, r19	; 0x01
     4bc:	20 83       	st	Z, r18
    delay_count[num] = 0;
     4be:	8b 81       	ldd	r24, Y+3	; 0x03
     4c0:	9c 81       	ldd	r25, Y+4	; 0x04
     4c2:	88 0f       	add	r24, r24
     4c4:	99 1f       	adc	r25, r25
     4c6:	88 52       	subi	r24, 0x28	; 40
     4c8:	9e 4f       	sbci	r25, 0xFE	; 254
     4ca:	fc 01       	movw	r30, r24
     4cc:	11 82       	std	Z+1, r1	; 0x01
     4ce:	10 82       	st	Z, r1

    // Restore global interrupt state
    if (sreg_state) {
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	9a 81       	ldd	r25, Y+2	; 0x02
     4d4:	89 2b       	or	r24, r25
     4d6:	49 f0       	breq	.+18     	; 0x4ea <delay_set+0x8c>
        SREG |= (1<<I_SREG);   //sei()
     4d8:	8f e5       	ldi	r24, 0x5F	; 95
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	2f e5       	ldi	r18, 0x5F	; 95
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	f9 01       	movw	r30, r18
     4e2:	20 81       	ld	r18, Z
     4e4:	20 68       	ori	r18, 0x80	; 128
     4e6:	fc 01       	movw	r30, r24
     4e8:	20 83       	st	Z, r18
    }
}
     4ea:	00 00       	nop
     4ec:	26 96       	adiw	r28, 0x06	; 6
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	f8 94       	cli
     4f2:	de bf       	out	0x3e, r29	; 62
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	cd bf       	out	0x3d, r28	; 61
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	08 95       	ret

000004fe <delay_isdone>:


unsigned int delay_isdone(unsigned int num) {
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	00 d0       	rcall	.+0      	; 0x504 <delay_isdone+0x6>
     504:	00 d0       	rcall	.+0      	; 0x506 <delay_isdone+0x8>
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
     50a:	9c 83       	std	Y+4, r25	; 0x04
     50c:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int result = 0;
     50e:	1a 82       	std	Y+2, r1	; 0x02
     510:	19 82       	std	Y+1, r1	; 0x01

    // If delay_count[num] equals limit[num], set result to 1
    if (delay_count[num] == limit[num]) {
     512:	8b 81       	ldd	r24, Y+3	; 0x03
     514:	9c 81       	ldd	r25, Y+4	; 0x04
     516:	88 0f       	add	r24, r24
     518:	99 1f       	adc	r25, r25
     51a:	88 52       	subi	r24, 0x28	; 40
     51c:	9e 4f       	sbci	r25, 0xFE	; 254
     51e:	fc 01       	movw	r30, r24
     520:	20 81       	ld	r18, Z
     522:	31 81       	ldd	r19, Z+1	; 0x01
     524:	8b 81       	ldd	r24, Y+3	; 0x03
     526:	9c 81       	ldd	r25, Y+4	; 0x04
     528:	88 0f       	add	r24, r24
     52a:	99 1f       	adc	r25, r25
     52c:	84 52       	subi	r24, 0x24	; 36
     52e:	9e 4f       	sbci	r25, 0xFE	; 254
     530:	fc 01       	movw	r30, r24
     532:	80 81       	ld	r24, Z
     534:	91 81       	ldd	r25, Z+1	; 0x01
     536:	28 17       	cp	r18, r24
     538:	39 07       	cpc	r19, r25
     53a:	21 f4       	brne	.+8      	; 0x544 <delay_isdone+0x46>
        result = 1;
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	9a 83       	std	Y+2, r25	; 0x02
     542:	89 83       	std	Y+1, r24	; 0x01
    }

    // Return the result
    return result;
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	9a 81       	ldd	r25, Y+2	; 0x02
}
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	08 95       	ret

00000556 <__vector_14>:

//map to ivt

void __vector_14(void) __attribute__ ((signal, used, externally_visible));

void __vector_14(void) {
     556:	1f 92       	push	r1
     558:	0f 92       	push	r0
     55a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     55e:	0f 92       	push	r0
     560:	11 24       	eor	r1, r1
     562:	2f 93       	push	r18
     564:	3f 93       	push	r19
     566:	8f 93       	push	r24
     568:	9f 93       	push	r25
     56a:	ef 93       	push	r30
     56c:	ff 93       	push	r31
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	00 d0       	rcall	.+0      	; 0x574 <__vector_14+0x1e>
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
    for (unsigned int i = 0; i < sizeof(delay_count) / sizeof(delay_count[0]); i++) {
     578:	1a 82       	std	Y+2, r1	; 0x02
     57a:	19 82       	std	Y+1, r1	; 0x01
     57c:	2f c0       	rjmp	.+94     	; 0x5dc <__vector_14+0x86>
        if (delay_count[i] < limit[i]) {
     57e:	89 81       	ldd	r24, Y+1	; 0x01
     580:	9a 81       	ldd	r25, Y+2	; 0x02
     582:	88 0f       	add	r24, r24
     584:	99 1f       	adc	r25, r25
     586:	88 52       	subi	r24, 0x28	; 40
     588:	9e 4f       	sbci	r25, 0xFE	; 254
     58a:	fc 01       	movw	r30, r24
     58c:	20 81       	ld	r18, Z
     58e:	31 81       	ldd	r19, Z+1	; 0x01
     590:	89 81       	ldd	r24, Y+1	; 0x01
     592:	9a 81       	ldd	r25, Y+2	; 0x02
     594:	88 0f       	add	r24, r24
     596:	99 1f       	adc	r25, r25
     598:	84 52       	subi	r24, 0x24	; 36
     59a:	9e 4f       	sbci	r25, 0xFE	; 254
     59c:	fc 01       	movw	r30, r24
     59e:	80 81       	ld	r24, Z
     5a0:	91 81       	ldd	r25, Z+1	; 0x01
     5a2:	28 17       	cp	r18, r24
     5a4:	39 07       	cpc	r19, r25
     5a6:	a8 f4       	brcc	.+42     	; 0x5d2 <__vector_14+0x7c>
            delay_count[i]++;
     5a8:	89 81       	ldd	r24, Y+1	; 0x01
     5aa:	9a 81       	ldd	r25, Y+2	; 0x02
     5ac:	88 0f       	add	r24, r24
     5ae:	99 1f       	adc	r25, r25
     5b0:	88 52       	subi	r24, 0x28	; 40
     5b2:	9e 4f       	sbci	r25, 0xFE	; 254
     5b4:	fc 01       	movw	r30, r24
     5b6:	80 81       	ld	r24, Z
     5b8:	91 81       	ldd	r25, Z+1	; 0x01
     5ba:	9c 01       	movw	r18, r24
     5bc:	2f 5f       	subi	r18, 0xFF	; 255
     5be:	3f 4f       	sbci	r19, 0xFF	; 255
     5c0:	89 81       	ldd	r24, Y+1	; 0x01
     5c2:	9a 81       	ldd	r25, Y+2	; 0x02
     5c4:	88 0f       	add	r24, r24
     5c6:	99 1f       	adc	r25, r25
     5c8:	88 52       	subi	r24, 0x28	; 40
     5ca:	9e 4f       	sbci	r25, 0xFE	; 254
     5cc:	fc 01       	movw	r30, r24
     5ce:	31 83       	std	Z+1, r19	; 0x01
     5d0:	20 83       	st	Z, r18
//map to ivt

void __vector_14(void) __attribute__ ((signal, used, externally_visible));

void __vector_14(void) {
    for (unsigned int i = 0; i < sizeof(delay_count) / sizeof(delay_count[0]); i++) {
     5d2:	89 81       	ldd	r24, Y+1	; 0x01
     5d4:	9a 81       	ldd	r25, Y+2	; 0x02
     5d6:	01 96       	adiw	r24, 0x01	; 1
     5d8:	9a 83       	std	Y+2, r25	; 0x02
     5da:	89 83       	std	Y+1, r24	; 0x01
     5dc:	89 81       	ldd	r24, Y+1	; 0x01
     5de:	9a 81       	ldd	r25, Y+2	; 0x02
     5e0:	02 97       	sbiw	r24, 0x02	; 2
     5e2:	68 f2       	brcs	.-102    	; 0x57e <__vector_14+0x28>
        if (delay_count[i] < limit[i]) {
            delay_count[i]++;
        }
    }
}
     5e4:	00 00       	nop
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	df 91       	pop	r29
     5ec:	cf 91       	pop	r28
     5ee:	ff 91       	pop	r31
     5f0:	ef 91       	pop	r30
     5f2:	9f 91       	pop	r25
     5f4:	8f 91       	pop	r24
     5f6:	3f 91       	pop	r19
     5f8:	2f 91       	pop	r18
     5fa:	0f 90       	pop	r0
     5fc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     600:	0f 90       	pop	r0
     602:	1f 90       	pop	r1
     604:	18 95       	reti

00000606 <eeprom_isbusy>:
#define EEMPE 2         //EEPROM master write enable
#define SELFPRGEN 0

void EEPROM_set_write_mode();

int eeprom_isbusy(){
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
    return write_busy==1;
     60e:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <write_busy>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	91 30       	cpi	r25, 0x01	; 1
     616:	09 f0       	breq	.+2      	; 0x61a <eeprom_isbusy+0x14>
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	88 2f       	mov	r24, r24
     61c:	90 e0       	ldi	r25, 0x00	; 0
}
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	08 95       	ret

00000624 <eeprom_writebuf>:

void eeprom_writebuf(unsigned int addr, unsigned char* buf, unsigned char size){
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
     62c:	27 97       	sbiw	r28, 0x07	; 7
     62e:	0f b6       	in	r0, 0x3f	; 63
     630:	f8 94       	cli
     632:	de bf       	out	0x3e, r29	; 62
     634:	0f be       	out	0x3f, r0	; 63
     636:	cd bf       	out	0x3d, r28	; 61
     638:	9c 83       	std	Y+4, r25	; 0x04
     63a:	8b 83       	std	Y+3, r24	; 0x03
     63c:	7e 83       	std	Y+6, r23	; 0x06
     63e:	6d 83       	std	Y+5, r22	; 0x05
     640:	4f 83       	std	Y+7, r20	; 0x07
    writeaddr = addr;
     642:	8b 81       	ldd	r24, Y+3	; 0x03
     644:	9c 81       	ldd	r25, Y+4	; 0x04
     646:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <writeaddr+0x1>
     64a:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <writeaddr>
    write_busy = 1;
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <write_busy>
    bufidx = 0;
     654:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <bufidx>

    //Copying
    for (int i=0;i<size;i++)
     658:	1a 82       	std	Y+2, r1	; 0x02
     65a:	19 82       	std	Y+1, r1	; 0x01
     65c:	13 c0       	rjmp	.+38     	; 0x684 <eeprom_writebuf+0x60>
        writebuf[i] = buf[i];
     65e:	89 81       	ldd	r24, Y+1	; 0x01
     660:	9a 81       	ldd	r25, Y+2	; 0x02
     662:	2d 81       	ldd	r18, Y+5	; 0x05
     664:	3e 81       	ldd	r19, Y+6	; 0x06
     666:	82 0f       	add	r24, r18
     668:	93 1f       	adc	r25, r19
     66a:	fc 01       	movw	r30, r24
     66c:	20 81       	ld	r18, Z
     66e:	89 81       	ldd	r24, Y+1	; 0x01
     670:	9a 81       	ldd	r25, Y+2	; 0x02
     672:	8c 57       	subi	r24, 0x7C	; 124
     674:	9d 4f       	sbci	r25, 0xFD	; 253
     676:	fc 01       	movw	r30, r24
     678:	20 83       	st	Z, r18
    writeaddr = addr;
    write_busy = 1;
    bufidx = 0;

    //Copying
    for (int i=0;i<size;i++)
     67a:	89 81       	ldd	r24, Y+1	; 0x01
     67c:	9a 81       	ldd	r25, Y+2	; 0x02
     67e:	01 96       	adiw	r24, 0x01	; 1
     680:	9a 83       	std	Y+2, r25	; 0x02
     682:	89 83       	std	Y+1, r24	; 0x01
     684:	8f 81       	ldd	r24, Y+7	; 0x07
     686:	28 2f       	mov	r18, r24
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	89 81       	ldd	r24, Y+1	; 0x01
     68c:	9a 81       	ldd	r25, Y+2	; 0x02
     68e:	82 17       	cp	r24, r18
     690:	93 07       	cpc	r25, r19
     692:	2c f3       	brlt	.-54     	; 0x65e <eeprom_writebuf+0x3a>
        writebuf[i] = buf[i];

    writesize = size;
     694:	8f 81       	ldd	r24, Y+7	; 0x07
     696:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <writesize>

    //init EEPROM
    EECR |= (1<<EEPM1);
     69a:	8f e3       	ldi	r24, 0x3F	; 63
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	2f e3       	ldi	r18, 0x3F	; 63
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	f9 01       	movw	r30, r18
     6a4:	20 81       	ld	r18, Z
     6a6:	20 62       	ori	r18, 0x20	; 32
     6a8:	fc 01       	movw	r30, r24
     6aa:	20 83       	st	Z, r18
    EEARH &= ~(1<<EEAR8);
     6ac:	82 e4       	ldi	r24, 0x42	; 66
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	22 e4       	ldi	r18, 0x42	; 66
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	f9 01       	movw	r30, r18
     6b6:	20 81       	ld	r18, Z
     6b8:	2f 77       	andi	r18, 0x7F	; 127
     6ba:	fc 01       	movw	r30, r24
     6bc:	20 83       	st	Z, r18

    //TODO: Enable EEPROM ready interrupts
    SREG |= (1<<I_SREG);        //Global interrupt enable
     6be:	8f e5       	ldi	r24, 0x5F	; 95
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	2f e5       	ldi	r18, 0x5F	; 95
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	f9 01       	movw	r30, r18
     6c8:	20 81       	ld	r18, Z
     6ca:	20 68       	ori	r18, 0x80	; 128
     6cc:	fc 01       	movw	r30, r24
     6ce:	20 83       	st	Z, r18
    EECR |= (1<<EERIE);         //Enabling EEPROM ready interrupt
     6d0:	8f e3       	ldi	r24, 0x3F	; 63
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	2f e3       	ldi	r18, 0x3F	; 63
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	f9 01       	movw	r30, r18
     6da:	20 81       	ld	r18, Z
     6dc:	28 60       	ori	r18, 0x08	; 8
     6de:	fc 01       	movw	r30, r24
     6e0:	20 83       	st	Z, r18
}
     6e2:	00 00       	nop
     6e4:	27 96       	adiw	r28, 0x07	; 7
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	f8 94       	cli
     6ea:	de bf       	out	0x3e, r29	; 62
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	cd bf       	out	0x3d, r28	; 61
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	08 95       	ret

000006f6 <eeprom_readbuf>:

void eeprom_readbuf(unsigned int addr, unsigned char* buf, unsigned char size)
{
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	cd b7       	in	r28, 0x3d	; 61
     6fc:	de b7       	in	r29, 0x3e	; 62
     6fe:	29 97       	sbiw	r28, 0x09	; 9
     700:	0f b6       	in	r0, 0x3f	; 63
     702:	f8 94       	cli
     704:	de bf       	out	0x3e, r29	; 62
     706:	0f be       	out	0x3f, r0	; 63
     708:	cd bf       	out	0x3d, r28	; 61
     70a:	9e 83       	std	Y+6, r25	; 0x06
     70c:	8d 83       	std	Y+5, r24	; 0x05
     70e:	78 87       	std	Y+8, r23	; 0x08
     710:	6f 83       	std	Y+7, r22	; 0x07
     712:	49 87       	std	Y+9, r20	; 0x09
    unsigned int read_addr=addr;;
     714:	8d 81       	ldd	r24, Y+5	; 0x05
     716:	9e 81       	ldd	r25, Y+6	; 0x06
     718:	9a 83       	std	Y+2, r25	; 0x02
     71a:	89 83       	std	Y+1, r24	; 0x01
    for(int i=0;i<size;i++)
     71c:	1c 82       	std	Y+4, r1	; 0x04
     71e:	1b 82       	std	Y+3, r1	; 0x03
     720:	32 c0       	rjmp	.+100    	; 0x786 <eeprom_readbuf+0x90>
    {
        //Read from EEPROM and store in buf[0:size-1]
        while(EECR & (1<<EEPE));     //waiting until EEPE becomes 0)
     722:	00 00       	nop
     724:	8f e3       	ldi	r24, 0x3F	; 63
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	fc 01       	movw	r30, r24
     72a:	80 81       	ld	r24, Z
     72c:	08 2e       	mov	r0, r24
     72e:	00 0c       	add	r0, r0
     730:	99 0b       	sbc	r25, r25
     732:	82 70       	andi	r24, 0x02	; 2
     734:	99 27       	eor	r25, r25
     736:	89 2b       	or	r24, r25
     738:	a9 f7       	brne	.-22     	; 0x724 <eeprom_readbuf+0x2e>
        EEARL = read_addr;
     73a:	81 e4       	ldi	r24, 0x41	; 65
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	29 81       	ldd	r18, Y+1	; 0x01
     740:	fc 01       	movw	r30, r24
     742:	20 83       	st	Z, r18
        EECR |= (1<<EERE);
     744:	8f e3       	ldi	r24, 0x3F	; 63
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	2f e3       	ldi	r18, 0x3F	; 63
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	f9 01       	movw	r30, r18
     74e:	20 81       	ld	r18, Z
     750:	21 60       	ori	r18, 0x01	; 1
     752:	fc 01       	movw	r30, r24
     754:	20 83       	st	Z, r18
        //Wait for 4 cycles
        //uart_writestr("Here before");
        __builtin_avr_delay_cycles(4);
     756:	00 c0       	rjmp	.+0      	; 0x758 <eeprom_readbuf+0x62>
     758:	00 c0       	rjmp	.+0      	; 0x75a <eeprom_readbuf+0x64>
        //uart_writestr("Here after");

        buf[i] = EEDR;
     75a:	8b 81       	ldd	r24, Y+3	; 0x03
     75c:	9c 81       	ldd	r25, Y+4	; 0x04
     75e:	2f 81       	ldd	r18, Y+7	; 0x07
     760:	38 85       	ldd	r19, Y+8	; 0x08
     762:	82 0f       	add	r24, r18
     764:	93 1f       	adc	r25, r19
     766:	20 e4       	ldi	r18, 0x40	; 64
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	f9 01       	movw	r30, r18
     76c:	20 81       	ld	r18, Z
     76e:	fc 01       	movw	r30, r24
     770:	20 83       	st	Z, r18
        read_addr++;
     772:	89 81       	ldd	r24, Y+1	; 0x01
     774:	9a 81       	ldd	r25, Y+2	; 0x02
     776:	01 96       	adiw	r24, 0x01	; 1
     778:	9a 83       	std	Y+2, r25	; 0x02
     77a:	89 83       	std	Y+1, r24	; 0x01
}

void eeprom_readbuf(unsigned int addr, unsigned char* buf, unsigned char size)
{
    unsigned int read_addr=addr;;
    for(int i=0;i<size;i++)
     77c:	8b 81       	ldd	r24, Y+3	; 0x03
     77e:	9c 81       	ldd	r25, Y+4	; 0x04
     780:	01 96       	adiw	r24, 0x01	; 1
     782:	9c 83       	std	Y+4, r25	; 0x04
     784:	8b 83       	std	Y+3, r24	; 0x03
     786:	89 85       	ldd	r24, Y+9	; 0x09
     788:	28 2f       	mov	r18, r24
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	8b 81       	ldd	r24, Y+3	; 0x03
     78e:	9c 81       	ldd	r25, Y+4	; 0x04
     790:	82 17       	cp	r24, r18
     792:	93 07       	cpc	r25, r19
     794:	34 f2       	brlt	.-116    	; 0x722 <eeprom_readbuf+0x2c>
        //uart_writestr("Here after");

        buf[i] = EEDR;
        read_addr++;
    }
}
     796:	00 00       	nop
     798:	29 96       	adiw	r28, 0x09	; 9
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	f8 94       	cli
     79e:	de bf       	out	0x3e, r29	; 62
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	cd bf       	out	0x3d, r28	; 61
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	08 95       	ret

000007aa <__vector_22>:

void __vector_22(){
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
    //EEPROM ready
    if(bufidx<writesize)
     7b2:	90 91 c4 02 	lds	r25, 0x02C4	; 0x8002c4 <bufidx>
     7b6:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <writesize>
     7ba:	98 17       	cp	r25, r24
     7bc:	08 f0       	brcs	.+2      	; 0x7c0 <__vector_22+0x16>
     7be:	41 c0       	rjmp	.+130    	; 0x842 <__vector_22+0x98>
    {
        //Write writebuf[bufidx] to EEPROM writeaddr

        while (EECR & (1<<EEPE));     //waiting until EEPE becomes 0
     7c0:	00 00       	nop
     7c2:	8f e3       	ldi	r24, 0x3F	; 63
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	fc 01       	movw	r30, r24
     7c8:	80 81       	ld	r24, Z
     7ca:	08 2e       	mov	r0, r24
     7cc:	00 0c       	add	r0, r0
     7ce:	99 0b       	sbc	r25, r25
     7d0:	82 70       	andi	r24, 0x02	; 2
     7d2:	99 27       	eor	r25, r25
     7d4:	89 2b       	or	r24, r25
     7d6:	a9 f7       	brne	.-22     	; 0x7c2 <__vector_22+0x18>

        //while (SPMCSR & (1<<SELFPRGEN));     //waiting until SELFPRGEN becomes 0

        EEARL = writeaddr;                      //Writes address to EEARL register
     7d8:	81 e4       	ldi	r24, 0x41	; 65
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	20 91 81 02 	lds	r18, 0x0281	; 0x800281 <writeaddr>
     7e0:	30 91 82 02 	lds	r19, 0x0282	; 0x800282 <writeaddr+0x1>
     7e4:	fc 01       	movw	r30, r24
     7e6:	20 83       	st	Z, r18
        EEDR = writebuf[bufidx];                //Writes data to EEDR register
     7e8:	80 e4       	ldi	r24, 0x40	; 64
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	20 91 c4 02 	lds	r18, 0x02C4	; 0x8002c4 <bufidx>
     7f0:	22 2f       	mov	r18, r18
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	2c 57       	subi	r18, 0x7C	; 124
     7f6:	3d 4f       	sbci	r19, 0xFD	; 253
     7f8:	f9 01       	movw	r30, r18
     7fa:	20 81       	ld	r18, Z
     7fc:	fc 01       	movw	r30, r24
     7fe:	20 83       	st	Z, r18

        EECR |= (1<<EEMPE);                     //enable master write
     800:	8f e3       	ldi	r24, 0x3F	; 63
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	2f e3       	ldi	r18, 0x3F	; 63
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	f9 01       	movw	r30, r18
     80a:	20 81       	ld	r18, Z
     80c:	24 60       	ori	r18, 0x04	; 4
     80e:	fc 01       	movw	r30, r24
     810:	20 83       	st	Z, r18
        EECR |= (1<<EEPE);                      //enable write
     812:	8f e3       	ldi	r24, 0x3F	; 63
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	2f e3       	ldi	r18, 0x3F	; 63
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	f9 01       	movw	r30, r18
     81c:	20 81       	ld	r18, Z
     81e:	22 60       	ori	r18, 0x02	; 2
     820:	fc 01       	movw	r30, r24
     822:	20 83       	st	Z, r18

        writeaddr++;
     824:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <writeaddr>
     828:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <writeaddr+0x1>
     82c:	01 96       	adiw	r24, 0x01	; 1
     82e:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <writeaddr+0x1>
     832:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <writeaddr>
        bufidx++;
     836:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <bufidx>
     83a:	8f 5f       	subi	r24, 0xFF	; 255
     83c:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <bufidx>
    {
        //Disable EEPROM ready interrupts
        EECR &= ~(1<<EERIE);
        write_busy=0;
    }
}
     840:	11 c0       	rjmp	.+34     	; 0x864 <__vector_22+0xba>
        EECR |= (1<<EEPE);                      //enable write

        writeaddr++;
        bufidx++;
    }
    else if (bufidx>=writesize)
     842:	90 91 c4 02 	lds	r25, 0x02C4	; 0x8002c4 <bufidx>
     846:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <writesize>
     84a:	98 17       	cp	r25, r24
     84c:	58 f0       	brcs	.+22     	; 0x864 <__vector_22+0xba>
    {
        //Disable EEPROM ready interrupts
        EECR &= ~(1<<EERIE);
     84e:	8f e3       	ldi	r24, 0x3F	; 63
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	2f e3       	ldi	r18, 0x3F	; 63
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	f9 01       	movw	r30, r18
     858:	20 81       	ld	r18, Z
     85a:	27 7f       	andi	r18, 0xF7	; 247
     85c:	fc 01       	movw	r30, r24
     85e:	20 83       	st	Z, r18
        write_busy=0;
     860:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <write_busy>
    }
}
     864:	00 00       	nop
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	08 95       	ret

0000086c <EEPROM_set_write_mode>:

void EEPROM_set_write_mode(){
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	cd b7       	in	r28, 0x3d	; 61
     872:	de b7       	in	r29, 0x3e	; 62
    EECR |= (1<<EEPM1);
     874:	8f e3       	ldi	r24, 0x3F	; 63
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	2f e3       	ldi	r18, 0x3F	; 63
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	f9 01       	movw	r30, r18
     87e:	20 81       	ld	r18, Z
     880:	20 62       	ori	r18, 0x20	; 32
     882:	fc 01       	movw	r30, r24
     884:	20 83       	st	Z, r18
}
     886:	00 00       	nop
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <led_init>:

const char *Blink_msg;
unsigned int Blink_pos;
enum Blink_state { phase1, phase2 } blink_state;

void led_init() {
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	cd b7       	in	r28, 0x3d	; 61
     894:	de b7       	in	r29, 0x3e	; 62
    DDRB |= LED_PIN; // Set LED pin as output
     896:	84 e2       	ldi	r24, 0x24	; 36
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	24 e2       	ldi	r18, 0x24	; 36
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	f9 01       	movw	r30, r18
     8a0:	20 81       	ld	r18, Z
     8a2:	22 60       	ori	r18, 0x02	; 2
     8a4:	fc 01       	movw	r30, r24
     8a6:	20 83       	st	Z, r18
    PORTB &= ~LED_PIN; // Turn off the LED
     8a8:	85 e2       	ldi	r24, 0x25	; 37
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	25 e2       	ldi	r18, 0x25	; 37
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	f9 01       	movw	r30, r18
     8b2:	20 81       	ld	r18, Z
     8b4:	2d 7f       	andi	r18, 0xFD	; 253
     8b6:	fc 01       	movw	r30, r24
     8b8:	20 83       	st	Z, r18
}
     8ba:	00 00       	nop
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	08 95       	ret

000008c2 <led_on>:

void led_on() {
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
    PORTB |= LED_PIN;
     8ca:	85 e2       	ldi	r24, 0x25	; 37
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	25 e2       	ldi	r18, 0x25	; 37
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	f9 01       	movw	r30, r18
     8d4:	20 81       	ld	r18, Z
     8d6:	22 60       	ori	r18, 0x02	; 2
     8d8:	fc 01       	movw	r30, r24
     8da:	20 83       	st	Z, r18
}
     8dc:	00 00       	nop
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	08 95       	ret

000008e4 <led_off>:

void led_off() {
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	cd b7       	in	r28, 0x3d	; 61
     8ea:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~LED_PIN;
     8ec:	85 e2       	ldi	r24, 0x25	; 37
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	25 e2       	ldi	r18, 0x25	; 37
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	f9 01       	movw	r30, r18
     8f6:	20 81       	ld	r18, Z
     8f8:	2d 7f       	andi	r18, 0xFD	; 253
     8fa:	fc 01       	movw	r30, r24
     8fc:	20 83       	st	Z, r18
}
     8fe:	00 00       	nop
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	08 95       	ret

00000906 <led_is_on>:

int led_is_on() {
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	cd b7       	in	r28, 0x3d	; 61
     90c:	de b7       	in	r29, 0x3e	; 62
    return (PORTB & LED_PIN) ? 1 : 0;
     90e:	85 e2       	ldi	r24, 0x25	; 37
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	fc 01       	movw	r30, r24
     914:	80 81       	ld	r24, Z
     916:	88 2f       	mov	r24, r24
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	82 70       	andi	r24, 0x02	; 2
     91c:	99 27       	eor	r25, r25
     91e:	21 e0       	ldi	r18, 0x01	; 1
     920:	89 2b       	or	r24, r25
     922:	09 f4       	brne	.+2      	; 0x926 <led_is_on+0x20>
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	82 2f       	mov	r24, r18
     928:	90 e0       	ldi	r25, 0x00	; 0
}
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	08 95       	ret

00000930 <led_set_blink>:

void led_set_blink(char *msg) {
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	00 d0       	rcall	.+0      	; 0x936 <led_set_blink+0x6>
     936:	cd b7       	in	r28, 0x3d	; 61
     938:	de b7       	in	r29, 0x3e	; 62
     93a:	9a 83       	std	Y+2, r25	; 0x02
     93c:	89 83       	std	Y+1, r24	; 0x01
    Blink_msg = msg;
     93e:	89 81       	ldd	r24, Y+1	; 0x01
     940:	9a 81       	ldd	r25, Y+2	; 0x02
     942:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <Blink_msg+0x1>
     946:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <Blink_msg>
    Blink_pos = 0;
     94a:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <Blink_pos+0x1>
     94e:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <Blink_pos>
    blink_state = phase1;
     952:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <blink_state+0x1>
     956:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <blink_state>
    delay_set(0, 0);
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	0e 94 2f 02 	call	0x45e	; 0x45e <delay_set>
    led_off();
     966:	0e 94 72 04 	call	0x8e4	; 0x8e4 <led_off>
}
     96a:	00 00       	nop
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <led_update>:

void led_update() {
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
    switch (blink_state) {
     97e:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <blink_state>
     982:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <blink_state+0x1>
     986:	00 97       	sbiw	r24, 0x00	; 0
     988:	21 f0       	breq	.+8      	; 0x992 <led_update+0x1c>
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	09 f4       	brne	.+2      	; 0x990 <led_update+0x1a>
     98e:	51 c0       	rjmp	.+162    	; 0xa32 <led_update+0xbc>
                blink_state = phase1;
            }
            break;

        default:
            break;
     990:	81 c0       	rjmp	.+258    	; 0xa94 <led_update+0x11e>
}

void led_update() {
    switch (blink_state) {
        case phase1:
            if (delay_isdone(0)) {
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	0e 94 7f 02 	call	0x4fe	; 0x4fe <delay_isdone>
     99a:	89 2b       	or	r24, r25
     99c:	09 f4       	brne	.+2      	; 0x9a0 <led_update+0x2a>
     99e:	77 c0       	rjmp	.+238    	; 0xa8e <led_update+0x118>
                switch (Blink_msg[Blink_pos]) {
     9a0:	20 91 75 02 	lds	r18, 0x0275	; 0x800275 <Blink_msg>
     9a4:	30 91 76 02 	lds	r19, 0x0276	; 0x800276 <Blink_msg+0x1>
     9a8:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Blink_pos>
     9ac:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <Blink_pos+0x1>
     9b0:	82 0f       	add	r24, r18
     9b2:	93 1f       	adc	r25, r19
     9b4:	fc 01       	movw	r30, r24
     9b6:	80 81       	ld	r24, Z
     9b8:	08 2e       	mov	r0, r24
     9ba:	00 0c       	add	r0, r0
     9bc:	99 0b       	sbc	r25, r25
     9be:	8d 32       	cpi	r24, 0x2D	; 45
     9c0:	91 05       	cpc	r25, r1
     9c2:	31 f0       	breq	.+12     	; 0x9d0 <led_update+0x5a>
     9c4:	8e 32       	cpi	r24, 0x2E	; 46
     9c6:	91 05       	cpc	r25, r1
     9c8:	91 f0       	breq	.+36     	; 0x9ee <led_update+0x78>
     9ca:	80 97       	sbiw	r24, 0x20	; 32
     9cc:	f9 f0       	breq	.+62     	; 0xa0c <led_update+0x96>
     9ce:	27 c0       	rjmp	.+78     	; 0xa1e <led_update+0xa8>
                    case '-':
                        led_on();
     9d0:	0e 94 61 04 	call	0x8c2	; 0x8c2 <led_on>
                        delay_set(0, 750);
     9d4:	6e ee       	ldi	r22, 0xEE	; 238
     9d6:	72 e0       	ldi	r23, 0x02	; 2
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 2f 02 	call	0x45e	; 0x45e <delay_set>
                        //delay_set(0,7);
                        blink_state = phase2;
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <blink_state+0x1>
     9e8:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <blink_state>
                        break;
     9ec:	21 c0       	rjmp	.+66     	; 0xa30 <led_update+0xba>
                    case '.':
                        led_on();
     9ee:	0e 94 61 04 	call	0x8c2	; 0x8c2 <led_on>
                        delay_set(0, 250);
     9f2:	6a ef       	ldi	r22, 0xFA	; 250
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 2f 02 	call	0x45e	; 0x45e <delay_set>
                        //delay_set(0,2);
                        blink_state = phase2;
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <blink_state+0x1>
     a06:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <blink_state>
                        break;
     a0a:	12 c0       	rjmp	.+36     	; 0xa30 <led_update+0xba>
                    case ' ':
                        led_off();
     a0c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <led_off>
                        delay_set(0, 1000);
     a10:	68 ee       	ldi	r22, 0xE8	; 232
     a12:	73 e0       	ldi	r23, 0x03	; 3
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	0e 94 2f 02 	call	0x45e	; 0x45e <delay_set>
                        //blink_state = phase2;
                        break;
     a1c:	09 c0       	rjmp	.+18     	; 0xa30 <led_update+0xba>
                    default:
                        led_off();
     a1e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <led_off>
                        delay_set(0, 0);
     a22:	60 e0       	ldi	r22, 0x00	; 0
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	0e 94 2f 02 	call	0x45e	; 0x45e <delay_set>
                        break;
     a2e:	00 00       	nop
                }
            }
            break;
     a30:	2e c0       	rjmp	.+92     	; 0xa8e <led_update+0x118>

        case phase2:
            if (delay_isdone(0)) {
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 7f 02 	call	0x4fe	; 0x4fe <delay_isdone>
     a3a:	89 2b       	or	r24, r25
     a3c:	51 f1       	breq	.+84     	; 0xa92 <led_update+0x11c>
                led_off();
     a3e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <led_off>
                delay_set(0, 100);
     a42:	64 e6       	ldi	r22, 0x64	; 100
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 2f 02 	call	0x45e	; 0x45e <delay_set>
                //delay_set(0, 1);
                Blink_pos++;
     a4e:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Blink_pos>
     a52:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <Blink_pos+0x1>
     a56:	01 96       	adiw	r24, 0x01	; 1
     a58:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <Blink_pos+0x1>
     a5c:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <Blink_pos>
                if (Blink_pos >= strlen(Blink_msg)) {
     a60:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <Blink_msg>
     a64:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <Blink_msg+0x1>
     a68:	0e 94 b9 13 	call	0x2772	; 0x2772 <strlen>
     a6c:	9c 01       	movw	r18, r24
     a6e:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Blink_pos>
     a72:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <Blink_pos+0x1>
     a76:	82 17       	cp	r24, r18
     a78:	93 07       	cpc	r25, r19
     a7a:	20 f0       	brcs	.+8      	; 0xa84 <led_update+0x10e>
                    Blink_pos = 0;
     a7c:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <Blink_pos+0x1>
     a80:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <Blink_pos>
                }
                blink_state = phase1;
     a84:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <blink_state+0x1>
     a88:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <blink_state>
            }
            break;
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <led_update+0x11c>
                        led_off();
                        delay_set(0, 0);
                        break;
                }
            }
            break;
     a8e:	00 00       	nop
     a90:	01 c0       	rjmp	.+2      	; 0xa94 <led_update+0x11e>
                if (Blink_pos >= strlen(Blink_msg)) {
                    Blink_pos = 0;
                }
                blink_state = phase1;
            }
            break;
     a92:	00 00       	nop

        default:
            break;
    }
}
     a94:	00 00       	nop
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	08 95       	ret

00000a9c <main>:
 #include "vpd.h"
 #include "uart.h"
 #include "log.h"

int main(void)
{
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	00 d0       	rcall	.+0      	; 0xaa2 <main+0x6>
     aa2:	cd b7       	in	r28, 0x3d	; 61
     aa4:	de b7       	in	r29, 0x3e	; 62
    /* Initialize uart, led, and rtc hardware */
    uart_init();
     aa6:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <uart_init>
    config_init();
     aaa:	0e 94 53 00 	call	0xa6	; 0xa6 <config_init>
    led_init();
     aae:	0e 94 47 04 	call	0x88e	; 0x88e <led_init>
    log_init();
     ab2:	0e 94 22 08 	call	0x1044	; 0x1044 <log_init>
    rtc_init();
     ab6:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <rtc_init>
    vpd_init();
     aba:	0e 94 11 07 	call	0xe22	; 0xe22 <vpd_init>
    //timer1_init();
    delay_init();
     abe:	0e 94 af 01 	call	0x35e	; 0x35e <delay_init>

    /* Initialize led blink pattern to "--- -.-" in Morse Code */
    led_set_blink("-");
     ac2:	81 e6       	ldi	r24, 0x61	; 97
     ac4:	91 e0       	ldi	r25, 0x01	; 1
     ac6:	0e 94 98 04 	call	0x930	; 0x930 <led_set_blink>

    /* Set RTC date/time to "01/01/2019 00:00:00" */
    rtc_set_by_datestr("01/01/2019 00:00:00");
     aca:	83 e6       	ldi	r24, 0x63	; 99
     acc:	91 e0       	ldi	r25, 0x01	; 1
     ace:	0e 94 17 0a 	call	0x142e	; 0x142e <rtc_set_by_datestr>

    /* Output project information to the console */
    uart_writestr("SER 486 Project 2 - Manish Mysore Rajesh Gangadhar\n\r");
     ad2:	87 e7       	ldi	r24, 0x77	; 119
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <uart_writestr>

    uart_writestr(vpd.model);
     ada:	8b ed       	ldi	r24, 0xDB	; 219
     adc:	92 e0       	ldi	r25, 0x02	; 2
     ade:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <uart_writestr>
    uart_writestr(vpd.manufacturer);
     ae2:	87 ee       	ldi	r24, 0xE7	; 231
     ae4:	92 e0       	ldi	r25, 0x02	; 2
     ae6:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <uart_writestr>
    uart_writestr(vpd.token);
     aea:	87 ed       	ldi	r24, 0xD7	; 215
     aec:	92 e0       	ldi	r25, 0x02	; 2
     aee:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <uart_writestr>

    //Set the config.use_static_ip=1 and set modified
    config.use_static_ip=1;
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <config+0xc>
    config_set_modified();
     af8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <config_set_modified>

    //Clear event log and add three records to it
    log_clear();
     afc:	0e 94 6e 09 	call	0x12dc	; 0x12dc <log_clear>
    log_add_record(0xaa);
     b00:	8a ea       	ldi	r24, 0xAA	; 170
     b02:	0e 94 1d 09 	call	0x123a	; 0x123a <log_add_record>
    log_add_record(0xbb);
     b06:	8b eb       	ldi	r24, 0xBB	; 187
     b08:	0e 94 1d 09 	call	0x123a	; 0x123a <log_add_record>
    log_add_record(0xcc);
     b0c:	8c ec       	ldi	r24, 0xCC	; 204
     b0e:	0e 94 1d 09 	call	0x123a	; 0x123a <log_add_record>

    int dumped=0;
     b12:	1a 82       	std	Y+2, r1	; 0x02
     b14:	19 82       	std	Y+1, r1	; 0x01


    while(1)
    {
        led_update();
     b16:	0e 94 bb 04 	call	0x976	; 0x976 <led_update>
        log_update();
     b1a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <log_update>
        config_update();
     b1e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <config_update>

        if(!eeprom_isbusy() && (!dumped))
     b22:	0e 94 03 03 	call	0x606	; 0x606 <eeprom_isbusy>
     b26:	89 2b       	or	r24, r25
     b28:	b1 f7       	brne	.-20     	; 0xb16 <main+0x7a>
     b2a:	89 81       	ldd	r24, Y+1	; 0x01
     b2c:	9a 81       	ldd	r25, Y+2	; 0x02
     b2e:	89 2b       	or	r24, r25
     b30:	91 f7       	brne	.-28     	; 0xb16 <main+0x7a>
        {
            dump_eeprom(0, 0x100);
     b32:	60 e0       	ldi	r22, 0x00	; 0
     b34:	71 e0       	ldi	r23, 0x01	; 1
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <dump_eeprom>
            dumped=1;
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	9a 83       	std	Y+2, r25	; 0x02
     b44:	89 83       	std	Y+1, r24	; 0x01
        }
    }
     b46:	e7 cf       	rjmp	.-50     	; 0xb16 <main+0x7a>

00000b48 <timer1_init>:
#define OCIE1A 1

#define I_SREG 7
static volatile unsigned long count = 0;

void timer1_init() {
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <timer1_init+0x6>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
    // Example: (16,000,000 / 1024 / 15625) = 1 Hz

    /*
    unsigned int PRESCALER_VALUE = 1024;
    */
    unsigned int COMPARE_VALUE = 15625;  //16 bit max value = 2^16 - 65535
     b52:	89 e0       	ldi	r24, 0x09	; 9
     b54:	9d e3       	ldi	r25, 0x3D	; 61
     b56:	9a 83       	std	Y+2, r25	; 0x02
     b58:	89 83       	std	Y+1, r24	; 0x01

    // Set CTC mode
    TCCR1B |= (1 << WGM12); // WGM12
     b5a:	81 e8       	ldi	r24, 0x81	; 129
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	21 e8       	ldi	r18, 0x81	; 129
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	f9 01       	movw	r30, r18
     b64:	20 81       	ld	r18, Z
     b66:	28 60       	ori	r18, 0x08	; 8
     b68:	fc 01       	movw	r30, r24
     b6a:	20 83       	st	Z, r18

    // Set clock divisor (prescaler value = 1024)
    TCCR1B |= (1 << CS12) | (1 << CS10); // CS12 and CS10
     b6c:	81 e8       	ldi	r24, 0x81	; 129
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	21 e8       	ldi	r18, 0x81	; 129
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	f9 01       	movw	r30, r18
     b76:	20 81       	ld	r18, Z
     b78:	25 60       	ori	r18, 0x05	; 5
     b7a:	fc 01       	movw	r30, r24
     b7c:	20 83       	st	Z, r18

    // Set compare value
    OCR1A = COMPARE_VALUE - 1;
     b7e:	88 e8       	ldi	r24, 0x88	; 136
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	29 81       	ldd	r18, Y+1	; 0x01
     b84:	3a 81       	ldd	r19, Y+2	; 0x02
     b86:	21 50       	subi	r18, 0x01	; 1
     b88:	31 09       	sbc	r19, r1
     b8a:	fc 01       	movw	r30, r24
     b8c:	31 83       	std	Z+1, r19	; 0x01
     b8e:	20 83       	st	Z, r18

    // Enable interrupts on output compare A
    TIMSK1 |= (1 << OCIE1A); // OCIE1A
     b90:	8f e6       	ldi	r24, 0x6F	; 111
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	2f e6       	ldi	r18, 0x6F	; 111
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	f9 01       	movw	r30, r18
     b9a:	20 81       	ld	r18, Z
     b9c:	22 60       	ori	r18, 0x02	; 2
     b9e:	fc 01       	movw	r30, r24
     ba0:	20 83       	st	Z, r18

    // Enable global interrupts
    // __builtin_avr_sei();
    SREG |= (1<<I_SREG);
     ba2:	8f e5       	ldi	r24, 0x5F	; 95
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	2f e5       	ldi	r18, 0x5F	; 95
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	f9 01       	movw	r30, r18
     bac:	20 81       	ld	r18, Z
     bae:	20 68       	ori	r18, 0x80	; 128
     bb0:	fc 01       	movw	r30, r24
     bb2:	20 83       	st	Z, r18
}
     bb4:	00 00       	nop
     bb6:	0f 90       	pop	r0
     bb8:	0f 90       	pop	r0
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	08 95       	ret

00000bc0 <timer1_get>:

unsigned long timer1_get() {
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	00 d0       	rcall	.+0      	; 0xbc6 <timer1_get+0x6>
     bc6:	00 d0       	rcall	.+0      	; 0xbc8 <timer1_get+0x8>
     bc8:	00 d0       	rcall	.+0      	; 0xbca <timer1_get+0xa>
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
    unsigned long count_value;

    // Get global interrupt enable bit state
    unsigned int sreg_state = SREG & (1 << I_SREG);
     bce:	8f e5       	ldi	r24, 0x5F	; 95
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	fc 01       	movw	r30, r24
     bd4:	80 81       	ld	r24, Z
     bd6:	88 2f       	mov	r24, r24
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	80 78       	andi	r24, 0x80	; 128
     bdc:	99 27       	eor	r25, r25
     bde:	9a 83       	std	Y+2, r25	; 0x02
     be0:	89 83       	std	Y+1, r24	; 0x01

    // Disable interrupts
    // __builtin_avr_cli();
    SREG &= ~(1<<I_SREG);
     be2:	8f e5       	ldi	r24, 0x5F	; 95
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	2f e5       	ldi	r18, 0x5F	; 95
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	f9 01       	movw	r30, r18
     bec:	20 81       	ld	r18, Z
     bee:	2f 77       	andi	r18, 0x7F	; 127
     bf0:	fc 01       	movw	r30, r24
     bf2:	20 83       	st	Z, r18

    // Get the count value
    count_value = count;
     bf4:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <count>
     bf8:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <count+0x1>
     bfc:	a0 91 e3 01 	lds	r26, 0x01E3	; 0x8001e3 <count+0x2>
     c00:	b0 91 e4 01 	lds	r27, 0x01E4	; 0x8001e4 <count+0x3>
     c04:	8b 83       	std	Y+3, r24	; 0x03
     c06:	9c 83       	std	Y+4, r25	; 0x04
     c08:	ad 83       	std	Y+5, r26	; 0x05
     c0a:	be 83       	std	Y+6, r27	; 0x06

    // Restore global interrupt state
    if (sreg_state) {
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	9a 81       	ldd	r25, Y+2	; 0x02
     c10:	89 2b       	or	r24, r25
     c12:	49 f0       	breq	.+18     	; 0xc26 <timer1_get+0x66>
        // __builtin_avr_sei();
        SREG |= (1<<I_SREG);
     c14:	8f e5       	ldi	r24, 0x5F	; 95
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	2f e5       	ldi	r18, 0x5F	; 95
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	f9 01       	movw	r30, r18
     c1e:	20 81       	ld	r18, Z
     c20:	20 68       	ori	r18, 0x80	; 128
     c22:	fc 01       	movw	r30, r24
     c24:	20 83       	st	Z, r18
    }

    // Return the count value
    return count_value;
     c26:	8b 81       	ldd	r24, Y+3	; 0x03
     c28:	9c 81       	ldd	r25, Y+4	; 0x04
     c2a:	ad 81       	ldd	r26, Y+5	; 0x05
     c2c:	be 81       	ldd	r27, Y+6	; 0x06
}
     c2e:	bc 01       	movw	r22, r24
     c30:	cd 01       	movw	r24, r26
     c32:	26 96       	adiw	r28, 0x06	; 6
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	de bf       	out	0x3e, r29	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	cd bf       	out	0x3d, r28	; 61
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	08 95       	ret

00000c44 <timer1_clear>:

void timer1_clear() {
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	00 d0       	rcall	.+0      	; 0xc4a <timer1_clear+0x6>
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
    // Get global interrupt enable bit state
    unsigned int sreg_state = SREG & (1 << I_SREG);
     c4e:	8f e5       	ldi	r24, 0x5F	; 95
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	fc 01       	movw	r30, r24
     c54:	80 81       	ld	r24, Z
     c56:	88 2f       	mov	r24, r24
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	80 78       	andi	r24, 0x80	; 128
     c5c:	99 27       	eor	r25, r25
     c5e:	9a 83       	std	Y+2, r25	; 0x02
     c60:	89 83       	std	Y+1, r24	; 0x01

    // Disable interrupts
    // __builtin_avr_cli();
    SREG &= ~(1<<I_SREG);
     c62:	8f e5       	ldi	r24, 0x5F	; 95
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	2f e5       	ldi	r18, 0x5F	; 95
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	f9 01       	movw	r30, r18
     c6c:	20 81       	ld	r18, Z
     c6e:	2f 77       	andi	r18, 0x7F	; 127
     c70:	fc 01       	movw	r30, r24
     c72:	20 83       	st	Z, r18

    // Clear count value
    count = 0;
     c74:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <count>
     c78:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <count+0x1>
     c7c:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <count+0x2>
     c80:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <count+0x3>

    // Restore global interrupt state
    if (sreg_state) {
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	9a 81       	ldd	r25, Y+2	; 0x02
     c88:	89 2b       	or	r24, r25
     c8a:	49 f0       	breq	.+18     	; 0xc9e <timer1_clear+0x5a>
        // __builtin_avr_sei();
        SREG |= (1<<I_SREG);
     c8c:	8f e5       	ldi	r24, 0x5F	; 95
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	2f e5       	ldi	r18, 0x5F	; 95
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	f9 01       	movw	r30, r18
     c96:	20 81       	ld	r18, Z
     c98:	20 68       	ori	r18, 0x80	; 128
     c9a:	fc 01       	movw	r30, r24
     c9c:	20 83       	st	Z, r18
    }
}
     c9e:	00 00       	nop
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	08 95       	ret

00000caa <__vector_11>:


void __vector_11(void) __attribute__ ((signal, used, externally_visible));

void __vector_11(void)
{
     caa:	1f 92       	push	r1
     cac:	0f 92       	push	r0
     cae:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     cb2:	0f 92       	push	r0
     cb4:	11 24       	eor	r1, r1
     cb6:	8f 93       	push	r24
     cb8:	9f 93       	push	r25
     cba:	af 93       	push	r26
     cbc:	bf 93       	push	r27
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
    // Increment the count by 1
    count++;
     cc6:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <count>
     cca:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <count+0x1>
     cce:	a0 91 e3 01 	lds	r26, 0x01E3	; 0x8001e3 <count+0x2>
     cd2:	b0 91 e4 01 	lds	r27, 0x01E4	; 0x8001e4 <count+0x3>
     cd6:	01 96       	adiw	r24, 0x01	; 1
     cd8:	a1 1d       	adc	r26, r1
     cda:	b1 1d       	adc	r27, r1
     cdc:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <count>
     ce0:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <count+0x1>
     ce4:	a0 93 e3 01 	sts	0x01E3, r26	; 0x8001e3 <count+0x2>
     ce8:	b0 93 e4 01 	sts	0x01E4, r27	; 0x8001e4 <count+0x3>
}
     cec:	00 00       	nop
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	bf 91       	pop	r27
     cf4:	af 91       	pop	r26
     cf6:	9f 91       	pop	r25
     cf8:	8f 91       	pop	r24
     cfa:	0f 90       	pop	r0
     cfc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d00:	0f 90       	pop	r0
     d02:	1f 90       	pop	r1
     d04:	18 95       	reti

00000d06 <calc_checksum>:
#define SREG    *((volatile char*) 0x5F)

#define C_SREG 0

unsigned char calc_checksum(unsigned char *data, unsigned int dsize)
{
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	27 97       	sbiw	r28, 0x07	; 7
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	f8 94       	cli
     d14:	de bf       	out	0x3e, r29	; 62
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	cd bf       	out	0x3d, r28	; 61
     d1a:	9d 83       	std	Y+5, r25	; 0x05
     d1c:	8c 83       	std	Y+4, r24	; 0x04
     d1e:	7f 83       	std	Y+7, r23	; 0x07
     d20:	6e 83       	std	Y+6, r22	; 0x06
    //Storing checksum result in unsigned byte
    unsigned char checksum_result;

    for(int i=0;i<dsize;i++)
     d22:	1b 82       	std	Y+3, r1	; 0x03
     d24:	1a 82       	std	Y+2, r1	; 0x02
     d26:	1e c0       	rjmp	.+60     	; 0xd64 <calc_checksum+0x5e>
    {
        checksum_result += data[i];
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	9b 81       	ldd	r25, Y+3	; 0x03
     d2c:	2c 81       	ldd	r18, Y+4	; 0x04
     d2e:	3d 81       	ldd	r19, Y+5	; 0x05
     d30:	82 0f       	add	r24, r18
     d32:	93 1f       	adc	r25, r19
     d34:	fc 01       	movw	r30, r24
     d36:	80 81       	ld	r24, Z
     d38:	99 81       	ldd	r25, Y+1	; 0x01
     d3a:	89 0f       	add	r24, r25
     d3c:	89 83       	std	Y+1, r24	; 0x01
        if(SREG & (1<<C_SREG))
     d3e:	8f e5       	ldi	r24, 0x5F	; 95
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	fc 01       	movw	r30, r24
     d44:	80 81       	ld	r24, Z
     d46:	08 2e       	mov	r0, r24
     d48:	00 0c       	add	r0, r0
     d4a:	99 0b       	sbc	r25, r25
     d4c:	81 70       	andi	r24, 0x01	; 1
     d4e:	99 27       	eor	r25, r25
     d50:	89 2b       	or	r24, r25
     d52:	19 f0       	breq	.+6      	; 0xd5a <calc_checksum+0x54>
        {
            //carry wraparound
            checksum_result+=1;
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	8f 5f       	subi	r24, 0xFF	; 255
     d58:	89 83       	std	Y+1, r24	; 0x01
unsigned char calc_checksum(unsigned char *data, unsigned int dsize)
{
    //Storing checksum result in unsigned byte
    unsigned char checksum_result;

    for(int i=0;i<dsize;i++)
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	9b 81       	ldd	r25, Y+3	; 0x03
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	9b 83       	std	Y+3, r25	; 0x03
     d62:	8a 83       	std	Y+2, r24	; 0x02
     d64:	2a 81       	ldd	r18, Y+2	; 0x02
     d66:	3b 81       	ldd	r19, Y+3	; 0x03
     d68:	8e 81       	ldd	r24, Y+6	; 0x06
     d6a:	9f 81       	ldd	r25, Y+7	; 0x07
     d6c:	28 17       	cp	r18, r24
     d6e:	39 07       	cpc	r19, r25
     d70:	d8 f2       	brcs	.-74     	; 0xd28 <calc_checksum+0x22>
            checksum_result+=1;
        }

    }

    return ~checksum_result;
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	80 95       	com	r24

}
     d76:	27 96       	adiw	r28, 0x07	; 7
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	f8 94       	cli
     d7c:	de bf       	out	0x3e, r29	; 62
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	cd bf       	out	0x3d, r28	; 61
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	08 95       	ret

00000d88 <update_checksum>:

void update_checksum(unsigned char *data, unsigned int dsize)
{
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <update_checksum+0x6>
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <update_checksum+0x8>
     d90:	00 d0       	rcall	.+0      	; 0xd92 <update_checksum+0xa>
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	9c 83       	std	Y+4, r25	; 0x04
     d98:	8b 83       	std	Y+3, r24	; 0x03
     d9a:	7e 83       	std	Y+6, r23	; 0x06
     d9c:	6d 83       	std	Y+5, r22	; 0x05
    unsigned char checksum_val = calc_checksum(data, dsize);
     d9e:	2d 81       	ldd	r18, Y+5	; 0x05
     da0:	3e 81       	ldd	r19, Y+6	; 0x06
     da2:	8b 81       	ldd	r24, Y+3	; 0x03
     da4:	9c 81       	ldd	r25, Y+4	; 0x04
     da6:	b9 01       	movw	r22, r18
     da8:	0e 94 83 06 	call	0xd06	; 0xd06 <calc_checksum>
     dac:	89 83       	std	Y+1, r24	; 0x01
    unsigned char last_byte = 0b11111111 + (~checksum_val + 0b00000001);
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	80 95       	com	r24
     db2:	8a 83       	std	Y+2, r24	; 0x02
    data[dsize-1]=last_byte;
     db4:	8d 81       	ldd	r24, Y+5	; 0x05
     db6:	9e 81       	ldd	r25, Y+6	; 0x06
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	2b 81       	ldd	r18, Y+3	; 0x03
     dbc:	3c 81       	ldd	r19, Y+4	; 0x04
     dbe:	82 0f       	add	r24, r18
     dc0:	93 1f       	adc	r25, r19
     dc2:	2a 81       	ldd	r18, Y+2	; 0x02
     dc4:	fc 01       	movw	r30, r24
     dc6:	20 83       	st	Z, r18
}
     dc8:	00 00       	nop
     dca:	26 96       	adiw	r28, 0x06	; 6
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	de bf       	out	0x3e, r29	; 62
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	cd bf       	out	0x3d, r28	; 61
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	08 95       	ret

00000ddc <is_checksum_valid>:


int is_checksum_valid(unsigned char* data, unsigned int dsize)
{
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	00 d0       	rcall	.+0      	; 0xde2 <is_checksum_valid+0x6>
     de2:	00 d0       	rcall	.+0      	; 0xde4 <is_checksum_valid+0x8>
     de4:	1f 92       	push	r1
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
     dea:	9b 83       	std	Y+3, r25	; 0x03
     dec:	8a 83       	std	Y+2, r24	; 0x02
     dee:	7d 83       	std	Y+5, r23	; 0x05
     df0:	6c 83       	std	Y+4, r22	; 0x04
    unsigned char checksum_val = calc_checksum(data, dsize);
     df2:	2c 81       	ldd	r18, Y+4	; 0x04
     df4:	3d 81       	ldd	r19, Y+5	; 0x05
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	9b 81       	ldd	r25, Y+3	; 0x03
     dfa:	b9 01       	movw	r22, r18
     dfc:	0e 94 83 06 	call	0xd06	; 0xd06 <calc_checksum>
     e00:	89 83       	std	Y+1, r24	; 0x01

    if(checksum_val==0)
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	88 23       	and	r24, r24
     e06:	19 f4       	brne	.+6      	; 0xe0e <is_checksum_valid+0x32>
        return 1;
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <is_checksum_valid+0x36>
    else
        return 0;
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	90 e0       	ldi	r25, 0x00	; 0
}
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	08 95       	ret

00000e22 <vpd_init>:
#include <string.h>

vpd_struct vpd_defaults = {"SER", "Manish", "Mani", "abcd1234", 0, "sbsdjb", "USA", 0};

void vpd_init()
{
     e22:	ef 92       	push	r14
     e24:	ff 92       	push	r15
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	28 97       	sbiw	r28, 0x08	; 8
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
        //Initialize data by reading default values
        eeprom_readbuf(base_addr, (unsigned char*)buf, size);
        memcpy((unsigned char*)&vpd, buf, size);

    }
}
     e3e:	0d b7       	in	r16, 0x3d	; 61
     e40:	1e b7       	in	r17, 0x3e	; 62

vpd_struct vpd_defaults = {"SER", "Manish", "Mani", "abcd1234", 0, "sbsdjb", "USA", 0};

void vpd_init()
{
    while(eeprom_isbusy());  //waits for EEPROM to get out of busy state
     e42:	00 00       	nop
     e44:	0e 94 03 03 	call	0x606	; 0x606 <eeprom_isbusy>
     e48:	89 2b       	or	r24, r25
     e4a:	e1 f7       	brne	.-8      	; 0xe44 <vpd_init+0x22>

    //Read 43 bytes from 0x000
    unsigned int base_addr=0x000;
     e4c:	1a 82       	std	Y+2, r1	; 0x02
     e4e:	19 82       	std	Y+1, r1	; 0x01
    int size = sizeof(vpd_struct);
     e50:	87 e3       	ldi	r24, 0x37	; 55
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	9c 83       	std	Y+4, r25	; 0x04
     e56:	8b 83       	std	Y+3, r24	; 0x03
    unsigned char buf[size];
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	9c 81       	ldd	r25, Y+4	; 0x04
     e5c:	2d b7       	in	r18, 0x3d	; 61
     e5e:	3e b7       	in	r19, 0x3e	; 62
     e60:	79 01       	movw	r14, r18
     e62:	9c 01       	movw	r18, r24
     e64:	21 50       	subi	r18, 0x01	; 1
     e66:	31 09       	sbc	r19, r1
     e68:	3e 83       	std	Y+6, r19	; 0x06
     e6a:	2d 83       	std	Y+5, r18	; 0x05
     e6c:	2d b7       	in	r18, 0x3d	; 61
     e6e:	3e b7       	in	r19, 0x3e	; 62
     e70:	28 1b       	sub	r18, r24
     e72:	39 0b       	sbc	r19, r25
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	3e bf       	out	0x3e, r19	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	2d bf       	out	0x3d, r18	; 61
     e7e:	8d b7       	in	r24, 0x3d	; 61
     e80:	9e b7       	in	r25, 0x3e	; 62
     e82:	01 96       	adiw	r24, 0x01	; 1
     e84:	98 87       	std	Y+8, r25	; 0x08
     e86:	8f 83       	std	Y+7, r24	; 0x07
    eeprom_readbuf(base_addr, (unsigned char*)buf, size);
     e88:	4b 81       	ldd	r20, Y+3	; 0x03
     e8a:	2f 81       	ldd	r18, Y+7	; 0x07
     e8c:	38 85       	ldd	r19, Y+8	; 0x08
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	9a 81       	ldd	r25, Y+2	; 0x02
     e92:	b9 01       	movw	r22, r18
     e94:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <eeprom_readbuf>

    memcpy((unsigned char*)&vpd, (unsigned char*)buf, size);
     e98:	2b 81       	ldd	r18, Y+3	; 0x03
     e9a:	3c 81       	ldd	r19, Y+4	; 0x04
     e9c:	8f 81       	ldd	r24, Y+7	; 0x07
     e9e:	98 85       	ldd	r25, Y+8	; 0x08
     ea0:	a9 01       	movw	r20, r18
     ea2:	bc 01       	movw	r22, r24
     ea4:	87 ed       	ldi	r24, 0xD7	; 215
     ea6:	92 e0       	ldi	r25, 0x02	; 2
     ea8:	0e 94 b0 13 	call	0x2760	; 0x2760 <memcpy>

    if(!vpd_is_data_valid())
     eac:	0e 94 86 07 	call	0xf0c	; 0xf0c <vpd_is_data_valid>
     eb0:	89 2b       	or	r24, r25
     eb2:	a1 f4       	brne	.+40     	; 0xedc <vpd_init+0xba>
    {
        vpd_write_defaults();
     eb4:	0e 94 9f 07 	call	0xf3e	; 0xf3e <vpd_write_defaults>

        //Initialize data by reading default values
        eeprom_readbuf(base_addr, (unsigned char*)buf, size);
     eb8:	4b 81       	ldd	r20, Y+3	; 0x03
     eba:	2f 81       	ldd	r18, Y+7	; 0x07
     ebc:	38 85       	ldd	r19, Y+8	; 0x08
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	9a 81       	ldd	r25, Y+2	; 0x02
     ec2:	b9 01       	movw	r22, r18
     ec4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <eeprom_readbuf>
        memcpy((unsigned char*)&vpd, buf, size);
     ec8:	2b 81       	ldd	r18, Y+3	; 0x03
     eca:	3c 81       	ldd	r19, Y+4	; 0x04
     ecc:	8f 81       	ldd	r24, Y+7	; 0x07
     ece:	98 85       	ldd	r25, Y+8	; 0x08
     ed0:	a9 01       	movw	r20, r18
     ed2:	bc 01       	movw	r22, r24
     ed4:	87 ed       	ldi	r24, 0xD7	; 215
     ed6:	92 e0       	ldi	r25, 0x02	; 2
     ed8:	0e 94 b0 13 	call	0x2760	; 0x2760 <memcpy>
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	fe be       	out	0x3e, r15	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	ed be       	out	0x3d, r14	; 61

    }
}
     ee6:	00 00       	nop
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	f8 94       	cli
     eec:	1e bf       	out	0x3e, r17	; 62
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	0d bf       	out	0x3d, r16	; 61
     ef2:	28 96       	adiw	r28, 0x08	; 8
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	1f 91       	pop	r17
     f04:	0f 91       	pop	r16
     f06:	ff 90       	pop	r15
     f08:	ef 90       	pop	r14
     f0a:	08 95       	ret

00000f0c <vpd_is_data_valid>:

int vpd_is_data_valid()
{
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
    return (vpd.token == "SER") && is_checksum_valid((unsigned char*)&vpd, sizeof(vpd_struct));
     f14:	87 ed       	ldi	r24, 0xD7	; 215
     f16:	92 e0       	ldi	r25, 0x02	; 2
     f18:	8c 5a       	subi	r24, 0xAC	; 172
     f1a:	91 40       	sbci	r25, 0x01	; 1
     f1c:	59 f4       	brne	.+22     	; 0xf34 <vpd_is_data_valid+0x28>
     f1e:	67 e3       	ldi	r22, 0x37	; 55
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	87 ed       	ldi	r24, 0xD7	; 215
     f24:	92 e0       	ldi	r25, 0x02	; 2
     f26:	0e 94 ee 06 	call	0xddc	; 0xddc <is_checksum_valid>
     f2a:	89 2b       	or	r24, r25
     f2c:	19 f0       	breq	.+6      	; 0xf34 <vpd_is_data_valid+0x28>
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <vpd_is_data_valid+0x2c>
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	90 e0       	ldi	r25, 0x00	; 0
}
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	08 95       	ret

00000f3e <vpd_write_defaults>:

void vpd_write_defaults()
{
     f3e:	ef 92       	push	r14
     f40:	ff 92       	push	r15
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	28 97       	sbiw	r28, 0x08	; 8
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
    int size = sizeof(vpd_struct);
    unsigned char buf[size];
    memcpy((unsigned char*)buf, (unsigned char*)&vpd_defaults, size);

    eeprom_writebuf(base_addr, (unsigned char*)buf, size);
}
     f5a:	0d b7       	in	r16, 0x3d	; 61
     f5c:	1e b7       	in	r17, 0x3e	; 62
{
    return (vpd.token == "SER") && is_checksum_valid((unsigned char*)&vpd, sizeof(vpd_struct));
}

void vpd_write_defaults()
{
     f5e:	8d b7       	in	r24, 0x3d	; 61
     f60:	9e b7       	in	r25, 0x3e	; 62
     f62:	7c 01       	movw	r14, r24
    update_checksum((unsigned char*)&vpd, sizeof(vpd));
     f64:	67 e3       	ldi	r22, 0x37	; 55
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	87 ed       	ldi	r24, 0xD7	; 215
     f6a:	92 e0       	ldi	r25, 0x02	; 2
     f6c:	0e 94 c4 06 	call	0xd88	; 0xd88 <update_checksum>

    //Writing defaults to eeprom
    unsigned int base_addr = 0x000;
     f70:	1a 82       	std	Y+2, r1	; 0x02
     f72:	19 82       	std	Y+1, r1	; 0x01
    int size = sizeof(vpd_struct);
     f74:	87 e3       	ldi	r24, 0x37	; 55
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	9c 83       	std	Y+4, r25	; 0x04
     f7a:	8b 83       	std	Y+3, r24	; 0x03
    unsigned char buf[size];
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	9c 81       	ldd	r25, Y+4	; 0x04
     f80:	9c 01       	movw	r18, r24
     f82:	21 50       	subi	r18, 0x01	; 1
     f84:	31 09       	sbc	r19, r1
     f86:	3e 83       	std	Y+6, r19	; 0x06
     f88:	2d 83       	std	Y+5, r18	; 0x05
     f8a:	2d b7       	in	r18, 0x3d	; 61
     f8c:	3e b7       	in	r19, 0x3e	; 62
     f8e:	28 1b       	sub	r18, r24
     f90:	39 0b       	sbc	r19, r25
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	f8 94       	cli
     f96:	3e bf       	out	0x3e, r19	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	2d bf       	out	0x3d, r18	; 61
     f9c:	8d b7       	in	r24, 0x3d	; 61
     f9e:	9e b7       	in	r25, 0x3e	; 62
     fa0:	01 96       	adiw	r24, 0x01	; 1
     fa2:	98 87       	std	Y+8, r25	; 0x08
     fa4:	8f 83       	std	Y+7, r24	; 0x07
    memcpy((unsigned char*)buf, (unsigned char*)&vpd_defaults, size);
     fa6:	2b 81       	ldd	r18, Y+3	; 0x03
     fa8:	3c 81       	ldd	r19, Y+4	; 0x04
     faa:	8f 81       	ldd	r24, Y+7	; 0x07
     fac:	98 85       	ldd	r25, Y+8	; 0x08
     fae:	a9 01       	movw	r20, r18
     fb0:	62 e1       	ldi	r22, 0x12	; 18
     fb2:	71 e0       	ldi	r23, 0x01	; 1
     fb4:	0e 94 b0 13 	call	0x2760	; 0x2760 <memcpy>

    eeprom_writebuf(base_addr, (unsigned char*)buf, size);
     fb8:	4b 81       	ldd	r20, Y+3	; 0x03
     fba:	2f 81       	ldd	r18, Y+7	; 0x07
     fbc:	38 85       	ldd	r19, Y+8	; 0x08
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	9a 81       	ldd	r25, Y+2	; 0x02
     fc2:	b9 01       	movw	r22, r18
     fc4:	0e 94 12 03 	call	0x624	; 0x624 <eeprom_writebuf>
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	fe be       	out	0x3e, r15	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	ed be       	out	0x3d, r14	; 61
}
     fd2:	00 00       	nop
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	f8 94       	cli
     fd8:	1e bf       	out	0x3e, r17	; 62
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	0d bf       	out	0x3d, r16	; 61
     fde:	28 96       	adiw	r28, 0x08	; 8
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	f8 94       	cli
     fe4:	de bf       	out	0x3e, r29	; 62
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	cd bf       	out	0x3d, r28	; 61
     fea:	df 91       	pop	r29
     fec:	cf 91       	pop	r28
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	ff 90       	pop	r15
     ff4:	ef 90       	pop	r14
     ff6:	08 95       	ret

00000ff8 <log_is_data_valid>:
     ff8:	80 31       	cpi	r24, 0x10	; 16
     ffa:	91 05       	cpc	r25, r1
     ffc:	04 f5       	brge	.+64     	; 0x103e <log_is_data_valid+0x46>
     ffe:	27 e0       	ldi	r18, 0x07	; 7
    1000:	28 9f       	mul	r18, r24
    1002:	a0 01       	movw	r20, r0
    1004:	29 9f       	mul	r18, r25
    1006:	50 0d       	add	r21, r0
    1008:	11 24       	eor	r1, r1
    100a:	fa 01       	movw	r30, r20
    100c:	e8 51       	subi	r30, 0x18	; 24
    100e:	fe 4f       	sbci	r31, 0xFE	; 254
    1010:	80 81       	ld	r24, Z
    1012:	81 32       	cpi	r24, 0x21	; 33
    1014:	a0 f4       	brcc	.+40     	; 0x103e <log_is_data_valid+0x46>
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	fa 01       	movw	r30, r20
    101e:	e8 0f       	add	r30, r24
    1020:	f9 1f       	adc	r31, r25
    1022:	e8 51       	subi	r30, 0x18	; 24
    1024:	fe 4f       	sbci	r31, 0xFE	; 254
    1026:	30 81       	ld	r19, Z
    1028:	23 0f       	add	r18, r19
    102a:	01 96       	adiw	r24, 0x01	; 1
    102c:	87 30       	cpi	r24, 0x07	; 7
    102e:	91 05       	cpc	r25, r1
    1030:	a9 f7       	brne	.-22     	; 0x101c <log_is_data_valid+0x24>
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	22 23       	and	r18, r18
    1038:	21 f0       	breq	.+8      	; 0x1042 <log_is_data_valid+0x4a>
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	08 95       	ret
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	08 95       	ret

00001044 <log_init>:
    1044:	6f 92       	push	r6
    1046:	7f 92       	push	r7
    1048:	8f 92       	push	r8
    104a:	9f 92       	push	r9
    104c:	af 92       	push	r10
    104e:	bf 92       	push	r11
    1050:	cf 92       	push	r12
    1052:	df 92       	push	r13
    1054:	ef 92       	push	r14
    1056:	ff 92       	push	r15
    1058:	0f 93       	push	r16
    105a:	1f 93       	push	r17
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	0e 94 03 03 	call	0x606	; 0x606 <eeprom_isbusy>
    1064:	89 2b       	or	r24, r25
    1066:	e1 f7       	brne	.-8      	; 0x1060 <log_init+0x1c>
    1068:	08 e5       	ldi	r16, 0x58	; 88
    106a:	12 e0       	ldi	r17, 0x02	; 2
    106c:	c0 e8       	ldi	r28, 0x80	; 128
    106e:	d0 e0       	ldi	r29, 0x00	; 0
    1070:	be 01       	movw	r22, r28
    1072:	68 59       	subi	r22, 0x98	; 152
    1074:	7e 4f       	sbci	r23, 0xFE	; 254
    1076:	47 e0       	ldi	r20, 0x07	; 7
    1078:	ce 01       	movw	r24, r28
    107a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <eeprom_readbuf>
    107e:	f8 01       	movw	r30, r16
    1080:	11 92       	st	Z+, r1
    1082:	8f 01       	movw	r16, r30
    1084:	27 96       	adiw	r28, 0x07	; 7
    1086:	c0 3f       	cpi	r28, 0xF0	; 240
    1088:	d1 05       	cpc	r29, r1
    108a:	91 f7       	brne	.-28     	; 0x1070 <log_init+0x2c>
    108c:	48 ee       	ldi	r20, 0xE8	; 232
    108e:	e4 2e       	mov	r14, r20
    1090:	41 e0       	ldi	r20, 0x01	; 1
    1092:	f4 2e       	mov	r15, r20
    1094:	87 01       	movw	r16, r14
    1096:	c0 e0       	ldi	r28, 0x00	; 0
    1098:	d0 e0       	ldi	r29, 0x00	; 0
    109a:	d1 2c       	mov	r13, r1
    109c:	b1 2c       	mov	r11, r1
    109e:	77 24       	eor	r7, r7
    10a0:	7a 94       	dec	r7
    10a2:	ce 01       	movw	r24, r28
    10a4:	0e 94 fc 07 	call	0xff8	; 0xff8 <log_is_data_valid>
    10a8:	89 2b       	or	r24, r25
    10aa:	41 f0       	breq	.+16     	; 0x10bc <log_init+0x78>
    10ac:	f8 01       	movw	r30, r16
    10ae:	80 81       	ld	r24, Z
    10b0:	87 15       	cp	r24, r7
    10b2:	20 f4       	brcc	.+8      	; 0x10bc <log_init+0x78>
    10b4:	bc 2e       	mov	r11, r28
    10b6:	78 2e       	mov	r7, r24
    10b8:	dd 24       	eor	r13, r13
    10ba:	d3 94       	inc	r13
    10bc:	21 96       	adiw	r28, 0x01	; 1
    10be:	09 5f       	subi	r16, 0xF9	; 249
    10c0:	1f 4f       	sbci	r17, 0xFF	; 255
    10c2:	c0 31       	cpi	r28, 0x10	; 16
    10c4:	d1 05       	cpc	r29, r1
    10c6:	69 f7       	brne	.-38     	; 0x10a2 <log_init+0x5e>
    10c8:	dd 20       	and	r13, r13
    10ca:	09 f4       	brne	.+2      	; 0x10ce <log_init+0x8a>
    10cc:	6a c0       	rjmp	.+212    	; 0x11a2 <log_init+0x15e>
    10ce:	b0 92 e7 01 	sts	0x01E7, r11	; 0x8001e7 <last_written>
    10d2:	70 92 e6 01 	sts	0x01E6, r7	; 0x8001e6 <last_transaction_written>
    10d6:	cb 2d       	mov	r28, r11
    10d8:	d0 e0       	ldi	r29, 0x00	; 0
    10da:	8e 01       	movw	r16, r28
    10dc:	0f 5f       	subi	r16, 0xFF	; 255
    10de:	1f 4f       	sbci	r17, 0xFF	; 255
    10e0:	87 2c       	mov	r8, r7
    10e2:	2f e0       	ldi	r18, 0x0F	; 15
    10e4:	a2 2e       	mov	r10, r18
    10e6:	37 e0       	ldi	r19, 0x07	; 7
    10e8:	93 2e       	mov	r9, r19
    10ea:	68 01       	movw	r12, r16
    10ec:	ff e0       	ldi	r31, 0x0F	; 15
    10ee:	cf 22       	and	r12, r31
    10f0:	dd 24       	eor	r13, r13
    10f2:	c6 01       	movw	r24, r12
    10f4:	0e 94 fc 07 	call	0xff8	; 0xff8 <log_is_data_valid>
    10f8:	89 2b       	or	r24, r25
    10fa:	61 f4       	brne	.+24     	; 0x1114 <log_init+0xd0>
    10fc:	b0 92 e5 01 	sts	0x01E5, r11	; 0x8001e5 <tail>
    1100:	8e 01       	movw	r16, r28
    1102:	01 50       	subi	r16, 0x01	; 1
    1104:	11 09       	sbc	r17, r1
    1106:	60 97       	sbiw	r28, 0x10	; 16
    1108:	80 e1       	ldi	r24, 0x10	; 16
    110a:	a8 2e       	mov	r10, r24
    110c:	b1 2c       	mov	r11, r1
    110e:	97 e0       	ldi	r25, 0x07	; 7
    1110:	69 2e       	mov	r6, r25
    1112:	3a c0       	rjmp	.+116    	; 0x1188 <log_init+0x144>
    1114:	9c 9c       	mul	r9, r12
    1116:	f0 01       	movw	r30, r0
    1118:	9d 9c       	mul	r9, r13
    111a:	f0 0d       	add	r31, r0
    111c:	11 24       	eor	r1, r1
    111e:	e8 51       	subi	r30, 0x18	; 24
    1120:	fe 4f       	sbci	r31, 0xFE	; 254
    1122:	40 81       	ld	r20, Z
    1124:	24 2f       	mov	r18, r20
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	88 2d       	mov	r24, r8
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	01 96       	adiw	r24, 0x01	; 1
    112e:	8f 71       	andi	r24, 0x1F	; 31
    1130:	99 27       	eor	r25, r25
    1132:	28 17       	cp	r18, r24
    1134:	39 07       	cpc	r19, r25
    1136:	11 f7       	brne	.-60     	; 0x10fc <log_init+0xb8>
    1138:	c0 92 e7 01 	sts	0x01E7, r12	; 0x8001e7 <last_written>
    113c:	40 93 e6 01 	sts	0x01E6, r20	; 0x8001e6 <last_transaction_written>
    1140:	aa 94       	dec	r10
    1142:	0f 5f       	subi	r16, 0xFF	; 255
    1144:	1f 4f       	sbci	r17, 0xFF	; 255
    1146:	aa 20       	and	r10, r10
    1148:	c9 f2       	breq	.-78     	; 0x10fc <log_init+0xb8>
    114a:	84 2e       	mov	r8, r20
    114c:	ce cf       	rjmp	.-100    	; 0x10ea <log_init+0xa6>
    114e:	f7 01       	movw	r30, r14
    1150:	20 81       	ld	r18, Z
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	87 2d       	mov	r24, r7
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	4f 96       	adiw	r24, 0x1f	; 31
    115a:	8f 71       	andi	r24, 0x1F	; 31
    115c:	99 27       	eor	r25, r25
    115e:	28 17       	cp	r18, r24
    1160:	39 07       	cpc	r19, r25
    1162:	31 f5       	brne	.+76     	; 0x11b0 <log_init+0x16c>
    1164:	c0 92 e5 01 	sts	0x01E5, r12	; 0x8001e5 <tail>
    1168:	68 9c       	mul	r6, r8
    116a:	f0 01       	movw	r30, r0
    116c:	69 9c       	mul	r6, r9
    116e:	f0 0d       	add	r31, r0
    1170:	11 24       	eor	r1, r1
    1172:	e8 51       	subi	r30, 0x18	; 24
    1174:	fe 4f       	sbci	r31, 0xFE	; 254
    1176:	70 80       	ld	r7, Z
    1178:	01 50       	subi	r16, 0x01	; 1
    117a:	11 09       	sbc	r17, r1
    117c:	f7 e0       	ldi	r31, 0x07	; 7
    117e:	ef 0e       	add	r14, r31
    1180:	f1 1c       	adc	r15, r1
    1182:	0c 17       	cp	r16, r28
    1184:	1d 07       	cpc	r17, r29
    1186:	a1 f0       	breq	.+40     	; 0x11b0 <log_init+0x16c>
    1188:	c8 01       	movw	r24, r16
    118a:	b5 01       	movw	r22, r10
    118c:	0e 94 41 13 	call	0x2682	; 0x2682 <__divmodhi4>
    1190:	6c 01       	movw	r12, r24
    1192:	4c 01       	movw	r8, r24
    1194:	99 24       	eor	r9, r9
    1196:	c4 01       	movw	r24, r8
    1198:	0e 94 fc 07 	call	0xff8	; 0xff8 <log_is_data_valid>
    119c:	89 2b       	or	r24, r25
    119e:	b9 f6       	brne	.-82     	; 0x114e <log_init+0x10a>
    11a0:	07 c0       	rjmp	.+14     	; 0x11b0 <log_init+0x16c>
    11a2:	8f e0       	ldi	r24, 0x0F	; 15
    11a4:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <last_written>
    11a8:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <last_transaction_written>
    11ac:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <tail>
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	1f 91       	pop	r17
    11b6:	0f 91       	pop	r16
    11b8:	ff 90       	pop	r15
    11ba:	ef 90       	pop	r14
    11bc:	df 90       	pop	r13
    11be:	cf 90       	pop	r12
    11c0:	bf 90       	pop	r11
    11c2:	af 90       	pop	r10
    11c4:	9f 90       	pop	r9
    11c6:	8f 90       	pop	r8
    11c8:	7f 90       	pop	r7
    11ca:	6f 90       	pop	r6
    11cc:	08 95       	ret

000011ce <log_update>:
    11ce:	ef 92       	push	r14
    11d0:	ff 92       	push	r15
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	0e 94 03 03 	call	0x606	; 0x606 <eeprom_isbusy>
    11dc:	89 2b       	or	r24, r25
    11de:	39 f5       	brne	.+78     	; 0x122e <log_update+0x60>
    11e0:	e8 e5       	ldi	r30, 0x58	; 88
    11e2:	f2 e0       	ldi	r31, 0x02	; 2
    11e4:	c0 e0       	ldi	r28, 0x00	; 0
    11e6:	d0 e0       	ldi	r29, 0x00	; 0
    11e8:	81 91       	ld	r24, Z+
    11ea:	88 23       	and	r24, r24
    11ec:	e1 f0       	breq	.+56     	; 0x1226 <log_update+0x58>
    11ee:	17 e0       	ldi	r17, 0x07	; 7
    11f0:	1c 9f       	mul	r17, r28
    11f2:	c0 01       	movw	r24, r0
    11f4:	1d 9f       	mul	r17, r29
    11f6:	90 0d       	add	r25, r0
    11f8:	11 24       	eor	r1, r1
    11fa:	9c 01       	movw	r18, r24
    11fc:	28 51       	subi	r18, 0x18	; 24
    11fe:	3e 4f       	sbci	r19, 0xFE	; 254
    1200:	79 01       	movw	r14, r18
    1202:	67 e0       	ldi	r22, 0x07	; 7
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	c9 01       	movw	r24, r18
    1208:	0e 94 c4 06 	call	0xd88	; 0xd88 <update_checksum>
    120c:	c1 9f       	mul	r28, r17
    120e:	c0 01       	movw	r24, r0
    1210:	11 24       	eor	r1, r1
    1212:	47 e0       	ldi	r20, 0x07	; 7
    1214:	b7 01       	movw	r22, r14
    1216:	80 58       	subi	r24, 0x80	; 128
    1218:	9f 4f       	sbci	r25, 0xFF	; 255
    121a:	0e 94 12 03 	call	0x624	; 0x624 <eeprom_writebuf>
    121e:	c8 5a       	subi	r28, 0xA8	; 168
    1220:	dd 4f       	sbci	r29, 0xFD	; 253
    1222:	18 82       	st	Y, r1
    1224:	04 c0       	rjmp	.+8      	; 0x122e <log_update+0x60>
    1226:	21 96       	adiw	r28, 0x01	; 1
    1228:	c0 31       	cpi	r28, 0x10	; 16
    122a:	d1 05       	cpc	r29, r1
    122c:	e9 f6       	brne	.-70     	; 0x11e8 <log_update+0x1a>
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	1f 91       	pop	r17
    1234:	ff 90       	pop	r15
    1236:	ef 90       	pop	r14
    1238:	08 95       	ret

0000123a <log_add_record>:
    123a:	ef 92       	push	r14
    123c:	ff 92       	push	r15
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	e8 2e       	mov	r14, r24
    1248:	c0 91 e7 01 	lds	r28, 0x01E7	; 0x8001e7 <last_written>
    124c:	d0 e0       	ldi	r29, 0x00	; 0
    124e:	21 96       	adiw	r28, 0x01	; 1
    1250:	cf 70       	andi	r28, 0x0F	; 15
    1252:	dd 27       	eor	r29, r29
    1254:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <tail>
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	0e 94 fc 07 	call	0xff8	; 0xff8 <log_is_data_valid>
    125e:	f8 2e       	mov	r15, r24
    1260:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <last_transaction_written>
    1264:	8f 5f       	subi	r24, 0xFF	; 255
    1266:	81 32       	cpi	r24, 0x21	; 33
    1268:	18 f4       	brcc	.+6      	; 0x1270 <log_add_record+0x36>
    126a:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <last_transaction_written>
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <log_add_record+0x3a>
    1270:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <last_transaction_written>
    1274:	87 e0       	ldi	r24, 0x07	; 7
    1276:	8c 9f       	mul	r24, r28
    1278:	80 01       	movw	r16, r0
    127a:	8d 9f       	mul	r24, r29
    127c:	10 0d       	add	r17, r0
    127e:	11 24       	eor	r1, r1
    1280:	08 51       	subi	r16, 0x18	; 24
    1282:	1e 4f       	sbci	r17, 0xFE	; 254
    1284:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <last_transaction_written>
    1288:	f8 01       	movw	r30, r16
    128a:	80 83       	st	Z, r24
    128c:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <rtc_get_date>
    1290:	f8 01       	movw	r30, r16
    1292:	61 83       	std	Z+1, r22	; 0x01
    1294:	72 83       	std	Z+2, r23	; 0x02
    1296:	83 83       	std	Z+3, r24	; 0x03
    1298:	94 83       	std	Z+4, r25	; 0x04
    129a:	e5 82       	std	Z+5, r14	; 0x05
    129c:	c0 93 e7 01 	sts	0x01E7, r28	; 0x8001e7 <last_written>
    12a0:	67 e0       	ldi	r22, 0x07	; 7
    12a2:	70 e0       	ldi	r23, 0x00	; 0
    12a4:	c8 01       	movw	r24, r16
    12a6:	0e 94 c4 06 	call	0xd88	; 0xd88 <update_checksum>
    12aa:	c8 5a       	subi	r28, 0xA8	; 168
    12ac:	dd 4f       	sbci	r29, 0xFD	; 253
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	88 83       	st	Y, r24
    12b2:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <last_written>
    12b6:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <tail>
    12ba:	89 13       	cpse	r24, r25
    12bc:	08 c0       	rjmp	.+16     	; 0x12ce <log_add_record+0x94>
    12be:	ff 20       	and	r15, r15
    12c0:	31 f0       	breq	.+12     	; 0x12ce <log_add_record+0x94>
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	01 96       	adiw	r24, 0x01	; 1
    12c6:	8f 70       	andi	r24, 0x0F	; 15
    12c8:	99 27       	eor	r25, r25
    12ca:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <tail>
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	1f 91       	pop	r17
    12d4:	0f 91       	pop	r16
    12d6:	ff 90       	pop	r15
    12d8:	ef 90       	pop	r14
    12da:	08 95       	ret

000012dc <log_clear>:
    12dc:	e8 ee       	ldi	r30, 0xE8	; 232
    12de:	f1 e0       	ldi	r31, 0x01	; 1
    12e0:	a8 e5       	ldi	r26, 0x58	; 88
    12e2:	b2 e0       	ldi	r27, 0x02	; 2
    12e4:	8f ef       	ldi	r24, 0xFF	; 255
    12e6:	4f ef       	ldi	r20, 0xFF	; 255
    12e8:	5f ef       	ldi	r21, 0xFF	; 255
    12ea:	ba 01       	movw	r22, r20
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	80 83       	st	Z, r24
    12f0:	85 83       	std	Z+5, r24	; 0x05
    12f2:	41 83       	std	Z+1, r20	; 0x01
    12f4:	52 83       	std	Z+2, r21	; 0x02
    12f6:	63 83       	std	Z+3, r22	; 0x03
    12f8:	74 83       	std	Z+4, r23	; 0x04
    12fa:	9d 93       	st	X+, r25
    12fc:	37 96       	adiw	r30, 0x07	; 7
    12fe:	22 e0       	ldi	r18, 0x02	; 2
    1300:	e8 35       	cpi	r30, 0x58	; 88
    1302:	f2 07       	cpc	r31, r18
    1304:	a1 f7       	brne	.-24     	; 0x12ee <log_clear+0x12>
    1306:	8f e0       	ldi	r24, 0x0F	; 15
    1308:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <last_written>
    130c:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <tail>
    1310:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <last_transaction_written>
    1314:	08 95       	ret

00001316 <log_get_num_entries>:
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	00 91 e5 01 	lds	r16, 0x01E5	; 0x8001e5 <tail>
    1322:	c0 2f       	mov	r28, r16
    1324:	10 e0       	ldi	r17, 0x00	; 0
    1326:	d0 e0       	ldi	r29, 0x00	; 0
    1328:	ce 01       	movw	r24, r28
    132a:	0e 94 fc 07 	call	0xff8	; 0xff8 <log_is_data_valid>
    132e:	89 2b       	or	r24, r25
    1330:	29 f0       	breq	.+10     	; 0x133c <log_get_num_entries+0x26>
    1332:	21 96       	adiw	r28, 0x01	; 1
    1334:	cf 70       	andi	r28, 0x0F	; 15
    1336:	1f 5f       	subi	r17, 0xFF	; 255
    1338:	0c 13       	cpse	r16, r28
    133a:	f5 cf       	rjmp	.-22     	; 0x1326 <log_get_num_entries+0x10>
    133c:	81 2f       	mov	r24, r17
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	1f 91       	pop	r17
    1344:	0f 91       	pop	r16
    1346:	08 95       	ret

00001348 <log_get_record>:
    1348:	af 92       	push	r10
    134a:	bf 92       	push	r11
    134c:	cf 92       	push	r12
    134e:	df 92       	push	r13
    1350:	ef 92       	push	r14
    1352:	ff 92       	push	r15
    1354:	0f 93       	push	r16
    1356:	1f 93       	push	r17
    1358:	cf 93       	push	r28
    135a:	df 93       	push	r29
    135c:	6b 01       	movw	r12, r22
    135e:	7c 01       	movw	r14, r24
    1360:	8a 01       	movw	r16, r20
    1362:	59 01       	movw	r10, r18
    1364:	0e 94 8b 09 	call	0x1316	; 0x1316 <log_get_num_entries>
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	a0 e0       	ldi	r26, 0x00	; 0
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	c8 16       	cp	r12, r24
    1370:	d9 06       	cpc	r13, r25
    1372:	ea 06       	cpc	r14, r26
    1374:	fb 06       	cpc	r15, r27
    1376:	f8 f4       	brcc	.+62     	; 0x13b6 <log_get_record+0x6e>
    1378:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <tail>
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	c8 0e       	add	r12, r24
    1380:	d9 1e       	adc	r13, r25
    1382:	8f e0       	ldi	r24, 0x0F	; 15
    1384:	c8 22       	and	r12, r24
    1386:	dd 24       	eor	r13, r13
    1388:	87 e0       	ldi	r24, 0x07	; 7
    138a:	8c 9d       	mul	r24, r12
    138c:	f0 01       	movw	r30, r0
    138e:	8d 9d       	mul	r24, r13
    1390:	f0 0d       	add	r31, r0
    1392:	11 24       	eor	r1, r1
    1394:	e8 51       	subi	r30, 0x18	; 24
    1396:	fe 4f       	sbci	r31, 0xFE	; 254
    1398:	81 81       	ldd	r24, Z+1	; 0x01
    139a:	92 81       	ldd	r25, Z+2	; 0x02
    139c:	a3 81       	ldd	r26, Z+3	; 0x03
    139e:	b4 81       	ldd	r27, Z+4	; 0x04
    13a0:	e8 01       	movw	r28, r16
    13a2:	88 83       	st	Y, r24
    13a4:	99 83       	std	Y+1, r25	; 0x01
    13a6:	aa 83       	std	Y+2, r26	; 0x02
    13a8:	bb 83       	std	Y+3, r27	; 0x03
    13aa:	85 81       	ldd	r24, Z+5	; 0x05
    13ac:	f5 01       	movw	r30, r10
    13ae:	80 83       	st	Z, r24
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <log_get_record+0x72>
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	df 90       	pop	r13
    13c8:	cf 90       	pop	r12
    13ca:	bf 90       	pop	r11
    13cc:	af 90       	pop	r10
    13ce:	08 95       	ret

000013d0 <rtc_init>:
    13d0:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <timer1_init>

000013d4 <rtc_get_date>:
    13d4:	0f 93       	push	r16
    13d6:	1f 93       	push	r17
    13d8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <timer1_get>
    13dc:	00 91 0e 03 	lds	r16, 0x030E	; 0x80030e <rtc_base>
    13e0:	10 91 0f 03 	lds	r17, 0x030F	; 0x80030f <rtc_base+0x1>
    13e4:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <rtc_base+0x2>
    13e8:	30 91 11 03 	lds	r19, 0x0311	; 0x800311 <rtc_base+0x3>
    13ec:	60 0f       	add	r22, r16
    13ee:	71 1f       	adc	r23, r17
    13f0:	82 1f       	adc	r24, r18
    13f2:	93 1f       	adc	r25, r19
    13f4:	1f 91       	pop	r17
    13f6:	0f 91       	pop	r16
    13f8:	08 95       	ret

000013fa <is_leapyear>:
    13fa:	9c 01       	movw	r18, r24
    13fc:	60 e9       	ldi	r22, 0x90	; 144
    13fe:	71 e0       	ldi	r23, 0x01	; 1
    1400:	0e 94 2d 13 	call	0x265a	; 0x265a <__udivmodhi4>
    1404:	89 2b       	or	r24, r25
    1406:	79 f0       	breq	.+30     	; 0x1426 <is_leapyear+0x2c>
    1408:	c9 01       	movw	r24, r18
    140a:	83 70       	andi	r24, 0x03	; 3
    140c:	99 27       	eor	r25, r25
    140e:	89 2b       	or	r24, r25
    1410:	61 f4       	brne	.+24     	; 0x142a <is_leapyear+0x30>
    1412:	c9 01       	movw	r24, r18
    1414:	64 e6       	ldi	r22, 0x64	; 100
    1416:	70 e0       	ldi	r23, 0x00	; 0
    1418:	0e 94 2d 13 	call	0x265a	; 0x265a <__udivmodhi4>
    141c:	9c 01       	movw	r18, r24
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	23 2b       	or	r18, r19
    1422:	21 f4       	brne	.+8      	; 0x142c <is_leapyear+0x32>
    1424:	02 c0       	rjmp	.+4      	; 0x142a <is_leapyear+0x30>
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	08 95       	ret
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	08 95       	ret

0000142e <rtc_set_by_datestr>:
    142e:	2f 92       	push	r2
    1430:	3f 92       	push	r3
    1432:	4f 92       	push	r4
    1434:	5f 92       	push	r5
    1436:	6f 92       	push	r6
    1438:	7f 92       	push	r7
    143a:	8f 92       	push	r8
    143c:	9f 92       	push	r9
    143e:	af 92       	push	r10
    1440:	bf 92       	push	r11
    1442:	cf 92       	push	r12
    1444:	df 92       	push	r13
    1446:	ef 92       	push	r14
    1448:	ff 92       	push	r15
    144a:	0f 93       	push	r16
    144c:	1f 93       	push	r17
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	67 97       	sbiw	r28, 0x17	; 23
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
    1462:	2c e0       	ldi	r18, 0x0C	; 12
    1464:	e0 eb       	ldi	r30, 0xB0	; 176
    1466:	f1 e0       	ldi	r31, 0x01	; 1
    1468:	ae 01       	movw	r20, r28
    146a:	4f 5f       	subi	r20, 0xFF	; 255
    146c:	5f 4f       	sbci	r21, 0xFF	; 255
    146e:	1a 01       	movw	r2, r20
    1470:	da 01       	movw	r26, r20
    1472:	01 90       	ld	r0, Z+
    1474:	0d 92       	st	X+, r0
    1476:	2a 95       	dec	r18
    1478:	e1 f7       	brne	.-8      	; 0x1472 <rtc_set_by_datestr+0x44>
    147a:	dc 01       	movw	r26, r24
    147c:	2c 91       	ld	r18, X
    147e:	22 0f       	add	r18, r18
    1480:	20 56       	subi	r18, 0x60	; 96
    1482:	32 2f       	mov	r19, r18
    1484:	33 0f       	add	r19, r19
    1486:	33 0f       	add	r19, r19
    1488:	23 0f       	add	r18, r19
    148a:	11 96       	adiw	r26, 0x01	; 1
    148c:	3c 91       	ld	r19, X
    148e:	11 97       	sbiw	r26, 0x01	; 1
    1490:	31 53       	subi	r19, 0x31	; 49
    1492:	23 0f       	add	r18, r19
    1494:	2d 87       	std	Y+13, r18	; 0x0d
    1496:	13 96       	adiw	r26, 0x03	; 3
    1498:	2c 91       	ld	r18, X
    149a:	13 97       	sbiw	r26, 0x03	; 3
    149c:	02 2e       	mov	r0, r18
    149e:	00 0c       	add	r0, r0
    14a0:	33 0b       	sbc	r19, r19
    14a2:	20 53       	subi	r18, 0x30	; 48
    14a4:	31 09       	sbc	r19, r1
    14a6:	6a e0       	ldi	r22, 0x0A	; 10
    14a8:	62 9f       	mul	r22, r18
    14aa:	a0 01       	movw	r20, r0
    14ac:	63 9f       	mul	r22, r19
    14ae:	50 0d       	add	r21, r0
    14b0:	11 24       	eor	r1, r1
    14b2:	14 96       	adiw	r26, 0x04	; 4
    14b4:	cc 90       	ld	r12, X
    14b6:	0c 2c       	mov	r0, r12
    14b8:	00 0c       	add	r0, r0
    14ba:	dd 08       	sbc	r13, r13
    14bc:	b0 e3       	ldi	r27, 0x30	; 48
    14be:	cb 1a       	sub	r12, r27
    14c0:	d1 08       	sbc	r13, r1
    14c2:	c4 0e       	add	r12, r20
    14c4:	d5 1e       	adc	r13, r21
    14c6:	86 01       	movw	r16, r12
    14c8:	01 50       	subi	r16, 0x01	; 1
    14ca:	11 09       	sbc	r17, r1
    14cc:	fc 01       	movw	r30, r24
    14ce:	26 81       	ldd	r18, Z+6	; 0x06
    14d0:	02 2e       	mov	r0, r18
    14d2:	00 0c       	add	r0, r0
    14d4:	33 0b       	sbc	r19, r19
    14d6:	20 53       	subi	r18, 0x30	; 48
    14d8:	31 09       	sbc	r19, r1
    14da:	e8 ee       	ldi	r30, 0xE8	; 232
    14dc:	f3 e0       	ldi	r31, 0x03	; 3
    14de:	2e 9f       	mul	r18, r30
    14e0:	a0 01       	movw	r20, r0
    14e2:	2f 9f       	mul	r18, r31
    14e4:	50 0d       	add	r21, r0
    14e6:	3e 9f       	mul	r19, r30
    14e8:	50 0d       	add	r21, r0
    14ea:	11 24       	eor	r1, r1
    14ec:	dc 01       	movw	r26, r24
    14ee:	17 96       	adiw	r26, 0x07	; 7
    14f0:	2c 91       	ld	r18, X
    14f2:	17 97       	sbiw	r26, 0x07	; 7
    14f4:	02 2e       	mov	r0, r18
    14f6:	00 0c       	add	r0, r0
    14f8:	33 0b       	sbc	r19, r19
    14fa:	20 53       	subi	r18, 0x30	; 48
    14fc:	31 09       	sbc	r19, r1
    14fe:	74 e6       	ldi	r23, 0x64	; 100
    1500:	72 9f       	mul	r23, r18
    1502:	70 01       	movw	r14, r0
    1504:	73 9f       	mul	r23, r19
    1506:	f0 0c       	add	r15, r0
    1508:	11 24       	eor	r1, r1
    150a:	e4 0e       	add	r14, r20
    150c:	f5 1e       	adc	r15, r21
    150e:	18 96       	adiw	r26, 0x08	; 8
    1510:	4c 91       	ld	r20, X
    1512:	18 97       	sbiw	r26, 0x08	; 8
    1514:	04 2e       	mov	r0, r20
    1516:	00 0c       	add	r0, r0
    1518:	55 0b       	sbc	r21, r21
    151a:	40 53       	subi	r20, 0x30	; 48
    151c:	51 09       	sbc	r21, r1
    151e:	64 9f       	mul	r22, r20
    1520:	90 01       	movw	r18, r0
    1522:	65 9f       	mul	r22, r21
    1524:	30 0d       	add	r19, r0
    1526:	11 24       	eor	r1, r1
    1528:	e2 0e       	add	r14, r18
    152a:	f3 1e       	adc	r15, r19
    152c:	19 96       	adiw	r26, 0x09	; 9
    152e:	2c 91       	ld	r18, X
    1530:	19 97       	sbiw	r26, 0x09	; 9
    1532:	f7 01       	movw	r30, r14
    1534:	e2 0f       	add	r30, r18
    1536:	f1 1d       	adc	r31, r1
    1538:	27 fd       	sbrc	r18, 7
    153a:	fa 95       	dec	r31
    153c:	af 01       	movw	r20, r30
    153e:	58 50       	subi	r21, 0x08	; 8
    1540:	7a 01       	movw	r14, r20
    1542:	1b 96       	adiw	r26, 0x0b	; 11
    1544:	2c 91       	ld	r18, X
    1546:	1b 97       	sbiw	r26, 0x0b	; 11
    1548:	22 0f       	add	r18, r18
    154a:	20 56       	subi	r18, 0x60	; 96
    154c:	32 2f       	mov	r19, r18
    154e:	33 0f       	add	r19, r19
    1550:	33 0f       	add	r19, r19
    1552:	23 0f       	add	r18, r19
    1554:	1c 96       	adiw	r26, 0x0c	; 12
    1556:	3c 91       	ld	r19, X
    1558:	1c 97       	sbiw	r26, 0x0c	; 12
    155a:	30 53       	subi	r19, 0x30	; 48
    155c:	23 0f       	add	r18, r19
    155e:	29 8b       	std	Y+17, r18	; 0x11
    1560:	1e 96       	adiw	r26, 0x0e	; 14
    1562:	2c 91       	ld	r18, X
    1564:	1e 97       	sbiw	r26, 0x0e	; 14
    1566:	22 0f       	add	r18, r18
    1568:	20 56       	subi	r18, 0x60	; 96
    156a:	32 2f       	mov	r19, r18
    156c:	33 0f       	add	r19, r19
    156e:	33 0f       	add	r19, r19
    1570:	23 0f       	add	r18, r19
    1572:	1f 96       	adiw	r26, 0x0f	; 15
    1574:	3c 91       	ld	r19, X
    1576:	1f 97       	sbiw	r26, 0x0f	; 15
    1578:	30 53       	subi	r19, 0x30	; 48
    157a:	23 0f       	add	r18, r19
    157c:	2a 8b       	std	Y+18, r18	; 0x12
    157e:	51 96       	adiw	r26, 0x11	; 17
    1580:	2c 91       	ld	r18, X
    1582:	51 97       	sbiw	r26, 0x11	; 17
    1584:	22 0f       	add	r18, r18
    1586:	20 56       	subi	r18, 0x60	; 96
    1588:	32 2f       	mov	r19, r18
    158a:	33 0f       	add	r19, r19
    158c:	33 0f       	add	r19, r19
    158e:	23 0f       	add	r18, r19
    1590:	52 96       	adiw	r26, 0x12	; 18
    1592:	8c 91       	ld	r24, X
    1594:	80 53       	subi	r24, 0x30	; 48
    1596:	28 0f       	add	r18, r24
    1598:	2b 8b       	std	Y+19, r18	; 0x13
    159a:	ca 01       	movw	r24, r20
    159c:	0e 94 fd 09 	call	0x13fa	; 0x13fa <is_leapyear>
    15a0:	88 23       	and	r24, r24
    15a2:	21 f0       	breq	.+8      	; 0x15ac <rtc_set_by_datestr+0x17e>
    15a4:	5d 85       	ldd	r21, Y+13	; 0x0d
    15a6:	52 30       	cpi	r21, 0x02	; 2
    15a8:	08 f0       	brcs	.+2      	; 0x15ac <rtc_set_by_datestr+0x17e>
    15aa:	86 01       	movw	r16, r12
    15ac:	c7 01       	movw	r24, r14
    15ae:	60 e9       	ldi	r22, 0x90	; 144
    15b0:	71 e0       	ldi	r23, 0x01	; 1
    15b2:	0e 94 2d 13 	call	0x265a	; 0x265a <__udivmodhi4>
    15b6:	fc 01       	movw	r30, r24
    15b8:	db 01       	movw	r26, r22
    15ba:	20 e8       	ldi	r18, 0x80	; 128
    15bc:	39 e5       	ldi	r19, 0x59	; 89
    15be:	40 e6       	ldi	r20, 0x60	; 96
    15c0:	50 ef       	ldi	r21, 0xF0	; 240
    15c2:	0e 94 a5 13 	call	0x274a	; 0x274a <__muluhisi3>
    15c6:	2b 01       	movw	r4, r22
    15c8:	3c 01       	movw	r6, r24
    15ca:	cf 01       	movw	r24, r30
    15cc:	64 e6       	ldi	r22, 0x64	; 100
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	0e 94 2d 13 	call	0x265a	; 0x265a <__udivmodhi4>
    15d4:	fc 01       	movw	r30, r24
    15d6:	db 01       	movw	r26, r22
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	32 ec       	ldi	r19, 0xC2	; 194
    15dc:	47 e1       	ldi	r20, 0x17	; 23
    15de:	5c eb       	ldi	r21, 0xBC	; 188
    15e0:	0e 94 a5 13 	call	0x274a	; 0x274a <__muluhisi3>
    15e4:	4b 01       	movw	r8, r22
    15e6:	5c 01       	movw	r10, r24
    15e8:	df 01       	movw	r26, r30
    15ea:	b6 95       	lsr	r27
    15ec:	a7 95       	ror	r26
    15ee:	b6 95       	lsr	r27
    15f0:	a7 95       	ror	r26
    15f2:	20 e8       	ldi	r18, 0x80	; 128
    15f4:	3f e1       	ldi	r19, 0x1F	; 31
    15f6:	46 e8       	ldi	r20, 0x86	; 134
    15f8:	57 e0       	ldi	r21, 0x07	; 7
    15fa:	0e 94 a5 13 	call	0x274a	; 0x274a <__muluhisi3>
    15fe:	6b 01       	movw	r12, r22
    1600:	7c 01       	movw	r14, r24
    1602:	df 01       	movw	r26, r30
    1604:	a3 70       	andi	r26, 0x03	; 3
    1606:	bb 27       	eor	r27, r27
    1608:	20 e8       	ldi	r18, 0x80	; 128
    160a:	33 e3       	ldi	r19, 0x33	; 51
    160c:	41 ee       	ldi	r20, 0xE1	; 225
    160e:	51 e0       	ldi	r21, 0x01	; 1
    1610:	0e 94 a5 13 	call	0x274a	; 0x274a <__muluhisi3>
    1614:	6c 8b       	std	Y+20, r22	; 0x14
    1616:	7d 8b       	std	Y+21, r23	; 0x15
    1618:	8e 8b       	std	Y+22, r24	; 0x16
    161a:	9f 8b       	std	Y+23, r25	; 0x17
    161c:	f1 01       	movw	r30, r2
    161e:	8e 2f       	mov	r24, r30
    1620:	82 19       	sub	r24, r2
    1622:	9d 85       	ldd	r25, Y+13	; 0x0d
    1624:	89 17       	cp	r24, r25
    1626:	20 f4       	brcc	.+8      	; 0x1630 <rtc_set_by_datestr+0x202>
    1628:	81 91       	ld	r24, Z+
    162a:	08 0f       	add	r16, r24
    162c:	11 1d       	adc	r17, r1
    162e:	f7 cf       	rjmp	.-18     	; 0x161e <rtc_set_by_datestr+0x1f0>
    1630:	a9 89       	ldd	r26, Y+17	; 0x11
    1632:	2a 2f       	mov	r18, r26
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	a0 e1       	ldi	r26, 0x10	; 16
    1638:	be e0       	ldi	r27, 0x0E	; 14
    163a:	0e 94 96 13 	call	0x272c	; 0x272c <__umulhisi3>
    163e:	6d 87       	std	Y+13, r22	; 0x0d
    1640:	7e 87       	std	Y+14, r23	; 0x0e
    1642:	8f 87       	std	Y+15, r24	; 0x0f
    1644:	98 8b       	std	Y+16, r25	; 0x10
    1646:	ba 89       	ldd	r27, Y+18	; 0x12
    1648:	2b 2f       	mov	r18, r27
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	ac e3       	ldi	r26, 0x3C	; 60
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	0e 94 96 13 	call	0x272c	; 0x272c <__umulhisi3>
    1654:	2d 85       	ldd	r18, Y+13	; 0x0d
    1656:	3e 85       	ldd	r19, Y+14	; 0x0e
    1658:	4f 85       	ldd	r20, Y+15	; 0x0f
    165a:	58 89       	ldd	r21, Y+16	; 0x10
    165c:	26 0f       	add	r18, r22
    165e:	37 1f       	adc	r19, r23
    1660:	48 1f       	adc	r20, r24
    1662:	59 1f       	adc	r21, r25
    1664:	da 01       	movw	r26, r20
    1666:	c9 01       	movw	r24, r18
    1668:	3b 89       	ldd	r19, Y+19	; 0x13
    166a:	83 0f       	add	r24, r19
    166c:	91 1d       	adc	r25, r1
    166e:	a1 1d       	adc	r26, r1
    1670:	b1 1d       	adc	r27, r1
    1672:	48 0e       	add	r4, r24
    1674:	59 1e       	adc	r5, r25
    1676:	6a 1e       	adc	r6, r26
    1678:	7b 1e       	adc	r7, r27
    167a:	84 0c       	add	r8, r4
    167c:	95 1c       	adc	r9, r5
    167e:	a6 1c       	adc	r10, r6
    1680:	b7 1c       	adc	r11, r7
    1682:	c8 0c       	add	r12, r8
    1684:	d9 1c       	adc	r13, r9
    1686:	ea 1c       	adc	r14, r10
    1688:	fb 1c       	adc	r15, r11
    168a:	8c 89       	ldd	r24, Y+20	; 0x14
    168c:	9d 89       	ldd	r25, Y+21	; 0x15
    168e:	ae 89       	ldd	r26, Y+22	; 0x16
    1690:	bf 89       	ldd	r27, Y+23	; 0x17
    1692:	c8 0e       	add	r12, r24
    1694:	d9 1e       	adc	r13, r25
    1696:	ea 1e       	adc	r14, r26
    1698:	fb 1e       	adc	r15, r27
    169a:	d8 01       	movw	r26, r16
    169c:	20 e8       	ldi	r18, 0x80	; 128
    169e:	31 e5       	ldi	r19, 0x51	; 81
    16a0:	41 e0       	ldi	r20, 0x01	; 1
    16a2:	50 e0       	ldi	r21, 0x00	; 0
    16a4:	0e 94 a5 13 	call	0x274a	; 0x274a <__muluhisi3>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	8c 0d       	add	r24, r12
    16ae:	9d 1d       	adc	r25, r13
    16b0:	ae 1d       	adc	r26, r14
    16b2:	bf 1d       	adc	r27, r15
    16b4:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <rtc_base>
    16b8:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <rtc_base+0x1>
    16bc:	a0 93 10 03 	sts	0x0310, r26	; 0x800310 <rtc_base+0x2>
    16c0:	b0 93 11 03 	sts	0x0311, r27	; 0x800311 <rtc_base+0x3>
    16c4:	67 96       	adiw	r28, 0x17	; 23
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	1f 91       	pop	r17
    16d6:	0f 91       	pop	r16
    16d8:	ff 90       	pop	r15
    16da:	ef 90       	pop	r14
    16dc:	df 90       	pop	r13
    16de:	cf 90       	pop	r12
    16e0:	bf 90       	pop	r11
    16e2:	af 90       	pop	r10
    16e4:	9f 90       	pop	r9
    16e6:	8f 90       	pop	r8
    16e8:	7f 90       	pop	r7
    16ea:	6f 90       	pop	r6
    16ec:	5f 90       	pop	r5
    16ee:	4f 90       	pop	r4
    16f0:	3f 90       	pop	r3
    16f2:	2f 90       	pop	r2
    16f4:	0c 94 22 06 	jmp	0xc44	; 0xc44 <timer1_clear>

000016f8 <get_month>:
    16f8:	ef 92       	push	r14
    16fa:	ff 92       	push	r15
    16fc:	0f 93       	push	r16
    16fe:	1f 93       	push	r17
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	68 97       	sbiw	r28, 0x18	; 24
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	7b 01       	movw	r14, r22
    1716:	2c e0       	ldi	r18, 0x0C	; 12
    1718:	e0 eb       	ldi	r30, 0xB0	; 176
    171a:	f1 e0       	ldi	r31, 0x01	; 1
    171c:	de 01       	movw	r26, r28
    171e:	1d 96       	adiw	r26, 0x0d	; 13
    1720:	01 90       	ld	r0, Z+
    1722:	0d 92       	st	X+, r0
    1724:	2a 95       	dec	r18
    1726:	e1 f7       	brne	.-8      	; 0x1720 <get_month+0x28>
    1728:	8e 01       	movw	r16, r28
    172a:	0f 5f       	subi	r16, 0xFF	; 255
    172c:	1f 4f       	sbci	r17, 0xFF	; 255
    172e:	2c e0       	ldi	r18, 0x0C	; 12
    1730:	f8 01       	movw	r30, r16
    1732:	11 92       	st	Z+, r1
    1734:	2a 95       	dec	r18
    1736:	e9 f7       	brne	.-6      	; 0x1732 <get_month+0x3a>
    1738:	0e 94 fd 09 	call	0x13fa	; 0x13fa <is_leapyear>
    173c:	8a 83       	std	Y+2, r24	; 0x02
    173e:	de 01       	movw	r26, r28
    1740:	1d 96       	adiw	r26, 0x0d	; 13
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	f7 01       	movw	r30, r14
    1746:	40 81       	ld	r20, Z
    1748:	51 81       	ldd	r21, Z+1	; 0x01
    174a:	9d 91       	ld	r25, X+
    174c:	f8 01       	movw	r30, r16
    174e:	21 91       	ld	r18, Z+
    1750:	8f 01       	movw	r16, r30
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	29 0f       	add	r18, r25
    1756:	31 1d       	adc	r19, r1
    1758:	42 17       	cp	r20, r18
    175a:	53 07       	cpc	r21, r19
    175c:	40 f0       	brcs	.+16     	; 0x176e <get_month+0x76>
    175e:	42 1b       	sub	r20, r18
    1760:	53 0b       	sbc	r21, r19
    1762:	f7 01       	movw	r30, r14
    1764:	51 83       	std	Z+1, r21	; 0x01
    1766:	40 83       	st	Z, r20
    1768:	8f 5f       	subi	r24, 0xFF	; 255
    176a:	8c 30       	cpi	r24, 0x0C	; 12
    176c:	59 f7       	brne	.-42     	; 0x1744 <get_month+0x4c>
    176e:	68 96       	adiw	r28, 0x18	; 24
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	f8 94       	cli
    1774:	de bf       	out	0x3e, r29	; 62
    1776:	0f be       	out	0x3f, r0	; 63
    1778:	cd bf       	out	0x3d, r28	; 61
    177a:	df 91       	pop	r29
    177c:	cf 91       	pop	r28
    177e:	1f 91       	pop	r17
    1780:	0f 91       	pop	r16
    1782:	ff 90       	pop	r15
    1784:	ef 90       	pop	r14
    1786:	08 95       	ret

00001788 <rtc_num2datestr>:
    1788:	4f 92       	push	r4
    178a:	5f 92       	push	r5
    178c:	6f 92       	push	r6
    178e:	7f 92       	push	r7
    1790:	8f 92       	push	r8
    1792:	9f 92       	push	r9
    1794:	af 92       	push	r10
    1796:	bf 92       	push	r11
    1798:	cf 92       	push	r12
    179a:	df 92       	push	r13
    179c:	ef 92       	push	r14
    179e:	ff 92       	push	r15
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	00 d0       	rcall	.+0      	; 0x17a6 <rtc_num2datestr+0x1e>
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	2b 01       	movw	r4, r22
    17ac:	3c 01       	movw	r6, r24
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	a0 e0       	ldi	r26, 0x00	; 0
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	20 e8       	ldi	r18, 0x80	; 128
    17b8:	42 16       	cp	r4, r18
    17ba:	29 e5       	ldi	r18, 0x59	; 89
    17bc:	52 06       	cpc	r5, r18
    17be:	20 e6       	ldi	r18, 0x60	; 96
    17c0:	62 06       	cpc	r6, r18
    17c2:	20 ef       	ldi	r18, 0xF0	; 240
    17c4:	72 06       	cpc	r7, r18
    17c6:	18 f4       	brcc	.+6      	; 0x17ce <rtc_num2datestr+0x46>
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	dc 01       	movw	r26, r24
    17ce:	20 e9       	ldi	r18, 0x90	; 144
    17d0:	31 e0       	ldi	r19, 0x01	; 1
    17d2:	82 9f       	mul	r24, r18
    17d4:	50 01       	movw	r10, r0
    17d6:	83 9f       	mul	r24, r19
    17d8:	b0 0c       	add	r11, r0
    17da:	92 9f       	mul	r25, r18
    17dc:	b0 0c       	add	r11, r0
    17de:	11 24       	eor	r1, r1
    17e0:	80 e3       	ldi	r24, 0x30	; 48
    17e2:	a8 1a       	sub	r10, r24
    17e4:	88 ef       	ldi	r24, 0xF8	; 248
    17e6:	b8 0a       	sbc	r11, r24
    17e8:	c1 2c       	mov	r12, r1
    17ea:	d1 2c       	mov	r13, r1
    17ec:	76 01       	movw	r14, r12
    17ee:	c3 94       	inc	r12
    17f0:	20 e8       	ldi	r18, 0x80	; 128
    17f2:	42 16       	cp	r4, r18
    17f4:	29 e5       	ldi	r18, 0x59	; 89
    17f6:	52 06       	cpc	r5, r18
    17f8:	20 e6       	ldi	r18, 0x60	; 96
    17fa:	62 06       	cpc	r6, r18
    17fc:	20 ef       	ldi	r18, 0xF0	; 240
    17fe:	72 06       	cpc	r7, r18
    1800:	18 f4       	brcc	.+6      	; 0x1808 <rtc_num2datestr+0x80>
    1802:	c1 2c       	mov	r12, r1
    1804:	d1 2c       	mov	r13, r1
    1806:	76 01       	movw	r14, r12
    1808:	a7 01       	movw	r20, r14
    180a:	96 01       	movw	r18, r12
    180c:	60 e8       	ldi	r22, 0x80	; 128
    180e:	79 e5       	ldi	r23, 0x59	; 89
    1810:	80 e6       	ldi	r24, 0x60	; 96
    1812:	90 ef       	ldi	r25, 0xF0	; 240
    1814:	0e 94 1d 13 	call	0x263a	; 0x263a <__mulsi3>
    1818:	73 01       	movw	r14, r6
    181a:	62 01       	movw	r12, r4
    181c:	c6 1a       	sub	r12, r22
    181e:	d7 0a       	sbc	r13, r23
    1820:	e8 0a       	sbc	r14, r24
    1822:	f9 0a       	sbc	r15, r25
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	a0 e0       	ldi	r26, 0x00	; 0
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	c1 14       	cp	r12, r1
    182e:	22 ec       	ldi	r18, 0xC2	; 194
    1830:	d2 06       	cpc	r13, r18
    1832:	27 e1       	ldi	r18, 0x17	; 23
    1834:	e2 06       	cpc	r14, r18
    1836:	2c eb       	ldi	r18, 0xBC	; 188
    1838:	f2 06       	cpc	r15, r18
    183a:	18 f4       	brcc	.+6      	; 0x1842 <rtc_num2datestr+0xba>
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	dc 01       	movw	r26, r24
    1842:	44 e6       	ldi	r20, 0x64	; 100
    1844:	48 9f       	mul	r20, r24
    1846:	90 01       	movw	r18, r0
    1848:	49 9f       	mul	r20, r25
    184a:	30 0d       	add	r19, r0
    184c:	11 24       	eor	r1, r1
    184e:	a2 0e       	add	r10, r18
    1850:	b3 1e       	adc	r11, r19
    1852:	21 e0       	ldi	r18, 0x01	; 1
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e0       	ldi	r20, 0x00	; 0
    1858:	50 e0       	ldi	r21, 0x00	; 0
    185a:	c1 14       	cp	r12, r1
    185c:	82 ec       	ldi	r24, 0xC2	; 194
    185e:	d8 06       	cpc	r13, r24
    1860:	87 e1       	ldi	r24, 0x17	; 23
    1862:	e8 06       	cpc	r14, r24
    1864:	8c eb       	ldi	r24, 0xBC	; 188
    1866:	f8 06       	cpc	r15, r24
    1868:	18 f4       	brcc	.+6      	; 0x1870 <rtc_num2datestr+0xe8>
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	a9 01       	movw	r20, r18
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	72 ec       	ldi	r23, 0xC2	; 194
    1874:	87 e1       	ldi	r24, 0x17	; 23
    1876:	9c eb       	ldi	r25, 0xBC	; 188
    1878:	0e 94 1d 13 	call	0x263a	; 0x263a <__mulsi3>
    187c:	a7 01       	movw	r20, r14
    187e:	96 01       	movw	r18, r12
    1880:	26 1b       	sub	r18, r22
    1882:	37 0b       	sbc	r19, r23
    1884:	48 0b       	sbc	r20, r24
    1886:	59 0b       	sbc	r21, r25
    1888:	ca 01       	movw	r24, r20
    188a:	b9 01       	movw	r22, r18
    188c:	20 e8       	ldi	r18, 0x80	; 128
    188e:	3f e1       	ldi	r19, 0x1F	; 31
    1890:	46 e8       	ldi	r20, 0x86	; 134
    1892:	57 e0       	ldi	r21, 0x07	; 7
    1894:	0e 94 55 13 	call	0x26aa	; 0x26aa <__udivmodsi4>
    1898:	22 0f       	add	r18, r18
    189a:	33 1f       	adc	r19, r19
    189c:	22 0f       	add	r18, r18
    189e:	33 1f       	adc	r19, r19
    18a0:	a2 0e       	add	r10, r18
    18a2:	b3 1e       	adc	r11, r19
    18a4:	20 e8       	ldi	r18, 0x80	; 128
    18a6:	33 e3       	ldi	r19, 0x33	; 51
    18a8:	41 ee       	ldi	r20, 0xE1	; 225
    18aa:	51 e0       	ldi	r21, 0x01	; 1
    18ac:	0e 94 55 13 	call	0x26aa	; 0x26aa <__udivmodsi4>
    18b0:	75 01       	movw	r14, r10
    18b2:	e2 0e       	add	r14, r18
    18b4:	f3 1e       	adc	r15, r19
    18b6:	20 e8       	ldi	r18, 0x80	; 128
    18b8:	31 e5       	ldi	r19, 0x51	; 81
    18ba:	41 e0       	ldi	r20, 0x01	; 1
    18bc:	50 e0       	ldi	r21, 0x00	; 0
    18be:	0e 94 55 13 	call	0x26aa	; 0x26aa <__udivmodsi4>
    18c2:	4b 01       	movw	r8, r22
    18c4:	5c 01       	movw	r10, r24
    18c6:	3a 83       	std	Y+2, r19	; 0x02
    18c8:	29 83       	std	Y+1, r18	; 0x01
    18ca:	be 01       	movw	r22, r28
    18cc:	6f 5f       	subi	r22, 0xFF	; 255
    18ce:	7f 4f       	sbci	r23, 0xFF	; 255
    18d0:	c7 01       	movw	r24, r14
    18d2:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <get_month>
    18d6:	d8 2e       	mov	r13, r24
    18d8:	c5 01       	movw	r24, r10
    18da:	b4 01       	movw	r22, r8
    18dc:	20 e1       	ldi	r18, 0x10	; 16
    18de:	3e e0       	ldi	r19, 0x0E	; 14
    18e0:	40 e0       	ldi	r20, 0x00	; 0
    18e2:	50 e0       	ldi	r21, 0x00	; 0
    18e4:	0e 94 55 13 	call	0x26aa	; 0x26aa <__udivmodsi4>
    18e8:	29 01       	movw	r4, r18
    18ea:	3a 01       	movw	r6, r20
    18ec:	4b 01       	movw	r8, r22
    18ee:	5c 01       	movw	r10, r24
    18f0:	6c eb       	ldi	r22, 0xBC	; 188
    18f2:	71 e0       	ldi	r23, 0x01	; 1
    18f4:	89 e4       	ldi	r24, 0x49	; 73
    18f6:	91 e0       	ldi	r25, 0x01	; 1
    18f8:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <str_cpy>
    18fc:	6d 2d       	mov	r22, r13
    18fe:	70 e0       	ldi	r23, 0x00	; 0
    1900:	6f 5f       	subi	r22, 0xFF	; 255
    1902:	7f 4f       	sbci	r23, 0xFF	; 255
    1904:	42 e0       	ldi	r20, 0x02	; 2
    1906:	89 e4       	ldi	r24, 0x49	; 73
    1908:	91 e0       	ldi	r25, 0x01	; 1
    190a:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <str_writeudec16>
    190e:	69 81       	ldd	r22, Y+1	; 0x01
    1910:	7a 81       	ldd	r23, Y+2	; 0x02
    1912:	6f 5f       	subi	r22, 0xFF	; 255
    1914:	7f 4f       	sbci	r23, 0xFF	; 255
    1916:	42 e0       	ldi	r20, 0x02	; 2
    1918:	8c e4       	ldi	r24, 0x4C	; 76
    191a:	91 e0       	ldi	r25, 0x01	; 1
    191c:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <str_writeudec16>
    1920:	44 e0       	ldi	r20, 0x04	; 4
    1922:	b7 01       	movw	r22, r14
    1924:	8f e4       	ldi	r24, 0x4F	; 79
    1926:	91 e0       	ldi	r25, 0x01	; 1
    1928:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <str_writeudec16>
    192c:	42 e0       	ldi	r20, 0x02	; 2
    192e:	b2 01       	movw	r22, r4
    1930:	84 e5       	ldi	r24, 0x54	; 84
    1932:	91 e0       	ldi	r25, 0x01	; 1
    1934:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <str_writeudec16>
    1938:	c5 01       	movw	r24, r10
    193a:	b4 01       	movw	r22, r8
    193c:	2c e3       	ldi	r18, 0x3C	; 60
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e0       	ldi	r20, 0x00	; 0
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	0e 94 55 13 	call	0x26aa	; 0x26aa <__udivmodsi4>
    1948:	49 01       	movw	r8, r18
    194a:	5a 01       	movw	r10, r20
    194c:	6b 01       	movw	r12, r22
    194e:	7c 01       	movw	r14, r24
    1950:	42 e0       	ldi	r20, 0x02	; 2
    1952:	b4 01       	movw	r22, r8
    1954:	87 e5       	ldi	r24, 0x57	; 87
    1956:	91 e0       	ldi	r25, 0x01	; 1
    1958:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <str_writeudec16>
    195c:	42 e0       	ldi	r20, 0x02	; 2
    195e:	b6 01       	movw	r22, r12
    1960:	8a e5       	ldi	r24, 0x5A	; 90
    1962:	91 e0       	ldi	r25, 0x01	; 1
    1964:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <str_writeudec16>
    1968:	89 e4       	ldi	r24, 0x49	; 73
    196a:	91 e0       	ldi	r25, 0x01	; 1
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	df 91       	pop	r29
    1972:	cf 91       	pop	r28
    1974:	ff 90       	pop	r15
    1976:	ef 90       	pop	r14
    1978:	df 90       	pop	r13
    197a:	cf 90       	pop	r12
    197c:	bf 90       	pop	r11
    197e:	af 90       	pop	r10
    1980:	9f 90       	pop	r9
    1982:	8f 90       	pop	r8
    1984:	7f 90       	pop	r7
    1986:	6f 90       	pop	r6
    1988:	5f 90       	pop	r5
    198a:	4f 90       	pop	r4
    198c:	08 95       	ret

0000198e <rtc_get_date_string>:
    198e:	0f 93       	push	r16
    1990:	1f 93       	push	r17
    1992:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <timer1_get>
    1996:	00 91 0e 03 	lds	r16, 0x030E	; 0x80030e <rtc_base>
    199a:	10 91 0f 03 	lds	r17, 0x030F	; 0x80030f <rtc_base+0x1>
    199e:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <rtc_base+0x2>
    19a2:	30 91 11 03 	lds	r19, 0x0311	; 0x800311 <rtc_base+0x3>
    19a6:	60 0f       	add	r22, r16
    19a8:	71 1f       	adc	r23, r17
    19aa:	82 1f       	adc	r24, r18
    19ac:	93 1f       	adc	r25, r19
    19ae:	1f 91       	pop	r17
    19b0:	0f 91       	pop	r16
    19b2:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <rtc_num2datestr>

000019b6 <str_cpy>:
    19b6:	fc 01       	movw	r30, r24
    19b8:	db 01       	movw	r26, r22
    19ba:	8d 91       	ld	r24, X+
    19bc:	bd 01       	movw	r22, r26
    19be:	88 23       	and	r24, r24
    19c0:	11 f0       	breq	.+4      	; 0x19c6 <str_cpy+0x10>
    19c2:	81 93       	st	Z+, r24
    19c4:	f9 cf       	rjmp	.-14     	; 0x19b8 <str_cpy+0x2>
    19c6:	10 82       	st	Z, r1
    19c8:	08 95       	ret

000019ca <str_writeudec16>:
    19ca:	9f 92       	push	r9
    19cc:	af 92       	push	r10
    19ce:	bf 92       	push	r11
    19d0:	cf 92       	push	r12
    19d2:	df 92       	push	r13
    19d4:	ef 92       	push	r14
    19d6:	ff 92       	push	r15
    19d8:	0f 93       	push	r16
    19da:	1f 93       	push	r17
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    19e0:	00 d0       	rcall	.+0      	; 0x19e2 <str_writeudec16+0x18>
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <str_writeudec16+0x1a>
    19e4:	1f 92       	push	r1
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	fc 01       	movw	r30, r24
    19ec:	6b 01       	movw	r12, r22
    19ee:	9e 01       	movw	r18, r28
    19f0:	2f 5f       	subi	r18, 0xFF	; 255
    19f2:	3f 4f       	sbci	r19, 0xFF	; 255
    19f4:	8e 01       	movw	r16, r28
    19f6:	0a 5f       	subi	r16, 0xFA	; 250
    19f8:	1f 4f       	sbci	r17, 0xFF	; 255
    19fa:	ee 24       	eor	r14, r14
    19fc:	e3 94       	inc	r14
    19fe:	f1 2c       	mov	r15, r1
    1a00:	9a e0       	ldi	r25, 0x0A	; 10
    1a02:	99 2e       	mov	r9, r25
    1a04:	9e 9c       	mul	r9, r14
    1a06:	50 01       	movw	r10, r0
    1a08:	9f 9c       	mul	r9, r15
    1a0a:	b0 0c       	add	r11, r0
    1a0c:	11 24       	eor	r1, r1
    1a0e:	c6 01       	movw	r24, r12
    1a10:	b5 01       	movw	r22, r10
    1a12:	0e 94 2d 13 	call	0x265a	; 0x265a <__udivmodhi4>
    1a16:	b7 01       	movw	r22, r14
    1a18:	0e 94 2d 13 	call	0x265a	; 0x265a <__udivmodhi4>
    1a1c:	d9 01       	movw	r26, r18
    1a1e:	6d 93       	st	X+, r22
    1a20:	9d 01       	movw	r18, r26
    1a22:	c6 1a       	sub	r12, r22
    1a24:	d1 08       	sbc	r13, r1
    1a26:	67 fd       	sbrc	r22, 7
    1a28:	d3 94       	inc	r13
    1a2a:	75 01       	movw	r14, r10
    1a2c:	a0 17       	cp	r26, r16
    1a2e:	b1 07       	cpc	r27, r17
    1a30:	49 f7       	brne	.-46     	; 0x1a04 <str_writeudec16+0x3a>
    1a32:	60 e0       	ldi	r22, 0x00	; 0
    1a34:	70 e0       	ldi	r23, 0x00	; 0
    1a36:	84 e0       	ldi	r24, 0x04	; 4
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	50 e0       	ldi	r21, 0x00	; 0
    1a3c:	d8 01       	movw	r26, r16
    1a3e:	2e 91       	ld	r18, -X
    1a40:	8d 01       	movw	r16, r26
    1a42:	21 11       	cpse	r18, r1
    1a44:	05 c0       	rjmp	.+10     	; 0x1a50 <str_writeudec16+0x86>
    1a46:	61 15       	cp	r22, r1
    1a48:	71 05       	cpc	r23, r1
    1a4a:	11 f4       	brne	.+4      	; 0x1a50 <str_writeudec16+0x86>
    1a4c:	00 97       	sbiw	r24, 0x00	; 0
    1a4e:	41 f4       	brne	.+16     	; 0x1a60 <str_writeudec16+0x96>
    1a50:	84 17       	cp	r24, r20
    1a52:	95 07       	cpc	r25, r21
    1a54:	2c f4       	brge	.+10     	; 0x1a60 <str_writeudec16+0x96>
    1a56:	20 5d       	subi	r18, 0xD0	; 208
    1a58:	21 93       	st	Z+, r18
    1a5a:	61 e0       	ldi	r22, 0x01	; 1
    1a5c:	70 e0       	ldi	r23, 0x00	; 0
    1a5e:	04 c0       	rjmp	.+8      	; 0x1a68 <str_writeudec16+0x9e>
    1a60:	84 17       	cp	r24, r20
    1a62:	95 07       	cpc	r25, r21
    1a64:	0c f4       	brge	.+2      	; 0x1a68 <str_writeudec16+0x9e>
    1a66:	31 96       	adiw	r30, 0x01	; 1
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	40 f7       	brcc	.-48     	; 0x1a3c <str_writeudec16+0x72>
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	df 91       	pop	r29
    1a78:	cf 91       	pop	r28
    1a7a:	1f 91       	pop	r17
    1a7c:	0f 91       	pop	r16
    1a7e:	ff 90       	pop	r15
    1a80:	ef 90       	pop	r14
    1a82:	df 90       	pop	r13
    1a84:	cf 90       	pop	r12
    1a86:	bf 90       	pop	r11
    1a88:	af 90       	pop	r10
    1a8a:	9f 90       	pop	r9
    1a8c:	08 95       	ret

00001a8e <uart_init>:
    1a8e:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <serial_init>
    1a92:	78 94       	sei
    1a94:	08 95       	ret

00001a96 <uart_writechar>:
    1a96:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <serial_writechar>

00001a9a <uart_writestr>:
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
    1a9e:	ec 01       	movw	r28, r24
    1aa0:	89 91       	ld	r24, Y+
    1aa2:	88 23       	and	r24, r24
    1aa4:	19 f0       	breq	.+6      	; 0x1aac <uart_writestr+0x12>
    1aa6:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <serial_writechar>
    1aaa:	fa cf       	rjmp	.-12     	; 0x1aa0 <uart_writestr+0x6>
    1aac:	df 91       	pop	r29
    1aae:	cf 91       	pop	r28
    1ab0:	08 95       	ret

00001ab2 <uart_writehex8>:
    1ab2:	cf 93       	push	r28
    1ab4:	c8 2f       	mov	r28, r24
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	24 e0       	ldi	r18, 0x04	; 4
    1aba:	95 95       	asr	r25
    1abc:	87 95       	ror	r24
    1abe:	2a 95       	dec	r18
    1ac0:	e1 f7       	brne	.-8      	; 0x1aba <uart_writehex8+0x8>
    1ac2:	8a 30       	cpi	r24, 0x0A	; 10
    1ac4:	10 f4       	brcc	.+4      	; 0x1aca <uart_writehex8+0x18>
    1ac6:	80 5d       	subi	r24, 0xD0	; 208
    1ac8:	01 c0       	rjmp	.+2      	; 0x1acc <uart_writehex8+0x1a>
    1aca:	89 5c       	subi	r24, 0xC9	; 201
    1acc:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <serial_writechar>
    1ad0:	8c 2f       	mov	r24, r28
    1ad2:	8f 70       	andi	r24, 0x0F	; 15
    1ad4:	8a 30       	cpi	r24, 0x0A	; 10
    1ad6:	10 f0       	brcs	.+4      	; 0x1adc <uart_writehex8+0x2a>
    1ad8:	89 5c       	subi	r24, 0xC9	; 201
    1ada:	01 c0       	rjmp	.+2      	; 0x1ade <uart_writehex8+0x2c>
    1adc:	80 5d       	subi	r24, 0xD0	; 208
    1ade:	cf 91       	pop	r28
    1ae0:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <serial_writechar>

00001ae4 <uart_writehex16>:
    1ae4:	cf 93       	push	r28
    1ae6:	c8 2f       	mov	r28, r24
    1ae8:	89 2f       	mov	r24, r25
    1aea:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <uart_writehex8>
    1aee:	8c 2f       	mov	r24, r28
    1af0:	cf 91       	pop	r28
    1af2:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <uart_writehex8>

00001af6 <uart_writedec32>:
    1af6:	2f 92       	push	r2
    1af8:	3f 92       	push	r3
    1afa:	4f 92       	push	r4
    1afc:	5f 92       	push	r5
    1afe:	6f 92       	push	r6
    1b00:	7f 92       	push	r7
    1b02:	8f 92       	push	r8
    1b04:	9f 92       	push	r9
    1b06:	af 92       	push	r10
    1b08:	bf 92       	push	r11
    1b0a:	cf 92       	push	r12
    1b0c:	df 92       	push	r13
    1b0e:	ef 92       	push	r14
    1b10:	ff 92       	push	r15
    1b12:	0f 93       	push	r16
    1b14:	1f 93       	push	r17
    1b16:	cf 93       	push	r28
    1b18:	df 93       	push	r29
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	63 97       	sbiw	r28, 0x13	; 19
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	6b 01       	movw	r12, r22
    1b2c:	7c 01       	movw	r14, r24
    1b2e:	97 ff       	sbrs	r25, 7
    1b30:	0d c0       	rjmp	.+26     	; 0x1b4c <uart_writedec32+0x56>
    1b32:	f0 94       	com	r15
    1b34:	e0 94       	com	r14
    1b36:	d0 94       	com	r13
    1b38:	c0 94       	com	r12
    1b3a:	c1 1c       	adc	r12, r1
    1b3c:	d1 1c       	adc	r13, r1
    1b3e:	e1 1c       	adc	r14, r1
    1b40:	f1 1c       	adc	r15, r1
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	9b 8b       	std	Y+19, r25	; 0x13
    1b48:	8a 8b       	std	Y+18, r24	; 0x12
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <uart_writedec32+0x5a>
    1b4c:	1b 8a       	std	Y+19, r1	; 0x13
    1b4e:	1a 8a       	std	Y+18, r1	; 0x12
    1b50:	fe 01       	movw	r30, r28
    1b52:	31 96       	adiw	r30, 0x01	; 1
    1b54:	5f 01       	movw	r10, r30
    1b56:	8e 01       	movw	r16, r28
    1b58:	05 5f       	subi	r16, 0xF5	; 245
    1b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5c:	f9 8b       	std	Y+17, r31	; 0x11
    1b5e:	e8 8b       	std	Y+16, r30	; 0x10
    1b60:	66 24       	eor	r6, r6
    1b62:	63 94       	inc	r6
    1b64:	71 2c       	mov	r7, r1
    1b66:	81 2c       	mov	r8, r1
    1b68:	91 2c       	mov	r9, r1
    1b6a:	aa e0       	ldi	r26, 0x0A	; 10
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	93 01       	movw	r18, r6
    1b70:	a4 01       	movw	r20, r8
    1b72:	0e 94 a5 13 	call	0x274a	; 0x274a <__muluhisi3>
    1b76:	1b 01       	movw	r2, r22
    1b78:	2c 01       	movw	r4, r24
    1b7a:	c7 01       	movw	r24, r14
    1b7c:	b6 01       	movw	r22, r12
    1b7e:	91 01       	movw	r18, r2
    1b80:	a2 01       	movw	r20, r4
    1b82:	0e 94 77 13 	call	0x26ee	; 0x26ee <__divmodsi4>
    1b86:	93 01       	movw	r18, r6
    1b88:	a4 01       	movw	r20, r8
    1b8a:	0e 94 77 13 	call	0x26ee	; 0x26ee <__divmodsi4>
    1b8e:	e8 89       	ldd	r30, Y+16	; 0x10
    1b90:	f9 89       	ldd	r31, Y+17	; 0x11
    1b92:	21 93       	st	Z+, r18
    1b94:	f9 8b       	std	Y+17, r31	; 0x11
    1b96:	e8 8b       	std	Y+16, r30	; 0x10
    1b98:	82 2f       	mov	r24, r18
    1b9a:	22 0f       	add	r18, r18
    1b9c:	99 0b       	sbc	r25, r25
    1b9e:	aa 0b       	sbc	r26, r26
    1ba0:	bb 0b       	sbc	r27, r27
    1ba2:	c8 1a       	sub	r12, r24
    1ba4:	d9 0a       	sbc	r13, r25
    1ba6:	ea 0a       	sbc	r14, r26
    1ba8:	fb 0a       	sbc	r15, r27
    1baa:	31 01       	movw	r6, r2
    1bac:	42 01       	movw	r8, r4
    1bae:	0e 17       	cp	r16, r30
    1bb0:	1f 07       	cpc	r17, r31
    1bb2:	d9 f6       	brne	.-74     	; 0x1b6a <uart_writedec32+0x74>
    1bb4:	8a 89       	ldd	r24, Y+18	; 0x12
    1bb6:	9b 89       	ldd	r25, Y+19	; 0x13
    1bb8:	89 2b       	or	r24, r25
    1bba:	11 f0       	breq	.+4      	; 0x1bc0 <uart_writedec32+0xca>
    1bbc:	8d e2       	ldi	r24, 0x2D	; 45
    1bbe:	01 c0       	rjmp	.+2      	; 0x1bc2 <uart_writedec32+0xcc>
    1bc0:	80 e2       	ldi	r24, 0x20	; 32
    1bc2:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <serial_writechar>
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	f8 01       	movw	r30, r16
    1bcc:	82 91       	ld	r24, -Z
    1bce:	8f 01       	movw	r16, r30
    1bd0:	81 11       	cpse	r24, r1
    1bd2:	06 c0       	rjmp	.+12     	; 0x1be0 <uart_writedec32+0xea>
    1bd4:	21 15       	cp	r18, r1
    1bd6:	31 05       	cpc	r19, r1
    1bd8:	19 f4       	brne	.+6      	; 0x1be0 <uart_writedec32+0xea>
    1bda:	ea 15       	cp	r30, r10
    1bdc:	fb 05       	cpc	r31, r11
    1bde:	29 f4       	brne	.+10     	; 0x1bea <uart_writedec32+0xf4>
    1be0:	80 5d       	subi	r24, 0xD0	; 208
    1be2:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <serial_writechar>
    1be6:	21 e0       	ldi	r18, 0x01	; 1
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	0a 15       	cp	r16, r10
    1bec:	1b 05       	cpc	r17, r11
    1bee:	69 f7       	brne	.-38     	; 0x1bca <uart_writedec32+0xd4>
    1bf0:	63 96       	adiw	r28, 0x13	; 19
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	df 91       	pop	r29
    1bfe:	cf 91       	pop	r28
    1c00:	1f 91       	pop	r17
    1c02:	0f 91       	pop	r16
    1c04:	ff 90       	pop	r15
    1c06:	ef 90       	pop	r14
    1c08:	df 90       	pop	r13
    1c0a:	cf 90       	pop	r12
    1c0c:	bf 90       	pop	r11
    1c0e:	af 90       	pop	r10
    1c10:	9f 90       	pop	r9
    1c12:	8f 90       	pop	r8
    1c14:	7f 90       	pop	r7
    1c16:	6f 90       	pop	r6
    1c18:	5f 90       	pop	r5
    1c1a:	4f 90       	pop	r4
    1c1c:	3f 90       	pop	r3
    1c1e:	2f 90       	pop	r2
    1c20:	08 95       	ret

00001c22 <dump_eeprom>:
    1c22:	2f 92       	push	r2
    1c24:	3f 92       	push	r3
    1c26:	4f 92       	push	r4
    1c28:	5f 92       	push	r5
    1c2a:	6f 92       	push	r6
    1c2c:	7f 92       	push	r7
    1c2e:	8f 92       	push	r8
    1c30:	9f 92       	push	r9
    1c32:	af 92       	push	r10
    1c34:	bf 92       	push	r11
    1c36:	cf 92       	push	r12
    1c38:	df 92       	push	r13
    1c3a:	ef 92       	push	r14
    1c3c:	ff 92       	push	r15
    1c3e:	0f 93       	push	r16
    1c40:	1f 93       	push	r17
    1c42:	cf 93       	push	r28
    1c44:	df 93       	push	r29
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	64 97       	sbiw	r28, 0x14	; 20
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	f8 94       	cli
    1c50:	de bf       	out	0x3e, r29	; 62
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	cd bf       	out	0x3d, r28	; 61
    1c56:	8c 01       	movw	r16, r24
    1c58:	61 15       	cp	r22, r1
    1c5a:	71 05       	cpc	r23, r1
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <dump_eeprom+0x3e>
    1c5e:	92 c0       	rjmp	.+292    	; 0x1d84 <dump_eeprom+0x162>
    1c60:	81 2c       	mov	r8, r1
    1c62:	91 2c       	mov	r9, r1
    1c64:	54 01       	movw	r10, r8
    1c66:	cb 01       	movw	r24, r22
    1c68:	a0 e0       	ldi	r26, 0x00	; 0
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	89 8b       	std	Y+17, r24	; 0x11
    1c6e:	9a 8b       	std	Y+18, r25	; 0x12
    1c70:	ab 8b       	std	Y+19, r26	; 0x13
    1c72:	bc 8b       	std	Y+20, r27	; 0x14
    1c74:	de 01       	movw	r26, r28
    1c76:	11 96       	adiw	r26, 0x01	; 1
    1c78:	1d 01       	movw	r2, r26
    1c7a:	89 89       	ldd	r24, Y+17	; 0x11
    1c7c:	9a 89       	ldd	r25, Y+18	; 0x12
    1c7e:	ab 89       	ldd	r26, Y+19	; 0x13
    1c80:	bc 89       	ldd	r27, Y+20	; 0x14
    1c82:	88 16       	cp	r8, r24
    1c84:	99 06       	cpc	r9, r25
    1c86:	aa 06       	cpc	r10, r26
    1c88:	bb 06       	cpc	r11, r27
    1c8a:	08 f0       	brcs	.+2      	; 0x1c8e <dump_eeprom+0x6c>
    1c8c:	7b c0       	rjmp	.+246    	; 0x1d84 <dump_eeprom+0x162>
    1c8e:	81 2f       	mov	r24, r17
    1c90:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <uart_writehex8>
    1c94:	80 2f       	mov	r24, r16
    1c96:	80 7f       	andi	r24, 0xF0	; 240
    1c98:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <uart_writehex8>
    1c9c:	80 e2       	ldi	r24, 0x20	; 32
    1c9e:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <uart_writechar>
    1ca2:	61 01       	movw	r12, r2
    1ca4:	78 01       	movw	r14, r16
    1ca6:	41 2c       	mov	r4, r1
    1ca8:	51 2c       	mov	r5, r1
    1caa:	32 01       	movw	r6, r4
    1cac:	41 e0       	ldi	r20, 0x01	; 1
    1cae:	b6 01       	movw	r22, r12
    1cb0:	c7 01       	movw	r24, r14
    1cb2:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <eeprom_readbuf>
    1cb6:	bf ef       	ldi	r27, 0xFF	; 255
    1cb8:	eb 1a       	sub	r14, r27
    1cba:	fb 0a       	sbc	r15, r27
    1cbc:	ef ef       	ldi	r30, 0xFF	; 255
    1cbe:	4e 1a       	sub	r4, r30
    1cc0:	5e 0a       	sbc	r5, r30
    1cc2:	6e 0a       	sbc	r6, r30
    1cc4:	7e 0a       	sbc	r7, r30
    1cc6:	ff ef       	ldi	r31, 0xFF	; 255
    1cc8:	8f 1a       	sub	r8, r31
    1cca:	9f 0a       	sbc	r9, r31
    1ccc:	af 0a       	sbc	r10, r31
    1cce:	bf 0a       	sbc	r11, r31
    1cd0:	89 89       	ldd	r24, Y+17	; 0x11
    1cd2:	9a 89       	ldd	r25, Y+18	; 0x12
    1cd4:	ab 89       	ldd	r26, Y+19	; 0x13
    1cd6:	bc 89       	ldd	r27, Y+20	; 0x14
    1cd8:	88 16       	cp	r8, r24
    1cda:	99 06       	cpc	r9, r25
    1cdc:	aa 06       	cpc	r10, r26
    1cde:	bb 06       	cpc	r11, r27
    1ce0:	50 f0       	brcs	.+20     	; 0x1cf6 <dump_eeprom+0xd4>
    1ce2:	68 01       	movw	r12, r16
    1ce4:	9f e0       	ldi	r25, 0x0F	; 15
    1ce6:	c9 22       	and	r12, r25
    1ce8:	dd 24       	eor	r13, r13
    1cea:	00 e0       	ldi	r16, 0x00	; 0
    1cec:	10 e0       	ldi	r17, 0x00	; 0
    1cee:	32 01       	movw	r6, r4
    1cf0:	6c 0c       	add	r6, r12
    1cf2:	7d 1c       	adc	r7, r13
    1cf4:	09 c0       	rjmp	.+18     	; 0x1d08 <dump_eeprom+0xe6>
    1cf6:	af ef       	ldi	r26, 0xFF	; 255
    1cf8:	ca 1a       	sub	r12, r26
    1cfa:	da 0a       	sbc	r13, r26
    1cfc:	c7 01       	movw	r24, r14
    1cfe:	8f 70       	andi	r24, 0x0F	; 15
    1d00:	99 27       	eor	r25, r25
    1d02:	89 2b       	or	r24, r25
    1d04:	99 f6       	brne	.-90     	; 0x1cac <dump_eeprom+0x8a>
    1d06:	ed cf       	rjmp	.-38     	; 0x1ce2 <dump_eeprom+0xc0>
    1d08:	0c 15       	cp	r16, r12
    1d0a:	1d 05       	cpc	r17, r13
    1d0c:	18 f0       	brcs	.+6      	; 0x1d14 <dump_eeprom+0xf2>
    1d0e:	06 15       	cp	r16, r6
    1d10:	17 05       	cpc	r17, r7
    1d12:	28 f0       	brcs	.+10     	; 0x1d1e <dump_eeprom+0xfc>
    1d14:	80 ed       	ldi	r24, 0xD0	; 208
    1d16:	91 e0       	ldi	r25, 0x01	; 1
    1d18:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <uart_writestr>
    1d1c:	0b c0       	rjmp	.+22     	; 0x1d34 <dump_eeprom+0x112>
    1d1e:	f8 01       	movw	r30, r16
    1d20:	ec 19       	sub	r30, r12
    1d22:	fd 09       	sbc	r31, r13
    1d24:	e2 0d       	add	r30, r2
    1d26:	f3 1d       	adc	r31, r3
    1d28:	80 81       	ld	r24, Z
    1d2a:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <uart_writehex8>
    1d2e:	80 e2       	ldi	r24, 0x20	; 32
    1d30:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <uart_writechar>
    1d34:	0f 5f       	subi	r16, 0xFF	; 255
    1d36:	1f 4f       	sbci	r17, 0xFF	; 255
    1d38:	00 31       	cpi	r16, 0x10	; 16
    1d3a:	11 05       	cpc	r17, r1
    1d3c:	29 f7       	brne	.-54     	; 0x1d08 <dump_eeprom+0xe6>
    1d3e:	00 e0       	ldi	r16, 0x00	; 0
    1d40:	10 e0       	ldi	r17, 0x00	; 0
    1d42:	c0 16       	cp	r12, r16
    1d44:	d1 06       	cpc	r13, r17
    1d46:	31 f0       	breq	.+12     	; 0x1d54 <dump_eeprom+0x132>
    1d48:	80 e2       	ldi	r24, 0x20	; 32
    1d4a:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <uart_writechar>
    1d4e:	0f 5f       	subi	r16, 0xFF	; 255
    1d50:	1f 4f       	sbci	r17, 0xFF	; 255
    1d52:	f7 cf       	rjmp	.-18     	; 0x1d42 <dump_eeprom+0x120>
    1d54:	81 01       	movw	r16, r2
    1d56:	c8 01       	movw	r24, r16
    1d58:	82 19       	sub	r24, r2
    1d5a:	93 09       	sbc	r25, r3
    1d5c:	84 15       	cp	r24, r4
    1d5e:	95 05       	cpc	r25, r5
    1d60:	58 f4       	brcc	.+22     	; 0x1d78 <dump_eeprom+0x156>
    1d62:	f8 01       	movw	r30, r16
    1d64:	81 91       	ld	r24, Z+
    1d66:	8f 01       	movw	r16, r30
    1d68:	90 ee       	ldi	r25, 0xE0	; 224
    1d6a:	98 0f       	add	r25, r24
    1d6c:	90 36       	cpi	r25, 0x60	; 96
    1d6e:	08 f0       	brcs	.+2      	; 0x1d72 <dump_eeprom+0x150>
    1d70:	8e e2       	ldi	r24, 0x2E	; 46
    1d72:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <uart_writechar>
    1d76:	ef cf       	rjmp	.-34     	; 0x1d56 <dump_eeprom+0x134>
    1d78:	84 ed       	ldi	r24, 0xD4	; 212
    1d7a:	91 e0       	ldi	r25, 0x01	; 1
    1d7c:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <uart_writestr>
    1d80:	87 01       	movw	r16, r14
    1d82:	7b cf       	rjmp	.-266    	; 0x1c7a <dump_eeprom+0x58>
    1d84:	64 96       	adiw	r28, 0x14	; 20
    1d86:	0f b6       	in	r0, 0x3f	; 63
    1d88:	f8 94       	cli
    1d8a:	de bf       	out	0x3e, r29	; 62
    1d8c:	0f be       	out	0x3f, r0	; 63
    1d8e:	cd bf       	out	0x3d, r28	; 61
    1d90:	df 91       	pop	r29
    1d92:	cf 91       	pop	r28
    1d94:	1f 91       	pop	r17
    1d96:	0f 91       	pop	r16
    1d98:	ff 90       	pop	r15
    1d9a:	ef 90       	pop	r14
    1d9c:	df 90       	pop	r13
    1d9e:	cf 90       	pop	r12
    1da0:	bf 90       	pop	r11
    1da2:	af 90       	pop	r10
    1da4:	9f 90       	pop	r9
    1da6:	8f 90       	pop	r8
    1da8:	7f 90       	pop	r7
    1daa:	6f 90       	pop	r6
    1dac:	5f 90       	pop	r5
    1dae:	4f 90       	pop	r4
    1db0:	3f 90       	pop	r3
    1db2:	2f 90       	pop	r2
    1db4:	08 95       	ret

00001db6 <serial_init>:
    1db6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1dba:	87 e6       	ldi	r24, 0x67	; 103
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1dc2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1dc6:	e1 ec       	ldi	r30, 0xC1	; 193
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	88 e1       	ldi	r24, 0x18	; 24
    1dcc:	80 83       	st	Z, r24
    1dce:	86 e0       	ldi	r24, 0x06	; 6
    1dd0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    1dd4:	80 81       	ld	r24, Z
    1dd6:	80 6a       	ori	r24, 0xA0	; 160
    1dd8:	80 83       	st	Z, r24
    1dda:	08 95       	ret

00001ddc <__vector_18>:
    1ddc:	1f 92       	push	r1
    1dde:	0f 92       	push	r0
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	0f 92       	push	r0
    1de4:	11 24       	eor	r1, r1
    1de6:	2f 93       	push	r18
    1de8:	8f 93       	push	r24
    1dea:	9f 93       	push	r25
    1dec:	ef 93       	push	r30
    1dee:	ff 93       	push	r31
    1df0:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <rxtail>
    1df4:	20 91 6b 02 	lds	r18, 0x026B	; 0x80026b <rxhead>
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	82 1b       	sub	r24, r18
    1dfc:	91 09       	sbc	r25, r1
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	8f 73       	andi	r24, 0x3F	; 63
    1e02:	99 27       	eor	r25, r25
    1e04:	89 2b       	or	r24, r25
    1e06:	79 f0       	breq	.+30     	; 0x1e26 <__vector_18+0x4a>
    1e08:	e0 91 6b 02 	lds	r30, 0x026B	; 0x80026b <rxhead>
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1e12:	ee 5e       	subi	r30, 0xEE	; 238
    1e14:	fc 4f       	sbci	r31, 0xFC	; 252
    1e16:	80 83       	st	Z, r24
    1e18:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <rxhead>
    1e1c:	8f 5f       	subi	r24, 0xFF	; 255
    1e1e:	8f 73       	andi	r24, 0x3F	; 63
    1e20:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <rxhead>
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <__vector_18+0x4e>
    1e26:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1e2a:	ff 91       	pop	r31
    1e2c:	ef 91       	pop	r30
    1e2e:	9f 91       	pop	r25
    1e30:	8f 91       	pop	r24
    1e32:	2f 91       	pop	r18
    1e34:	0f 90       	pop	r0
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	0f 90       	pop	r0
    1e3a:	1f 90       	pop	r1
    1e3c:	18 95       	reti

00001e3e <__vector_19>:
    1e3e:	1f 92       	push	r1
    1e40:	0f 92       	push	r0
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	0f 92       	push	r0
    1e46:	11 24       	eor	r1, r1
    1e48:	2f 93       	push	r18
    1e4a:	8f 93       	push	r24
    1e4c:	9f 93       	push	r25
    1e4e:	ef 93       	push	r30
    1e50:	ff 93       	push	r31
    1e52:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <txhead>
    1e56:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <txtail>
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	82 1b       	sub	r24, r18
    1e5e:	91 09       	sbc	r25, r1
    1e60:	8f 73       	andi	r24, 0x3F	; 63
    1e62:	99 27       	eor	r25, r25
    1e64:	89 2b       	or	r24, r25
    1e66:	79 f0       	breq	.+30     	; 0x1e86 <__vector_19+0x48>
    1e68:	e0 91 68 02 	lds	r30, 0x0268	; 0x800268 <txtail>
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	ee 5a       	subi	r30, 0xAE	; 174
    1e70:	fc 4f       	sbci	r31, 0xFC	; 252
    1e72:	80 81       	ld	r24, Z
    1e74:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1e78:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <txtail>
    1e7c:	8f 5f       	subi	r24, 0xFF	; 255
    1e7e:	8f 73       	andi	r24, 0x3F	; 63
    1e80:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <txtail>
    1e84:	05 c0       	rjmp	.+10     	; 0x1e90 <__vector_19+0x52>
    1e86:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1e8a:	8f 7d       	andi	r24, 0xDF	; 223
    1e8c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1e90:	ff 91       	pop	r31
    1e92:	ef 91       	pop	r30
    1e94:	9f 91       	pop	r25
    1e96:	8f 91       	pop	r24
    1e98:	2f 91       	pop	r18
    1e9a:	0f 90       	pop	r0
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	0f 90       	pop	r0
    1ea0:	1f 90       	pop	r1
    1ea2:	18 95       	reti

00001ea4 <serial_rxchars>:
    1ea4:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <rxhead>
    1ea8:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <rxtail>
    1eac:	89 1b       	sub	r24, r25
    1eae:	8f 73       	andi	r24, 0x3F	; 63
    1eb0:	08 95       	ret

00001eb2 <serial_popchar>:
    1eb2:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <rxhead>
    1eb6:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <rxtail>
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	82 1b       	sub	r24, r18
    1ebe:	91 09       	sbc	r25, r1
    1ec0:	8f 73       	andi	r24, 0x3F	; 63
    1ec2:	99 27       	eor	r25, r25
    1ec4:	89 2b       	or	r24, r25
    1ec6:	69 f0       	breq	.+26     	; 0x1ee2 <serial_popchar+0x30>
    1ec8:	e0 91 6a 02 	lds	r30, 0x026A	; 0x80026a <rxtail>
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	ee 5e       	subi	r30, 0xEE	; 238
    1ed0:	fc 4f       	sbci	r31, 0xFC	; 252
    1ed2:	80 81       	ld	r24, Z
    1ed4:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <rxtail>
    1ed8:	9f 5f       	subi	r25, 0xFF	; 255
    1eda:	9f 73       	andi	r25, 0x3F	; 63
    1edc:	90 93 6a 02 	sts	0x026A, r25	; 0x80026a <rxtail>
    1ee0:	08 95       	ret
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	08 95       	ret

00001ee6 <serial_writechar>:
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	07 fe       	sbrs	r0, 7
    1eea:	0e c0       	rjmp	.+28     	; 0x1f08 <serial_writechar+0x22>
    1eec:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <txtail>
    1ef0:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <txhead>
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	29 1b       	sub	r18, r25
    1ef8:	31 09       	sbc	r19, r1
    1efa:	21 50       	subi	r18, 0x01	; 1
    1efc:	31 09       	sbc	r19, r1
    1efe:	2f 73       	andi	r18, 0x3F	; 63
    1f00:	33 27       	eor	r19, r19
    1f02:	23 2b       	or	r18, r19
    1f04:	99 f3       	breq	.-26     	; 0x1eec <serial_writechar+0x6>
    1f06:	0d c0       	rjmp	.+26     	; 0x1f22 <serial_writechar+0x3c>
    1f08:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <txtail>
    1f0c:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <txhead>
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	29 1b       	sub	r18, r25
    1f14:	31 09       	sbc	r19, r1
    1f16:	21 50       	subi	r18, 0x01	; 1
    1f18:	31 09       	sbc	r19, r1
    1f1a:	2f 73       	andi	r18, 0x3F	; 63
    1f1c:	33 27       	eor	r19, r19
    1f1e:	23 2b       	or	r18, r19
    1f20:	61 f0       	breq	.+24     	; 0x1f3a <serial_writechar+0x54>
    1f22:	e0 91 69 02 	lds	r30, 0x0269	; 0x800269 <txhead>
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	ee 5a       	subi	r30, 0xAE	; 174
    1f2a:	fc 4f       	sbci	r31, 0xFC	; 252
    1f2c:	80 83       	st	Z, r24
    1f2e:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <txhead>
    1f32:	8f 5f       	subi	r24, 0xFF	; 255
    1f34:	8f 73       	andi	r24, 0x3F	; 63
    1f36:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <txhead>
    1f3a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1f3e:	80 62       	ori	r24, 0x20	; 32
    1f40:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1f44:	08 95       	ret

00001f46 <serial_writestr>:
    1f46:	1f 93       	push	r17
    1f48:	cf 93       	push	r28
    1f4a:	df 93       	push	r29
    1f4c:	ec 01       	movw	r28, r24
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	11 e0       	ldi	r17, 0x01	; 1
    1f52:	18 0f       	add	r17, r24
    1f54:	fe 01       	movw	r30, r28
    1f56:	e8 0f       	add	r30, r24
    1f58:	f1 1d       	adc	r31, r1
    1f5a:	80 81       	ld	r24, Z
    1f5c:	88 23       	and	r24, r24
    1f5e:	21 f0       	breq	.+8      	; 0x1f68 <serial_writestr+0x22>
    1f60:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <serial_writechar>
    1f64:	81 2f       	mov	r24, r17
    1f66:	f4 cf       	rjmp	.-24     	; 0x1f50 <serial_writestr+0xa>
    1f68:	df 91       	pop	r29
    1f6a:	cf 91       	pop	r28
    1f6c:	1f 91       	pop	r17
    1f6e:	08 95       	ret

00001f70 <serial_writestr_P>:
    1f70:	1f 93       	push	r17
    1f72:	cf 93       	push	r28
    1f74:	df 93       	push	r29
    1f76:	ec 01       	movw	r28, r24
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	11 e0       	ldi	r17, 0x01	; 1
    1f7c:	18 0f       	add	r17, r24
    1f7e:	fe 01       	movw	r30, r28
    1f80:	e8 0f       	add	r30, r24
    1f82:	f1 1d       	adc	r31, r1
    1f84:	84 91       	lpm	r24, Z
    1f86:	88 23       	and	r24, r24
    1f88:	21 f0       	breq	.+8      	; 0x1f92 <serial_writestr_P+0x22>
    1f8a:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <serial_writechar>
    1f8e:	81 2f       	mov	r24, r17
    1f90:	f4 cf       	rjmp	.-24     	; 0x1f7a <serial_writestr_P+0xa>
    1f92:	df 91       	pop	r29
    1f94:	cf 91       	pop	r28
    1f96:	1f 91       	pop	r17
    1f98:	08 95       	ret

00001f9a <_Z10delay_initv>:
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
    1f9e:	00 d0       	rcall	.+0      	; 0x1fa0 <_Z10delay_initv+0x6>
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    1fa4:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <_ZL11initialized>
    1fa8:	88 23       	and	r24, r24
    1faa:	89 f5       	brne	.+98     	; 0x200e <_Z10delay_initv+0x74>
    1fac:	8a ef       	ldi	r24, 0xFA	; 250
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	9a 83       	std	Y+2, r25	; 0x02
    1fb2:	89 83       	std	Y+1, r24	; 0x01
    1fb4:	87 e4       	ldi	r24, 0x47	; 71
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	29 81       	ldd	r18, Y+1	; 0x01
    1fba:	21 50       	subi	r18, 0x01	; 1
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	20 83       	st	Z, r18
    1fc0:	84 e4       	ldi	r24, 0x44	; 68
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	24 e4       	ldi	r18, 0x44	; 68
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	f9 01       	movw	r30, r18
    1fca:	20 81       	ld	r18, Z
    1fcc:	22 60       	ori	r18, 0x02	; 2
    1fce:	fc 01       	movw	r30, r24
    1fd0:	20 83       	st	Z, r18
    1fd2:	85 e4       	ldi	r24, 0x45	; 69
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	25 e4       	ldi	r18, 0x45	; 69
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	f9 01       	movw	r30, r18
    1fdc:	20 81       	ld	r18, Z
    1fde:	23 60       	ori	r18, 0x03	; 3
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	20 83       	st	Z, r18
    1fe4:	8f e5       	ldi	r24, 0x5F	; 95
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	2f e5       	ldi	r18, 0x5F	; 95
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	f9 01       	movw	r30, r18
    1fee:	20 81       	ld	r18, Z
    1ff0:	20 68       	ori	r18, 0x80	; 128
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	20 83       	st	Z, r18
    1ff6:	8e e6       	ldi	r24, 0x6E	; 110
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	2e e6       	ldi	r18, 0x6E	; 110
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	f9 01       	movw	r30, r18
    2000:	20 81       	ld	r18, Z
    2002:	22 60       	ori	r18, 0x02	; 2
    2004:	fc 01       	movw	r30, r24
    2006:	20 83       	st	Z, r18
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <_ZL11initialized>
    200e:	00 00       	nop
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	df 91       	pop	r29
    2016:	cf 91       	pop	r28
    2018:	08 95       	ret

0000201a <_Z9delay_getj>:
    201a:	cf 93       	push	r28
    201c:	df 93       	push	r29
    201e:	00 d0       	rcall	.+0      	; 0x2020 <_Z9delay_getj+0x6>
    2020:	00 d0       	rcall	.+0      	; 0x2022 <_Z9delay_getj+0x8>
    2022:	00 d0       	rcall	.+0      	; 0x2024 <_Z9delay_getj+0xa>
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    2028:	9e 83       	std	Y+6, r25	; 0x06
    202a:	8d 83       	std	Y+5, r24	; 0x05
    202c:	8f e5       	ldi	r24, 0x5F	; 95
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	fc 01       	movw	r30, r24
    2032:	80 81       	ld	r24, Z
    2034:	08 2e       	mov	r0, r24
    2036:	00 0c       	add	r0, r0
    2038:	99 0b       	sbc	r25, r25
    203a:	80 78       	andi	r24, 0x80	; 128
    203c:	99 27       	eor	r25, r25
    203e:	9a 83       	std	Y+2, r25	; 0x02
    2040:	89 83       	std	Y+1, r24	; 0x01
    2042:	8f e5       	ldi	r24, 0x5F	; 95
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	2f e5       	ldi	r18, 0x5F	; 95
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	f9 01       	movw	r30, r18
    204c:	20 81       	ld	r18, Z
    204e:	2f 77       	andi	r18, 0x7F	; 127
    2050:	fc 01       	movw	r30, r24
    2052:	20 83       	st	Z, r18
    2054:	8d 81       	ldd	r24, Y+5	; 0x05
    2056:	9e 81       	ldd	r25, Y+6	; 0x06
    2058:	88 0f       	add	r24, r24
    205a:	99 1f       	adc	r25, r25
    205c:	84 59       	subi	r24, 0x94	; 148
    205e:	9d 4f       	sbci	r25, 0xFD	; 253
    2060:	fc 01       	movw	r30, r24
    2062:	80 81       	ld	r24, Z
    2064:	91 81       	ldd	r25, Z+1	; 0x01
    2066:	9c 83       	std	Y+4, r25	; 0x04
    2068:	8b 83       	std	Y+3, r24	; 0x03
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	9a 81       	ldd	r25, Y+2	; 0x02
    206e:	89 2b       	or	r24, r25
    2070:	49 f0       	breq	.+18     	; 0x2084 <_Z9delay_getj+0x6a>
    2072:	8f e5       	ldi	r24, 0x5F	; 95
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	2f e5       	ldi	r18, 0x5F	; 95
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	f9 01       	movw	r30, r18
    207c:	20 81       	ld	r18, Z
    207e:	20 68       	ori	r18, 0x80	; 128
    2080:	fc 01       	movw	r30, r24
    2082:	20 83       	st	Z, r18
    2084:	8b 81       	ldd	r24, Y+3	; 0x03
    2086:	9c 81       	ldd	r25, Y+4	; 0x04
    2088:	26 96       	adiw	r28, 0x06	; 6
    208a:	0f b6       	in	r0, 0x3f	; 63
    208c:	f8 94       	cli
    208e:	de bf       	out	0x3e, r29	; 62
    2090:	0f be       	out	0x3f, r0	; 63
    2092:	cd bf       	out	0x3d, r28	; 61
    2094:	df 91       	pop	r29
    2096:	cf 91       	pop	r28
    2098:	08 95       	ret

0000209a <_Z9delay_setjj>:
    209a:	cf 93       	push	r28
    209c:	df 93       	push	r29
    209e:	00 d0       	rcall	.+0      	; 0x20a0 <_Z9delay_setjj+0x6>
    20a0:	00 d0       	rcall	.+0      	; 0x20a2 <_Z9delay_setjj+0x8>
    20a2:	00 d0       	rcall	.+0      	; 0x20a4 <_Z9delay_setjj+0xa>
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	9c 83       	std	Y+4, r25	; 0x04
    20aa:	8b 83       	std	Y+3, r24	; 0x03
    20ac:	7e 83       	std	Y+6, r23	; 0x06
    20ae:	6d 83       	std	Y+5, r22	; 0x05
    20b0:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <_ZL11initialized>
    20b4:	88 23       	and	r24, r24
    20b6:	11 f4       	brne	.+4      	; 0x20bc <_Z9delay_setjj+0x22>
    20b8:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <_Z10delay_initv>
    20bc:	8f e5       	ldi	r24, 0x5F	; 95
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	fc 01       	movw	r30, r24
    20c2:	80 81       	ld	r24, Z
    20c4:	08 2e       	mov	r0, r24
    20c6:	00 0c       	add	r0, r0
    20c8:	99 0b       	sbc	r25, r25
    20ca:	80 78       	andi	r24, 0x80	; 128
    20cc:	99 27       	eor	r25, r25
    20ce:	9a 83       	std	Y+2, r25	; 0x02
    20d0:	89 83       	std	Y+1, r24	; 0x01
    20d2:	8f e5       	ldi	r24, 0x5F	; 95
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	2f e5       	ldi	r18, 0x5F	; 95
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	f9 01       	movw	r30, r18
    20dc:	20 81       	ld	r18, Z
    20de:	2f 77       	andi	r18, 0x7F	; 127
    20e0:	fc 01       	movw	r30, r24
    20e2:	20 83       	st	Z, r18
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	9c 81       	ldd	r25, Y+4	; 0x04
    20e8:	88 0f       	add	r24, r24
    20ea:	99 1f       	adc	r25, r25
    20ec:	80 59       	subi	r24, 0x90	; 144
    20ee:	9d 4f       	sbci	r25, 0xFD	; 253
    20f0:	2d 81       	ldd	r18, Y+5	; 0x05
    20f2:	3e 81       	ldd	r19, Y+6	; 0x06
    20f4:	fc 01       	movw	r30, r24
    20f6:	31 83       	std	Z+1, r19	; 0x01
    20f8:	20 83       	st	Z, r18
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	9c 81       	ldd	r25, Y+4	; 0x04
    20fe:	88 0f       	add	r24, r24
    2100:	99 1f       	adc	r25, r25
    2102:	84 59       	subi	r24, 0x94	; 148
    2104:	9d 4f       	sbci	r25, 0xFD	; 253
    2106:	fc 01       	movw	r30, r24
    2108:	11 82       	std	Z+1, r1	; 0x01
    210a:	10 82       	st	Z, r1
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	9a 81       	ldd	r25, Y+2	; 0x02
    2110:	89 2b       	or	r24, r25
    2112:	49 f0       	breq	.+18     	; 0x2126 <_Z9delay_setjj+0x8c>
    2114:	8f e5       	ldi	r24, 0x5F	; 95
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	2f e5       	ldi	r18, 0x5F	; 95
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	f9 01       	movw	r30, r18
    211e:	20 81       	ld	r18, Z
    2120:	20 68       	ori	r18, 0x80	; 128
    2122:	fc 01       	movw	r30, r24
    2124:	20 83       	st	Z, r18
    2126:	00 00       	nop
    2128:	26 96       	adiw	r28, 0x06	; 6
    212a:	0f b6       	in	r0, 0x3f	; 63
    212c:	f8 94       	cli
    212e:	de bf       	out	0x3e, r29	; 62
    2130:	0f be       	out	0x3f, r0	; 63
    2132:	cd bf       	out	0x3d, r28	; 61
    2134:	df 91       	pop	r29
    2136:	cf 91       	pop	r28
    2138:	08 95       	ret

0000213a <_Z12delay_isdonej>:
    213a:	cf 93       	push	r28
    213c:	df 93       	push	r29
    213e:	00 d0       	rcall	.+0      	; 0x2140 <_Z12delay_isdonej+0x6>
    2140:	00 d0       	rcall	.+0      	; 0x2142 <_Z12delay_isdonej+0x8>
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
    2146:	9c 83       	std	Y+4, r25	; 0x04
    2148:	8b 83       	std	Y+3, r24	; 0x03
    214a:	1a 82       	std	Y+2, r1	; 0x02
    214c:	19 82       	std	Y+1, r1	; 0x01
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	9c 81       	ldd	r25, Y+4	; 0x04
    2152:	88 0f       	add	r24, r24
    2154:	99 1f       	adc	r25, r25
    2156:	84 59       	subi	r24, 0x94	; 148
    2158:	9d 4f       	sbci	r25, 0xFD	; 253
    215a:	fc 01       	movw	r30, r24
    215c:	20 81       	ld	r18, Z
    215e:	31 81       	ldd	r19, Z+1	; 0x01
    2160:	8b 81       	ldd	r24, Y+3	; 0x03
    2162:	9c 81       	ldd	r25, Y+4	; 0x04
    2164:	88 0f       	add	r24, r24
    2166:	99 1f       	adc	r25, r25
    2168:	80 59       	subi	r24, 0x90	; 144
    216a:	9d 4f       	sbci	r25, 0xFD	; 253
    216c:	fc 01       	movw	r30, r24
    216e:	80 81       	ld	r24, Z
    2170:	91 81       	ldd	r25, Z+1	; 0x01
    2172:	41 e0       	ldi	r20, 0x01	; 1
    2174:	28 17       	cp	r18, r24
    2176:	39 07       	cpc	r19, r25
    2178:	09 f0       	breq	.+2      	; 0x217c <_Z12delay_isdonej+0x42>
    217a:	40 e0       	ldi	r20, 0x00	; 0
    217c:	44 23       	and	r20, r20
    217e:	21 f0       	breq	.+8      	; 0x2188 <_Z12delay_isdonej+0x4e>
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	9a 83       	std	Y+2, r25	; 0x02
    2186:	89 83       	std	Y+1, r24	; 0x01
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	9a 81       	ldd	r25, Y+2	; 0x02
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	df 91       	pop	r29
    2196:	cf 91       	pop	r28
    2198:	08 95       	ret

0000219a <_Z11__vector_14v>:
    219a:	1f 92       	push	r1
    219c:	0f 92       	push	r0
    219e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    21a2:	0f 92       	push	r0
    21a4:	11 24       	eor	r1, r1
    21a6:	2f 93       	push	r18
    21a8:	3f 93       	push	r19
    21aa:	4f 93       	push	r20
    21ac:	8f 93       	push	r24
    21ae:	9f 93       	push	r25
    21b0:	ef 93       	push	r30
    21b2:	ff 93       	push	r31
    21b4:	cf 93       	push	r28
    21b6:	df 93       	push	r29
    21b8:	00 d0       	rcall	.+0      	; 0x21ba <_Z11__vector_14v+0x20>
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	1a 82       	std	Y+2, r1	; 0x02
    21c0:	19 82       	std	Y+1, r1	; 0x01
    21c2:	22 e0       	ldi	r18, 0x02	; 2
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ca:	82 17       	cp	r24, r18
    21cc:	93 07       	cpc	r25, r19
    21ce:	a0 f5       	brcc	.+104    	; 0x2238 <_Z11__vector_14v+0x9e>
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	9a 81       	ldd	r25, Y+2	; 0x02
    21d4:	88 0f       	add	r24, r24
    21d6:	99 1f       	adc	r25, r25
    21d8:	84 59       	subi	r24, 0x94	; 148
    21da:	9d 4f       	sbci	r25, 0xFD	; 253
    21dc:	fc 01       	movw	r30, r24
    21de:	20 81       	ld	r18, Z
    21e0:	31 81       	ldd	r19, Z+1	; 0x01
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	9a 81       	ldd	r25, Y+2	; 0x02
    21e6:	88 0f       	add	r24, r24
    21e8:	99 1f       	adc	r25, r25
    21ea:	80 59       	subi	r24, 0x90	; 144
    21ec:	9d 4f       	sbci	r25, 0xFD	; 253
    21ee:	fc 01       	movw	r30, r24
    21f0:	80 81       	ld	r24, Z
    21f2:	91 81       	ldd	r25, Z+1	; 0x01
    21f4:	41 e0       	ldi	r20, 0x01	; 1
    21f6:	28 17       	cp	r18, r24
    21f8:	39 07       	cpc	r19, r25
    21fa:	08 f0       	brcs	.+2      	; 0x21fe <_Z11__vector_14v+0x64>
    21fc:	40 e0       	ldi	r20, 0x00	; 0
    21fe:	44 23       	and	r20, r20
    2200:	a9 f0       	breq	.+42     	; 0x222c <_Z11__vector_14v+0x92>
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	9a 81       	ldd	r25, Y+2	; 0x02
    2206:	88 0f       	add	r24, r24
    2208:	99 1f       	adc	r25, r25
    220a:	84 59       	subi	r24, 0x94	; 148
    220c:	9d 4f       	sbci	r25, 0xFD	; 253
    220e:	fc 01       	movw	r30, r24
    2210:	80 81       	ld	r24, Z
    2212:	91 81       	ldd	r25, Z+1	; 0x01
    2214:	9c 01       	movw	r18, r24
    2216:	2f 5f       	subi	r18, 0xFF	; 255
    2218:	3f 4f       	sbci	r19, 0xFF	; 255
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	9a 81       	ldd	r25, Y+2	; 0x02
    221e:	88 0f       	add	r24, r24
    2220:	99 1f       	adc	r25, r25
    2222:	84 59       	subi	r24, 0x94	; 148
    2224:	9d 4f       	sbci	r25, 0xFD	; 253
    2226:	fc 01       	movw	r30, r24
    2228:	31 83       	std	Z+1, r19	; 0x01
    222a:	20 83       	st	Z, r18
    222c:	89 81       	ldd	r24, Y+1	; 0x01
    222e:	9a 81       	ldd	r25, Y+2	; 0x02
    2230:	01 96       	adiw	r24, 0x01	; 1
    2232:	9a 83       	std	Y+2, r25	; 0x02
    2234:	89 83       	std	Y+1, r24	; 0x01
    2236:	c5 cf       	rjmp	.-118    	; 0x21c2 <_Z11__vector_14v+0x28>
    2238:	00 00       	nop
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	df 91       	pop	r29
    2240:	cf 91       	pop	r28
    2242:	ff 91       	pop	r31
    2244:	ef 91       	pop	r30
    2246:	9f 91       	pop	r25
    2248:	8f 91       	pop	r24
    224a:	4f 91       	pop	r20
    224c:	3f 91       	pop	r19
    224e:	2f 91       	pop	r18
    2250:	0f 90       	pop	r0
    2252:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2256:	0f 90       	pop	r0
    2258:	1f 90       	pop	r1
    225a:	18 95       	reti

0000225c <_Z8led_initv>:
    225c:	cf 93       	push	r28
    225e:	df 93       	push	r29
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
    2264:	84 e2       	ldi	r24, 0x24	; 36
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	24 e2       	ldi	r18, 0x24	; 36
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	f9 01       	movw	r30, r18
    226e:	20 81       	ld	r18, Z
    2270:	22 60       	ori	r18, 0x02	; 2
    2272:	fc 01       	movw	r30, r24
    2274:	20 83       	st	Z, r18
    2276:	85 e2       	ldi	r24, 0x25	; 37
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	25 e2       	ldi	r18, 0x25	; 37
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	f9 01       	movw	r30, r18
    2280:	20 81       	ld	r18, Z
    2282:	2d 7f       	andi	r18, 0xFD	; 253
    2284:	fc 01       	movw	r30, r24
    2286:	20 83       	st	Z, r18
    2288:	00 00       	nop
    228a:	df 91       	pop	r29
    228c:	cf 91       	pop	r28
    228e:	08 95       	ret

00002290 <_Z6led_onv>:
    2290:	cf 93       	push	r28
    2292:	df 93       	push	r29
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
    2298:	85 e2       	ldi	r24, 0x25	; 37
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	25 e2       	ldi	r18, 0x25	; 37
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	f9 01       	movw	r30, r18
    22a2:	20 81       	ld	r18, Z
    22a4:	22 60       	ori	r18, 0x02	; 2
    22a6:	fc 01       	movw	r30, r24
    22a8:	20 83       	st	Z, r18
    22aa:	00 00       	nop
    22ac:	df 91       	pop	r29
    22ae:	cf 91       	pop	r28
    22b0:	08 95       	ret

000022b2 <_Z7led_offv>:
    22b2:	cf 93       	push	r28
    22b4:	df 93       	push	r29
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
    22ba:	85 e2       	ldi	r24, 0x25	; 37
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	25 e2       	ldi	r18, 0x25	; 37
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	f9 01       	movw	r30, r18
    22c4:	20 81       	ld	r18, Z
    22c6:	2d 7f       	andi	r18, 0xFD	; 253
    22c8:	fc 01       	movw	r30, r24
    22ca:	20 83       	st	Z, r18
    22cc:	00 00       	nop
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	08 95       	ret

000022d4 <_Z9led_is_onv>:
    22d4:	cf 93       	push	r28
    22d6:	df 93       	push	r29
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
    22dc:	85 e2       	ldi	r24, 0x25	; 37
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	fc 01       	movw	r30, r24
    22e2:	80 81       	ld	r24, Z
    22e4:	88 2f       	mov	r24, r24
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	82 70       	andi	r24, 0x02	; 2
    22ea:	99 27       	eor	r25, r25
    22ec:	89 2b       	or	r24, r25
    22ee:	19 f0       	breq	.+6      	; 0x22f6 <_Z9led_is_onv+0x22>
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	02 c0       	rjmp	.+4      	; 0x22fa <_Z9led_is_onv+0x26>
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	df 91       	pop	r29
    22fc:	cf 91       	pop	r28
    22fe:	08 95       	ret

00002300 <_Z13led_set_blinkPc>:
    2300:	cf 93       	push	r28
    2302:	df 93       	push	r29
    2304:	00 d0       	rcall	.+0      	; 0x2306 <_Z13led_set_blinkPc+0x6>
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
    230a:	9a 83       	std	Y+2, r25	; 0x02
    230c:	89 83       	std	Y+1, r24	; 0x01
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	9a 81       	ldd	r25, Y+2	; 0x02
    2312:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <Blink_msg+0x1>
    2316:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <Blink_msg>
    231a:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <Blink_pos+0x1>
    231e:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <Blink_pos>
    2322:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <blink_state+0x1>
    2326:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <blink_state>
    232a:	60 e0       	ldi	r22, 0x00	; 0
    232c:	70 e0       	ldi	r23, 0x00	; 0
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	0e 94 4d 10 	call	0x209a	; 0x209a <_Z9delay_setjj>
    2336:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_Z7led_offv>
    233a:	00 00       	nop
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	df 91       	pop	r29
    2342:	cf 91       	pop	r28
    2344:	08 95       	ret

00002346 <_Z10led_updatev>:
    2346:	cf 93       	push	r28
    2348:	df 93       	push	r29
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
    234e:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <blink_state>
    2352:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <blink_state+0x1>
    2356:	00 97       	sbiw	r24, 0x00	; 0
    2358:	21 f0       	breq	.+8      	; 0x2362 <_Z10led_updatev+0x1c>
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	09 f4       	brne	.+2      	; 0x2360 <_Z10led_updatev+0x1a>
    235e:	55 c0       	rjmp	.+170    	; 0x240a <_Z10led_updatev+0xc4>
    2360:	89 c0       	rjmp	.+274    	; 0x2474 <_Z10led_updatev+0x12e>
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	0e 94 9d 10 	call	0x213a	; 0x213a <_Z12delay_isdonej>
    236a:	21 e0       	ldi	r18, 0x01	; 1
    236c:	89 2b       	or	r24, r25
    236e:	09 f4       	brne	.+2      	; 0x2372 <_Z10led_updatev+0x2c>
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	22 23       	and	r18, r18
    2374:	09 f4       	brne	.+2      	; 0x2378 <_Z10led_updatev+0x32>
    2376:	7b c0       	rjmp	.+246    	; 0x246e <_Z10led_updatev+0x128>
    2378:	20 91 75 02 	lds	r18, 0x0275	; 0x800275 <Blink_msg>
    237c:	30 91 76 02 	lds	r19, 0x0276	; 0x800276 <Blink_msg+0x1>
    2380:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Blink_pos>
    2384:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <Blink_pos+0x1>
    2388:	82 0f       	add	r24, r18
    238a:	93 1f       	adc	r25, r19
    238c:	fc 01       	movw	r30, r24
    238e:	80 81       	ld	r24, Z
    2390:	08 2e       	mov	r0, r24
    2392:	00 0c       	add	r0, r0
    2394:	99 0b       	sbc	r25, r25
    2396:	8d 32       	cpi	r24, 0x2D	; 45
    2398:	91 05       	cpc	r25, r1
    239a:	31 f0       	breq	.+12     	; 0x23a8 <_Z10led_updatev+0x62>
    239c:	8e 32       	cpi	r24, 0x2E	; 46
    239e:	91 05       	cpc	r25, r1
    23a0:	91 f0       	breq	.+36     	; 0x23c6 <_Z10led_updatev+0x80>
    23a2:	80 97       	sbiw	r24, 0x20	; 32
    23a4:	f9 f0       	breq	.+62     	; 0x23e4 <_Z10led_updatev+0x9e>
    23a6:	27 c0       	rjmp	.+78     	; 0x23f6 <_Z10led_updatev+0xb0>
    23a8:	0e 94 48 11 	call	0x2290	; 0x2290 <_Z6led_onv>
    23ac:	6e ee       	ldi	r22, 0xEE	; 238
    23ae:	72 e0       	ldi	r23, 0x02	; 2
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	0e 94 4d 10 	call	0x209a	; 0x209a <_Z9delay_setjj>
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <blink_state+0x1>
    23c0:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <blink_state>
    23c4:	21 c0       	rjmp	.+66     	; 0x2408 <_Z10led_updatev+0xc2>
    23c6:	0e 94 48 11 	call	0x2290	; 0x2290 <_Z6led_onv>
    23ca:	6a ef       	ldi	r22, 0xFA	; 250
    23cc:	70 e0       	ldi	r23, 0x00	; 0
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	0e 94 4d 10 	call	0x209a	; 0x209a <_Z9delay_setjj>
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <blink_state+0x1>
    23de:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <blink_state>
    23e2:	12 c0       	rjmp	.+36     	; 0x2408 <_Z10led_updatev+0xc2>
    23e4:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_Z7led_offv>
    23e8:	68 ee       	ldi	r22, 0xE8	; 232
    23ea:	73 e0       	ldi	r23, 0x03	; 3
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	0e 94 4d 10 	call	0x209a	; 0x209a <_Z9delay_setjj>
    23f4:	09 c0       	rjmp	.+18     	; 0x2408 <_Z10led_updatev+0xc2>
    23f6:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_Z7led_offv>
    23fa:	60 e0       	ldi	r22, 0x00	; 0
    23fc:	70 e0       	ldi	r23, 0x00	; 0
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	0e 94 4d 10 	call	0x209a	; 0x209a <_Z9delay_setjj>
    2406:	00 00       	nop
    2408:	32 c0       	rjmp	.+100    	; 0x246e <_Z10led_updatev+0x128>
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	0e 94 9d 10 	call	0x213a	; 0x213a <_Z12delay_isdonej>
    2412:	21 e0       	ldi	r18, 0x01	; 1
    2414:	89 2b       	or	r24, r25
    2416:	09 f4       	brne	.+2      	; 0x241a <_Z10led_updatev+0xd4>
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	22 23       	and	r18, r18
    241c:	51 f1       	breq	.+84     	; 0x2472 <_Z10led_updatev+0x12c>
    241e:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_Z7led_offv>
    2422:	64 e6       	ldi	r22, 0x64	; 100
    2424:	70 e0       	ldi	r23, 0x00	; 0
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	0e 94 4d 10 	call	0x209a	; 0x209a <_Z9delay_setjj>
    242e:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Blink_pos>
    2432:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <Blink_pos+0x1>
    2436:	01 96       	adiw	r24, 0x01	; 1
    2438:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <Blink_pos+0x1>
    243c:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <Blink_pos>
    2440:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <Blink_msg>
    2444:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <Blink_msg+0x1>
    2448:	0e 94 b9 13 	call	0x2772	; 0x2772 <strlen>
    244c:	9c 01       	movw	r18, r24
    244e:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Blink_pos>
    2452:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <Blink_pos+0x1>
    2456:	82 17       	cp	r24, r18
    2458:	93 07       	cpc	r25, r19
    245a:	20 f0       	brcs	.+8      	; 0x2464 <_Z10led_updatev+0x11e>
    245c:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <Blink_pos+0x1>
    2460:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <Blink_pos>
    2464:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <blink_state+0x1>
    2468:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <blink_state>
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <_Z10led_updatev+0x12c>
    246e:	00 00       	nop
    2470:	01 c0       	rjmp	.+2      	; 0x2474 <_Z10led_updatev+0x12e>
    2472:	00 00       	nop
    2474:	00 00       	nop
    2476:	df 91       	pop	r29
    2478:	cf 91       	pop	r28
    247a:	08 95       	ret

0000247c <_Z11timer1_initv>:
    247c:	cf 93       	push	r28
    247e:	df 93       	push	r29
    2480:	00 d0       	rcall	.+0      	; 0x2482 <_Z11timer1_initv+0x6>
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
    2486:	89 e0       	ldi	r24, 0x09	; 9
    2488:	9d e3       	ldi	r25, 0x3D	; 61
    248a:	9a 83       	std	Y+2, r25	; 0x02
    248c:	89 83       	std	Y+1, r24	; 0x01
    248e:	81 e8       	ldi	r24, 0x81	; 129
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	21 e8       	ldi	r18, 0x81	; 129
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	f9 01       	movw	r30, r18
    2498:	20 81       	ld	r18, Z
    249a:	28 60       	ori	r18, 0x08	; 8
    249c:	fc 01       	movw	r30, r24
    249e:	20 83       	st	Z, r18
    24a0:	81 e8       	ldi	r24, 0x81	; 129
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	21 e8       	ldi	r18, 0x81	; 129
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	f9 01       	movw	r30, r18
    24aa:	20 81       	ld	r18, Z
    24ac:	25 60       	ori	r18, 0x05	; 5
    24ae:	fc 01       	movw	r30, r24
    24b0:	20 83       	st	Z, r18
    24b2:	88 e8       	ldi	r24, 0x88	; 136
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	29 81       	ldd	r18, Y+1	; 0x01
    24b8:	3a 81       	ldd	r19, Y+2	; 0x02
    24ba:	21 50       	subi	r18, 0x01	; 1
    24bc:	31 09       	sbc	r19, r1
    24be:	fc 01       	movw	r30, r24
    24c0:	31 83       	std	Z+1, r19	; 0x01
    24c2:	20 83       	st	Z, r18
    24c4:	8f e6       	ldi	r24, 0x6F	; 111
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	2f e6       	ldi	r18, 0x6F	; 111
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	f9 01       	movw	r30, r18
    24ce:	20 81       	ld	r18, Z
    24d0:	22 60       	ori	r18, 0x02	; 2
    24d2:	fc 01       	movw	r30, r24
    24d4:	20 83       	st	Z, r18
    24d6:	8f e5       	ldi	r24, 0x5F	; 95
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	2f e5       	ldi	r18, 0x5F	; 95
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	f9 01       	movw	r30, r18
    24e0:	20 81       	ld	r18, Z
    24e2:	20 68       	ori	r18, 0x80	; 128
    24e4:	fc 01       	movw	r30, r24
    24e6:	20 83       	st	Z, r18
    24e8:	00 00       	nop
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
    24ee:	df 91       	pop	r29
    24f0:	cf 91       	pop	r28
    24f2:	08 95       	ret

000024f4 <_Z10timer1_getv>:
    24f4:	cf 93       	push	r28
    24f6:	df 93       	push	r29
    24f8:	00 d0       	rcall	.+0      	; 0x24fa <_Z10timer1_getv+0x6>
    24fa:	00 d0       	rcall	.+0      	; 0x24fc <_Z10timer1_getv+0x8>
    24fc:	00 d0       	rcall	.+0      	; 0x24fe <_Z10timer1_getv+0xa>
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62
    2502:	8f e5       	ldi	r24, 0x5F	; 95
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	fc 01       	movw	r30, r24
    2508:	80 81       	ld	r24, Z
    250a:	88 2f       	mov	r24, r24
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	80 78       	andi	r24, 0x80	; 128
    2510:	99 27       	eor	r25, r25
    2512:	9a 83       	std	Y+2, r25	; 0x02
    2514:	89 83       	std	Y+1, r24	; 0x01
    2516:	8f e5       	ldi	r24, 0x5F	; 95
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	2f e5       	ldi	r18, 0x5F	; 95
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	f9 01       	movw	r30, r18
    2520:	20 81       	ld	r18, Z
    2522:	2f 77       	andi	r18, 0x7F	; 127
    2524:	fc 01       	movw	r30, r24
    2526:	20 83       	st	Z, r18
    2528:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <_ZL5count>
    252c:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <_ZL5count+0x1>
    2530:	a0 91 7d 02 	lds	r26, 0x027D	; 0x80027d <_ZL5count+0x2>
    2534:	b0 91 7e 02 	lds	r27, 0x027E	; 0x80027e <_ZL5count+0x3>
    2538:	8b 83       	std	Y+3, r24	; 0x03
    253a:	9c 83       	std	Y+4, r25	; 0x04
    253c:	ad 83       	std	Y+5, r26	; 0x05
    253e:	be 83       	std	Y+6, r27	; 0x06
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	9a 81       	ldd	r25, Y+2	; 0x02
    2544:	89 2b       	or	r24, r25
    2546:	49 f0       	breq	.+18     	; 0x255a <_Z10timer1_getv+0x66>
    2548:	8f e5       	ldi	r24, 0x5F	; 95
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	2f e5       	ldi	r18, 0x5F	; 95
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	f9 01       	movw	r30, r18
    2552:	20 81       	ld	r18, Z
    2554:	20 68       	ori	r18, 0x80	; 128
    2556:	fc 01       	movw	r30, r24
    2558:	20 83       	st	Z, r18
    255a:	8b 81       	ldd	r24, Y+3	; 0x03
    255c:	9c 81       	ldd	r25, Y+4	; 0x04
    255e:	ad 81       	ldd	r26, Y+5	; 0x05
    2560:	be 81       	ldd	r27, Y+6	; 0x06
    2562:	bc 01       	movw	r22, r24
    2564:	cd 01       	movw	r24, r26
    2566:	26 96       	adiw	r28, 0x06	; 6
    2568:	0f b6       	in	r0, 0x3f	; 63
    256a:	f8 94       	cli
    256c:	de bf       	out	0x3e, r29	; 62
    256e:	0f be       	out	0x3f, r0	; 63
    2570:	cd bf       	out	0x3d, r28	; 61
    2572:	df 91       	pop	r29
    2574:	cf 91       	pop	r28
    2576:	08 95       	ret

00002578 <_Z12timer1_clearv>:
    2578:	cf 93       	push	r28
    257a:	df 93       	push	r29
    257c:	00 d0       	rcall	.+0      	; 0x257e <_Z12timer1_clearv+0x6>
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
    2582:	8f e5       	ldi	r24, 0x5F	; 95
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	fc 01       	movw	r30, r24
    2588:	80 81       	ld	r24, Z
    258a:	88 2f       	mov	r24, r24
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	80 78       	andi	r24, 0x80	; 128
    2590:	99 27       	eor	r25, r25
    2592:	9a 83       	std	Y+2, r25	; 0x02
    2594:	89 83       	std	Y+1, r24	; 0x01
    2596:	8f e5       	ldi	r24, 0x5F	; 95
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	2f e5       	ldi	r18, 0x5F	; 95
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	f9 01       	movw	r30, r18
    25a0:	20 81       	ld	r18, Z
    25a2:	2f 77       	andi	r18, 0x7F	; 127
    25a4:	fc 01       	movw	r30, r24
    25a6:	20 83       	st	Z, r18
    25a8:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <_ZL5count>
    25ac:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <_ZL5count+0x1>
    25b0:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <_ZL5count+0x2>
    25b4:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <_ZL5count+0x3>
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	9a 81       	ldd	r25, Y+2	; 0x02
    25bc:	89 2b       	or	r24, r25
    25be:	49 f0       	breq	.+18     	; 0x25d2 <_Z12timer1_clearv+0x5a>
    25c0:	8f e5       	ldi	r24, 0x5F	; 95
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	2f e5       	ldi	r18, 0x5F	; 95
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	f9 01       	movw	r30, r18
    25ca:	20 81       	ld	r18, Z
    25cc:	20 68       	ori	r18, 0x80	; 128
    25ce:	fc 01       	movw	r30, r24
    25d0:	20 83       	st	Z, r18
    25d2:	00 00       	nop
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	df 91       	pop	r29
    25da:	cf 91       	pop	r28
    25dc:	08 95       	ret

000025de <_Z11__vector_11v>:
    25de:	1f 92       	push	r1
    25e0:	0f 92       	push	r0
    25e2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    25e6:	0f 92       	push	r0
    25e8:	11 24       	eor	r1, r1
    25ea:	8f 93       	push	r24
    25ec:	9f 93       	push	r25
    25ee:	af 93       	push	r26
    25f0:	bf 93       	push	r27
    25f2:	cf 93       	push	r28
    25f4:	df 93       	push	r29
    25f6:	cd b7       	in	r28, 0x3d	; 61
    25f8:	de b7       	in	r29, 0x3e	; 62
    25fa:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <_ZL5count>
    25fe:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <_ZL5count+0x1>
    2602:	a0 91 7d 02 	lds	r26, 0x027D	; 0x80027d <_ZL5count+0x2>
    2606:	b0 91 7e 02 	lds	r27, 0x027E	; 0x80027e <_ZL5count+0x3>
    260a:	01 96       	adiw	r24, 0x01	; 1
    260c:	a1 1d       	adc	r26, r1
    260e:	b1 1d       	adc	r27, r1
    2610:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <_ZL5count>
    2614:	90 93 7c 02 	sts	0x027C, r25	; 0x80027c <_ZL5count+0x1>
    2618:	a0 93 7d 02 	sts	0x027D, r26	; 0x80027d <_ZL5count+0x2>
    261c:	b0 93 7e 02 	sts	0x027E, r27	; 0x80027e <_ZL5count+0x3>
    2620:	00 00       	nop
    2622:	df 91       	pop	r29
    2624:	cf 91       	pop	r28
    2626:	bf 91       	pop	r27
    2628:	af 91       	pop	r26
    262a:	9f 91       	pop	r25
    262c:	8f 91       	pop	r24
    262e:	0f 90       	pop	r0
    2630:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2634:	0f 90       	pop	r0
    2636:	1f 90       	pop	r1
    2638:	18 95       	reti

0000263a <__mulsi3>:
    263a:	db 01       	movw	r26, r22
    263c:	8f 93       	push	r24
    263e:	9f 93       	push	r25
    2640:	0e 94 a5 13 	call	0x274a	; 0x274a <__muluhisi3>
    2644:	bf 91       	pop	r27
    2646:	af 91       	pop	r26
    2648:	a2 9f       	mul	r26, r18
    264a:	80 0d       	add	r24, r0
    264c:	91 1d       	adc	r25, r1
    264e:	a3 9f       	mul	r26, r19
    2650:	90 0d       	add	r25, r0
    2652:	b2 9f       	mul	r27, r18
    2654:	90 0d       	add	r25, r0
    2656:	11 24       	eor	r1, r1
    2658:	08 95       	ret

0000265a <__udivmodhi4>:
    265a:	aa 1b       	sub	r26, r26
    265c:	bb 1b       	sub	r27, r27
    265e:	51 e1       	ldi	r21, 0x11	; 17
    2660:	07 c0       	rjmp	.+14     	; 0x2670 <__udivmodhi4_ep>

00002662 <__udivmodhi4_loop>:
    2662:	aa 1f       	adc	r26, r26
    2664:	bb 1f       	adc	r27, r27
    2666:	a6 17       	cp	r26, r22
    2668:	b7 07       	cpc	r27, r23
    266a:	10 f0       	brcs	.+4      	; 0x2670 <__udivmodhi4_ep>
    266c:	a6 1b       	sub	r26, r22
    266e:	b7 0b       	sbc	r27, r23

00002670 <__udivmodhi4_ep>:
    2670:	88 1f       	adc	r24, r24
    2672:	99 1f       	adc	r25, r25
    2674:	5a 95       	dec	r21
    2676:	a9 f7       	brne	.-22     	; 0x2662 <__udivmodhi4_loop>
    2678:	80 95       	com	r24
    267a:	90 95       	com	r25
    267c:	bc 01       	movw	r22, r24
    267e:	cd 01       	movw	r24, r26
    2680:	08 95       	ret

00002682 <__divmodhi4>:
    2682:	97 fb       	bst	r25, 7
    2684:	07 2e       	mov	r0, r23
    2686:	16 f4       	brtc	.+4      	; 0x268c <__divmodhi4+0xa>
    2688:	00 94       	com	r0
    268a:	07 d0       	rcall	.+14     	; 0x269a <__divmodhi4_neg1>
    268c:	77 fd       	sbrc	r23, 7
    268e:	09 d0       	rcall	.+18     	; 0x26a2 <__divmodhi4_neg2>
    2690:	0e 94 2d 13 	call	0x265a	; 0x265a <__udivmodhi4>
    2694:	07 fc       	sbrc	r0, 7
    2696:	05 d0       	rcall	.+10     	; 0x26a2 <__divmodhi4_neg2>
    2698:	3e f4       	brtc	.+14     	; 0x26a8 <__divmodhi4_exit>

0000269a <__divmodhi4_neg1>:
    269a:	90 95       	com	r25
    269c:	81 95       	neg	r24
    269e:	9f 4f       	sbci	r25, 0xFF	; 255
    26a0:	08 95       	ret

000026a2 <__divmodhi4_neg2>:
    26a2:	70 95       	com	r23
    26a4:	61 95       	neg	r22
    26a6:	7f 4f       	sbci	r23, 0xFF	; 255

000026a8 <__divmodhi4_exit>:
    26a8:	08 95       	ret

000026aa <__udivmodsi4>:
    26aa:	a1 e2       	ldi	r26, 0x21	; 33
    26ac:	1a 2e       	mov	r1, r26
    26ae:	aa 1b       	sub	r26, r26
    26b0:	bb 1b       	sub	r27, r27
    26b2:	fd 01       	movw	r30, r26
    26b4:	0d c0       	rjmp	.+26     	; 0x26d0 <__udivmodsi4_ep>

000026b6 <__udivmodsi4_loop>:
    26b6:	aa 1f       	adc	r26, r26
    26b8:	bb 1f       	adc	r27, r27
    26ba:	ee 1f       	adc	r30, r30
    26bc:	ff 1f       	adc	r31, r31
    26be:	a2 17       	cp	r26, r18
    26c0:	b3 07       	cpc	r27, r19
    26c2:	e4 07       	cpc	r30, r20
    26c4:	f5 07       	cpc	r31, r21
    26c6:	20 f0       	brcs	.+8      	; 0x26d0 <__udivmodsi4_ep>
    26c8:	a2 1b       	sub	r26, r18
    26ca:	b3 0b       	sbc	r27, r19
    26cc:	e4 0b       	sbc	r30, r20
    26ce:	f5 0b       	sbc	r31, r21

000026d0 <__udivmodsi4_ep>:
    26d0:	66 1f       	adc	r22, r22
    26d2:	77 1f       	adc	r23, r23
    26d4:	88 1f       	adc	r24, r24
    26d6:	99 1f       	adc	r25, r25
    26d8:	1a 94       	dec	r1
    26da:	69 f7       	brne	.-38     	; 0x26b6 <__udivmodsi4_loop>
    26dc:	60 95       	com	r22
    26de:	70 95       	com	r23
    26e0:	80 95       	com	r24
    26e2:	90 95       	com	r25
    26e4:	9b 01       	movw	r18, r22
    26e6:	ac 01       	movw	r20, r24
    26e8:	bd 01       	movw	r22, r26
    26ea:	cf 01       	movw	r24, r30
    26ec:	08 95       	ret

000026ee <__divmodsi4>:
    26ee:	05 2e       	mov	r0, r21
    26f0:	97 fb       	bst	r25, 7
    26f2:	1e f4       	brtc	.+6      	; 0x26fa <__divmodsi4+0xc>
    26f4:	00 94       	com	r0
    26f6:	0e 94 8e 13 	call	0x271c	; 0x271c <__negsi2>
    26fa:	57 fd       	sbrc	r21, 7
    26fc:	07 d0       	rcall	.+14     	; 0x270c <__divmodsi4_neg2>
    26fe:	0e 94 55 13 	call	0x26aa	; 0x26aa <__udivmodsi4>
    2702:	07 fc       	sbrc	r0, 7
    2704:	03 d0       	rcall	.+6      	; 0x270c <__divmodsi4_neg2>
    2706:	4e f4       	brtc	.+18     	; 0x271a <__divmodsi4_exit>
    2708:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__negsi2>

0000270c <__divmodsi4_neg2>:
    270c:	50 95       	com	r21
    270e:	40 95       	com	r20
    2710:	30 95       	com	r19
    2712:	21 95       	neg	r18
    2714:	3f 4f       	sbci	r19, 0xFF	; 255
    2716:	4f 4f       	sbci	r20, 0xFF	; 255
    2718:	5f 4f       	sbci	r21, 0xFF	; 255

0000271a <__divmodsi4_exit>:
    271a:	08 95       	ret

0000271c <__negsi2>:
    271c:	90 95       	com	r25
    271e:	80 95       	com	r24
    2720:	70 95       	com	r23
    2722:	61 95       	neg	r22
    2724:	7f 4f       	sbci	r23, 0xFF	; 255
    2726:	8f 4f       	sbci	r24, 0xFF	; 255
    2728:	9f 4f       	sbci	r25, 0xFF	; 255
    272a:	08 95       	ret

0000272c <__umulhisi3>:
    272c:	a2 9f       	mul	r26, r18
    272e:	b0 01       	movw	r22, r0
    2730:	b3 9f       	mul	r27, r19
    2732:	c0 01       	movw	r24, r0
    2734:	a3 9f       	mul	r26, r19
    2736:	70 0d       	add	r23, r0
    2738:	81 1d       	adc	r24, r1
    273a:	11 24       	eor	r1, r1
    273c:	91 1d       	adc	r25, r1
    273e:	b2 9f       	mul	r27, r18
    2740:	70 0d       	add	r23, r0
    2742:	81 1d       	adc	r24, r1
    2744:	11 24       	eor	r1, r1
    2746:	91 1d       	adc	r25, r1
    2748:	08 95       	ret

0000274a <__muluhisi3>:
    274a:	0e 94 96 13 	call	0x272c	; 0x272c <__umulhisi3>
    274e:	a5 9f       	mul	r26, r21
    2750:	90 0d       	add	r25, r0
    2752:	b4 9f       	mul	r27, r20
    2754:	90 0d       	add	r25, r0
    2756:	a4 9f       	mul	r26, r20
    2758:	80 0d       	add	r24, r0
    275a:	91 1d       	adc	r25, r1
    275c:	11 24       	eor	r1, r1
    275e:	08 95       	ret

00002760 <memcpy>:
    2760:	fb 01       	movw	r30, r22
    2762:	dc 01       	movw	r26, r24
    2764:	02 c0       	rjmp	.+4      	; 0x276a <memcpy+0xa>
    2766:	01 90       	ld	r0, Z+
    2768:	0d 92       	st	X+, r0
    276a:	41 50       	subi	r20, 0x01	; 1
    276c:	50 40       	sbci	r21, 0x00	; 0
    276e:	d8 f7       	brcc	.-10     	; 0x2766 <memcpy+0x6>
    2770:	08 95       	ret

00002772 <strlen>:
    2772:	fc 01       	movw	r30, r24
    2774:	01 90       	ld	r0, Z+
    2776:	00 20       	and	r0, r0
    2778:	e9 f7       	brne	.-6      	; 0x2774 <strlen+0x2>
    277a:	80 95       	com	r24
    277c:	90 95       	com	r25
    277e:	8e 0f       	add	r24, r30
    2780:	9f 1f       	adc	r25, r31
    2782:	08 95       	ret

00002784 <_exit>:
    2784:	f8 94       	cli

00002786 <__stop_program>:
    2786:	ff cf       	rjmp	.-2      	; 0x2786 <__stop_program>
