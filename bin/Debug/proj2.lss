
bin/Debug/proj2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d8  00800100  00002888  0000291c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002860  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .siminfo      00000028  00002860  00002860  000028f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000001ba  008001d8  008001d8  000029f4  2**0
                  ALLOC
  4 .stab         00003894  00000000  00000000  000029f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000283b  00000000  00000000  00006288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00008ac3  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008ad4  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  00008b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  00009108  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  000096aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  000096c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__vector_18>
      4c:	0c 94 8b 0f 	jmp	0x1f16	; 0x1f16 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 02 04 	jmp	0x804	; 0x804 <__vector_22>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e8       	ldi	r30, 0x88	; 136
      7c:	f8 e2       	ldi	r31, 0x28	; 40
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 3d       	cpi	r26, 0xD8	; 216
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a8 ed       	ldi	r26, 0xD8	; 216
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 39       	cpi	r26, 0x92	; 146
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 ba 05 	call	0xb74	; 0xb74 <main>
      9e:	0c 94 2e 14 	jmp	0x285c	; 0x285c <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <config_init>:
    .use_static_ip=0,
    .static_ip={192, 168, 1, 100},
    .checksum=0};

void config_init()
{
      a6:	ef 92       	push	r14
      a8:	ff 92       	push	r15
      aa:	0f 93       	push	r16
      ac:	1f 93       	push	r17
      ae:	cf 93       	push	r28
      b0:	df 93       	push	r29
      b2:	cd b7       	in	r28, 0x3d	; 61
      b4:	de b7       	in	r29, 0x3e	; 62
      b6:	28 97       	sbiw	r28, 0x08	; 8
      b8:	0f b6       	in	r0, 0x3f	; 63
      ba:	f8 94       	cli
      bc:	de bf       	out	0x3e, r29	; 62
      be:	0f be       	out	0x3f, r0	; 63
      c0:	cd bf       	out	0x3d, r28	; 61

    }

    //uart_writedec32(write_busy);
    get_writebusy();
}
      c2:	0d b7       	in	r16, 0x3d	; 61
      c4:	1e b7       	in	r17, 0x3e	; 62
    .static_ip={192, 168, 1, 100},
    .checksum=0};

void config_init()
{
    while(eeprom_isbusy());  //waits for EEPROM to get out of busy state
      c6:	00 00       	nop
      c8:	0e 94 17 03 	call	0x62e	; 0x62e <eeprom_isbusy>
      cc:	89 2b       	or	r24, r25
      ce:	e1 f7       	brne	.-8      	; 0xc8 <config_init+0x22>

    //initialize config
    unsigned int base_addr=0x040;
      d0:	80 e4       	ldi	r24, 0x40	; 64
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	9a 83       	std	Y+2, r25	; 0x02
      d6:	89 83       	std	Y+1, r24	; 0x01
    int size = sizeof(config_struct);
      d8:	82 e1       	ldi	r24, 0x12	; 18
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	9c 83       	std	Y+4, r25	; 0x04
      de:	8b 83       	std	Y+3, r24	; 0x03
    unsigned char buf[size];
      e0:	8b 81       	ldd	r24, Y+3	; 0x03
      e2:	9c 81       	ldd	r25, Y+4	; 0x04
      e4:	2d b7       	in	r18, 0x3d	; 61
      e6:	3e b7       	in	r19, 0x3e	; 62
      e8:	79 01       	movw	r14, r18
      ea:	9c 01       	movw	r18, r24
      ec:	21 50       	subi	r18, 0x01	; 1
      ee:	31 09       	sbc	r19, r1
      f0:	3e 83       	std	Y+6, r19	; 0x06
      f2:	2d 83       	std	Y+5, r18	; 0x05
      f4:	2d b7       	in	r18, 0x3d	; 61
      f6:	3e b7       	in	r19, 0x3e	; 62
      f8:	28 1b       	sub	r18, r24
      fa:	39 0b       	sbc	r19, r25
      fc:	0f b6       	in	r0, 0x3f	; 63
      fe:	f8 94       	cli
     100:	3e bf       	out	0x3e, r19	; 62
     102:	0f be       	out	0x3f, r0	; 63
     104:	2d bf       	out	0x3d, r18	; 61
     106:	8d b7       	in	r24, 0x3d	; 61
     108:	9e b7       	in	r25, 0x3e	; 62
     10a:	01 96       	adiw	r24, 0x01	; 1
     10c:	98 87       	std	Y+8, r25	; 0x08
     10e:	8f 83       	std	Y+7, r24	; 0x07
    eeprom_readbuf(base_addr, buf, size);
     110:	4b 81       	ldd	r20, Y+3	; 0x03
     112:	2f 81       	ldd	r18, Y+7	; 0x07
     114:	38 85       	ldd	r19, Y+8	; 0x08
     116:	89 81       	ldd	r24, Y+1	; 0x01
     118:	9a 81       	ldd	r25, Y+2	; 0x02
     11a:	b9 01       	movw	r22, r18
     11c:	0e 94 a6 03 	call	0x74c	; 0x74c <eeprom_readbuf>

    memcpy((unsigned char*)&config, (unsigned char*)buf, size);
     120:	2b 81       	ldd	r18, Y+3	; 0x03
     122:	3c 81       	ldd	r19, Y+4	; 0x04
     124:	8f 81       	ldd	r24, Y+7	; 0x07
     126:	98 85       	ldd	r25, Y+8	; 0x08
     128:	a9 01       	movw	r20, r18
     12a:	bc 01       	movw	r22, r24
     12c:	81 e8       	ldi	r24, 0x81	; 129
     12e:	92 e0       	ldi	r25, 0x02	; 2
     130:	0e 94 1c 14 	call	0x2838	; 0x2838 <memcpy>

    if(!config_is_data_valid())
     134:	0e 94 ce 00 	call	0x19c	; 0x19c <config_is_data_valid>
     138:	89 2b       	or	r24, r25
     13a:	b1 f4       	brne	.+44     	; 0x168 <config_init+0xc2>
    {

        //Write default values to EEPROM location 0x040
        config_write_defaults();
     13c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <config_write_defaults>

        //Initialize config by reading location 0x040
        eeprom_readbuf(base_addr, (unsigned char*)buf, size);
     140:	4b 81       	ldd	r20, Y+3	; 0x03
     142:	2f 81       	ldd	r18, Y+7	; 0x07
     144:	38 85       	ldd	r19, Y+8	; 0x08
     146:	89 81       	ldd	r24, Y+1	; 0x01
     148:	9a 81       	ldd	r25, Y+2	; 0x02
     14a:	b9 01       	movw	r22, r18
     14c:	0e 94 a6 03 	call	0x74c	; 0x74c <eeprom_readbuf>
        memcpy((unsigned char*)&config, (unsigned char*)buf, size);
     150:	2b 81       	ldd	r18, Y+3	; 0x03
     152:	3c 81       	ldd	r19, Y+4	; 0x04
     154:	8f 81       	ldd	r24, Y+7	; 0x07
     156:	98 85       	ldd	r25, Y+8	; 0x08
     158:	a9 01       	movw	r20, r18
     15a:	bc 01       	movw	r22, r24
     15c:	81 e8       	ldi	r24, 0x81	; 129
     15e:	92 e0       	ldi	r25, 0x02	; 2
     160:	0e 94 1c 14 	call	0x2838	; 0x2838 <memcpy>

        //Clearing modified flag
        modified=0;
     164:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <modified>

    }

    //uart_writedec32(write_busy);
    get_writebusy();
     168:	0e 94 05 03 	call	0x60a	; 0x60a <get_writebusy>
     16c:	0f b6       	in	r0, 0x3f	; 63
     16e:	f8 94       	cli
     170:	fe be       	out	0x3e, r15	; 62
     172:	0f be       	out	0x3f, r0	; 63
     174:	ed be       	out	0x3d, r14	; 61
}
     176:	00 00       	nop
     178:	0f b6       	in	r0, 0x3f	; 63
     17a:	f8 94       	cli
     17c:	1e bf       	out	0x3e, r17	; 62
     17e:	0f be       	out	0x3f, r0	; 63
     180:	0d bf       	out	0x3d, r16	; 61
     182:	28 96       	adiw	r28, 0x08	; 8
     184:	0f b6       	in	r0, 0x3f	; 63
     186:	f8 94       	cli
     188:	de bf       	out	0x3e, r29	; 62
     18a:	0f be       	out	0x3f, r0	; 63
     18c:	cd bf       	out	0x3d, r28	; 61
     18e:	df 91       	pop	r29
     190:	cf 91       	pop	r28
     192:	1f 91       	pop	r17
     194:	0f 91       	pop	r16
     196:	ff 90       	pop	r15
     198:	ef 90       	pop	r14
     19a:	08 95       	ret

0000019c <config_is_data_valid>:

int config_is_data_valid()
{
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
     1a0:	cd b7       	in	r28, 0x3d	; 61
     1a2:	de b7       	in	r29, 0x3e	; 62
    return (config.token=="ASU") && is_checksum_valid((unsigned char*)&config, sizeof(config_struct));
     1a4:	81 e8       	ldi	r24, 0x81	; 129
     1a6:	92 e0       	ldi	r25, 0x02	; 2
     1a8:	8d 55       	subi	r24, 0x5D	; 93
     1aa:	91 40       	sbci	r25, 0x01	; 1
     1ac:	59 f4       	brne	.+22     	; 0x1c4 <config_is_data_valid+0x28>
     1ae:	62 e1       	ldi	r22, 0x12	; 18
     1b0:	70 e0       	ldi	r23, 0x00	; 0
     1b2:	81 e8       	ldi	r24, 0x81	; 129
     1b4:	92 e0       	ldi	r25, 0x02	; 2
     1b6:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <is_checksum_valid>
     1ba:	89 2b       	or	r24, r25
     1bc:	19 f0       	breq	.+6      	; 0x1c4 <config_is_data_valid+0x28>
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <config_is_data_valid+0x2c>
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	90 e0       	ldi	r25, 0x00	; 0
}
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	08 95       	ret

000001ce <config_set_modified>:

void config_set_modified()
{
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
     1d2:	cd b7       	in	r28, 0x3d	; 61
     1d4:	de b7       	in	r29, 0x3e	; 62
    modified=1;
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <modified>
}
     1dc:	00 00       	nop
     1de:	df 91       	pop	r29
     1e0:	cf 91       	pop	r28
     1e2:	08 95       	ret

000001e4 <config_update>:

void config_update()
{
     1e4:	ef 92       	push	r14
     1e6:	ff 92       	push	r15
     1e8:	0f 93       	push	r16
     1ea:	1f 93       	push	r17
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
     1f0:	cd b7       	in	r28, 0x3d	; 61
     1f2:	de b7       	in	r29, 0x3e	; 62
     1f4:	28 97       	sbiw	r28, 0x08	; 8
     1f6:	0f b6       	in	r0, 0x3f	; 63
     1f8:	f8 94       	cli
     1fa:	de bf       	out	0x3e, r29	; 62
     1fc:	0f be       	out	0x3f, r0	; 63
     1fe:	cd bf       	out	0x3d, r28	; 61
        //Clearing modified flag
        modified=0;

    }

}
     200:	0d b7       	in	r16, 0x3d	; 61
     202:	1e b7       	in	r17, 0x3e	; 62
    modified=1;
}

void config_update()
{
    if(!eeprom_isbusy() && modified)
     204:	0e 94 17 03 	call	0x62e	; 0x62e <eeprom_isbusy>
     208:	89 2b       	or	r24, r25
     20a:	c9 f5       	brne	.+114    	; 0x27e <config_update+0x9a>
     20c:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <modified>
     210:	88 23       	and	r24, r24
     212:	a9 f1       	breq	.+106    	; 0x27e <config_update+0x9a>
    {
     214:	8d b7       	in	r24, 0x3d	; 61
     216:	9e b7       	in	r25, 0x3e	; 62
     218:	7c 01       	movw	r14, r24
        //Update the checksum
        update_checksum((unsigned char*)&config, sizeof(config));
     21a:	62 e1       	ldi	r22, 0x12	; 18
     21c:	70 e0       	ldi	r23, 0x00	; 0
     21e:	81 e8       	ldi	r24, 0x81	; 129
     220:	92 e0       	ldi	r25, 0x02	; 2
     222:	0e 94 30 07 	call	0xe60	; 0xe60 <update_checksum>

        //Write config to eeprom
        unsigned int base_addr = 0x040;
     226:	80 e4       	ldi	r24, 0x40	; 64
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	9a 83       	std	Y+2, r25	; 0x02
     22c:	89 83       	std	Y+1, r24	; 0x01
        int size = sizeof(config_struct);
     22e:	82 e1       	ldi	r24, 0x12	; 18
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	9c 83       	std	Y+4, r25	; 0x04
     234:	8b 83       	std	Y+3, r24	; 0x03
        unsigned char buf[size];
     236:	8b 81       	ldd	r24, Y+3	; 0x03
     238:	9c 81       	ldd	r25, Y+4	; 0x04
     23a:	9c 01       	movw	r18, r24
     23c:	21 50       	subi	r18, 0x01	; 1
     23e:	31 09       	sbc	r19, r1
     240:	3e 83       	std	Y+6, r19	; 0x06
     242:	2d 83       	std	Y+5, r18	; 0x05
     244:	2d b7       	in	r18, 0x3d	; 61
     246:	3e b7       	in	r19, 0x3e	; 62
     248:	28 1b       	sub	r18, r24
     24a:	39 0b       	sbc	r19, r25
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	f8 94       	cli
     250:	3e bf       	out	0x3e, r19	; 62
     252:	0f be       	out	0x3f, r0	; 63
     254:	2d bf       	out	0x3d, r18	; 61
     256:	8d b7       	in	r24, 0x3d	; 61
     258:	9e b7       	in	r25, 0x3e	; 62
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	98 87       	std	Y+8, r25	; 0x08
     25e:	8f 83       	std	Y+7, r24	; 0x07
        eeprom_writebuf(base_addr, (unsigned char*)buf, size);
     260:	4b 81       	ldd	r20, Y+3	; 0x03
     262:	2f 81       	ldd	r18, Y+7	; 0x07
     264:	38 85       	ldd	r19, Y+8	; 0x08
     266:	89 81       	ldd	r24, Y+1	; 0x01
     268:	9a 81       	ldd	r25, Y+2	; 0x02
     26a:	b9 01       	movw	r22, r18
     26c:	0e 94 2f 03 	call	0x65e	; 0x65e <eeprom_writebuf>

        //Clearing modified flag
        modified=0;
     270:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <modified>
     274:	0f b6       	in	r0, 0x3f	; 63
     276:	f8 94       	cli
     278:	fe be       	out	0x3e, r15	; 62
     27a:	0f be       	out	0x3f, r0	; 63
     27c:	ed be       	out	0x3d, r14	; 61

    }

}
     27e:	00 00       	nop
     280:	0f b6       	in	r0, 0x3f	; 63
     282:	f8 94       	cli
     284:	1e bf       	out	0x3e, r17	; 62
     286:	0f be       	out	0x3f, r0	; 63
     288:	0d bf       	out	0x3d, r16	; 61
     28a:	28 96       	adiw	r28, 0x08	; 8
     28c:	0f b6       	in	r0, 0x3f	; 63
     28e:	f8 94       	cli
     290:	de bf       	out	0x3e, r29	; 62
     292:	0f be       	out	0x3f, r0	; 63
     294:	cd bf       	out	0x3d, r28	; 61
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	1f 91       	pop	r17
     29c:	0f 91       	pop	r16
     29e:	ff 90       	pop	r15
     2a0:	ef 90       	pop	r14
     2a2:	08 95       	ret

000002a4 <config_write_defaults>:

void config_write_defaults()
{
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
     2b4:	28 97       	sbiw	r28, 0x08	; 8
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	f8 94       	cli
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	cd bf       	out	0x3d, r28	; 61
    int size = sizeof(config_struct);
    unsigned char buf[size];
    memcpy((unsigned char*)buf, (unsigned char*)&config_defaults, size);

    eeprom_writebuf(base_addr, (unsigned char*)buf, size);
}
     2c0:	0d b7       	in	r16, 0x3d	; 61
     2c2:	1e b7       	in	r17, 0x3e	; 62
    }

}

void config_write_defaults()
{
     2c4:	8d b7       	in	r24, 0x3d	; 61
     2c6:	9e b7       	in	r25, 0x3e	; 62
     2c8:	7c 01       	movw	r14, r24
    update_checksum((unsigned char*)&config, sizeof(config));
     2ca:	62 e1       	ldi	r22, 0x12	; 18
     2cc:	70 e0       	ldi	r23, 0x00	; 0
     2ce:	81 e8       	ldi	r24, 0x81	; 129
     2d0:	92 e0       	ldi	r25, 0x02	; 2
     2d2:	0e 94 30 07 	call	0xe60	; 0xe60 <update_checksum>

    //Writing defaults to eeprom
    unsigned int base_addr = 0x040;
     2d6:	80 e4       	ldi	r24, 0x40	; 64
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	9a 83       	std	Y+2, r25	; 0x02
     2dc:	89 83       	std	Y+1, r24	; 0x01
    int size = sizeof(config_struct);
     2de:	82 e1       	ldi	r24, 0x12	; 18
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	9c 83       	std	Y+4, r25	; 0x04
     2e4:	8b 83       	std	Y+3, r24	; 0x03
    unsigned char buf[size];
     2e6:	8b 81       	ldd	r24, Y+3	; 0x03
     2e8:	9c 81       	ldd	r25, Y+4	; 0x04
     2ea:	9c 01       	movw	r18, r24
     2ec:	21 50       	subi	r18, 0x01	; 1
     2ee:	31 09       	sbc	r19, r1
     2f0:	3e 83       	std	Y+6, r19	; 0x06
     2f2:	2d 83       	std	Y+5, r18	; 0x05
     2f4:	2d b7       	in	r18, 0x3d	; 61
     2f6:	3e b7       	in	r19, 0x3e	; 62
     2f8:	28 1b       	sub	r18, r24
     2fa:	39 0b       	sbc	r19, r25
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	f8 94       	cli
     300:	3e bf       	out	0x3e, r19	; 62
     302:	0f be       	out	0x3f, r0	; 63
     304:	2d bf       	out	0x3d, r18	; 61
     306:	8d b7       	in	r24, 0x3d	; 61
     308:	9e b7       	in	r25, 0x3e	; 62
     30a:	01 96       	adiw	r24, 0x01	; 1
     30c:	98 87       	std	Y+8, r25	; 0x08
     30e:	8f 83       	std	Y+7, r24	; 0x07
    memcpy((unsigned char*)buf, (unsigned char*)&config_defaults, size);
     310:	2b 81       	ldd	r18, Y+3	; 0x03
     312:	3c 81       	ldd	r19, Y+4	; 0x04
     314:	8f 81       	ldd	r24, Y+7	; 0x07
     316:	98 85       	ldd	r25, Y+8	; 0x08
     318:	a9 01       	movw	r20, r18
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	71 e0       	ldi	r23, 0x01	; 1
     31e:	0e 94 1c 14 	call	0x2838	; 0x2838 <memcpy>

    eeprom_writebuf(base_addr, (unsigned char*)buf, size);
     322:	4b 81       	ldd	r20, Y+3	; 0x03
     324:	2f 81       	ldd	r18, Y+7	; 0x07
     326:	38 85       	ldd	r19, Y+8	; 0x08
     328:	89 81       	ldd	r24, Y+1	; 0x01
     32a:	9a 81       	ldd	r25, Y+2	; 0x02
     32c:	b9 01       	movw	r22, r18
     32e:	0e 94 2f 03 	call	0x65e	; 0x65e <eeprom_writebuf>
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	f8 94       	cli
     336:	fe be       	out	0x3e, r15	; 62
     338:	0f be       	out	0x3f, r0	; 63
     33a:	ed be       	out	0x3d, r14	; 61
}
     33c:	00 00       	nop
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	f8 94       	cli
     342:	1e bf       	out	0x3e, r17	; 62
     344:	0f be       	out	0x3f, r0	; 63
     346:	0d bf       	out	0x3d, r16	; 61
     348:	28 96       	adiw	r28, 0x08	; 8
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	f8 94       	cli
     34e:	de bf       	out	0x3e, r29	; 62
     350:	0f be       	out	0x3f, r0	; 63
     352:	cd bf       	out	0x3d, r28	; 61
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	1f 91       	pop	r17
     35a:	0f 91       	pop	r16
     35c:	ff 90       	pop	r15
     35e:	ef 90       	pop	r14
     360:	08 95       	ret

00000362 <delay_init>:
static unsigned int limit[2] = {0, 0};
static unsigned char initialized = 0;

typedef void (*func_t)(void);

void delay_init() {
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	00 d0       	rcall	.+0      	; 0x368 <delay_init+0x6>
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
    if (!initialized) {
     36c:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <initialized>
     370:	88 23       	and	r24, r24
     372:	89 f5       	brne	.+98     	; 0x3d6 <delay_init+0x74>
        /*

        unsigned int PRESCALER_VALUE = 64;
        */

        unsigned int COMPARE_VALUE = 250;
     374:	8a ef       	ldi	r24, 0xFA	; 250
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	9a 83       	std	Y+2, r25	; 0x02
     37a:	89 83       	std	Y+1, r24	; 0x01



        OCR0A = COMPARE_VALUE-1; // Set timer0 compare value to 250-1 = 249
     37c:	87 e4       	ldi	r24, 0x47	; 71
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	29 81       	ldd	r18, Y+1	; 0x01
     382:	21 50       	subi	r18, 0x01	; 1
     384:	fc 01       	movw	r30, r24
     386:	20 83       	st	Z, r18

        // Set CTC mode and correct clock divisor
        TCCR0A |= (1 << WGM01); // Set CTC mode //WGM01
     388:	84 e4       	ldi	r24, 0x44	; 68
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	24 e4       	ldi	r18, 0x44	; 68
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	f9 01       	movw	r30, r18
     392:	20 81       	ld	r18, Z
     394:	22 60       	ori	r18, 0x02	; 2
     396:	fc 01       	movw	r30, r24
     398:	20 83       	st	Z, r18
        TCCR0B |= (1 << CS01) | (1 << CS00); // Set clock divisor (prescaler value = 64)  CS00/CS01
     39a:	85 e4       	ldi	r24, 0x45	; 69
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	25 e4       	ldi	r18, 0x45	; 69
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	f9 01       	movw	r30, r18
     3a4:	20 81       	ld	r18, Z
     3a6:	23 60       	ori	r18, 0x03	; 3
     3a8:	fc 01       	movw	r30, r24
     3aa:	20 83       	st	Z, r18

        // Enable global interrupts
        // __builtin_avr_sei();
        SREG |= (1<<I_SREG);
     3ac:	8f e5       	ldi	r24, 0x5F	; 95
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	2f e5       	ldi	r18, 0x5F	; 95
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	f9 01       	movw	r30, r18
     3b6:	20 81       	ld	r18, Z
     3b8:	20 68       	ori	r18, 0x80	; 128
     3ba:	fc 01       	movw	r30, r24
     3bc:	20 83       	st	Z, r18

        // Enable interrupts on output compare A
        TIMSK0 |= (1 << OCIE0A);  //OCIE0A
     3be:	8e e6       	ldi	r24, 0x6E	; 110
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	2e e6       	ldi	r18, 0x6E	; 110
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	f9 01       	movw	r30, r18
     3c8:	20 81       	ld	r18, Z
     3ca:	22 60       	ori	r18, 0x02	; 2
     3cc:	fc 01       	movw	r30, r24
     3ce:	20 83       	st	Z, r18

        // Stop further initialization by setting initialized to 1
        initialized = 1;
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <initialized>
    }
}
     3d6:	00 00       	nop
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	08 95       	ret

000003e2 <delay_get>:


unsigned int delay_get(unsigned int num) {
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	00 d0       	rcall	.+0      	; 0x3e8 <delay_get+0x6>
     3e8:	00 d0       	rcall	.+0      	; 0x3ea <delay_get+0x8>
     3ea:	00 d0       	rcall	.+0      	; 0x3ec <delay_get+0xa>
     3ec:	cd b7       	in	r28, 0x3d	; 61
     3ee:	de b7       	in	r29, 0x3e	; 62
     3f0:	9e 83       	std	Y+6, r25	; 0x06
     3f2:	8d 83       	std	Y+5, r24	; 0x05

    unsigned int count_value;

    // Get global interrupt enable bit state
    unsigned int sreg_state = SREG & (1 << I_SREG);
     3f4:	8f e5       	ldi	r24, 0x5F	; 95
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	fc 01       	movw	r30, r24
     3fa:	80 81       	ld	r24, Z
     3fc:	08 2e       	mov	r0, r24
     3fe:	00 0c       	add	r0, r0
     400:	99 0b       	sbc	r25, r25
     402:	80 78       	andi	r24, 0x80	; 128
     404:	99 27       	eor	r25, r25
     406:	9a 83       	std	Y+2, r25	; 0x02
     408:	89 83       	std	Y+1, r24	; 0x01

    // Disable interrupts
    // __builtin_avr_cli(); //
    SREG &= ~(1<<I_SREG);
     40a:	8f e5       	ldi	r24, 0x5F	; 95
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	2f e5       	ldi	r18, 0x5F	; 95
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	f9 01       	movw	r30, r18
     414:	20 81       	ld	r18, Z
     416:	2f 77       	andi	r18, 0x7F	; 127
     418:	fc 01       	movw	r30, r24
     41a:	20 83       	st	Z, r18

    // Get the delay_count[num] value
    count_value = delay_count[num];
     41c:	8d 81       	ldd	r24, Y+5	; 0x05
     41e:	9e 81       	ldd	r25, Y+6	; 0x06
     420:	88 0f       	add	r24, r24
     422:	99 1f       	adc	r25, r25
     424:	88 52       	subi	r24, 0x28	; 40
     426:	9e 4f       	sbci	r25, 0xFE	; 254
     428:	fc 01       	movw	r30, r24
     42a:	80 81       	ld	r24, Z
     42c:	91 81       	ldd	r25, Z+1	; 0x01
     42e:	9c 83       	std	Y+4, r25	; 0x04
     430:	8b 83       	std	Y+3, r24	; 0x03

    // Restore global interrupt state
    if (sreg_state) {
     432:	89 81       	ldd	r24, Y+1	; 0x01
     434:	9a 81       	ldd	r25, Y+2	; 0x02
     436:	89 2b       	or	r24, r25
     438:	49 f0       	breq	.+18     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
        SREG |= (1<<I_SREG); //Enable interrupts
     43a:	8f e5       	ldi	r24, 0x5F	; 95
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	2f e5       	ldi	r18, 0x5F	; 95
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	f9 01       	movw	r30, r18
     444:	20 81       	ld	r18, Z
     446:	20 68       	ori	r18, 0x80	; 128
     448:	fc 01       	movw	r30, r24
     44a:	20 83       	st	Z, r18
    }

    // Return the count value
    return count_value;
     44c:	8b 81       	ldd	r24, Y+3	; 0x03
     44e:	9c 81       	ldd	r25, Y+4	; 0x04
}
     450:	26 96       	adiw	r28, 0x06	; 6
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	f8 94       	cli
     456:	de bf       	out	0x3e, r29	; 62
     458:	0f be       	out	0x3f, r0	; 63
     45a:	cd bf       	out	0x3d, r28	; 61
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	08 95       	ret

00000462 <delay_set>:


void delay_set(unsigned int num, unsigned int time) {
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	00 d0       	rcall	.+0      	; 0x468 <delay_set+0x6>
     468:	00 d0       	rcall	.+0      	; 0x46a <delay_set+0x8>
     46a:	00 d0       	rcall	.+0      	; 0x46c <delay_set+0xa>
     46c:	cd b7       	in	r28, 0x3d	; 61
     46e:	de b7       	in	r29, 0x3e	; 62
     470:	9c 83       	std	Y+4, r25	; 0x04
     472:	8b 83       	std	Y+3, r24	; 0x03
     474:	7e 83       	std	Y+6, r23	; 0x06
     476:	6d 83       	std	Y+5, r22	; 0x05

    // If not initialized, initialize the delay counter
    if (!initialized) {
     478:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <initialized>
     47c:	88 23       	and	r24, r24
     47e:	11 f4       	brne	.+4      	; 0x484 <delay_set+0x22>
        delay_init();
     480:	0e 94 b1 01 	call	0x362	; 0x362 <delay_init>
    }
    // Get global interrupt enable bit state
    unsigned int sreg_state = SREG & (1 << 7);
     484:	8f e5       	ldi	r24, 0x5F	; 95
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	fc 01       	movw	r30, r24
     48a:	80 81       	ld	r24, Z
     48c:	08 2e       	mov	r0, r24
     48e:	00 0c       	add	r0, r0
     490:	99 0b       	sbc	r25, r25
     492:	80 78       	andi	r24, 0x80	; 128
     494:	99 27       	eor	r25, r25
     496:	9a 83       	std	Y+2, r25	; 0x02
     498:	89 83       	std	Y+1, r24	; 0x01

    // Disable Interrupts
    SREG &= ~(1<<I_SREG); //cli()
     49a:	8f e5       	ldi	r24, 0x5F	; 95
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	2f e5       	ldi	r18, 0x5F	; 95
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	f9 01       	movw	r30, r18
     4a4:	20 81       	ld	r18, Z
     4a6:	2f 77       	andi	r18, 0x7F	; 127
     4a8:	fc 01       	movw	r30, r24
     4aa:	20 83       	st	Z, r18

    // Set the limit for delay[num] and clear the count for delay[num]
    limit[num] = time;
     4ac:	8b 81       	ldd	r24, Y+3	; 0x03
     4ae:	9c 81       	ldd	r25, Y+4	; 0x04
     4b0:	88 0f       	add	r24, r24
     4b2:	99 1f       	adc	r25, r25
     4b4:	84 52       	subi	r24, 0x24	; 36
     4b6:	9e 4f       	sbci	r25, 0xFE	; 254
     4b8:	2d 81       	ldd	r18, Y+5	; 0x05
     4ba:	3e 81       	ldd	r19, Y+6	; 0x06
     4bc:	fc 01       	movw	r30, r24
     4be:	31 83       	std	Z+1, r19	; 0x01
     4c0:	20 83       	st	Z, r18
    delay_count[num] = 0;
     4c2:	8b 81       	ldd	r24, Y+3	; 0x03
     4c4:	9c 81       	ldd	r25, Y+4	; 0x04
     4c6:	88 0f       	add	r24, r24
     4c8:	99 1f       	adc	r25, r25
     4ca:	88 52       	subi	r24, 0x28	; 40
     4cc:	9e 4f       	sbci	r25, 0xFE	; 254
     4ce:	fc 01       	movw	r30, r24
     4d0:	11 82       	std	Z+1, r1	; 0x01
     4d2:	10 82       	st	Z, r1

    // Restore global interrupt state
    if (sreg_state) {
     4d4:	89 81       	ldd	r24, Y+1	; 0x01
     4d6:	9a 81       	ldd	r25, Y+2	; 0x02
     4d8:	89 2b       	or	r24, r25
     4da:	49 f0       	breq	.+18     	; 0x4ee <delay_set+0x8c>
        SREG |= (1<<I_SREG);   //sei()
     4dc:	8f e5       	ldi	r24, 0x5F	; 95
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	2f e5       	ldi	r18, 0x5F	; 95
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	f9 01       	movw	r30, r18
     4e6:	20 81       	ld	r18, Z
     4e8:	20 68       	ori	r18, 0x80	; 128
     4ea:	fc 01       	movw	r30, r24
     4ec:	20 83       	st	Z, r18
    }
}
     4ee:	00 00       	nop
     4f0:	26 96       	adiw	r28, 0x06	; 6
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	f8 94       	cli
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	cd bf       	out	0x3d, r28	; 61
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	08 95       	ret

00000502 <delay_isdone>:


unsigned int delay_isdone(unsigned int num) {
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	00 d0       	rcall	.+0      	; 0x508 <delay_isdone+0x6>
     508:	00 d0       	rcall	.+0      	; 0x50a <delay_isdone+0x8>
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
     50e:	9c 83       	std	Y+4, r25	; 0x04
     510:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int result = 0;
     512:	1a 82       	std	Y+2, r1	; 0x02
     514:	19 82       	std	Y+1, r1	; 0x01

    // If delay_count[num] equals limit[num], set result to 1
    if (delay_count[num] == limit[num]) {
     516:	8b 81       	ldd	r24, Y+3	; 0x03
     518:	9c 81       	ldd	r25, Y+4	; 0x04
     51a:	88 0f       	add	r24, r24
     51c:	99 1f       	adc	r25, r25
     51e:	88 52       	subi	r24, 0x28	; 40
     520:	9e 4f       	sbci	r25, 0xFE	; 254
     522:	fc 01       	movw	r30, r24
     524:	20 81       	ld	r18, Z
     526:	31 81       	ldd	r19, Z+1	; 0x01
     528:	8b 81       	ldd	r24, Y+3	; 0x03
     52a:	9c 81       	ldd	r25, Y+4	; 0x04
     52c:	88 0f       	add	r24, r24
     52e:	99 1f       	adc	r25, r25
     530:	84 52       	subi	r24, 0x24	; 36
     532:	9e 4f       	sbci	r25, 0xFE	; 254
     534:	fc 01       	movw	r30, r24
     536:	80 81       	ld	r24, Z
     538:	91 81       	ldd	r25, Z+1	; 0x01
     53a:	28 17       	cp	r18, r24
     53c:	39 07       	cpc	r19, r25
     53e:	21 f4       	brne	.+8      	; 0x548 <delay_isdone+0x46>
        result = 1;
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	9a 83       	std	Y+2, r25	; 0x02
     546:	89 83       	std	Y+1, r24	; 0x01
    }

    // Return the result
    return result;
     548:	89 81       	ldd	r24, Y+1	; 0x01
     54a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	08 95       	ret

0000055a <__vector_14>:

//map to ivt

void __vector_14(void) __attribute__ ((signal, used, externally_visible));

void __vector_14(void) {
     55a:	1f 92       	push	r1
     55c:	0f 92       	push	r0
     55e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     562:	0f 92       	push	r0
     564:	11 24       	eor	r1, r1
     566:	2f 93       	push	r18
     568:	3f 93       	push	r19
     56a:	8f 93       	push	r24
     56c:	9f 93       	push	r25
     56e:	ef 93       	push	r30
     570:	ff 93       	push	r31
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	00 d0       	rcall	.+0      	; 0x578 <__vector_14+0x1e>
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
    for (unsigned int i = 0; i < sizeof(delay_count) / sizeof(delay_count[0]); i++) {
     57c:	1a 82       	std	Y+2, r1	; 0x02
     57e:	19 82       	std	Y+1, r1	; 0x01
     580:	2f c0       	rjmp	.+94     	; 0x5e0 <__vector_14+0x86>
        if (delay_count[i] < limit[i]) {
     582:	89 81       	ldd	r24, Y+1	; 0x01
     584:	9a 81       	ldd	r25, Y+2	; 0x02
     586:	88 0f       	add	r24, r24
     588:	99 1f       	adc	r25, r25
     58a:	88 52       	subi	r24, 0x28	; 40
     58c:	9e 4f       	sbci	r25, 0xFE	; 254
     58e:	fc 01       	movw	r30, r24
     590:	20 81       	ld	r18, Z
     592:	31 81       	ldd	r19, Z+1	; 0x01
     594:	89 81       	ldd	r24, Y+1	; 0x01
     596:	9a 81       	ldd	r25, Y+2	; 0x02
     598:	88 0f       	add	r24, r24
     59a:	99 1f       	adc	r25, r25
     59c:	84 52       	subi	r24, 0x24	; 36
     59e:	9e 4f       	sbci	r25, 0xFE	; 254
     5a0:	fc 01       	movw	r30, r24
     5a2:	80 81       	ld	r24, Z
     5a4:	91 81       	ldd	r25, Z+1	; 0x01
     5a6:	28 17       	cp	r18, r24
     5a8:	39 07       	cpc	r19, r25
     5aa:	a8 f4       	brcc	.+42     	; 0x5d6 <__vector_14+0x7c>
            delay_count[i]++;
     5ac:	89 81       	ldd	r24, Y+1	; 0x01
     5ae:	9a 81       	ldd	r25, Y+2	; 0x02
     5b0:	88 0f       	add	r24, r24
     5b2:	99 1f       	adc	r25, r25
     5b4:	88 52       	subi	r24, 0x28	; 40
     5b6:	9e 4f       	sbci	r25, 0xFE	; 254
     5b8:	fc 01       	movw	r30, r24
     5ba:	80 81       	ld	r24, Z
     5bc:	91 81       	ldd	r25, Z+1	; 0x01
     5be:	9c 01       	movw	r18, r24
     5c0:	2f 5f       	subi	r18, 0xFF	; 255
     5c2:	3f 4f       	sbci	r19, 0xFF	; 255
     5c4:	89 81       	ldd	r24, Y+1	; 0x01
     5c6:	9a 81       	ldd	r25, Y+2	; 0x02
     5c8:	88 0f       	add	r24, r24
     5ca:	99 1f       	adc	r25, r25
     5cc:	88 52       	subi	r24, 0x28	; 40
     5ce:	9e 4f       	sbci	r25, 0xFE	; 254
     5d0:	fc 01       	movw	r30, r24
     5d2:	31 83       	std	Z+1, r19	; 0x01
     5d4:	20 83       	st	Z, r18
//map to ivt

void __vector_14(void) __attribute__ ((signal, used, externally_visible));

void __vector_14(void) {
    for (unsigned int i = 0; i < sizeof(delay_count) / sizeof(delay_count[0]); i++) {
     5d6:	89 81       	ldd	r24, Y+1	; 0x01
     5d8:	9a 81       	ldd	r25, Y+2	; 0x02
     5da:	01 96       	adiw	r24, 0x01	; 1
     5dc:	9a 83       	std	Y+2, r25	; 0x02
     5de:	89 83       	std	Y+1, r24	; 0x01
     5e0:	89 81       	ldd	r24, Y+1	; 0x01
     5e2:	9a 81       	ldd	r25, Y+2	; 0x02
     5e4:	02 97       	sbiw	r24, 0x02	; 2
     5e6:	68 f2       	brcs	.-102    	; 0x582 <__vector_14+0x28>
        if (delay_count[i] < limit[i]) {
            delay_count[i]++;
        }
    }
}
     5e8:	00 00       	nop
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	ff 91       	pop	r31
     5f4:	ef 91       	pop	r30
     5f6:	9f 91       	pop	r25
     5f8:	8f 91       	pop	r24
     5fa:	3f 91       	pop	r19
     5fc:	2f 91       	pop	r18
     5fe:	0f 90       	pop	r0
     600:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     604:	0f 90       	pop	r0
     606:	1f 90       	pop	r1
     608:	18 95       	reti

0000060a <get_writebusy>:
unsigned char writesize;        //The size of the data (in bytes) within the write buffer that must be written.
unsigned int writeaddr;         //Used by the interrupt service routine, specifies the next EEPROM address with which to write the data to.

void EEPROM_set_write_mode();

void get_writebusy(){
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	cd b7       	in	r28, 0x3d	; 61
     610:	de b7       	in	r29, 0x3e	; 62
    uart_writedec32(write_busy);
     612:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <write_busy>
     616:	88 2f       	mov	r24, r24
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	a0 e0       	ldi	r26, 0x00	; 0
     61c:	b0 e0       	ldi	r27, 0x00	; 0
     61e:	bc 01       	movw	r22, r24
     620:	cd 01       	movw	r24, r26
     622:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <uart_writedec32>
}
     626:	00 00       	nop
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	08 95       	ret

0000062e <eeprom_isbusy>:

int eeprom_isbusy(){
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	00 d0       	rcall	.+0      	; 0x634 <eeprom_isbusy+0x6>
     634:	cd b7       	in	r28, 0x3d	; 61
     636:	de b7       	in	r29, 0x3e	; 62
    if(write_busy==1)
     638:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <write_busy>
     63c:	81 30       	cpi	r24, 0x01	; 1
     63e:	11 f4       	brne	.+4      	; 0x644 <eeprom_isbusy+0x16>
    {
        int i=0;
     640:	1a 82       	std	Y+2, r1	; 0x02
     642:	19 82       	std	Y+1, r1	; 0x01
    }
    return write_busy==1;
     644:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <write_busy>
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	91 30       	cpi	r25, 0x01	; 1
     64c:	09 f0       	breq	.+2      	; 0x650 <eeprom_isbusy+0x22>
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	88 2f       	mov	r24, r24
     652:	90 e0       	ldi	r25, 0x00	; 0
    //return 0;
}
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	08 95       	ret

0000065e <eeprom_writebuf>:

void eeprom_writebuf(unsigned int addr, unsigned char* buf, unsigned char size){
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
     666:	27 97       	sbiw	r28, 0x07	; 7
     668:	0f b6       	in	r0, 0x3f	; 63
     66a:	f8 94       	cli
     66c:	de bf       	out	0x3e, r29	; 62
     66e:	0f be       	out	0x3f, r0	; 63
     670:	cd bf       	out	0x3d, r28	; 61
     672:	9c 83       	std	Y+4, r25	; 0x04
     674:	8b 83       	std	Y+3, r24	; 0x03
     676:	7e 83       	std	Y+6, r23	; 0x06
     678:	6d 83       	std	Y+5, r22	; 0x05
     67a:	4f 83       	std	Y+7, r20	; 0x07
    writeaddr = addr;
     67c:	8b 81       	ldd	r24, Y+3	; 0x03
     67e:	9c 81       	ldd	r25, Y+4	; 0x04
     680:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <writeaddr+0x1>
     684:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <writeaddr>
    write_busy = 1;
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <write_busy>
    bufidx = 0;
     68e:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <bufidx>

    //Copying
    for (int i=0;i<size;i++)
     692:	1a 82       	std	Y+2, r1	; 0x02
     694:	19 82       	std	Y+1, r1	; 0x01
     696:	13 c0       	rjmp	.+38     	; 0x6be <eeprom_writebuf+0x60>
        writebuf[i] = buf[i];
     698:	89 81       	ldd	r24, Y+1	; 0x01
     69a:	9a 81       	ldd	r25, Y+2	; 0x02
     69c:	2d 81       	ldd	r18, Y+5	; 0x05
     69e:	3e 81       	ldd	r19, Y+6	; 0x06
     6a0:	82 0f       	add	r24, r18
     6a2:	93 1f       	adc	r25, r19
     6a4:	fc 01       	movw	r30, r24
     6a6:	20 81       	ld	r18, Z
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	9a 81       	ldd	r25, Y+2	; 0x02
     6ac:	8a 56       	subi	r24, 0x6A	; 106
     6ae:	9d 4f       	sbci	r25, 0xFD	; 253
     6b0:	fc 01       	movw	r30, r24
     6b2:	20 83       	st	Z, r18
    writeaddr = addr;
    write_busy = 1;
    bufidx = 0;

    //Copying
    for (int i=0;i<size;i++)
     6b4:	89 81       	ldd	r24, Y+1	; 0x01
     6b6:	9a 81       	ldd	r25, Y+2	; 0x02
     6b8:	01 96       	adiw	r24, 0x01	; 1
     6ba:	9a 83       	std	Y+2, r25	; 0x02
     6bc:	89 83       	std	Y+1, r24	; 0x01
     6be:	8f 81       	ldd	r24, Y+7	; 0x07
     6c0:	28 2f       	mov	r18, r24
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	89 81       	ldd	r24, Y+1	; 0x01
     6c6:	9a 81       	ldd	r25, Y+2	; 0x02
     6c8:	82 17       	cp	r24, r18
     6ca:	93 07       	cpc	r25, r19
     6cc:	2c f3       	brlt	.-54     	; 0x698 <eeprom_writebuf+0x3a>
        writebuf[i] = buf[i];

    writesize = size;
     6ce:	8f 81       	ldd	r24, Y+7	; 0x07
     6d0:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <writesize>

    //init EEPROM
    EECR |= (1<<EEPM1);
     6d4:	8f e3       	ldi	r24, 0x3F	; 63
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	2f e3       	ldi	r18, 0x3F	; 63
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	f9 01       	movw	r30, r18
     6de:	20 81       	ld	r18, Z
     6e0:	20 62       	ori	r18, 0x20	; 32
     6e2:	fc 01       	movw	r30, r24
     6e4:	20 83       	st	Z, r18
    EECR &= ~(1<<EEPM0);
     6e6:	8f e3       	ldi	r24, 0x3F	; 63
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	2f e3       	ldi	r18, 0x3F	; 63
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	f9 01       	movw	r30, r18
     6f0:	20 81       	ld	r18, Z
     6f2:	2f 7e       	andi	r18, 0xEF	; 239
     6f4:	fc 01       	movw	r30, r24
     6f6:	20 83       	st	Z, r18
    EEARH &= ~(1<<EEAR8);
     6f8:	82 e4       	ldi	r24, 0x42	; 66
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	22 e4       	ldi	r18, 0x42	; 66
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	f9 01       	movw	r30, r18
     702:	20 81       	ld	r18, Z
     704:	2e 7f       	andi	r18, 0xFE	; 254
     706:	fc 01       	movw	r30, r24
     708:	20 83       	st	Z, r18

    SREG |= (1<<I_SREG);        //Global interrupt enable
     70a:	8f e5       	ldi	r24, 0x5F	; 95
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	2f e5       	ldi	r18, 0x5F	; 95
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	f9 01       	movw	r30, r18
     714:	20 81       	ld	r18, Z
     716:	20 68       	ori	r18, 0x80	; 128
     718:	fc 01       	movw	r30, r24
     71a:	20 83       	st	Z, r18
    EECR |= (1<<EERIE);         //Enabling EEPROM ready interrupt
     71c:	8f e3       	ldi	r24, 0x3F	; 63
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	2f e3       	ldi	r18, 0x3F	; 63
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	f9 01       	movw	r30, r18
     726:	20 81       	ld	r18, Z
     728:	28 60       	ori	r18, 0x08	; 8
     72a:	fc 01       	movw	r30, r24
     72c:	20 83       	st	Z, r18

    while(write_busy);
     72e:	00 00       	nop
     730:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <write_busy>
     734:	88 23       	and	r24, r24
     736:	e1 f7       	brne	.-8      	; 0x730 <eeprom_writebuf+0xd2>
}
     738:	00 00       	nop
     73a:	27 96       	adiw	r28, 0x07	; 7
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	08 95       	ret

0000074c <eeprom_readbuf>:

void eeprom_readbuf(unsigned int addr, unsigned char* buf, unsigned char size)
{
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
     754:	29 97       	sbiw	r28, 0x09	; 9
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	de bf       	out	0x3e, r29	; 62
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	cd bf       	out	0x3d, r28	; 61
     760:	9e 83       	std	Y+6, r25	; 0x06
     762:	8d 83       	std	Y+5, r24	; 0x05
     764:	78 87       	std	Y+8, r23	; 0x08
     766:	6f 83       	std	Y+7, r22	; 0x07
     768:	49 87       	std	Y+9, r20	; 0x09
    unsigned int read_addr=addr;;
     76a:	8d 81       	ldd	r24, Y+5	; 0x05
     76c:	9e 81       	ldd	r25, Y+6	; 0x06
     76e:	9a 83       	std	Y+2, r25	; 0x02
     770:	89 83       	std	Y+1, r24	; 0x01
    for(int i=0;i<size;i++)
     772:	1c 82       	std	Y+4, r1	; 0x04
     774:	1b 82       	std	Y+3, r1	; 0x03
     776:	34 c0       	rjmp	.+104    	; 0x7e0 <eeprom_readbuf+0x94>
    {
        //Read from EEPROM and store in buf[0:size-1]
        while(EECR & (1<<EEPE));     //waiting until EEPE becomes 0)
     778:	00 00       	nop
     77a:	8f e3       	ldi	r24, 0x3F	; 63
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	fc 01       	movw	r30, r24
     780:	80 81       	ld	r24, Z
     782:	08 2e       	mov	r0, r24
     784:	00 0c       	add	r0, r0
     786:	99 0b       	sbc	r25, r25
     788:	82 70       	andi	r24, 0x02	; 2
     78a:	99 27       	eor	r25, r25
     78c:	89 2b       	or	r24, r25
     78e:	a9 f7       	brne	.-22     	; 0x77a <eeprom_readbuf+0x2e>
        EEAR = read_addr;
     790:	81 e6       	ldi	r24, 0x61	; 97
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	29 81       	ldd	r18, Y+1	; 0x01
     796:	3a 81       	ldd	r19, Y+2	; 0x02
     798:	fc 01       	movw	r30, r24
     79a:	31 83       	std	Z+1, r19	; 0x01
     79c:	20 83       	st	Z, r18
        EECR |= (1<<EERE);
     79e:	8f e3       	ldi	r24, 0x3F	; 63
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	2f e3       	ldi	r18, 0x3F	; 63
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	f9 01       	movw	r30, r18
     7a8:	20 81       	ld	r18, Z
     7aa:	21 60       	ori	r18, 0x01	; 1
     7ac:	fc 01       	movw	r30, r24
     7ae:	20 83       	st	Z, r18
        //Wait for 4 cycles
        //uart_writestr("Here before");
        __builtin_avr_delay_cycles(4);
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <eeprom_readbuf+0x66>
     7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <eeprom_readbuf+0x68>
        //uart_writestr("Here after");

        buf[i] = EEDR;
     7b4:	8b 81       	ldd	r24, Y+3	; 0x03
     7b6:	9c 81       	ldd	r25, Y+4	; 0x04
     7b8:	2f 81       	ldd	r18, Y+7	; 0x07
     7ba:	38 85       	ldd	r19, Y+8	; 0x08
     7bc:	82 0f       	add	r24, r18
     7be:	93 1f       	adc	r25, r19
     7c0:	20 e4       	ldi	r18, 0x40	; 64
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	f9 01       	movw	r30, r18
     7c6:	20 81       	ld	r18, Z
     7c8:	fc 01       	movw	r30, r24
     7ca:	20 83       	st	Z, r18
        read_addr++;
     7cc:	89 81       	ldd	r24, Y+1	; 0x01
     7ce:	9a 81       	ldd	r25, Y+2	; 0x02
     7d0:	01 96       	adiw	r24, 0x01	; 1
     7d2:	9a 83       	std	Y+2, r25	; 0x02
     7d4:	89 83       	std	Y+1, r24	; 0x01
}

void eeprom_readbuf(unsigned int addr, unsigned char* buf, unsigned char size)
{
    unsigned int read_addr=addr;;
    for(int i=0;i<size;i++)
     7d6:	8b 81       	ldd	r24, Y+3	; 0x03
     7d8:	9c 81       	ldd	r25, Y+4	; 0x04
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	9c 83       	std	Y+4, r25	; 0x04
     7de:	8b 83       	std	Y+3, r24	; 0x03
     7e0:	89 85       	ldd	r24, Y+9	; 0x09
     7e2:	28 2f       	mov	r18, r24
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	8b 81       	ldd	r24, Y+3	; 0x03
     7e8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ea:	82 17       	cp	r24, r18
     7ec:	93 07       	cpc	r25, r19
     7ee:	24 f2       	brlt	.-120    	; 0x778 <eeprom_readbuf+0x2c>
        //uart_writestr("Here after");

        buf[i] = EEDR;
        read_addr++;
    }
}
     7f0:	00 00       	nop
     7f2:	29 96       	adiw	r28, 0x09	; 9
     7f4:	0f b6       	in	r0, 0x3f	; 63
     7f6:	f8 94       	cli
     7f8:	de bf       	out	0x3e, r29	; 62
     7fa:	0f be       	out	0x3f, r0	; 63
     7fc:	cd bf       	out	0x3d, r28	; 61
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	08 95       	ret

00000804 <__vector_22>:

void __vector_22(void) __attribute__ ((signal, used, externally_visible));

void __vector_22(){
     804:	1f 92       	push	r1
     806:	0f 92       	push	r0
     808:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     80c:	0f 92       	push	r0
     80e:	11 24       	eor	r1, r1
     810:	2f 93       	push	r18
     812:	3f 93       	push	r19
     814:	8f 93       	push	r24
     816:	9f 93       	push	r25
     818:	ef 93       	push	r30
     81a:	ff 93       	push	r31
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
    //EEPROM ready
    if(bufidx<writesize)
     824:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <bufidx>
     828:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <writesize>
     82c:	98 17       	cp	r25, r24
     82e:	08 f0       	brcs	.+2      	; 0x832 <__vector_22+0x2e>
     830:	69 c0       	rjmp	.+210    	; 0x904 <__stack+0x5>
    {
        //Clear the global interrupt flag
        SREG &= ~(1<<I_SREG);
     832:	8f e5       	ldi	r24, 0x5F	; 95
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	2f e5       	ldi	r18, 0x5F	; 95
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	f9 01       	movw	r30, r18
     83c:	20 81       	ld	r18, Z
     83e:	2f 77       	andi	r18, 0x7F	; 127
     840:	fc 01       	movw	r30, r24
     842:	20 83       	st	Z, r18

        //Write writebuf[bufidx] to EEPROM writeaddr

        while (EECR & (1<<EEPE));     //waiting until EEPE becomes 0
     844:	00 00       	nop
     846:	8f e3       	ldi	r24, 0x3F	; 63
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	fc 01       	movw	r30, r24
     84c:	80 81       	ld	r24, Z
     84e:	08 2e       	mov	r0, r24
     850:	00 0c       	add	r0, r0
     852:	99 0b       	sbc	r25, r25
     854:	82 70       	andi	r24, 0x02	; 2
     856:	99 27       	eor	r25, r25
     858:	89 2b       	or	r24, r25
     85a:	a9 f7       	brne	.-22     	; 0x846 <__vector_22+0x42>

        //while (SPMCSR & (1<<SELFPRGEN));     //waiting until SELFPRGEN becomes 0

        EEAR = writeaddr;                      //Writes address to EEARL register
     85c:	81 e6       	ldi	r24, 0x61	; 97
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	20 91 93 02 	lds	r18, 0x0293	; 0x800293 <writeaddr>
     864:	30 91 94 02 	lds	r19, 0x0294	; 0x800294 <writeaddr+0x1>
     868:	fc 01       	movw	r30, r24
     86a:	31 83       	std	Z+1, r19	; 0x01
     86c:	20 83       	st	Z, r18
        EEDR = writebuf[bufidx];                //Writes data to EEDR register
     86e:	80 e4       	ldi	r24, 0x40	; 64
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <bufidx>
     876:	22 2f       	mov	r18, r18
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	2a 56       	subi	r18, 0x6A	; 106
     87c:	3d 4f       	sbci	r19, 0xFD	; 253
     87e:	f9 01       	movw	r30, r18
     880:	20 81       	ld	r18, Z
     882:	fc 01       	movw	r30, r24
     884:	20 83       	st	Z, r18

        //EECR &= ~(1<<EEPE);
        EECR |= (1<<EEMPE);                     //enable master write
     886:	8f e3       	ldi	r24, 0x3F	; 63
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	2f e3       	ldi	r18, 0x3F	; 63
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	f9 01       	movw	r30, r18
     890:	20 81       	ld	r18, Z
     892:	24 60       	ori	r18, 0x04	; 4
     894:	fc 01       	movw	r30, r24
     896:	20 83       	st	Z, r18
        EECR |= (1<<EEPE);                      //enable write
     898:	8f e3       	ldi	r24, 0x3F	; 63
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	2f e3       	ldi	r18, 0x3F	; 63
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	f9 01       	movw	r30, r18
     8a2:	20 81       	ld	r18, Z
     8a4:	22 60       	ori	r18, 0x02	; 2
     8a6:	fc 01       	movw	r30, r24
     8a8:	20 83       	st	Z, r18

        writeaddr++;
     8aa:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <writeaddr>
     8ae:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <writeaddr+0x1>
     8b2:	01 96       	adiw	r24, 0x01	; 1
     8b4:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <writeaddr+0x1>
     8b8:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <writeaddr>
        bufidx++;
     8bc:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <bufidx>
     8c0:	8f 5f       	subi	r24, 0xFF	; 255
     8c2:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <bufidx>

        //Set the interrupt flag
        SREG |= (1<<I_SREG);
     8c6:	8f e5       	ldi	r24, 0x5F	; 95
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	2f e5       	ldi	r18, 0x5F	; 95
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	f9 01       	movw	r30, r18
     8d0:	20 81       	ld	r18, Z
     8d2:	20 68       	ori	r18, 0x80	; 128
     8d4:	fc 01       	movw	r30, r24
     8d6:	20 83       	st	Z, r18

        //Re-enable eeprom ready interrupt (just in case)
        EECR |= (1<<EERIE);
     8d8:	8f e3       	ldi	r24, 0x3F	; 63
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	2f e3       	ldi	r18, 0x3F	; 63
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	f9 01       	movw	r30, r18
     8e2:	20 81       	ld	r18, Z
     8e4:	28 60       	ori	r18, 0x08	; 8
     8e6:	fc 01       	movw	r30, r24
     8e8:	20 83       	st	Z, r18

        while(EECR & (1<<EEPE));
     8ea:	00 00       	nop
     8ec:	8f e3       	ldi	r24, 0x3F	; 63
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	fc 01       	movw	r30, r24
     8f2:	80 81       	ld	r24, Z
     8f4:	08 2e       	mov	r0, r24
     8f6:	00 0c       	add	r0, r0
     8f8:	99 0b       	sbc	r25, r25
     8fa:	82 70       	andi	r24, 0x02	; 2
     8fc:	99 27       	eor	r25, r25
     8fe:	89 2b       	or	r24, r25
     900:	a9 f7       	brne	.-22     	; 0x8ec <__vector_22+0xe8>
    {
        //Disable EEPROM ready interrupts
        EECR &= ~(1<<EERIE);
        write_busy=0;
    }
}
     902:	11 c0       	rjmp	.+34     	; 0x926 <__stack+0x27>
        //Re-enable eeprom ready interrupt (just in case)
        EECR |= (1<<EERIE);

        while(EECR & (1<<EEPE));
    }
    else if (bufidx>=writesize)
     904:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <bufidx>
     908:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <writesize>
     90c:	98 17       	cp	r25, r24
     90e:	58 f0       	brcs	.+22     	; 0x926 <__stack+0x27>
    {
        //Disable EEPROM ready interrupts
        EECR &= ~(1<<EERIE);
     910:	8f e3       	ldi	r24, 0x3F	; 63
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	2f e3       	ldi	r18, 0x3F	; 63
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	f9 01       	movw	r30, r18
     91a:	20 81       	ld	r18, Z
     91c:	27 7f       	andi	r18, 0xF7	; 247
     91e:	fc 01       	movw	r30, r24
     920:	20 83       	st	Z, r18
        write_busy=0;
     922:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <write_busy>
    }
}
     926:	00 00       	nop
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	ff 91       	pop	r31
     92e:	ef 91       	pop	r30
     930:	9f 91       	pop	r25
     932:	8f 91       	pop	r24
     934:	3f 91       	pop	r19
     936:	2f 91       	pop	r18
     938:	0f 90       	pop	r0
     93a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     93e:	0f 90       	pop	r0
     940:	1f 90       	pop	r1
     942:	18 95       	reti

00000944 <EEPROM_set_write_mode>:

void EEPROM_set_write_mode(){
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
    EECR |= (1<<EEPM1);
     94c:	8f e3       	ldi	r24, 0x3F	; 63
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	2f e3       	ldi	r18, 0x3F	; 63
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	f9 01       	movw	r30, r18
     956:	20 81       	ld	r18, Z
     958:	20 62       	ori	r18, 0x20	; 32
     95a:	fc 01       	movw	r30, r24
     95c:	20 83       	st	Z, r18
}
     95e:	00 00       	nop
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	08 95       	ret

00000966 <led_init>:

const char *Blink_msg;
unsigned int Blink_pos;
enum Blink_state { phase1, phase2 } blink_state;

void led_init() {
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	cd b7       	in	r28, 0x3d	; 61
     96c:	de b7       	in	r29, 0x3e	; 62
    DDRB |= LED_PIN; // Set LED pin as output
     96e:	84 e2       	ldi	r24, 0x24	; 36
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	24 e2       	ldi	r18, 0x24	; 36
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	f9 01       	movw	r30, r18
     978:	20 81       	ld	r18, Z
     97a:	22 60       	ori	r18, 0x02	; 2
     97c:	fc 01       	movw	r30, r24
     97e:	20 83       	st	Z, r18
    PORTB &= ~LED_PIN; // Turn off the LED
     980:	85 e2       	ldi	r24, 0x25	; 37
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	25 e2       	ldi	r18, 0x25	; 37
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	f9 01       	movw	r30, r18
     98a:	20 81       	ld	r18, Z
     98c:	2d 7f       	andi	r18, 0xFD	; 253
     98e:	fc 01       	movw	r30, r24
     990:	20 83       	st	Z, r18
}
     992:	00 00       	nop
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	08 95       	ret

0000099a <led_on>:

void led_on() {
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	cd b7       	in	r28, 0x3d	; 61
     9a0:	de b7       	in	r29, 0x3e	; 62
    PORTB |= LED_PIN;
     9a2:	85 e2       	ldi	r24, 0x25	; 37
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	25 e2       	ldi	r18, 0x25	; 37
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	f9 01       	movw	r30, r18
     9ac:	20 81       	ld	r18, Z
     9ae:	22 60       	ori	r18, 0x02	; 2
     9b0:	fc 01       	movw	r30, r24
     9b2:	20 83       	st	Z, r18
}
     9b4:	00 00       	nop
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	08 95       	ret

000009bc <led_off>:

void led_off() {
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	cd b7       	in	r28, 0x3d	; 61
     9c2:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~LED_PIN;
     9c4:	85 e2       	ldi	r24, 0x25	; 37
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	25 e2       	ldi	r18, 0x25	; 37
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	f9 01       	movw	r30, r18
     9ce:	20 81       	ld	r18, Z
     9d0:	2d 7f       	andi	r18, 0xFD	; 253
     9d2:	fc 01       	movw	r30, r24
     9d4:	20 83       	st	Z, r18
}
     9d6:	00 00       	nop
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	08 95       	ret

000009de <led_is_on>:

int led_is_on() {
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
    return (PORTB & LED_PIN) ? 1 : 0;
     9e6:	85 e2       	ldi	r24, 0x25	; 37
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	fc 01       	movw	r30, r24
     9ec:	80 81       	ld	r24, Z
     9ee:	88 2f       	mov	r24, r24
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	82 70       	andi	r24, 0x02	; 2
     9f4:	99 27       	eor	r25, r25
     9f6:	21 e0       	ldi	r18, 0x01	; 1
     9f8:	89 2b       	or	r24, r25
     9fa:	09 f4       	brne	.+2      	; 0x9fe <led_is_on+0x20>
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	82 2f       	mov	r24, r18
     a00:	90 e0       	ldi	r25, 0x00	; 0
}
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	08 95       	ret

00000a08 <led_set_blink>:

void led_set_blink(char *msg) {
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	00 d0       	rcall	.+0      	; 0xa0e <led_set_blink+0x6>
     a0e:	cd b7       	in	r28, 0x3d	; 61
     a10:	de b7       	in	r29, 0x3e	; 62
     a12:	9a 83       	std	Y+2, r25	; 0x02
     a14:	89 83       	std	Y+1, r24	; 0x01
    Blink_msg = msg;
     a16:	89 81       	ldd	r24, Y+1	; 0x01
     a18:	9a 81       	ldd	r25, Y+2	; 0x02
     a1a:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <Blink_msg+0x1>
     a1e:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <Blink_msg>
    Blink_pos = 0;
     a22:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <Blink_pos+0x1>
     a26:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <Blink_pos>
    blink_state = phase1;
     a2a:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <blink_state+0x1>
     a2e:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <blink_state>
    delay_set(0, 0);
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	0e 94 31 02 	call	0x462	; 0x462 <delay_set>
    led_off();
     a3e:	0e 94 de 04 	call	0x9bc	; 0x9bc <led_off>
}
     a42:	00 00       	nop
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	08 95       	ret

00000a4e <led_update>:

void led_update() {
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
    switch (blink_state) {
     a56:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <blink_state>
     a5a:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <blink_state+0x1>
     a5e:	00 97       	sbiw	r24, 0x00	; 0
     a60:	21 f0       	breq	.+8      	; 0xa6a <led_update+0x1c>
     a62:	01 97       	sbiw	r24, 0x01	; 1
     a64:	09 f4       	brne	.+2      	; 0xa68 <led_update+0x1a>
     a66:	51 c0       	rjmp	.+162    	; 0xb0a <led_update+0xbc>
                blink_state = phase1;
            }
            break;

        default:
            break;
     a68:	81 c0       	rjmp	.+258    	; 0xb6c <led_update+0x11e>
}

void led_update() {
    switch (blink_state) {
        case phase1:
            if (delay_isdone(0)) {
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 81 02 	call	0x502	; 0x502 <delay_isdone>
     a72:	89 2b       	or	r24, r25
     a74:	09 f4       	brne	.+2      	; 0xa78 <led_update+0x2a>
     a76:	77 c0       	rjmp	.+238    	; 0xb66 <led_update+0x118>
                switch (Blink_msg[Blink_pos]) {
     a78:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <Blink_msg>
     a7c:	30 91 77 02 	lds	r19, 0x0277	; 0x800277 <Blink_msg+0x1>
     a80:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Blink_pos>
     a84:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <Blink_pos+0x1>
     a88:	82 0f       	add	r24, r18
     a8a:	93 1f       	adc	r25, r19
     a8c:	fc 01       	movw	r30, r24
     a8e:	80 81       	ld	r24, Z
     a90:	08 2e       	mov	r0, r24
     a92:	00 0c       	add	r0, r0
     a94:	99 0b       	sbc	r25, r25
     a96:	8d 32       	cpi	r24, 0x2D	; 45
     a98:	91 05       	cpc	r25, r1
     a9a:	31 f0       	breq	.+12     	; 0xaa8 <led_update+0x5a>
     a9c:	8e 32       	cpi	r24, 0x2E	; 46
     a9e:	91 05       	cpc	r25, r1
     aa0:	91 f0       	breq	.+36     	; 0xac6 <led_update+0x78>
     aa2:	80 97       	sbiw	r24, 0x20	; 32
     aa4:	f9 f0       	breq	.+62     	; 0xae4 <led_update+0x96>
     aa6:	27 c0       	rjmp	.+78     	; 0xaf6 <led_update+0xa8>
                    case '-':
                        led_on();
     aa8:	0e 94 cd 04 	call	0x99a	; 0x99a <led_on>
                        delay_set(0, 750);
     aac:	6e ee       	ldi	r22, 0xEE	; 238
     aae:	72 e0       	ldi	r23, 0x02	; 2
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	0e 94 31 02 	call	0x462	; 0x462 <delay_set>
                        //delay_set(0,7);
                        blink_state = phase2;
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <blink_state+0x1>
     ac0:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <blink_state>
                        break;
     ac4:	21 c0       	rjmp	.+66     	; 0xb08 <led_update+0xba>
                    case '.':
                        led_on();
     ac6:	0e 94 cd 04 	call	0x99a	; 0x99a <led_on>
                        delay_set(0, 250);
     aca:	6a ef       	ldi	r22, 0xFA	; 250
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	0e 94 31 02 	call	0x462	; 0x462 <delay_set>
                        //delay_set(0,2);
                        blink_state = phase2;
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <blink_state+0x1>
     ade:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <blink_state>
                        break;
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <led_update+0xba>
                    case ' ':
                        led_off();
     ae4:	0e 94 de 04 	call	0x9bc	; 0x9bc <led_off>
                        delay_set(0, 1000);
     ae8:	68 ee       	ldi	r22, 0xE8	; 232
     aea:	73 e0       	ldi	r23, 0x03	; 3
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	0e 94 31 02 	call	0x462	; 0x462 <delay_set>
                        //blink_state = phase2;
                        break;
     af4:	09 c0       	rjmp	.+18     	; 0xb08 <led_update+0xba>
                    default:
                        led_off();
     af6:	0e 94 de 04 	call	0x9bc	; 0x9bc <led_off>
                        delay_set(0, 0);
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	0e 94 31 02 	call	0x462	; 0x462 <delay_set>
                        break;
     b06:	00 00       	nop
                }
            }
            break;
     b08:	2e c0       	rjmp	.+92     	; 0xb66 <led_update+0x118>

        case phase2:
            if (delay_isdone(0)) {
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 81 02 	call	0x502	; 0x502 <delay_isdone>
     b12:	89 2b       	or	r24, r25
     b14:	51 f1       	breq	.+84     	; 0xb6a <led_update+0x11c>
                led_off();
     b16:	0e 94 de 04 	call	0x9bc	; 0x9bc <led_off>
                delay_set(0, 100);
     b1a:	64 e6       	ldi	r22, 0x64	; 100
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	0e 94 31 02 	call	0x462	; 0x462 <delay_set>
                //delay_set(0, 1);
                Blink_pos++;
     b26:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Blink_pos>
     b2a:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <Blink_pos+0x1>
     b2e:	01 96       	adiw	r24, 0x01	; 1
     b30:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <Blink_pos+0x1>
     b34:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <Blink_pos>
                if (Blink_pos >= strlen(Blink_msg)) {
     b38:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Blink_msg>
     b3c:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <Blink_msg+0x1>
     b40:	0e 94 25 14 	call	0x284a	; 0x284a <strlen>
     b44:	9c 01       	movw	r18, r24
     b46:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Blink_pos>
     b4a:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <Blink_pos+0x1>
     b4e:	82 17       	cp	r24, r18
     b50:	93 07       	cpc	r25, r19
     b52:	20 f0       	brcs	.+8      	; 0xb5c <led_update+0x10e>
                    Blink_pos = 0;
     b54:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <Blink_pos+0x1>
     b58:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <Blink_pos>
                }
                blink_state = phase1;
     b5c:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <blink_state+0x1>
     b60:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <blink_state>
            }
            break;
     b64:	02 c0       	rjmp	.+4      	; 0xb6a <led_update+0x11c>
                        led_off();
                        delay_set(0, 0);
                        break;
                }
            }
            break;
     b66:	00 00       	nop
     b68:	01 c0       	rjmp	.+2      	; 0xb6c <led_update+0x11e>
                if (Blink_pos >= strlen(Blink_msg)) {
                    Blink_pos = 0;
                }
                blink_state = phase1;
            }
            break;
     b6a:	00 00       	nop

        default:
            break;
    }
}
     b6c:	00 00       	nop
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	08 95       	ret

00000b74 <main>:
 #include "vpd.h"
 #include "uart.h"
 #include "log.h"

int main(void)
{
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	00 d0       	rcall	.+0      	; 0xb7a <main+0x6>
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
    /* Initialize uart, led, and rtc hardware */
    uart_init();
     b7e:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <uart_init>
    config_init();
     b82:	0e 94 53 00 	call	0xa6	; 0xa6 <config_init>
    led_init();
     b86:	0e 94 b3 04 	call	0x966	; 0x966 <led_init>
    log_init();
     b8a:	0e 94 8e 08 	call	0x111c	; 0x111c <log_init>
    rtc_init();
     b8e:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <rtc_init>
    vpd_init();
     b92:	0e 94 7d 07 	call	0xefa	; 0xefa <vpd_init>
    //timer1_init();
    delay_init();
     b96:	0e 94 b1 01 	call	0x362	; 0x362 <delay_init>

    /* Initialize led blink pattern to "--- -.-" in Morse Code */
    led_set_blink("-");
     b9a:	81 e6       	ldi	r24, 0x61	; 97
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	0e 94 04 05 	call	0xa08	; 0xa08 <led_set_blink>

    /* Set RTC date/time to "01/01/2019 00:00:00" */
    rtc_set_by_datestr("01/01/2019 00:00:00");
     ba2:	83 e6       	ldi	r24, 0x63	; 99
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	0e 94 83 0a 	call	0x1506	; 0x1506 <rtc_set_by_datestr>

    /* Output project information to the console */
    uart_writestr("SER 486 Project 2 - Manish Mysore Rajesh Gangadhar\n\r");
     baa:	87 e7       	ldi	r24, 0x77	; 119
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <uart_writestr>

    uart_writestr(vpd.model);
     bb2:	8b ed       	ldi	r24, 0xDB	; 219
     bb4:	92 e0       	ldi	r25, 0x02	; 2
     bb6:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <uart_writestr>
    uart_writestr(vpd.manufacturer);
     bba:	87 ee       	ldi	r24, 0xE7	; 231
     bbc:	92 e0       	ldi	r25, 0x02	; 2
     bbe:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <uart_writestr>
    uart_writestr(vpd.token);
     bc2:	87 ed       	ldi	r24, 0xD7	; 215
     bc4:	92 e0       	ldi	r25, 0x02	; 2
     bc6:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <uart_writestr>

    //Set the config.use_static_ip=1 and set modified
    config.use_static_ip=1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <config+0xc>
    config_set_modified();
     bd0:	0e 94 e7 00 	call	0x1ce	; 0x1ce <config_set_modified>

    //Clear event log and add three records to it
    log_clear();
     bd4:	0e 94 da 09 	call	0x13b4	; 0x13b4 <log_clear>
    log_add_record(0xaa);
     bd8:	8a ea       	ldi	r24, 0xAA	; 170
     bda:	0e 94 89 09 	call	0x1312	; 0x1312 <log_add_record>
    log_add_record(0xbb);
     bde:	8b eb       	ldi	r24, 0xBB	; 187
     be0:	0e 94 89 09 	call	0x1312	; 0x1312 <log_add_record>
    log_add_record(0xcc);
     be4:	8c ec       	ldi	r24, 0xCC	; 204
     be6:	0e 94 89 09 	call	0x1312	; 0x1312 <log_add_record>

    int dumped=0;
     bea:	1a 82       	std	Y+2, r1	; 0x02
     bec:	19 82       	std	Y+1, r1	; 0x01


    while(1)
    {
        led_update();
     bee:	0e 94 27 05 	call	0xa4e	; 0xa4e <led_update>
        log_update();
     bf2:	0e 94 53 09 	call	0x12a6	; 0x12a6 <log_update>
        config_update();
     bf6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <config_update>

        if(!eeprom_isbusy() && (!dumped))
     bfa:	0e 94 17 03 	call	0x62e	; 0x62e <eeprom_isbusy>
     bfe:	89 2b       	or	r24, r25
     c00:	b1 f7       	brne	.-20     	; 0xbee <main+0x7a>
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	9a 81       	ldd	r25, Y+2	; 0x02
     c06:	89 2b       	or	r24, r25
     c08:	91 f7       	brne	.-28     	; 0xbee <main+0x7a>
        {
            dump_eeprom(0, 0x100);
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	71 e0       	ldi	r23, 0x01	; 1
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <dump_eeprom>
            dumped=1;
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9a 83       	std	Y+2, r25	; 0x02
     c1c:	89 83       	std	Y+1, r24	; 0x01
        }
    }
     c1e:	e7 cf       	rjmp	.-50     	; 0xbee <main+0x7a>

00000c20 <timer1_init>:
#define OCIE1A 1

#define I_SREG 7
static volatile unsigned long count = 0;

void timer1_init() {
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	00 d0       	rcall	.+0      	; 0xc26 <timer1_init+0x6>
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
    // Example: (16,000,000 / 1024 / 15625) = 1 Hz

    /*
    unsigned int PRESCALER_VALUE = 1024;
    */
    unsigned int COMPARE_VALUE = 15625;  //16 bit max value = 2^16 - 65535
     c2a:	89 e0       	ldi	r24, 0x09	; 9
     c2c:	9d e3       	ldi	r25, 0x3D	; 61
     c2e:	9a 83       	std	Y+2, r25	; 0x02
     c30:	89 83       	std	Y+1, r24	; 0x01

    // Set CTC mode
    TCCR1B |= (1 << WGM12); // WGM12
     c32:	81 e8       	ldi	r24, 0x81	; 129
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	21 e8       	ldi	r18, 0x81	; 129
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	f9 01       	movw	r30, r18
     c3c:	20 81       	ld	r18, Z
     c3e:	28 60       	ori	r18, 0x08	; 8
     c40:	fc 01       	movw	r30, r24
     c42:	20 83       	st	Z, r18

    // Set clock divisor (prescaler value = 1024)
    TCCR1B |= (1 << CS12) | (1 << CS10); // CS12 and CS10
     c44:	81 e8       	ldi	r24, 0x81	; 129
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	21 e8       	ldi	r18, 0x81	; 129
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	f9 01       	movw	r30, r18
     c4e:	20 81       	ld	r18, Z
     c50:	25 60       	ori	r18, 0x05	; 5
     c52:	fc 01       	movw	r30, r24
     c54:	20 83       	st	Z, r18

    // Set compare value
    OCR1A = COMPARE_VALUE - 1;
     c56:	88 e8       	ldi	r24, 0x88	; 136
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	29 81       	ldd	r18, Y+1	; 0x01
     c5c:	3a 81       	ldd	r19, Y+2	; 0x02
     c5e:	21 50       	subi	r18, 0x01	; 1
     c60:	31 09       	sbc	r19, r1
     c62:	fc 01       	movw	r30, r24
     c64:	31 83       	std	Z+1, r19	; 0x01
     c66:	20 83       	st	Z, r18

    // Enable interrupts on output compare A
    TIMSK1 |= (1 << OCIE1A); // OCIE1A
     c68:	8f e6       	ldi	r24, 0x6F	; 111
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	2f e6       	ldi	r18, 0x6F	; 111
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	f9 01       	movw	r30, r18
     c72:	20 81       	ld	r18, Z
     c74:	22 60       	ori	r18, 0x02	; 2
     c76:	fc 01       	movw	r30, r24
     c78:	20 83       	st	Z, r18

    // Enable global interrupts
    // __builtin_avr_sei();
    SREG |= (1<<I_SREG);
     c7a:	8f e5       	ldi	r24, 0x5F	; 95
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	2f e5       	ldi	r18, 0x5F	; 95
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	f9 01       	movw	r30, r18
     c84:	20 81       	ld	r18, Z
     c86:	20 68       	ori	r18, 0x80	; 128
     c88:	fc 01       	movw	r30, r24
     c8a:	20 83       	st	Z, r18
}
     c8c:	00 00       	nop
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	08 95       	ret

00000c98 <timer1_get>:

unsigned long timer1_get() {
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	00 d0       	rcall	.+0      	; 0xc9e <timer1_get+0x6>
     c9e:	00 d0       	rcall	.+0      	; 0xca0 <timer1_get+0x8>
     ca0:	00 d0       	rcall	.+0      	; 0xca2 <timer1_get+0xa>
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
    unsigned long count_value;

    // Get global interrupt enable bit state
    unsigned int sreg_state = SREG & (1 << I_SREG);
     ca6:	8f e5       	ldi	r24, 0x5F	; 95
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	fc 01       	movw	r30, r24
     cac:	80 81       	ld	r24, Z
     cae:	88 2f       	mov	r24, r24
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	80 78       	andi	r24, 0x80	; 128
     cb4:	99 27       	eor	r25, r25
     cb6:	9a 83       	std	Y+2, r25	; 0x02
     cb8:	89 83       	std	Y+1, r24	; 0x01

    // Disable interrupts
    // __builtin_avr_cli();
    SREG &= ~(1<<I_SREG);
     cba:	8f e5       	ldi	r24, 0x5F	; 95
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	2f e5       	ldi	r18, 0x5F	; 95
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	f9 01       	movw	r30, r18
     cc4:	20 81       	ld	r18, Z
     cc6:	2f 77       	andi	r18, 0x7F	; 127
     cc8:	fc 01       	movw	r30, r24
     cca:	20 83       	st	Z, r18

    // Get the count value
    count_value = count;
     ccc:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <count>
     cd0:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <count+0x1>
     cd4:	a0 91 e4 01 	lds	r26, 0x01E4	; 0x8001e4 <count+0x2>
     cd8:	b0 91 e5 01 	lds	r27, 0x01E5	; 0x8001e5 <count+0x3>
     cdc:	8b 83       	std	Y+3, r24	; 0x03
     cde:	9c 83       	std	Y+4, r25	; 0x04
     ce0:	ad 83       	std	Y+5, r26	; 0x05
     ce2:	be 83       	std	Y+6, r27	; 0x06

    // Restore global interrupt state
    if (sreg_state) {
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	9a 81       	ldd	r25, Y+2	; 0x02
     ce8:	89 2b       	or	r24, r25
     cea:	49 f0       	breq	.+18     	; 0xcfe <timer1_get+0x66>
        // __builtin_avr_sei();
        SREG |= (1<<I_SREG);
     cec:	8f e5       	ldi	r24, 0x5F	; 95
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	2f e5       	ldi	r18, 0x5F	; 95
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	f9 01       	movw	r30, r18
     cf6:	20 81       	ld	r18, Z
     cf8:	20 68       	ori	r18, 0x80	; 128
     cfa:	fc 01       	movw	r30, r24
     cfc:	20 83       	st	Z, r18
    }

    // Return the count value
    return count_value;
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	9c 81       	ldd	r25, Y+4	; 0x04
     d02:	ad 81       	ldd	r26, Y+5	; 0x05
     d04:	be 81       	ldd	r27, Y+6	; 0x06
}
     d06:	bc 01       	movw	r22, r24
     d08:	cd 01       	movw	r24, r26
     d0a:	26 96       	adiw	r28, 0x06	; 6
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	08 95       	ret

00000d1c <timer1_clear>:

void timer1_clear() {
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	00 d0       	rcall	.+0      	; 0xd22 <timer1_clear+0x6>
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
    // Get global interrupt enable bit state
    unsigned int sreg_state = SREG & (1 << I_SREG);
     d26:	8f e5       	ldi	r24, 0x5F	; 95
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	fc 01       	movw	r30, r24
     d2c:	80 81       	ld	r24, Z
     d2e:	88 2f       	mov	r24, r24
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	80 78       	andi	r24, 0x80	; 128
     d34:	99 27       	eor	r25, r25
     d36:	9a 83       	std	Y+2, r25	; 0x02
     d38:	89 83       	std	Y+1, r24	; 0x01

    // Disable interrupts
    // __builtin_avr_cli();
    SREG &= ~(1<<I_SREG);
     d3a:	8f e5       	ldi	r24, 0x5F	; 95
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	2f e5       	ldi	r18, 0x5F	; 95
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	f9 01       	movw	r30, r18
     d44:	20 81       	ld	r18, Z
     d46:	2f 77       	andi	r18, 0x7F	; 127
     d48:	fc 01       	movw	r30, r24
     d4a:	20 83       	st	Z, r18

    // Clear count value
    count = 0;
     d4c:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <count>
     d50:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <count+0x1>
     d54:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <count+0x2>
     d58:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <count+0x3>

    // Restore global interrupt state
    if (sreg_state) {
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	9a 81       	ldd	r25, Y+2	; 0x02
     d60:	89 2b       	or	r24, r25
     d62:	49 f0       	breq	.+18     	; 0xd76 <timer1_clear+0x5a>
        // __builtin_avr_sei();
        SREG |= (1<<I_SREG);
     d64:	8f e5       	ldi	r24, 0x5F	; 95
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	2f e5       	ldi	r18, 0x5F	; 95
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	f9 01       	movw	r30, r18
     d6e:	20 81       	ld	r18, Z
     d70:	20 68       	ori	r18, 0x80	; 128
     d72:	fc 01       	movw	r30, r24
     d74:	20 83       	st	Z, r18
    }
}
     d76:	00 00       	nop
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	08 95       	ret

00000d82 <__vector_11>:


void __vector_11(void) __attribute__ ((signal, used, externally_visible));

void __vector_11(void)
{
     d82:	1f 92       	push	r1
     d84:	0f 92       	push	r0
     d86:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d8a:	0f 92       	push	r0
     d8c:	11 24       	eor	r1, r1
     d8e:	8f 93       	push	r24
     d90:	9f 93       	push	r25
     d92:	af 93       	push	r26
     d94:	bf 93       	push	r27
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
    // Increment the count by 1
    count++;
     d9e:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <count>
     da2:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <count+0x1>
     da6:	a0 91 e4 01 	lds	r26, 0x01E4	; 0x8001e4 <count+0x2>
     daa:	b0 91 e5 01 	lds	r27, 0x01E5	; 0x8001e5 <count+0x3>
     dae:	01 96       	adiw	r24, 0x01	; 1
     db0:	a1 1d       	adc	r26, r1
     db2:	b1 1d       	adc	r27, r1
     db4:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <count>
     db8:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <count+0x1>
     dbc:	a0 93 e4 01 	sts	0x01E4, r26	; 0x8001e4 <count+0x2>
     dc0:	b0 93 e5 01 	sts	0x01E5, r27	; 0x8001e5 <count+0x3>
}
     dc4:	00 00       	nop
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	bf 91       	pop	r27
     dcc:	af 91       	pop	r26
     dce:	9f 91       	pop	r25
     dd0:	8f 91       	pop	r24
     dd2:	0f 90       	pop	r0
     dd4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     dd8:	0f 90       	pop	r0
     dda:	1f 90       	pop	r1
     ddc:	18 95       	reti

00000dde <calc_checksum>:
#define SREG    *((volatile char*) 0x5F)

#define C_SREG 0

unsigned char calc_checksum(unsigned char *data, unsigned int dsize)
{
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	27 97       	sbiw	r28, 0x07	; 7
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	cd bf       	out	0x3d, r28	; 61
     df2:	9d 83       	std	Y+5, r25	; 0x05
     df4:	8c 83       	std	Y+4, r24	; 0x04
     df6:	7f 83       	std	Y+7, r23	; 0x07
     df8:	6e 83       	std	Y+6, r22	; 0x06
    //Storing checksum result in unsigned byte
    unsigned char checksum_result;

    for(int i=0;i<dsize;i++)
     dfa:	1b 82       	std	Y+3, r1	; 0x03
     dfc:	1a 82       	std	Y+2, r1	; 0x02
     dfe:	1e c0       	rjmp	.+60     	; 0xe3c <calc_checksum+0x5e>
    {
        checksum_result += data[i];
     e00:	8a 81       	ldd	r24, Y+2	; 0x02
     e02:	9b 81       	ldd	r25, Y+3	; 0x03
     e04:	2c 81       	ldd	r18, Y+4	; 0x04
     e06:	3d 81       	ldd	r19, Y+5	; 0x05
     e08:	82 0f       	add	r24, r18
     e0a:	93 1f       	adc	r25, r19
     e0c:	fc 01       	movw	r30, r24
     e0e:	80 81       	ld	r24, Z
     e10:	99 81       	ldd	r25, Y+1	; 0x01
     e12:	89 0f       	add	r24, r25
     e14:	89 83       	std	Y+1, r24	; 0x01
        if(SREG & (1<<C_SREG))
     e16:	8f e5       	ldi	r24, 0x5F	; 95
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	fc 01       	movw	r30, r24
     e1c:	80 81       	ld	r24, Z
     e1e:	08 2e       	mov	r0, r24
     e20:	00 0c       	add	r0, r0
     e22:	99 0b       	sbc	r25, r25
     e24:	81 70       	andi	r24, 0x01	; 1
     e26:	99 27       	eor	r25, r25
     e28:	89 2b       	or	r24, r25
     e2a:	19 f0       	breq	.+6      	; 0xe32 <calc_checksum+0x54>
        {
            //carry wraparound
            checksum_result+=1;
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	8f 5f       	subi	r24, 0xFF	; 255
     e30:	89 83       	std	Y+1, r24	; 0x01
unsigned char calc_checksum(unsigned char *data, unsigned int dsize)
{
    //Storing checksum result in unsigned byte
    unsigned char checksum_result;

    for(int i=0;i<dsize;i++)
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	9b 81       	ldd	r25, Y+3	; 0x03
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	9b 83       	std	Y+3, r25	; 0x03
     e3a:	8a 83       	std	Y+2, r24	; 0x02
     e3c:	2a 81       	ldd	r18, Y+2	; 0x02
     e3e:	3b 81       	ldd	r19, Y+3	; 0x03
     e40:	8e 81       	ldd	r24, Y+6	; 0x06
     e42:	9f 81       	ldd	r25, Y+7	; 0x07
     e44:	28 17       	cp	r18, r24
     e46:	39 07       	cpc	r19, r25
     e48:	d8 f2       	brcs	.-74     	; 0xe00 <calc_checksum+0x22>
            checksum_result+=1;
        }

    }

    return ~checksum_result;
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	80 95       	com	r24

}
     e4e:	27 96       	adiw	r28, 0x07	; 7
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	cd bf       	out	0x3d, r28	; 61
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	08 95       	ret

00000e60 <update_checksum>:

void update_checksum(unsigned char *data, unsigned int dsize)
{
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
     e64:	00 d0       	rcall	.+0      	; 0xe66 <update_checksum+0x6>
     e66:	00 d0       	rcall	.+0      	; 0xe68 <update_checksum+0x8>
     e68:	00 d0       	rcall	.+0      	; 0xe6a <update_checksum+0xa>
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	9c 83       	std	Y+4, r25	; 0x04
     e70:	8b 83       	std	Y+3, r24	; 0x03
     e72:	7e 83       	std	Y+6, r23	; 0x06
     e74:	6d 83       	std	Y+5, r22	; 0x05
    unsigned char checksum_val = calc_checksum(data, dsize);
     e76:	2d 81       	ldd	r18, Y+5	; 0x05
     e78:	3e 81       	ldd	r19, Y+6	; 0x06
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	9c 81       	ldd	r25, Y+4	; 0x04
     e7e:	b9 01       	movw	r22, r18
     e80:	0e 94 ef 06 	call	0xdde	; 0xdde <calc_checksum>
     e84:	89 83       	std	Y+1, r24	; 0x01
    unsigned char last_byte = 0b11111111 + (~checksum_val + 0b00000001);
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	80 95       	com	r24
     e8a:	8a 83       	std	Y+2, r24	; 0x02
    data[dsize-1]=last_byte;
     e8c:	8d 81       	ldd	r24, Y+5	; 0x05
     e8e:	9e 81       	ldd	r25, Y+6	; 0x06
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	2b 81       	ldd	r18, Y+3	; 0x03
     e94:	3c 81       	ldd	r19, Y+4	; 0x04
     e96:	82 0f       	add	r24, r18
     e98:	93 1f       	adc	r25, r19
     e9a:	2a 81       	ldd	r18, Y+2	; 0x02
     e9c:	fc 01       	movw	r30, r24
     e9e:	20 83       	st	Z, r18
}
     ea0:	00 00       	nop
     ea2:	26 96       	adiw	r28, 0x06	; 6
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	f8 94       	cli
     ea8:	de bf       	out	0x3e, r29	; 62
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	cd bf       	out	0x3d, r28	; 61
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	08 95       	ret

00000eb4 <is_checksum_valid>:


int is_checksum_valid(unsigned char* data, unsigned int dsize)
{
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	00 d0       	rcall	.+0      	; 0xeba <is_checksum_valid+0x6>
     eba:	00 d0       	rcall	.+0      	; 0xebc <is_checksum_valid+0x8>
     ebc:	1f 92       	push	r1
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	9b 83       	std	Y+3, r25	; 0x03
     ec4:	8a 83       	std	Y+2, r24	; 0x02
     ec6:	7d 83       	std	Y+5, r23	; 0x05
     ec8:	6c 83       	std	Y+4, r22	; 0x04
    unsigned char checksum_val = calc_checksum(data, dsize);
     eca:	2c 81       	ldd	r18, Y+4	; 0x04
     ecc:	3d 81       	ldd	r19, Y+5	; 0x05
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	9b 81       	ldd	r25, Y+3	; 0x03
     ed2:	b9 01       	movw	r22, r18
     ed4:	0e 94 ef 06 	call	0xdde	; 0xdde <calc_checksum>
     ed8:	89 83       	std	Y+1, r24	; 0x01

    if(checksum_val==0)
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	88 23       	and	r24, r24
     ede:	19 f4       	brne	.+6      	; 0xee6 <is_checksum_valid+0x32>
        return 1;
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <is_checksum_valid+0x36>
    else
        return 0;
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	90 e0       	ldi	r25, 0x00	; 0
}
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	08 95       	ret

00000efa <vpd_init>:
#include <string.h>

vpd_struct vpd_defaults = {"SER", "Manish", "Mani", "abcd1234", 0, "sbsdjb", "USA", 0};

void vpd_init()
{
     efa:	ef 92       	push	r14
     efc:	ff 92       	push	r15
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	28 97       	sbiw	r28, 0x08	; 8
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
        //Initialize data by reading default values
        eeprom_readbuf(base_addr, (unsigned char*)buf, size);
        memcpy((unsigned char*)&vpd, buf, size);

    }
}
     f16:	0d b7       	in	r16, 0x3d	; 61
     f18:	1e b7       	in	r17, 0x3e	; 62

vpd_struct vpd_defaults = {"SER", "Manish", "Mani", "abcd1234", 0, "sbsdjb", "USA", 0};

void vpd_init()
{
    while(eeprom_isbusy());  //waits for EEPROM to get out of busy state
     f1a:	00 00       	nop
     f1c:	0e 94 17 03 	call	0x62e	; 0x62e <eeprom_isbusy>
     f20:	89 2b       	or	r24, r25
     f22:	e1 f7       	brne	.-8      	; 0xf1c <vpd_init+0x22>

    //Read 43 bytes from 0x000
    unsigned int base_addr=0x000;
     f24:	1a 82       	std	Y+2, r1	; 0x02
     f26:	19 82       	std	Y+1, r1	; 0x01
    int size = sizeof(vpd_struct);
     f28:	87 e3       	ldi	r24, 0x37	; 55
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	9c 83       	std	Y+4, r25	; 0x04
     f2e:	8b 83       	std	Y+3, r24	; 0x03
    unsigned char buf[size];
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	9c 81       	ldd	r25, Y+4	; 0x04
     f34:	2d b7       	in	r18, 0x3d	; 61
     f36:	3e b7       	in	r19, 0x3e	; 62
     f38:	79 01       	movw	r14, r18
     f3a:	9c 01       	movw	r18, r24
     f3c:	21 50       	subi	r18, 0x01	; 1
     f3e:	31 09       	sbc	r19, r1
     f40:	3e 83       	std	Y+6, r19	; 0x06
     f42:	2d 83       	std	Y+5, r18	; 0x05
     f44:	2d b7       	in	r18, 0x3d	; 61
     f46:	3e b7       	in	r19, 0x3e	; 62
     f48:	28 1b       	sub	r18, r24
     f4a:	39 0b       	sbc	r19, r25
     f4c:	0f b6       	in	r0, 0x3f	; 63
     f4e:	f8 94       	cli
     f50:	3e bf       	out	0x3e, r19	; 62
     f52:	0f be       	out	0x3f, r0	; 63
     f54:	2d bf       	out	0x3d, r18	; 61
     f56:	8d b7       	in	r24, 0x3d	; 61
     f58:	9e b7       	in	r25, 0x3e	; 62
     f5a:	01 96       	adiw	r24, 0x01	; 1
     f5c:	98 87       	std	Y+8, r25	; 0x08
     f5e:	8f 83       	std	Y+7, r24	; 0x07
    eeprom_readbuf(base_addr, (unsigned char*)buf, size);
     f60:	4b 81       	ldd	r20, Y+3	; 0x03
     f62:	2f 81       	ldd	r18, Y+7	; 0x07
     f64:	38 85       	ldd	r19, Y+8	; 0x08
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	9a 81       	ldd	r25, Y+2	; 0x02
     f6a:	b9 01       	movw	r22, r18
     f6c:	0e 94 a6 03 	call	0x74c	; 0x74c <eeprom_readbuf>

    memcpy((unsigned char*)&vpd, (unsigned char*)buf, size);
     f70:	2b 81       	ldd	r18, Y+3	; 0x03
     f72:	3c 81       	ldd	r19, Y+4	; 0x04
     f74:	8f 81       	ldd	r24, Y+7	; 0x07
     f76:	98 85       	ldd	r25, Y+8	; 0x08
     f78:	a9 01       	movw	r20, r18
     f7a:	bc 01       	movw	r22, r24
     f7c:	87 ed       	ldi	r24, 0xD7	; 215
     f7e:	92 e0       	ldi	r25, 0x02	; 2
     f80:	0e 94 1c 14 	call	0x2838	; 0x2838 <memcpy>

    if(!vpd_is_data_valid())
     f84:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <vpd_is_data_valid>
     f88:	89 2b       	or	r24, r25
     f8a:	a1 f4       	brne	.+40     	; 0xfb4 <vpd_init+0xba>
    {
        vpd_write_defaults();
     f8c:	0e 94 0b 08 	call	0x1016	; 0x1016 <vpd_write_defaults>

        //Initialize data by reading default values
        eeprom_readbuf(base_addr, (unsigned char*)buf, size);
     f90:	4b 81       	ldd	r20, Y+3	; 0x03
     f92:	2f 81       	ldd	r18, Y+7	; 0x07
     f94:	38 85       	ldd	r19, Y+8	; 0x08
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	9a 81       	ldd	r25, Y+2	; 0x02
     f9a:	b9 01       	movw	r22, r18
     f9c:	0e 94 a6 03 	call	0x74c	; 0x74c <eeprom_readbuf>
        memcpy((unsigned char*)&vpd, buf, size);
     fa0:	2b 81       	ldd	r18, Y+3	; 0x03
     fa2:	3c 81       	ldd	r19, Y+4	; 0x04
     fa4:	8f 81       	ldd	r24, Y+7	; 0x07
     fa6:	98 85       	ldd	r25, Y+8	; 0x08
     fa8:	a9 01       	movw	r20, r18
     faa:	bc 01       	movw	r22, r24
     fac:	87 ed       	ldi	r24, 0xD7	; 215
     fae:	92 e0       	ldi	r25, 0x02	; 2
     fb0:	0e 94 1c 14 	call	0x2838	; 0x2838 <memcpy>
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	fe be       	out	0x3e, r15	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	ed be       	out	0x3d, r14	; 61

    }
}
     fbe:	00 00       	nop
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	f8 94       	cli
     fc4:	1e bf       	out	0x3e, r17	; 62
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	0d bf       	out	0x3d, r16	; 61
     fca:	28 96       	adiw	r28, 0x08	; 8
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	f8 94       	cli
     fd0:	de bf       	out	0x3e, r29	; 62
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	cd bf       	out	0x3d, r28	; 61
     fd6:	df 91       	pop	r29
     fd8:	cf 91       	pop	r28
     fda:	1f 91       	pop	r17
     fdc:	0f 91       	pop	r16
     fde:	ff 90       	pop	r15
     fe0:	ef 90       	pop	r14
     fe2:	08 95       	ret

00000fe4 <vpd_is_data_valid>:

int vpd_is_data_valid()
{
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
    return (vpd.token == "SER") && is_checksum_valid((unsigned char*)&vpd, sizeof(vpd_struct));
     fec:	87 ed       	ldi	r24, 0xD7	; 215
     fee:	92 e0       	ldi	r25, 0x02	; 2
     ff0:	8c 5a       	subi	r24, 0xAC	; 172
     ff2:	91 40       	sbci	r25, 0x01	; 1
     ff4:	59 f4       	brne	.+22     	; 0x100c <vpd_is_data_valid+0x28>
     ff6:	67 e3       	ldi	r22, 0x37	; 55
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	87 ed       	ldi	r24, 0xD7	; 215
     ffc:	92 e0       	ldi	r25, 0x02	; 2
     ffe:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <is_checksum_valid>
    1002:	89 2b       	or	r24, r25
    1004:	19 f0       	breq	.+6      	; 0x100c <vpd_is_data_valid+0x28>
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <vpd_is_data_valid+0x2c>
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	90 e0       	ldi	r25, 0x00	; 0
}
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	08 95       	ret

00001016 <vpd_write_defaults>:

void vpd_write_defaults()
{
    1016:	ef 92       	push	r14
    1018:	ff 92       	push	r15
    101a:	0f 93       	push	r16
    101c:	1f 93       	push	r17
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	28 97       	sbiw	r28, 0x08	; 8
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	cd bf       	out	0x3d, r28	; 61
    int size = sizeof(vpd_struct);
    unsigned char buf[size];
    memcpy((unsigned char*)buf, (unsigned char*)&vpd_defaults, size);

    eeprom_writebuf(base_addr, (unsigned char*)buf, size);
}
    1032:	0d b7       	in	r16, 0x3d	; 61
    1034:	1e b7       	in	r17, 0x3e	; 62
{
    return (vpd.token == "SER") && is_checksum_valid((unsigned char*)&vpd, sizeof(vpd_struct));
}

void vpd_write_defaults()
{
    1036:	8d b7       	in	r24, 0x3d	; 61
    1038:	9e b7       	in	r25, 0x3e	; 62
    103a:	7c 01       	movw	r14, r24
    update_checksum((unsigned char*)&vpd, sizeof(vpd));
    103c:	67 e3       	ldi	r22, 0x37	; 55
    103e:	70 e0       	ldi	r23, 0x00	; 0
    1040:	87 ed       	ldi	r24, 0xD7	; 215
    1042:	92 e0       	ldi	r25, 0x02	; 2
    1044:	0e 94 30 07 	call	0xe60	; 0xe60 <update_checksum>

    //Writing defaults to eeprom
    unsigned int base_addr = 0x000;
    1048:	1a 82       	std	Y+2, r1	; 0x02
    104a:	19 82       	std	Y+1, r1	; 0x01
    int size = sizeof(vpd_struct);
    104c:	87 e3       	ldi	r24, 0x37	; 55
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	9c 83       	std	Y+4, r25	; 0x04
    1052:	8b 83       	std	Y+3, r24	; 0x03
    unsigned char buf[size];
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	9c 81       	ldd	r25, Y+4	; 0x04
    1058:	9c 01       	movw	r18, r24
    105a:	21 50       	subi	r18, 0x01	; 1
    105c:	31 09       	sbc	r19, r1
    105e:	3e 83       	std	Y+6, r19	; 0x06
    1060:	2d 83       	std	Y+5, r18	; 0x05
    1062:	2d b7       	in	r18, 0x3d	; 61
    1064:	3e b7       	in	r19, 0x3e	; 62
    1066:	28 1b       	sub	r18, r24
    1068:	39 0b       	sbc	r19, r25
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	f8 94       	cli
    106e:	3e bf       	out	0x3e, r19	; 62
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	2d bf       	out	0x3d, r18	; 61
    1074:	8d b7       	in	r24, 0x3d	; 61
    1076:	9e b7       	in	r25, 0x3e	; 62
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	98 87       	std	Y+8, r25	; 0x08
    107c:	8f 83       	std	Y+7, r24	; 0x07
    memcpy((unsigned char*)buf, (unsigned char*)&vpd_defaults, size);
    107e:	2b 81       	ldd	r18, Y+3	; 0x03
    1080:	3c 81       	ldd	r19, Y+4	; 0x04
    1082:	8f 81       	ldd	r24, Y+7	; 0x07
    1084:	98 85       	ldd	r25, Y+8	; 0x08
    1086:	a9 01       	movw	r20, r18
    1088:	62 e1       	ldi	r22, 0x12	; 18
    108a:	71 e0       	ldi	r23, 0x01	; 1
    108c:	0e 94 1c 14 	call	0x2838	; 0x2838 <memcpy>

    eeprom_writebuf(base_addr, (unsigned char*)buf, size);
    1090:	4b 81       	ldd	r20, Y+3	; 0x03
    1092:	2f 81       	ldd	r18, Y+7	; 0x07
    1094:	38 85       	ldd	r19, Y+8	; 0x08
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	9a 81       	ldd	r25, Y+2	; 0x02
    109a:	b9 01       	movw	r22, r18
    109c:	0e 94 2f 03 	call	0x65e	; 0x65e <eeprom_writebuf>
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	fe be       	out	0x3e, r15	; 62
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	ed be       	out	0x3d, r14	; 61
}
    10aa:	00 00       	nop
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	1e bf       	out	0x3e, r17	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	0d bf       	out	0x3d, r16	; 61
    10b6:	28 96       	adiw	r28, 0x08	; 8
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	1f 91       	pop	r17
    10c8:	0f 91       	pop	r16
    10ca:	ff 90       	pop	r15
    10cc:	ef 90       	pop	r14
    10ce:	08 95       	ret

000010d0 <log_is_data_valid>:
    10d0:	80 31       	cpi	r24, 0x10	; 16
    10d2:	91 05       	cpc	r25, r1
    10d4:	04 f5       	brge	.+64     	; 0x1116 <log_is_data_valid+0x46>
    10d6:	27 e0       	ldi	r18, 0x07	; 7
    10d8:	28 9f       	mul	r18, r24
    10da:	a0 01       	movw	r20, r0
    10dc:	29 9f       	mul	r18, r25
    10de:	50 0d       	add	r21, r0
    10e0:	11 24       	eor	r1, r1
    10e2:	fa 01       	movw	r30, r20
    10e4:	e7 51       	subi	r30, 0x17	; 23
    10e6:	fe 4f       	sbci	r31, 0xFE	; 254
    10e8:	80 81       	ld	r24, Z
    10ea:	81 32       	cpi	r24, 0x21	; 33
    10ec:	a0 f4       	brcc	.+40     	; 0x1116 <log_is_data_valid+0x46>
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	fa 01       	movw	r30, r20
    10f6:	e8 0f       	add	r30, r24
    10f8:	f9 1f       	adc	r31, r25
    10fa:	e7 51       	subi	r30, 0x17	; 23
    10fc:	fe 4f       	sbci	r31, 0xFE	; 254
    10fe:	30 81       	ld	r19, Z
    1100:	23 0f       	add	r18, r19
    1102:	01 96       	adiw	r24, 0x01	; 1
    1104:	87 30       	cpi	r24, 0x07	; 7
    1106:	91 05       	cpc	r25, r1
    1108:	a9 f7       	brne	.-22     	; 0x10f4 <log_is_data_valid+0x24>
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	22 23       	and	r18, r18
    1110:	21 f0       	breq	.+8      	; 0x111a <log_is_data_valid+0x4a>
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	08 95       	ret
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	08 95       	ret

0000111c <log_init>:
    111c:	6f 92       	push	r6
    111e:	7f 92       	push	r7
    1120:	8f 92       	push	r8
    1122:	9f 92       	push	r9
    1124:	af 92       	push	r10
    1126:	bf 92       	push	r11
    1128:	cf 92       	push	r12
    112a:	df 92       	push	r13
    112c:	ef 92       	push	r14
    112e:	ff 92       	push	r15
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	0e 94 17 03 	call	0x62e	; 0x62e <eeprom_isbusy>
    113c:	89 2b       	or	r24, r25
    113e:	e1 f7       	brne	.-8      	; 0x1138 <log_init+0x1c>
    1140:	09 e5       	ldi	r16, 0x59	; 89
    1142:	12 e0       	ldi	r17, 0x02	; 2
    1144:	c0 e8       	ldi	r28, 0x80	; 128
    1146:	d0 e0       	ldi	r29, 0x00	; 0
    1148:	be 01       	movw	r22, r28
    114a:	67 59       	subi	r22, 0x97	; 151
    114c:	7e 4f       	sbci	r23, 0xFE	; 254
    114e:	47 e0       	ldi	r20, 0x07	; 7
    1150:	ce 01       	movw	r24, r28
    1152:	0e 94 a6 03 	call	0x74c	; 0x74c <eeprom_readbuf>
    1156:	f8 01       	movw	r30, r16
    1158:	11 92       	st	Z+, r1
    115a:	8f 01       	movw	r16, r30
    115c:	27 96       	adiw	r28, 0x07	; 7
    115e:	c0 3f       	cpi	r28, 0xF0	; 240
    1160:	d1 05       	cpc	r29, r1
    1162:	91 f7       	brne	.-28     	; 0x1148 <log_init+0x2c>
    1164:	49 ee       	ldi	r20, 0xE9	; 233
    1166:	e4 2e       	mov	r14, r20
    1168:	41 e0       	ldi	r20, 0x01	; 1
    116a:	f4 2e       	mov	r15, r20
    116c:	87 01       	movw	r16, r14
    116e:	c0 e0       	ldi	r28, 0x00	; 0
    1170:	d0 e0       	ldi	r29, 0x00	; 0
    1172:	d1 2c       	mov	r13, r1
    1174:	b1 2c       	mov	r11, r1
    1176:	77 24       	eor	r7, r7
    1178:	7a 94       	dec	r7
    117a:	ce 01       	movw	r24, r28
    117c:	0e 94 68 08 	call	0x10d0	; 0x10d0 <log_is_data_valid>
    1180:	89 2b       	or	r24, r25
    1182:	41 f0       	breq	.+16     	; 0x1194 <log_init+0x78>
    1184:	f8 01       	movw	r30, r16
    1186:	80 81       	ld	r24, Z
    1188:	87 15       	cp	r24, r7
    118a:	20 f4       	brcc	.+8      	; 0x1194 <log_init+0x78>
    118c:	bc 2e       	mov	r11, r28
    118e:	78 2e       	mov	r7, r24
    1190:	dd 24       	eor	r13, r13
    1192:	d3 94       	inc	r13
    1194:	21 96       	adiw	r28, 0x01	; 1
    1196:	09 5f       	subi	r16, 0xF9	; 249
    1198:	1f 4f       	sbci	r17, 0xFF	; 255
    119a:	c0 31       	cpi	r28, 0x10	; 16
    119c:	d1 05       	cpc	r29, r1
    119e:	69 f7       	brne	.-38     	; 0x117a <log_init+0x5e>
    11a0:	dd 20       	and	r13, r13
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <log_init+0x8a>
    11a4:	6a c0       	rjmp	.+212    	; 0x127a <log_init+0x15e>
    11a6:	b0 92 e8 01 	sts	0x01E8, r11	; 0x8001e8 <last_written>
    11aa:	70 92 e7 01 	sts	0x01E7, r7	; 0x8001e7 <last_transaction_written>
    11ae:	cb 2d       	mov	r28, r11
    11b0:	d0 e0       	ldi	r29, 0x00	; 0
    11b2:	8e 01       	movw	r16, r28
    11b4:	0f 5f       	subi	r16, 0xFF	; 255
    11b6:	1f 4f       	sbci	r17, 0xFF	; 255
    11b8:	87 2c       	mov	r8, r7
    11ba:	2f e0       	ldi	r18, 0x0F	; 15
    11bc:	a2 2e       	mov	r10, r18
    11be:	37 e0       	ldi	r19, 0x07	; 7
    11c0:	93 2e       	mov	r9, r19
    11c2:	68 01       	movw	r12, r16
    11c4:	ff e0       	ldi	r31, 0x0F	; 15
    11c6:	cf 22       	and	r12, r31
    11c8:	dd 24       	eor	r13, r13
    11ca:	c6 01       	movw	r24, r12
    11cc:	0e 94 68 08 	call	0x10d0	; 0x10d0 <log_is_data_valid>
    11d0:	89 2b       	or	r24, r25
    11d2:	61 f4       	brne	.+24     	; 0x11ec <log_init+0xd0>
    11d4:	b0 92 e6 01 	sts	0x01E6, r11	; 0x8001e6 <tail>
    11d8:	8e 01       	movw	r16, r28
    11da:	01 50       	subi	r16, 0x01	; 1
    11dc:	11 09       	sbc	r17, r1
    11de:	60 97       	sbiw	r28, 0x10	; 16
    11e0:	80 e1       	ldi	r24, 0x10	; 16
    11e2:	a8 2e       	mov	r10, r24
    11e4:	b1 2c       	mov	r11, r1
    11e6:	97 e0       	ldi	r25, 0x07	; 7
    11e8:	69 2e       	mov	r6, r25
    11ea:	3a c0       	rjmp	.+116    	; 0x1260 <log_init+0x144>
    11ec:	9c 9c       	mul	r9, r12
    11ee:	f0 01       	movw	r30, r0
    11f0:	9d 9c       	mul	r9, r13
    11f2:	f0 0d       	add	r31, r0
    11f4:	11 24       	eor	r1, r1
    11f6:	e7 51       	subi	r30, 0x17	; 23
    11f8:	fe 4f       	sbci	r31, 0xFE	; 254
    11fa:	40 81       	ld	r20, Z
    11fc:	24 2f       	mov	r18, r20
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	88 2d       	mov	r24, r8
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	01 96       	adiw	r24, 0x01	; 1
    1206:	8f 71       	andi	r24, 0x1F	; 31
    1208:	99 27       	eor	r25, r25
    120a:	28 17       	cp	r18, r24
    120c:	39 07       	cpc	r19, r25
    120e:	11 f7       	brne	.-60     	; 0x11d4 <log_init+0xb8>
    1210:	c0 92 e8 01 	sts	0x01E8, r12	; 0x8001e8 <last_written>
    1214:	40 93 e7 01 	sts	0x01E7, r20	; 0x8001e7 <last_transaction_written>
    1218:	aa 94       	dec	r10
    121a:	0f 5f       	subi	r16, 0xFF	; 255
    121c:	1f 4f       	sbci	r17, 0xFF	; 255
    121e:	aa 20       	and	r10, r10
    1220:	c9 f2       	breq	.-78     	; 0x11d4 <log_init+0xb8>
    1222:	84 2e       	mov	r8, r20
    1224:	ce cf       	rjmp	.-100    	; 0x11c2 <log_init+0xa6>
    1226:	f7 01       	movw	r30, r14
    1228:	20 81       	ld	r18, Z
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	87 2d       	mov	r24, r7
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	4f 96       	adiw	r24, 0x1f	; 31
    1232:	8f 71       	andi	r24, 0x1F	; 31
    1234:	99 27       	eor	r25, r25
    1236:	28 17       	cp	r18, r24
    1238:	39 07       	cpc	r19, r25
    123a:	31 f5       	brne	.+76     	; 0x1288 <log_init+0x16c>
    123c:	c0 92 e6 01 	sts	0x01E6, r12	; 0x8001e6 <tail>
    1240:	68 9c       	mul	r6, r8
    1242:	f0 01       	movw	r30, r0
    1244:	69 9c       	mul	r6, r9
    1246:	f0 0d       	add	r31, r0
    1248:	11 24       	eor	r1, r1
    124a:	e7 51       	subi	r30, 0x17	; 23
    124c:	fe 4f       	sbci	r31, 0xFE	; 254
    124e:	70 80       	ld	r7, Z
    1250:	01 50       	subi	r16, 0x01	; 1
    1252:	11 09       	sbc	r17, r1
    1254:	f7 e0       	ldi	r31, 0x07	; 7
    1256:	ef 0e       	add	r14, r31
    1258:	f1 1c       	adc	r15, r1
    125a:	0c 17       	cp	r16, r28
    125c:	1d 07       	cpc	r17, r29
    125e:	a1 f0       	breq	.+40     	; 0x1288 <log_init+0x16c>
    1260:	c8 01       	movw	r24, r16
    1262:	b5 01       	movw	r22, r10
    1264:	0e 94 ad 13 	call	0x275a	; 0x275a <__divmodhi4>
    1268:	6c 01       	movw	r12, r24
    126a:	4c 01       	movw	r8, r24
    126c:	99 24       	eor	r9, r9
    126e:	c4 01       	movw	r24, r8
    1270:	0e 94 68 08 	call	0x10d0	; 0x10d0 <log_is_data_valid>
    1274:	89 2b       	or	r24, r25
    1276:	b9 f6       	brne	.-82     	; 0x1226 <log_init+0x10a>
    1278:	07 c0       	rjmp	.+14     	; 0x1288 <log_init+0x16c>
    127a:	8f e0       	ldi	r24, 0x0F	; 15
    127c:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <last_written>
    1280:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <last_transaction_written>
    1284:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <tail>
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	1f 91       	pop	r17
    128e:	0f 91       	pop	r16
    1290:	ff 90       	pop	r15
    1292:	ef 90       	pop	r14
    1294:	df 90       	pop	r13
    1296:	cf 90       	pop	r12
    1298:	bf 90       	pop	r11
    129a:	af 90       	pop	r10
    129c:	9f 90       	pop	r9
    129e:	8f 90       	pop	r8
    12a0:	7f 90       	pop	r7
    12a2:	6f 90       	pop	r6
    12a4:	08 95       	ret

000012a6 <log_update>:
    12a6:	ef 92       	push	r14
    12a8:	ff 92       	push	r15
    12aa:	1f 93       	push	r17
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
    12b0:	0e 94 17 03 	call	0x62e	; 0x62e <eeprom_isbusy>
    12b4:	89 2b       	or	r24, r25
    12b6:	39 f5       	brne	.+78     	; 0x1306 <log_update+0x60>
    12b8:	e9 e5       	ldi	r30, 0x59	; 89
    12ba:	f2 e0       	ldi	r31, 0x02	; 2
    12bc:	c0 e0       	ldi	r28, 0x00	; 0
    12be:	d0 e0       	ldi	r29, 0x00	; 0
    12c0:	81 91       	ld	r24, Z+
    12c2:	88 23       	and	r24, r24
    12c4:	e1 f0       	breq	.+56     	; 0x12fe <log_update+0x58>
    12c6:	17 e0       	ldi	r17, 0x07	; 7
    12c8:	1c 9f       	mul	r17, r28
    12ca:	c0 01       	movw	r24, r0
    12cc:	1d 9f       	mul	r17, r29
    12ce:	90 0d       	add	r25, r0
    12d0:	11 24       	eor	r1, r1
    12d2:	9c 01       	movw	r18, r24
    12d4:	27 51       	subi	r18, 0x17	; 23
    12d6:	3e 4f       	sbci	r19, 0xFE	; 254
    12d8:	79 01       	movw	r14, r18
    12da:	67 e0       	ldi	r22, 0x07	; 7
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	c9 01       	movw	r24, r18
    12e0:	0e 94 30 07 	call	0xe60	; 0xe60 <update_checksum>
    12e4:	c1 9f       	mul	r28, r17
    12e6:	c0 01       	movw	r24, r0
    12e8:	11 24       	eor	r1, r1
    12ea:	47 e0       	ldi	r20, 0x07	; 7
    12ec:	b7 01       	movw	r22, r14
    12ee:	80 58       	subi	r24, 0x80	; 128
    12f0:	9f 4f       	sbci	r25, 0xFF	; 255
    12f2:	0e 94 2f 03 	call	0x65e	; 0x65e <eeprom_writebuf>
    12f6:	c7 5a       	subi	r28, 0xA7	; 167
    12f8:	dd 4f       	sbci	r29, 0xFD	; 253
    12fa:	18 82       	st	Y, r1
    12fc:	04 c0       	rjmp	.+8      	; 0x1306 <log_update+0x60>
    12fe:	21 96       	adiw	r28, 0x01	; 1
    1300:	c0 31       	cpi	r28, 0x10	; 16
    1302:	d1 05       	cpc	r29, r1
    1304:	e9 f6       	brne	.-70     	; 0x12c0 <log_update+0x1a>
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	1f 91       	pop	r17
    130c:	ff 90       	pop	r15
    130e:	ef 90       	pop	r14
    1310:	08 95       	ret

00001312 <log_add_record>:
    1312:	ef 92       	push	r14
    1314:	ff 92       	push	r15
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	e8 2e       	mov	r14, r24
    1320:	c0 91 e8 01 	lds	r28, 0x01E8	; 0x8001e8 <last_written>
    1324:	d0 e0       	ldi	r29, 0x00	; 0
    1326:	21 96       	adiw	r28, 0x01	; 1
    1328:	cf 70       	andi	r28, 0x0F	; 15
    132a:	dd 27       	eor	r29, r29
    132c:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <tail>
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	0e 94 68 08 	call	0x10d0	; 0x10d0 <log_is_data_valid>
    1336:	f8 2e       	mov	r15, r24
    1338:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <last_transaction_written>
    133c:	8f 5f       	subi	r24, 0xFF	; 255
    133e:	81 32       	cpi	r24, 0x21	; 33
    1340:	18 f4       	brcc	.+6      	; 0x1348 <log_add_record+0x36>
    1342:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <last_transaction_written>
    1346:	02 c0       	rjmp	.+4      	; 0x134c <log_add_record+0x3a>
    1348:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <last_transaction_written>
    134c:	87 e0       	ldi	r24, 0x07	; 7
    134e:	8c 9f       	mul	r24, r28
    1350:	80 01       	movw	r16, r0
    1352:	8d 9f       	mul	r24, r29
    1354:	10 0d       	add	r17, r0
    1356:	11 24       	eor	r1, r1
    1358:	07 51       	subi	r16, 0x17	; 23
    135a:	1e 4f       	sbci	r17, 0xFE	; 254
    135c:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <last_transaction_written>
    1360:	f8 01       	movw	r30, r16
    1362:	80 83       	st	Z, r24
    1364:	0e 94 56 0a 	call	0x14ac	; 0x14ac <rtc_get_date>
    1368:	f8 01       	movw	r30, r16
    136a:	61 83       	std	Z+1, r22	; 0x01
    136c:	72 83       	std	Z+2, r23	; 0x02
    136e:	83 83       	std	Z+3, r24	; 0x03
    1370:	94 83       	std	Z+4, r25	; 0x04
    1372:	e5 82       	std	Z+5, r14	; 0x05
    1374:	c0 93 e8 01 	sts	0x01E8, r28	; 0x8001e8 <last_written>
    1378:	67 e0       	ldi	r22, 0x07	; 7
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	c8 01       	movw	r24, r16
    137e:	0e 94 30 07 	call	0xe60	; 0xe60 <update_checksum>
    1382:	c7 5a       	subi	r28, 0xA7	; 167
    1384:	dd 4f       	sbci	r29, 0xFD	; 253
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	88 83       	st	Y, r24
    138a:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <last_written>
    138e:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <tail>
    1392:	89 13       	cpse	r24, r25
    1394:	08 c0       	rjmp	.+16     	; 0x13a6 <log_add_record+0x94>
    1396:	ff 20       	and	r15, r15
    1398:	31 f0       	breq	.+12     	; 0x13a6 <log_add_record+0x94>
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	01 96       	adiw	r24, 0x01	; 1
    139e:	8f 70       	andi	r24, 0x0F	; 15
    13a0:	99 27       	eor	r25, r25
    13a2:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <tail>
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	1f 91       	pop	r17
    13ac:	0f 91       	pop	r16
    13ae:	ff 90       	pop	r15
    13b0:	ef 90       	pop	r14
    13b2:	08 95       	ret

000013b4 <log_clear>:
    13b4:	e9 ee       	ldi	r30, 0xE9	; 233
    13b6:	f1 e0       	ldi	r31, 0x01	; 1
    13b8:	a9 e5       	ldi	r26, 0x59	; 89
    13ba:	b2 e0       	ldi	r27, 0x02	; 2
    13bc:	8f ef       	ldi	r24, 0xFF	; 255
    13be:	4f ef       	ldi	r20, 0xFF	; 255
    13c0:	5f ef       	ldi	r21, 0xFF	; 255
    13c2:	ba 01       	movw	r22, r20
    13c4:	91 e0       	ldi	r25, 0x01	; 1
    13c6:	80 83       	st	Z, r24
    13c8:	85 83       	std	Z+5, r24	; 0x05
    13ca:	41 83       	std	Z+1, r20	; 0x01
    13cc:	52 83       	std	Z+2, r21	; 0x02
    13ce:	63 83       	std	Z+3, r22	; 0x03
    13d0:	74 83       	std	Z+4, r23	; 0x04
    13d2:	9d 93       	st	X+, r25
    13d4:	37 96       	adiw	r30, 0x07	; 7
    13d6:	22 e0       	ldi	r18, 0x02	; 2
    13d8:	e9 35       	cpi	r30, 0x59	; 89
    13da:	f2 07       	cpc	r31, r18
    13dc:	a1 f7       	brne	.-24     	; 0x13c6 <log_clear+0x12>
    13de:	8f e0       	ldi	r24, 0x0F	; 15
    13e0:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <last_written>
    13e4:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <tail>
    13e8:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <last_transaction_written>
    13ec:	08 95       	ret

000013ee <log_get_num_entries>:
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	00 91 e6 01 	lds	r16, 0x01E6	; 0x8001e6 <tail>
    13fa:	c0 2f       	mov	r28, r16
    13fc:	10 e0       	ldi	r17, 0x00	; 0
    13fe:	d0 e0       	ldi	r29, 0x00	; 0
    1400:	ce 01       	movw	r24, r28
    1402:	0e 94 68 08 	call	0x10d0	; 0x10d0 <log_is_data_valid>
    1406:	89 2b       	or	r24, r25
    1408:	29 f0       	breq	.+10     	; 0x1414 <log_get_num_entries+0x26>
    140a:	21 96       	adiw	r28, 0x01	; 1
    140c:	cf 70       	andi	r28, 0x0F	; 15
    140e:	1f 5f       	subi	r17, 0xFF	; 255
    1410:	0c 13       	cpse	r16, r28
    1412:	f5 cf       	rjmp	.-22     	; 0x13fe <log_get_num_entries+0x10>
    1414:	81 2f       	mov	r24, r17
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	1f 91       	pop	r17
    141c:	0f 91       	pop	r16
    141e:	08 95       	ret

00001420 <log_get_record>:
    1420:	af 92       	push	r10
    1422:	bf 92       	push	r11
    1424:	cf 92       	push	r12
    1426:	df 92       	push	r13
    1428:	ef 92       	push	r14
    142a:	ff 92       	push	r15
    142c:	0f 93       	push	r16
    142e:	1f 93       	push	r17
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	6b 01       	movw	r12, r22
    1436:	7c 01       	movw	r14, r24
    1438:	8a 01       	movw	r16, r20
    143a:	59 01       	movw	r10, r18
    143c:	0e 94 f7 09 	call	0x13ee	; 0x13ee <log_get_num_entries>
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	a0 e0       	ldi	r26, 0x00	; 0
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	c8 16       	cp	r12, r24
    1448:	d9 06       	cpc	r13, r25
    144a:	ea 06       	cpc	r14, r26
    144c:	fb 06       	cpc	r15, r27
    144e:	f8 f4       	brcc	.+62     	; 0x148e <log_get_record+0x6e>
    1450:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <tail>
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	c8 0e       	add	r12, r24
    1458:	d9 1e       	adc	r13, r25
    145a:	8f e0       	ldi	r24, 0x0F	; 15
    145c:	c8 22       	and	r12, r24
    145e:	dd 24       	eor	r13, r13
    1460:	87 e0       	ldi	r24, 0x07	; 7
    1462:	8c 9d       	mul	r24, r12
    1464:	f0 01       	movw	r30, r0
    1466:	8d 9d       	mul	r24, r13
    1468:	f0 0d       	add	r31, r0
    146a:	11 24       	eor	r1, r1
    146c:	e7 51       	subi	r30, 0x17	; 23
    146e:	fe 4f       	sbci	r31, 0xFE	; 254
    1470:	81 81       	ldd	r24, Z+1	; 0x01
    1472:	92 81       	ldd	r25, Z+2	; 0x02
    1474:	a3 81       	ldd	r26, Z+3	; 0x03
    1476:	b4 81       	ldd	r27, Z+4	; 0x04
    1478:	e8 01       	movw	r28, r16
    147a:	88 83       	st	Y, r24
    147c:	99 83       	std	Y+1, r25	; 0x01
    147e:	aa 83       	std	Y+2, r26	; 0x02
    1480:	bb 83       	std	Y+3, r27	; 0x03
    1482:	85 81       	ldd	r24, Z+5	; 0x05
    1484:	f5 01       	movw	r30, r10
    1486:	80 83       	st	Z, r24
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <log_get_record+0x72>
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	1f 91       	pop	r17
    1498:	0f 91       	pop	r16
    149a:	ff 90       	pop	r15
    149c:	ef 90       	pop	r14
    149e:	df 90       	pop	r13
    14a0:	cf 90       	pop	r12
    14a2:	bf 90       	pop	r11
    14a4:	af 90       	pop	r10
    14a6:	08 95       	ret

000014a8 <rtc_init>:
    14a8:	0c 94 10 06 	jmp	0xc20	; 0xc20 <timer1_init>

000014ac <rtc_get_date>:
    14ac:	0f 93       	push	r16
    14ae:	1f 93       	push	r17
    14b0:	0e 94 4c 06 	call	0xc98	; 0xc98 <timer1_get>
    14b4:	00 91 0e 03 	lds	r16, 0x030E	; 0x80030e <rtc_base>
    14b8:	10 91 0f 03 	lds	r17, 0x030F	; 0x80030f <rtc_base+0x1>
    14bc:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <rtc_base+0x2>
    14c0:	30 91 11 03 	lds	r19, 0x0311	; 0x800311 <rtc_base+0x3>
    14c4:	60 0f       	add	r22, r16
    14c6:	71 1f       	adc	r23, r17
    14c8:	82 1f       	adc	r24, r18
    14ca:	93 1f       	adc	r25, r19
    14cc:	1f 91       	pop	r17
    14ce:	0f 91       	pop	r16
    14d0:	08 95       	ret

000014d2 <is_leapyear>:
    14d2:	9c 01       	movw	r18, r24
    14d4:	60 e9       	ldi	r22, 0x90	; 144
    14d6:	71 e0       	ldi	r23, 0x01	; 1
    14d8:	0e 94 99 13 	call	0x2732	; 0x2732 <__udivmodhi4>
    14dc:	89 2b       	or	r24, r25
    14de:	79 f0       	breq	.+30     	; 0x14fe <is_leapyear+0x2c>
    14e0:	c9 01       	movw	r24, r18
    14e2:	83 70       	andi	r24, 0x03	; 3
    14e4:	99 27       	eor	r25, r25
    14e6:	89 2b       	or	r24, r25
    14e8:	61 f4       	brne	.+24     	; 0x1502 <is_leapyear+0x30>
    14ea:	c9 01       	movw	r24, r18
    14ec:	64 e6       	ldi	r22, 0x64	; 100
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	0e 94 99 13 	call	0x2732	; 0x2732 <__udivmodhi4>
    14f4:	9c 01       	movw	r18, r24
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	23 2b       	or	r18, r19
    14fa:	21 f4       	brne	.+8      	; 0x1504 <is_leapyear+0x32>
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <is_leapyear+0x30>
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	08 95       	ret
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	08 95       	ret

00001506 <rtc_set_by_datestr>:
    1506:	2f 92       	push	r2
    1508:	3f 92       	push	r3
    150a:	4f 92       	push	r4
    150c:	5f 92       	push	r5
    150e:	6f 92       	push	r6
    1510:	7f 92       	push	r7
    1512:	8f 92       	push	r8
    1514:	9f 92       	push	r9
    1516:	af 92       	push	r10
    1518:	bf 92       	push	r11
    151a:	cf 92       	push	r12
    151c:	df 92       	push	r13
    151e:	ef 92       	push	r14
    1520:	ff 92       	push	r15
    1522:	0f 93       	push	r16
    1524:	1f 93       	push	r17
    1526:	cf 93       	push	r28
    1528:	df 93       	push	r29
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	67 97       	sbiw	r28, 0x17	; 23
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	de bf       	out	0x3e, r29	; 62
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	cd bf       	out	0x3d, r28	; 61
    153a:	2c e0       	ldi	r18, 0x0C	; 12
    153c:	e0 eb       	ldi	r30, 0xB0	; 176
    153e:	f1 e0       	ldi	r31, 0x01	; 1
    1540:	ae 01       	movw	r20, r28
    1542:	4f 5f       	subi	r20, 0xFF	; 255
    1544:	5f 4f       	sbci	r21, 0xFF	; 255
    1546:	1a 01       	movw	r2, r20
    1548:	da 01       	movw	r26, r20
    154a:	01 90       	ld	r0, Z+
    154c:	0d 92       	st	X+, r0
    154e:	2a 95       	dec	r18
    1550:	e1 f7       	brne	.-8      	; 0x154a <rtc_set_by_datestr+0x44>
    1552:	dc 01       	movw	r26, r24
    1554:	2c 91       	ld	r18, X
    1556:	22 0f       	add	r18, r18
    1558:	20 56       	subi	r18, 0x60	; 96
    155a:	32 2f       	mov	r19, r18
    155c:	33 0f       	add	r19, r19
    155e:	33 0f       	add	r19, r19
    1560:	23 0f       	add	r18, r19
    1562:	11 96       	adiw	r26, 0x01	; 1
    1564:	3c 91       	ld	r19, X
    1566:	11 97       	sbiw	r26, 0x01	; 1
    1568:	31 53       	subi	r19, 0x31	; 49
    156a:	23 0f       	add	r18, r19
    156c:	2d 87       	std	Y+13, r18	; 0x0d
    156e:	13 96       	adiw	r26, 0x03	; 3
    1570:	2c 91       	ld	r18, X
    1572:	13 97       	sbiw	r26, 0x03	; 3
    1574:	02 2e       	mov	r0, r18
    1576:	00 0c       	add	r0, r0
    1578:	33 0b       	sbc	r19, r19
    157a:	20 53       	subi	r18, 0x30	; 48
    157c:	31 09       	sbc	r19, r1
    157e:	6a e0       	ldi	r22, 0x0A	; 10
    1580:	62 9f       	mul	r22, r18
    1582:	a0 01       	movw	r20, r0
    1584:	63 9f       	mul	r22, r19
    1586:	50 0d       	add	r21, r0
    1588:	11 24       	eor	r1, r1
    158a:	14 96       	adiw	r26, 0x04	; 4
    158c:	cc 90       	ld	r12, X
    158e:	0c 2c       	mov	r0, r12
    1590:	00 0c       	add	r0, r0
    1592:	dd 08       	sbc	r13, r13
    1594:	b0 e3       	ldi	r27, 0x30	; 48
    1596:	cb 1a       	sub	r12, r27
    1598:	d1 08       	sbc	r13, r1
    159a:	c4 0e       	add	r12, r20
    159c:	d5 1e       	adc	r13, r21
    159e:	86 01       	movw	r16, r12
    15a0:	01 50       	subi	r16, 0x01	; 1
    15a2:	11 09       	sbc	r17, r1
    15a4:	fc 01       	movw	r30, r24
    15a6:	26 81       	ldd	r18, Z+6	; 0x06
    15a8:	02 2e       	mov	r0, r18
    15aa:	00 0c       	add	r0, r0
    15ac:	33 0b       	sbc	r19, r19
    15ae:	20 53       	subi	r18, 0x30	; 48
    15b0:	31 09       	sbc	r19, r1
    15b2:	e8 ee       	ldi	r30, 0xE8	; 232
    15b4:	f3 e0       	ldi	r31, 0x03	; 3
    15b6:	2e 9f       	mul	r18, r30
    15b8:	a0 01       	movw	r20, r0
    15ba:	2f 9f       	mul	r18, r31
    15bc:	50 0d       	add	r21, r0
    15be:	3e 9f       	mul	r19, r30
    15c0:	50 0d       	add	r21, r0
    15c2:	11 24       	eor	r1, r1
    15c4:	dc 01       	movw	r26, r24
    15c6:	17 96       	adiw	r26, 0x07	; 7
    15c8:	2c 91       	ld	r18, X
    15ca:	17 97       	sbiw	r26, 0x07	; 7
    15cc:	02 2e       	mov	r0, r18
    15ce:	00 0c       	add	r0, r0
    15d0:	33 0b       	sbc	r19, r19
    15d2:	20 53       	subi	r18, 0x30	; 48
    15d4:	31 09       	sbc	r19, r1
    15d6:	74 e6       	ldi	r23, 0x64	; 100
    15d8:	72 9f       	mul	r23, r18
    15da:	70 01       	movw	r14, r0
    15dc:	73 9f       	mul	r23, r19
    15de:	f0 0c       	add	r15, r0
    15e0:	11 24       	eor	r1, r1
    15e2:	e4 0e       	add	r14, r20
    15e4:	f5 1e       	adc	r15, r21
    15e6:	18 96       	adiw	r26, 0x08	; 8
    15e8:	4c 91       	ld	r20, X
    15ea:	18 97       	sbiw	r26, 0x08	; 8
    15ec:	04 2e       	mov	r0, r20
    15ee:	00 0c       	add	r0, r0
    15f0:	55 0b       	sbc	r21, r21
    15f2:	40 53       	subi	r20, 0x30	; 48
    15f4:	51 09       	sbc	r21, r1
    15f6:	64 9f       	mul	r22, r20
    15f8:	90 01       	movw	r18, r0
    15fa:	65 9f       	mul	r22, r21
    15fc:	30 0d       	add	r19, r0
    15fe:	11 24       	eor	r1, r1
    1600:	e2 0e       	add	r14, r18
    1602:	f3 1e       	adc	r15, r19
    1604:	19 96       	adiw	r26, 0x09	; 9
    1606:	2c 91       	ld	r18, X
    1608:	19 97       	sbiw	r26, 0x09	; 9
    160a:	f7 01       	movw	r30, r14
    160c:	e2 0f       	add	r30, r18
    160e:	f1 1d       	adc	r31, r1
    1610:	27 fd       	sbrc	r18, 7
    1612:	fa 95       	dec	r31
    1614:	af 01       	movw	r20, r30
    1616:	58 50       	subi	r21, 0x08	; 8
    1618:	7a 01       	movw	r14, r20
    161a:	1b 96       	adiw	r26, 0x0b	; 11
    161c:	2c 91       	ld	r18, X
    161e:	1b 97       	sbiw	r26, 0x0b	; 11
    1620:	22 0f       	add	r18, r18
    1622:	20 56       	subi	r18, 0x60	; 96
    1624:	32 2f       	mov	r19, r18
    1626:	33 0f       	add	r19, r19
    1628:	33 0f       	add	r19, r19
    162a:	23 0f       	add	r18, r19
    162c:	1c 96       	adiw	r26, 0x0c	; 12
    162e:	3c 91       	ld	r19, X
    1630:	1c 97       	sbiw	r26, 0x0c	; 12
    1632:	30 53       	subi	r19, 0x30	; 48
    1634:	23 0f       	add	r18, r19
    1636:	29 8b       	std	Y+17, r18	; 0x11
    1638:	1e 96       	adiw	r26, 0x0e	; 14
    163a:	2c 91       	ld	r18, X
    163c:	1e 97       	sbiw	r26, 0x0e	; 14
    163e:	22 0f       	add	r18, r18
    1640:	20 56       	subi	r18, 0x60	; 96
    1642:	32 2f       	mov	r19, r18
    1644:	33 0f       	add	r19, r19
    1646:	33 0f       	add	r19, r19
    1648:	23 0f       	add	r18, r19
    164a:	1f 96       	adiw	r26, 0x0f	; 15
    164c:	3c 91       	ld	r19, X
    164e:	1f 97       	sbiw	r26, 0x0f	; 15
    1650:	30 53       	subi	r19, 0x30	; 48
    1652:	23 0f       	add	r18, r19
    1654:	2a 8b       	std	Y+18, r18	; 0x12
    1656:	51 96       	adiw	r26, 0x11	; 17
    1658:	2c 91       	ld	r18, X
    165a:	51 97       	sbiw	r26, 0x11	; 17
    165c:	22 0f       	add	r18, r18
    165e:	20 56       	subi	r18, 0x60	; 96
    1660:	32 2f       	mov	r19, r18
    1662:	33 0f       	add	r19, r19
    1664:	33 0f       	add	r19, r19
    1666:	23 0f       	add	r18, r19
    1668:	52 96       	adiw	r26, 0x12	; 18
    166a:	8c 91       	ld	r24, X
    166c:	80 53       	subi	r24, 0x30	; 48
    166e:	28 0f       	add	r18, r24
    1670:	2b 8b       	std	Y+19, r18	; 0x13
    1672:	ca 01       	movw	r24, r20
    1674:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <is_leapyear>
    1678:	88 23       	and	r24, r24
    167a:	21 f0       	breq	.+8      	; 0x1684 <rtc_set_by_datestr+0x17e>
    167c:	5d 85       	ldd	r21, Y+13	; 0x0d
    167e:	52 30       	cpi	r21, 0x02	; 2
    1680:	08 f0       	brcs	.+2      	; 0x1684 <rtc_set_by_datestr+0x17e>
    1682:	86 01       	movw	r16, r12
    1684:	c7 01       	movw	r24, r14
    1686:	60 e9       	ldi	r22, 0x90	; 144
    1688:	71 e0       	ldi	r23, 0x01	; 1
    168a:	0e 94 99 13 	call	0x2732	; 0x2732 <__udivmodhi4>
    168e:	fc 01       	movw	r30, r24
    1690:	db 01       	movw	r26, r22
    1692:	20 e8       	ldi	r18, 0x80	; 128
    1694:	39 e5       	ldi	r19, 0x59	; 89
    1696:	40 e6       	ldi	r20, 0x60	; 96
    1698:	50 ef       	ldi	r21, 0xF0	; 240
    169a:	0e 94 11 14 	call	0x2822	; 0x2822 <__muluhisi3>
    169e:	2b 01       	movw	r4, r22
    16a0:	3c 01       	movw	r6, r24
    16a2:	cf 01       	movw	r24, r30
    16a4:	64 e6       	ldi	r22, 0x64	; 100
    16a6:	70 e0       	ldi	r23, 0x00	; 0
    16a8:	0e 94 99 13 	call	0x2732	; 0x2732 <__udivmodhi4>
    16ac:	fc 01       	movw	r30, r24
    16ae:	db 01       	movw	r26, r22
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	32 ec       	ldi	r19, 0xC2	; 194
    16b4:	47 e1       	ldi	r20, 0x17	; 23
    16b6:	5c eb       	ldi	r21, 0xBC	; 188
    16b8:	0e 94 11 14 	call	0x2822	; 0x2822 <__muluhisi3>
    16bc:	4b 01       	movw	r8, r22
    16be:	5c 01       	movw	r10, r24
    16c0:	df 01       	movw	r26, r30
    16c2:	b6 95       	lsr	r27
    16c4:	a7 95       	ror	r26
    16c6:	b6 95       	lsr	r27
    16c8:	a7 95       	ror	r26
    16ca:	20 e8       	ldi	r18, 0x80	; 128
    16cc:	3f e1       	ldi	r19, 0x1F	; 31
    16ce:	46 e8       	ldi	r20, 0x86	; 134
    16d0:	57 e0       	ldi	r21, 0x07	; 7
    16d2:	0e 94 11 14 	call	0x2822	; 0x2822 <__muluhisi3>
    16d6:	6b 01       	movw	r12, r22
    16d8:	7c 01       	movw	r14, r24
    16da:	df 01       	movw	r26, r30
    16dc:	a3 70       	andi	r26, 0x03	; 3
    16de:	bb 27       	eor	r27, r27
    16e0:	20 e8       	ldi	r18, 0x80	; 128
    16e2:	33 e3       	ldi	r19, 0x33	; 51
    16e4:	41 ee       	ldi	r20, 0xE1	; 225
    16e6:	51 e0       	ldi	r21, 0x01	; 1
    16e8:	0e 94 11 14 	call	0x2822	; 0x2822 <__muluhisi3>
    16ec:	6c 8b       	std	Y+20, r22	; 0x14
    16ee:	7d 8b       	std	Y+21, r23	; 0x15
    16f0:	8e 8b       	std	Y+22, r24	; 0x16
    16f2:	9f 8b       	std	Y+23, r25	; 0x17
    16f4:	f1 01       	movw	r30, r2
    16f6:	8e 2f       	mov	r24, r30
    16f8:	82 19       	sub	r24, r2
    16fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    16fc:	89 17       	cp	r24, r25
    16fe:	20 f4       	brcc	.+8      	; 0x1708 <rtc_set_by_datestr+0x202>
    1700:	81 91       	ld	r24, Z+
    1702:	08 0f       	add	r16, r24
    1704:	11 1d       	adc	r17, r1
    1706:	f7 cf       	rjmp	.-18     	; 0x16f6 <rtc_set_by_datestr+0x1f0>
    1708:	a9 89       	ldd	r26, Y+17	; 0x11
    170a:	2a 2f       	mov	r18, r26
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	a0 e1       	ldi	r26, 0x10	; 16
    1710:	be e0       	ldi	r27, 0x0E	; 14
    1712:	0e 94 02 14 	call	0x2804	; 0x2804 <__umulhisi3>
    1716:	6d 87       	std	Y+13, r22	; 0x0d
    1718:	7e 87       	std	Y+14, r23	; 0x0e
    171a:	8f 87       	std	Y+15, r24	; 0x0f
    171c:	98 8b       	std	Y+16, r25	; 0x10
    171e:	ba 89       	ldd	r27, Y+18	; 0x12
    1720:	2b 2f       	mov	r18, r27
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	ac e3       	ldi	r26, 0x3C	; 60
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	0e 94 02 14 	call	0x2804	; 0x2804 <__umulhisi3>
    172c:	2d 85       	ldd	r18, Y+13	; 0x0d
    172e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1730:	4f 85       	ldd	r20, Y+15	; 0x0f
    1732:	58 89       	ldd	r21, Y+16	; 0x10
    1734:	26 0f       	add	r18, r22
    1736:	37 1f       	adc	r19, r23
    1738:	48 1f       	adc	r20, r24
    173a:	59 1f       	adc	r21, r25
    173c:	da 01       	movw	r26, r20
    173e:	c9 01       	movw	r24, r18
    1740:	3b 89       	ldd	r19, Y+19	; 0x13
    1742:	83 0f       	add	r24, r19
    1744:	91 1d       	adc	r25, r1
    1746:	a1 1d       	adc	r26, r1
    1748:	b1 1d       	adc	r27, r1
    174a:	48 0e       	add	r4, r24
    174c:	59 1e       	adc	r5, r25
    174e:	6a 1e       	adc	r6, r26
    1750:	7b 1e       	adc	r7, r27
    1752:	84 0c       	add	r8, r4
    1754:	95 1c       	adc	r9, r5
    1756:	a6 1c       	adc	r10, r6
    1758:	b7 1c       	adc	r11, r7
    175a:	c8 0c       	add	r12, r8
    175c:	d9 1c       	adc	r13, r9
    175e:	ea 1c       	adc	r14, r10
    1760:	fb 1c       	adc	r15, r11
    1762:	8c 89       	ldd	r24, Y+20	; 0x14
    1764:	9d 89       	ldd	r25, Y+21	; 0x15
    1766:	ae 89       	ldd	r26, Y+22	; 0x16
    1768:	bf 89       	ldd	r27, Y+23	; 0x17
    176a:	c8 0e       	add	r12, r24
    176c:	d9 1e       	adc	r13, r25
    176e:	ea 1e       	adc	r14, r26
    1770:	fb 1e       	adc	r15, r27
    1772:	d8 01       	movw	r26, r16
    1774:	20 e8       	ldi	r18, 0x80	; 128
    1776:	31 e5       	ldi	r19, 0x51	; 81
    1778:	41 e0       	ldi	r20, 0x01	; 1
    177a:	50 e0       	ldi	r21, 0x00	; 0
    177c:	0e 94 11 14 	call	0x2822	; 0x2822 <__muluhisi3>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	8c 0d       	add	r24, r12
    1786:	9d 1d       	adc	r25, r13
    1788:	ae 1d       	adc	r26, r14
    178a:	bf 1d       	adc	r27, r15
    178c:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <rtc_base>
    1790:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <rtc_base+0x1>
    1794:	a0 93 10 03 	sts	0x0310, r26	; 0x800310 <rtc_base+0x2>
    1798:	b0 93 11 03 	sts	0x0311, r27	; 0x800311 <rtc_base+0x3>
    179c:	67 96       	adiw	r28, 0x17	; 23
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	de bf       	out	0x3e, r29	; 62
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	cd bf       	out	0x3d, r28	; 61
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	1f 91       	pop	r17
    17ae:	0f 91       	pop	r16
    17b0:	ff 90       	pop	r15
    17b2:	ef 90       	pop	r14
    17b4:	df 90       	pop	r13
    17b6:	cf 90       	pop	r12
    17b8:	bf 90       	pop	r11
    17ba:	af 90       	pop	r10
    17bc:	9f 90       	pop	r9
    17be:	8f 90       	pop	r8
    17c0:	7f 90       	pop	r7
    17c2:	6f 90       	pop	r6
    17c4:	5f 90       	pop	r5
    17c6:	4f 90       	pop	r4
    17c8:	3f 90       	pop	r3
    17ca:	2f 90       	pop	r2
    17cc:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <timer1_clear>

000017d0 <get_month>:
    17d0:	ef 92       	push	r14
    17d2:	ff 92       	push	r15
    17d4:	0f 93       	push	r16
    17d6:	1f 93       	push	r17
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
    17e0:	68 97       	sbiw	r28, 0x18	; 24
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	f8 94       	cli
    17e6:	de bf       	out	0x3e, r29	; 62
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	cd bf       	out	0x3d, r28	; 61
    17ec:	7b 01       	movw	r14, r22
    17ee:	2c e0       	ldi	r18, 0x0C	; 12
    17f0:	e0 eb       	ldi	r30, 0xB0	; 176
    17f2:	f1 e0       	ldi	r31, 0x01	; 1
    17f4:	de 01       	movw	r26, r28
    17f6:	1d 96       	adiw	r26, 0x0d	; 13
    17f8:	01 90       	ld	r0, Z+
    17fa:	0d 92       	st	X+, r0
    17fc:	2a 95       	dec	r18
    17fe:	e1 f7       	brne	.-8      	; 0x17f8 <get_month+0x28>
    1800:	8e 01       	movw	r16, r28
    1802:	0f 5f       	subi	r16, 0xFF	; 255
    1804:	1f 4f       	sbci	r17, 0xFF	; 255
    1806:	2c e0       	ldi	r18, 0x0C	; 12
    1808:	f8 01       	movw	r30, r16
    180a:	11 92       	st	Z+, r1
    180c:	2a 95       	dec	r18
    180e:	e9 f7       	brne	.-6      	; 0x180a <get_month+0x3a>
    1810:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <is_leapyear>
    1814:	8a 83       	std	Y+2, r24	; 0x02
    1816:	de 01       	movw	r26, r28
    1818:	1d 96       	adiw	r26, 0x0d	; 13
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	f7 01       	movw	r30, r14
    181e:	40 81       	ld	r20, Z
    1820:	51 81       	ldd	r21, Z+1	; 0x01
    1822:	9d 91       	ld	r25, X+
    1824:	f8 01       	movw	r30, r16
    1826:	21 91       	ld	r18, Z+
    1828:	8f 01       	movw	r16, r30
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	29 0f       	add	r18, r25
    182e:	31 1d       	adc	r19, r1
    1830:	42 17       	cp	r20, r18
    1832:	53 07       	cpc	r21, r19
    1834:	40 f0       	brcs	.+16     	; 0x1846 <get_month+0x76>
    1836:	42 1b       	sub	r20, r18
    1838:	53 0b       	sbc	r21, r19
    183a:	f7 01       	movw	r30, r14
    183c:	51 83       	std	Z+1, r21	; 0x01
    183e:	40 83       	st	Z, r20
    1840:	8f 5f       	subi	r24, 0xFF	; 255
    1842:	8c 30       	cpi	r24, 0x0C	; 12
    1844:	59 f7       	brne	.-42     	; 0x181c <get_month+0x4c>
    1846:	68 96       	adiw	r28, 0x18	; 24
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	cd bf       	out	0x3d, r28	; 61
    1852:	df 91       	pop	r29
    1854:	cf 91       	pop	r28
    1856:	1f 91       	pop	r17
    1858:	0f 91       	pop	r16
    185a:	ff 90       	pop	r15
    185c:	ef 90       	pop	r14
    185e:	08 95       	ret

00001860 <rtc_num2datestr>:
    1860:	4f 92       	push	r4
    1862:	5f 92       	push	r5
    1864:	6f 92       	push	r6
    1866:	7f 92       	push	r7
    1868:	8f 92       	push	r8
    186a:	9f 92       	push	r9
    186c:	af 92       	push	r10
    186e:	bf 92       	push	r11
    1870:	cf 92       	push	r12
    1872:	df 92       	push	r13
    1874:	ef 92       	push	r14
    1876:	ff 92       	push	r15
    1878:	cf 93       	push	r28
    187a:	df 93       	push	r29
    187c:	00 d0       	rcall	.+0      	; 0x187e <rtc_num2datestr+0x1e>
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
    1882:	2b 01       	movw	r4, r22
    1884:	3c 01       	movw	r6, r24
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	a0 e0       	ldi	r26, 0x00	; 0
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	20 e8       	ldi	r18, 0x80	; 128
    1890:	42 16       	cp	r4, r18
    1892:	29 e5       	ldi	r18, 0x59	; 89
    1894:	52 06       	cpc	r5, r18
    1896:	20 e6       	ldi	r18, 0x60	; 96
    1898:	62 06       	cpc	r6, r18
    189a:	20 ef       	ldi	r18, 0xF0	; 240
    189c:	72 06       	cpc	r7, r18
    189e:	18 f4       	brcc	.+6      	; 0x18a6 <rtc_num2datestr+0x46>
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	dc 01       	movw	r26, r24
    18a6:	20 e9       	ldi	r18, 0x90	; 144
    18a8:	31 e0       	ldi	r19, 0x01	; 1
    18aa:	82 9f       	mul	r24, r18
    18ac:	50 01       	movw	r10, r0
    18ae:	83 9f       	mul	r24, r19
    18b0:	b0 0c       	add	r11, r0
    18b2:	92 9f       	mul	r25, r18
    18b4:	b0 0c       	add	r11, r0
    18b6:	11 24       	eor	r1, r1
    18b8:	80 e3       	ldi	r24, 0x30	; 48
    18ba:	a8 1a       	sub	r10, r24
    18bc:	88 ef       	ldi	r24, 0xF8	; 248
    18be:	b8 0a       	sbc	r11, r24
    18c0:	c1 2c       	mov	r12, r1
    18c2:	d1 2c       	mov	r13, r1
    18c4:	76 01       	movw	r14, r12
    18c6:	c3 94       	inc	r12
    18c8:	20 e8       	ldi	r18, 0x80	; 128
    18ca:	42 16       	cp	r4, r18
    18cc:	29 e5       	ldi	r18, 0x59	; 89
    18ce:	52 06       	cpc	r5, r18
    18d0:	20 e6       	ldi	r18, 0x60	; 96
    18d2:	62 06       	cpc	r6, r18
    18d4:	20 ef       	ldi	r18, 0xF0	; 240
    18d6:	72 06       	cpc	r7, r18
    18d8:	18 f4       	brcc	.+6      	; 0x18e0 <rtc_num2datestr+0x80>
    18da:	c1 2c       	mov	r12, r1
    18dc:	d1 2c       	mov	r13, r1
    18de:	76 01       	movw	r14, r12
    18e0:	a7 01       	movw	r20, r14
    18e2:	96 01       	movw	r18, r12
    18e4:	60 e8       	ldi	r22, 0x80	; 128
    18e6:	79 e5       	ldi	r23, 0x59	; 89
    18e8:	80 e6       	ldi	r24, 0x60	; 96
    18ea:	90 ef       	ldi	r25, 0xF0	; 240
    18ec:	0e 94 89 13 	call	0x2712	; 0x2712 <__mulsi3>
    18f0:	73 01       	movw	r14, r6
    18f2:	62 01       	movw	r12, r4
    18f4:	c6 1a       	sub	r12, r22
    18f6:	d7 0a       	sbc	r13, r23
    18f8:	e8 0a       	sbc	r14, r24
    18fa:	f9 0a       	sbc	r15, r25
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	a0 e0       	ldi	r26, 0x00	; 0
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	c1 14       	cp	r12, r1
    1906:	22 ec       	ldi	r18, 0xC2	; 194
    1908:	d2 06       	cpc	r13, r18
    190a:	27 e1       	ldi	r18, 0x17	; 23
    190c:	e2 06       	cpc	r14, r18
    190e:	2c eb       	ldi	r18, 0xBC	; 188
    1910:	f2 06       	cpc	r15, r18
    1912:	18 f4       	brcc	.+6      	; 0x191a <rtc_num2datestr+0xba>
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	dc 01       	movw	r26, r24
    191a:	44 e6       	ldi	r20, 0x64	; 100
    191c:	48 9f       	mul	r20, r24
    191e:	90 01       	movw	r18, r0
    1920:	49 9f       	mul	r20, r25
    1922:	30 0d       	add	r19, r0
    1924:	11 24       	eor	r1, r1
    1926:	a2 0e       	add	r10, r18
    1928:	b3 1e       	adc	r11, r19
    192a:	21 e0       	ldi	r18, 0x01	; 1
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e0       	ldi	r20, 0x00	; 0
    1930:	50 e0       	ldi	r21, 0x00	; 0
    1932:	c1 14       	cp	r12, r1
    1934:	82 ec       	ldi	r24, 0xC2	; 194
    1936:	d8 06       	cpc	r13, r24
    1938:	87 e1       	ldi	r24, 0x17	; 23
    193a:	e8 06       	cpc	r14, r24
    193c:	8c eb       	ldi	r24, 0xBC	; 188
    193e:	f8 06       	cpc	r15, r24
    1940:	18 f4       	brcc	.+6      	; 0x1948 <rtc_num2datestr+0xe8>
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	a9 01       	movw	r20, r18
    1948:	60 e0       	ldi	r22, 0x00	; 0
    194a:	72 ec       	ldi	r23, 0xC2	; 194
    194c:	87 e1       	ldi	r24, 0x17	; 23
    194e:	9c eb       	ldi	r25, 0xBC	; 188
    1950:	0e 94 89 13 	call	0x2712	; 0x2712 <__mulsi3>
    1954:	a7 01       	movw	r20, r14
    1956:	96 01       	movw	r18, r12
    1958:	26 1b       	sub	r18, r22
    195a:	37 0b       	sbc	r19, r23
    195c:	48 0b       	sbc	r20, r24
    195e:	59 0b       	sbc	r21, r25
    1960:	ca 01       	movw	r24, r20
    1962:	b9 01       	movw	r22, r18
    1964:	20 e8       	ldi	r18, 0x80	; 128
    1966:	3f e1       	ldi	r19, 0x1F	; 31
    1968:	46 e8       	ldi	r20, 0x86	; 134
    196a:	57 e0       	ldi	r21, 0x07	; 7
    196c:	0e 94 c1 13 	call	0x2782	; 0x2782 <__udivmodsi4>
    1970:	22 0f       	add	r18, r18
    1972:	33 1f       	adc	r19, r19
    1974:	22 0f       	add	r18, r18
    1976:	33 1f       	adc	r19, r19
    1978:	a2 0e       	add	r10, r18
    197a:	b3 1e       	adc	r11, r19
    197c:	20 e8       	ldi	r18, 0x80	; 128
    197e:	33 e3       	ldi	r19, 0x33	; 51
    1980:	41 ee       	ldi	r20, 0xE1	; 225
    1982:	51 e0       	ldi	r21, 0x01	; 1
    1984:	0e 94 c1 13 	call	0x2782	; 0x2782 <__udivmodsi4>
    1988:	75 01       	movw	r14, r10
    198a:	e2 0e       	add	r14, r18
    198c:	f3 1e       	adc	r15, r19
    198e:	20 e8       	ldi	r18, 0x80	; 128
    1990:	31 e5       	ldi	r19, 0x51	; 81
    1992:	41 e0       	ldi	r20, 0x01	; 1
    1994:	50 e0       	ldi	r21, 0x00	; 0
    1996:	0e 94 c1 13 	call	0x2782	; 0x2782 <__udivmodsi4>
    199a:	4b 01       	movw	r8, r22
    199c:	5c 01       	movw	r10, r24
    199e:	3a 83       	std	Y+2, r19	; 0x02
    19a0:	29 83       	std	Y+1, r18	; 0x01
    19a2:	be 01       	movw	r22, r28
    19a4:	6f 5f       	subi	r22, 0xFF	; 255
    19a6:	7f 4f       	sbci	r23, 0xFF	; 255
    19a8:	c7 01       	movw	r24, r14
    19aa:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <get_month>
    19ae:	d8 2e       	mov	r13, r24
    19b0:	c5 01       	movw	r24, r10
    19b2:	b4 01       	movw	r22, r8
    19b4:	20 e1       	ldi	r18, 0x10	; 16
    19b6:	3e e0       	ldi	r19, 0x0E	; 14
    19b8:	40 e0       	ldi	r20, 0x00	; 0
    19ba:	50 e0       	ldi	r21, 0x00	; 0
    19bc:	0e 94 c1 13 	call	0x2782	; 0x2782 <__udivmodsi4>
    19c0:	29 01       	movw	r4, r18
    19c2:	3a 01       	movw	r6, r20
    19c4:	4b 01       	movw	r8, r22
    19c6:	5c 01       	movw	r10, r24
    19c8:	6c eb       	ldi	r22, 0xBC	; 188
    19ca:	71 e0       	ldi	r23, 0x01	; 1
    19cc:	89 e4       	ldi	r24, 0x49	; 73
    19ce:	91 e0       	ldi	r25, 0x01	; 1
    19d0:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <str_cpy>
    19d4:	6d 2d       	mov	r22, r13
    19d6:	70 e0       	ldi	r23, 0x00	; 0
    19d8:	6f 5f       	subi	r22, 0xFF	; 255
    19da:	7f 4f       	sbci	r23, 0xFF	; 255
    19dc:	42 e0       	ldi	r20, 0x02	; 2
    19de:	89 e4       	ldi	r24, 0x49	; 73
    19e0:	91 e0       	ldi	r25, 0x01	; 1
    19e2:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <str_writeudec16>
    19e6:	69 81       	ldd	r22, Y+1	; 0x01
    19e8:	7a 81       	ldd	r23, Y+2	; 0x02
    19ea:	6f 5f       	subi	r22, 0xFF	; 255
    19ec:	7f 4f       	sbci	r23, 0xFF	; 255
    19ee:	42 e0       	ldi	r20, 0x02	; 2
    19f0:	8c e4       	ldi	r24, 0x4C	; 76
    19f2:	91 e0       	ldi	r25, 0x01	; 1
    19f4:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <str_writeudec16>
    19f8:	44 e0       	ldi	r20, 0x04	; 4
    19fa:	b7 01       	movw	r22, r14
    19fc:	8f e4       	ldi	r24, 0x4F	; 79
    19fe:	91 e0       	ldi	r25, 0x01	; 1
    1a00:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <str_writeudec16>
    1a04:	42 e0       	ldi	r20, 0x02	; 2
    1a06:	b2 01       	movw	r22, r4
    1a08:	84 e5       	ldi	r24, 0x54	; 84
    1a0a:	91 e0       	ldi	r25, 0x01	; 1
    1a0c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <str_writeudec16>
    1a10:	c5 01       	movw	r24, r10
    1a12:	b4 01       	movw	r22, r8
    1a14:	2c e3       	ldi	r18, 0x3C	; 60
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e0       	ldi	r20, 0x00	; 0
    1a1a:	50 e0       	ldi	r21, 0x00	; 0
    1a1c:	0e 94 c1 13 	call	0x2782	; 0x2782 <__udivmodsi4>
    1a20:	49 01       	movw	r8, r18
    1a22:	5a 01       	movw	r10, r20
    1a24:	6b 01       	movw	r12, r22
    1a26:	7c 01       	movw	r14, r24
    1a28:	42 e0       	ldi	r20, 0x02	; 2
    1a2a:	b4 01       	movw	r22, r8
    1a2c:	87 e5       	ldi	r24, 0x57	; 87
    1a2e:	91 e0       	ldi	r25, 0x01	; 1
    1a30:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <str_writeudec16>
    1a34:	42 e0       	ldi	r20, 0x02	; 2
    1a36:	b6 01       	movw	r22, r12
    1a38:	8a e5       	ldi	r24, 0x5A	; 90
    1a3a:	91 e0       	ldi	r25, 0x01	; 1
    1a3c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <str_writeudec16>
    1a40:	89 e4       	ldi	r24, 0x49	; 73
    1a42:	91 e0       	ldi	r25, 0x01	; 1
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	df 91       	pop	r29
    1a4a:	cf 91       	pop	r28
    1a4c:	ff 90       	pop	r15
    1a4e:	ef 90       	pop	r14
    1a50:	df 90       	pop	r13
    1a52:	cf 90       	pop	r12
    1a54:	bf 90       	pop	r11
    1a56:	af 90       	pop	r10
    1a58:	9f 90       	pop	r9
    1a5a:	8f 90       	pop	r8
    1a5c:	7f 90       	pop	r7
    1a5e:	6f 90       	pop	r6
    1a60:	5f 90       	pop	r5
    1a62:	4f 90       	pop	r4
    1a64:	08 95       	ret

00001a66 <rtc_get_date_string>:
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	0e 94 4c 06 	call	0xc98	; 0xc98 <timer1_get>
    1a6e:	00 91 0e 03 	lds	r16, 0x030E	; 0x80030e <rtc_base>
    1a72:	10 91 0f 03 	lds	r17, 0x030F	; 0x80030f <rtc_base+0x1>
    1a76:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <rtc_base+0x2>
    1a7a:	30 91 11 03 	lds	r19, 0x0311	; 0x800311 <rtc_base+0x3>
    1a7e:	60 0f       	add	r22, r16
    1a80:	71 1f       	adc	r23, r17
    1a82:	82 1f       	adc	r24, r18
    1a84:	93 1f       	adc	r25, r19
    1a86:	1f 91       	pop	r17
    1a88:	0f 91       	pop	r16
    1a8a:	0c 94 30 0c 	jmp	0x1860	; 0x1860 <rtc_num2datestr>

00001a8e <str_cpy>:
    1a8e:	fc 01       	movw	r30, r24
    1a90:	db 01       	movw	r26, r22
    1a92:	8d 91       	ld	r24, X+
    1a94:	bd 01       	movw	r22, r26
    1a96:	88 23       	and	r24, r24
    1a98:	11 f0       	breq	.+4      	; 0x1a9e <str_cpy+0x10>
    1a9a:	81 93       	st	Z+, r24
    1a9c:	f9 cf       	rjmp	.-14     	; 0x1a90 <str_cpy+0x2>
    1a9e:	10 82       	st	Z, r1
    1aa0:	08 95       	ret

00001aa2 <str_writeudec16>:
    1aa2:	9f 92       	push	r9
    1aa4:	af 92       	push	r10
    1aa6:	bf 92       	push	r11
    1aa8:	cf 92       	push	r12
    1aaa:	df 92       	push	r13
    1aac:	ef 92       	push	r14
    1aae:	ff 92       	push	r15
    1ab0:	0f 93       	push	r16
    1ab2:	1f 93       	push	r17
    1ab4:	cf 93       	push	r28
    1ab6:	df 93       	push	r29
    1ab8:	00 d0       	rcall	.+0      	; 0x1aba <str_writeudec16+0x18>
    1aba:	00 d0       	rcall	.+0      	; 0x1abc <str_writeudec16+0x1a>
    1abc:	1f 92       	push	r1
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	6b 01       	movw	r12, r22
    1ac6:	9e 01       	movw	r18, r28
    1ac8:	2f 5f       	subi	r18, 0xFF	; 255
    1aca:	3f 4f       	sbci	r19, 0xFF	; 255
    1acc:	8e 01       	movw	r16, r28
    1ace:	0a 5f       	subi	r16, 0xFA	; 250
    1ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad2:	ee 24       	eor	r14, r14
    1ad4:	e3 94       	inc	r14
    1ad6:	f1 2c       	mov	r15, r1
    1ad8:	9a e0       	ldi	r25, 0x0A	; 10
    1ada:	99 2e       	mov	r9, r25
    1adc:	9e 9c       	mul	r9, r14
    1ade:	50 01       	movw	r10, r0
    1ae0:	9f 9c       	mul	r9, r15
    1ae2:	b0 0c       	add	r11, r0
    1ae4:	11 24       	eor	r1, r1
    1ae6:	c6 01       	movw	r24, r12
    1ae8:	b5 01       	movw	r22, r10
    1aea:	0e 94 99 13 	call	0x2732	; 0x2732 <__udivmodhi4>
    1aee:	b7 01       	movw	r22, r14
    1af0:	0e 94 99 13 	call	0x2732	; 0x2732 <__udivmodhi4>
    1af4:	d9 01       	movw	r26, r18
    1af6:	6d 93       	st	X+, r22
    1af8:	9d 01       	movw	r18, r26
    1afa:	c6 1a       	sub	r12, r22
    1afc:	d1 08       	sbc	r13, r1
    1afe:	67 fd       	sbrc	r22, 7
    1b00:	d3 94       	inc	r13
    1b02:	75 01       	movw	r14, r10
    1b04:	a0 17       	cp	r26, r16
    1b06:	b1 07       	cpc	r27, r17
    1b08:	49 f7       	brne	.-46     	; 0x1adc <str_writeudec16+0x3a>
    1b0a:	60 e0       	ldi	r22, 0x00	; 0
    1b0c:	70 e0       	ldi	r23, 0x00	; 0
    1b0e:	84 e0       	ldi	r24, 0x04	; 4
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	50 e0       	ldi	r21, 0x00	; 0
    1b14:	d8 01       	movw	r26, r16
    1b16:	2e 91       	ld	r18, -X
    1b18:	8d 01       	movw	r16, r26
    1b1a:	21 11       	cpse	r18, r1
    1b1c:	05 c0       	rjmp	.+10     	; 0x1b28 <str_writeudec16+0x86>
    1b1e:	61 15       	cp	r22, r1
    1b20:	71 05       	cpc	r23, r1
    1b22:	11 f4       	brne	.+4      	; 0x1b28 <str_writeudec16+0x86>
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	41 f4       	brne	.+16     	; 0x1b38 <str_writeudec16+0x96>
    1b28:	84 17       	cp	r24, r20
    1b2a:	95 07       	cpc	r25, r21
    1b2c:	2c f4       	brge	.+10     	; 0x1b38 <str_writeudec16+0x96>
    1b2e:	20 5d       	subi	r18, 0xD0	; 208
    1b30:	21 93       	st	Z+, r18
    1b32:	61 e0       	ldi	r22, 0x01	; 1
    1b34:	70 e0       	ldi	r23, 0x00	; 0
    1b36:	04 c0       	rjmp	.+8      	; 0x1b40 <str_writeudec16+0x9e>
    1b38:	84 17       	cp	r24, r20
    1b3a:	95 07       	cpc	r25, r21
    1b3c:	0c f4       	brge	.+2      	; 0x1b40 <str_writeudec16+0x9e>
    1b3e:	31 96       	adiw	r30, 0x01	; 1
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	40 f7       	brcc	.-48     	; 0x1b14 <str_writeudec16+0x72>
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	1f 91       	pop	r17
    1b54:	0f 91       	pop	r16
    1b56:	ff 90       	pop	r15
    1b58:	ef 90       	pop	r14
    1b5a:	df 90       	pop	r13
    1b5c:	cf 90       	pop	r12
    1b5e:	bf 90       	pop	r11
    1b60:	af 90       	pop	r10
    1b62:	9f 90       	pop	r9
    1b64:	08 95       	ret

00001b66 <uart_init>:
    1b66:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <serial_init>
    1b6a:	78 94       	sei
    1b6c:	08 95       	ret

00001b6e <uart_writechar>:
    1b6e:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <serial_writechar>

00001b72 <uart_writestr>:
    1b72:	cf 93       	push	r28
    1b74:	df 93       	push	r29
    1b76:	ec 01       	movw	r28, r24
    1b78:	89 91       	ld	r24, Y+
    1b7a:	88 23       	and	r24, r24
    1b7c:	19 f0       	breq	.+6      	; 0x1b84 <uart_writestr+0x12>
    1b7e:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <serial_writechar>
    1b82:	fa cf       	rjmp	.-12     	; 0x1b78 <uart_writestr+0x6>
    1b84:	df 91       	pop	r29
    1b86:	cf 91       	pop	r28
    1b88:	08 95       	ret

00001b8a <uart_writehex8>:
    1b8a:	cf 93       	push	r28
    1b8c:	c8 2f       	mov	r28, r24
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	24 e0       	ldi	r18, 0x04	; 4
    1b92:	95 95       	asr	r25
    1b94:	87 95       	ror	r24
    1b96:	2a 95       	dec	r18
    1b98:	e1 f7       	brne	.-8      	; 0x1b92 <uart_writehex8+0x8>
    1b9a:	8a 30       	cpi	r24, 0x0A	; 10
    1b9c:	10 f4       	brcc	.+4      	; 0x1ba2 <uart_writehex8+0x18>
    1b9e:	80 5d       	subi	r24, 0xD0	; 208
    1ba0:	01 c0       	rjmp	.+2      	; 0x1ba4 <uart_writehex8+0x1a>
    1ba2:	89 5c       	subi	r24, 0xC9	; 201
    1ba4:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <serial_writechar>
    1ba8:	8c 2f       	mov	r24, r28
    1baa:	8f 70       	andi	r24, 0x0F	; 15
    1bac:	8a 30       	cpi	r24, 0x0A	; 10
    1bae:	10 f0       	brcs	.+4      	; 0x1bb4 <uart_writehex8+0x2a>
    1bb0:	89 5c       	subi	r24, 0xC9	; 201
    1bb2:	01 c0       	rjmp	.+2      	; 0x1bb6 <uart_writehex8+0x2c>
    1bb4:	80 5d       	subi	r24, 0xD0	; 208
    1bb6:	cf 91       	pop	r28
    1bb8:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <serial_writechar>

00001bbc <uart_writehex16>:
    1bbc:	cf 93       	push	r28
    1bbe:	c8 2f       	mov	r28, r24
    1bc0:	89 2f       	mov	r24, r25
    1bc2:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <uart_writehex8>
    1bc6:	8c 2f       	mov	r24, r28
    1bc8:	cf 91       	pop	r28
    1bca:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <uart_writehex8>

00001bce <uart_writedec32>:
    1bce:	2f 92       	push	r2
    1bd0:	3f 92       	push	r3
    1bd2:	4f 92       	push	r4
    1bd4:	5f 92       	push	r5
    1bd6:	6f 92       	push	r6
    1bd8:	7f 92       	push	r7
    1bda:	8f 92       	push	r8
    1bdc:	9f 92       	push	r9
    1bde:	af 92       	push	r10
    1be0:	bf 92       	push	r11
    1be2:	cf 92       	push	r12
    1be4:	df 92       	push	r13
    1be6:	ef 92       	push	r14
    1be8:	ff 92       	push	r15
    1bea:	0f 93       	push	r16
    1bec:	1f 93       	push	r17
    1bee:	cf 93       	push	r28
    1bf0:	df 93       	push	r29
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
    1bf6:	63 97       	sbiw	r28, 0x13	; 19
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	f8 94       	cli
    1bfc:	de bf       	out	0x3e, r29	; 62
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	cd bf       	out	0x3d, r28	; 61
    1c02:	6b 01       	movw	r12, r22
    1c04:	7c 01       	movw	r14, r24
    1c06:	97 ff       	sbrs	r25, 7
    1c08:	0d c0       	rjmp	.+26     	; 0x1c24 <uart_writedec32+0x56>
    1c0a:	f0 94       	com	r15
    1c0c:	e0 94       	com	r14
    1c0e:	d0 94       	com	r13
    1c10:	c0 94       	com	r12
    1c12:	c1 1c       	adc	r12, r1
    1c14:	d1 1c       	adc	r13, r1
    1c16:	e1 1c       	adc	r14, r1
    1c18:	f1 1c       	adc	r15, r1
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	9b 8b       	std	Y+19, r25	; 0x13
    1c20:	8a 8b       	std	Y+18, r24	; 0x12
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <uart_writedec32+0x5a>
    1c24:	1b 8a       	std	Y+19, r1	; 0x13
    1c26:	1a 8a       	std	Y+18, r1	; 0x12
    1c28:	fe 01       	movw	r30, r28
    1c2a:	31 96       	adiw	r30, 0x01	; 1
    1c2c:	5f 01       	movw	r10, r30
    1c2e:	8e 01       	movw	r16, r28
    1c30:	05 5f       	subi	r16, 0xF5	; 245
    1c32:	1f 4f       	sbci	r17, 0xFF	; 255
    1c34:	f9 8b       	std	Y+17, r31	; 0x11
    1c36:	e8 8b       	std	Y+16, r30	; 0x10
    1c38:	66 24       	eor	r6, r6
    1c3a:	63 94       	inc	r6
    1c3c:	71 2c       	mov	r7, r1
    1c3e:	81 2c       	mov	r8, r1
    1c40:	91 2c       	mov	r9, r1
    1c42:	aa e0       	ldi	r26, 0x0A	; 10
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	93 01       	movw	r18, r6
    1c48:	a4 01       	movw	r20, r8
    1c4a:	0e 94 11 14 	call	0x2822	; 0x2822 <__muluhisi3>
    1c4e:	1b 01       	movw	r2, r22
    1c50:	2c 01       	movw	r4, r24
    1c52:	c7 01       	movw	r24, r14
    1c54:	b6 01       	movw	r22, r12
    1c56:	91 01       	movw	r18, r2
    1c58:	a2 01       	movw	r20, r4
    1c5a:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__divmodsi4>
    1c5e:	93 01       	movw	r18, r6
    1c60:	a4 01       	movw	r20, r8
    1c62:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__divmodsi4>
    1c66:	e8 89       	ldd	r30, Y+16	; 0x10
    1c68:	f9 89       	ldd	r31, Y+17	; 0x11
    1c6a:	21 93       	st	Z+, r18
    1c6c:	f9 8b       	std	Y+17, r31	; 0x11
    1c6e:	e8 8b       	std	Y+16, r30	; 0x10
    1c70:	82 2f       	mov	r24, r18
    1c72:	22 0f       	add	r18, r18
    1c74:	99 0b       	sbc	r25, r25
    1c76:	aa 0b       	sbc	r26, r26
    1c78:	bb 0b       	sbc	r27, r27
    1c7a:	c8 1a       	sub	r12, r24
    1c7c:	d9 0a       	sbc	r13, r25
    1c7e:	ea 0a       	sbc	r14, r26
    1c80:	fb 0a       	sbc	r15, r27
    1c82:	31 01       	movw	r6, r2
    1c84:	42 01       	movw	r8, r4
    1c86:	0e 17       	cp	r16, r30
    1c88:	1f 07       	cpc	r17, r31
    1c8a:	d9 f6       	brne	.-74     	; 0x1c42 <uart_writedec32+0x74>
    1c8c:	8a 89       	ldd	r24, Y+18	; 0x12
    1c8e:	9b 89       	ldd	r25, Y+19	; 0x13
    1c90:	89 2b       	or	r24, r25
    1c92:	11 f0       	breq	.+4      	; 0x1c98 <uart_writedec32+0xca>
    1c94:	8d e2       	ldi	r24, 0x2D	; 45
    1c96:	01 c0       	rjmp	.+2      	; 0x1c9a <uart_writedec32+0xcc>
    1c98:	80 e2       	ldi	r24, 0x20	; 32
    1c9a:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <serial_writechar>
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	f8 01       	movw	r30, r16
    1ca4:	82 91       	ld	r24, -Z
    1ca6:	8f 01       	movw	r16, r30
    1ca8:	81 11       	cpse	r24, r1
    1caa:	06 c0       	rjmp	.+12     	; 0x1cb8 <uart_writedec32+0xea>
    1cac:	21 15       	cp	r18, r1
    1cae:	31 05       	cpc	r19, r1
    1cb0:	19 f4       	brne	.+6      	; 0x1cb8 <uart_writedec32+0xea>
    1cb2:	ea 15       	cp	r30, r10
    1cb4:	fb 05       	cpc	r31, r11
    1cb6:	29 f4       	brne	.+10     	; 0x1cc2 <uart_writedec32+0xf4>
    1cb8:	80 5d       	subi	r24, 0xD0	; 208
    1cba:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <serial_writechar>
    1cbe:	21 e0       	ldi	r18, 0x01	; 1
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	0a 15       	cp	r16, r10
    1cc4:	1b 05       	cpc	r17, r11
    1cc6:	69 f7       	brne	.-38     	; 0x1ca2 <uart_writedec32+0xd4>
    1cc8:	63 96       	adiw	r28, 0x13	; 19
    1cca:	0f b6       	in	r0, 0x3f	; 63
    1ccc:	f8 94       	cli
    1cce:	de bf       	out	0x3e, r29	; 62
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	cd bf       	out	0x3d, r28	; 61
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	1f 91       	pop	r17
    1cda:	0f 91       	pop	r16
    1cdc:	ff 90       	pop	r15
    1cde:	ef 90       	pop	r14
    1ce0:	df 90       	pop	r13
    1ce2:	cf 90       	pop	r12
    1ce4:	bf 90       	pop	r11
    1ce6:	af 90       	pop	r10
    1ce8:	9f 90       	pop	r9
    1cea:	8f 90       	pop	r8
    1cec:	7f 90       	pop	r7
    1cee:	6f 90       	pop	r6
    1cf0:	5f 90       	pop	r5
    1cf2:	4f 90       	pop	r4
    1cf4:	3f 90       	pop	r3
    1cf6:	2f 90       	pop	r2
    1cf8:	08 95       	ret

00001cfa <dump_eeprom>:
    1cfa:	2f 92       	push	r2
    1cfc:	3f 92       	push	r3
    1cfe:	4f 92       	push	r4
    1d00:	5f 92       	push	r5
    1d02:	6f 92       	push	r6
    1d04:	7f 92       	push	r7
    1d06:	8f 92       	push	r8
    1d08:	9f 92       	push	r9
    1d0a:	af 92       	push	r10
    1d0c:	bf 92       	push	r11
    1d0e:	cf 92       	push	r12
    1d10:	df 92       	push	r13
    1d12:	ef 92       	push	r14
    1d14:	ff 92       	push	r15
    1d16:	0f 93       	push	r16
    1d18:	1f 93       	push	r17
    1d1a:	cf 93       	push	r28
    1d1c:	df 93       	push	r29
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
    1d22:	64 97       	sbiw	r28, 0x14	; 20
    1d24:	0f b6       	in	r0, 0x3f	; 63
    1d26:	f8 94       	cli
    1d28:	de bf       	out	0x3e, r29	; 62
    1d2a:	0f be       	out	0x3f, r0	; 63
    1d2c:	cd bf       	out	0x3d, r28	; 61
    1d2e:	8c 01       	movw	r16, r24
    1d30:	61 15       	cp	r22, r1
    1d32:	71 05       	cpc	r23, r1
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <dump_eeprom+0x3e>
    1d36:	92 c0       	rjmp	.+292    	; 0x1e5c <dump_eeprom+0x162>
    1d38:	81 2c       	mov	r8, r1
    1d3a:	91 2c       	mov	r9, r1
    1d3c:	54 01       	movw	r10, r8
    1d3e:	cb 01       	movw	r24, r22
    1d40:	a0 e0       	ldi	r26, 0x00	; 0
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	89 8b       	std	Y+17, r24	; 0x11
    1d46:	9a 8b       	std	Y+18, r25	; 0x12
    1d48:	ab 8b       	std	Y+19, r26	; 0x13
    1d4a:	bc 8b       	std	Y+20, r27	; 0x14
    1d4c:	de 01       	movw	r26, r28
    1d4e:	11 96       	adiw	r26, 0x01	; 1
    1d50:	1d 01       	movw	r2, r26
    1d52:	89 89       	ldd	r24, Y+17	; 0x11
    1d54:	9a 89       	ldd	r25, Y+18	; 0x12
    1d56:	ab 89       	ldd	r26, Y+19	; 0x13
    1d58:	bc 89       	ldd	r27, Y+20	; 0x14
    1d5a:	88 16       	cp	r8, r24
    1d5c:	99 06       	cpc	r9, r25
    1d5e:	aa 06       	cpc	r10, r26
    1d60:	bb 06       	cpc	r11, r27
    1d62:	08 f0       	brcs	.+2      	; 0x1d66 <dump_eeprom+0x6c>
    1d64:	7b c0       	rjmp	.+246    	; 0x1e5c <dump_eeprom+0x162>
    1d66:	81 2f       	mov	r24, r17
    1d68:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <uart_writehex8>
    1d6c:	80 2f       	mov	r24, r16
    1d6e:	80 7f       	andi	r24, 0xF0	; 240
    1d70:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <uart_writehex8>
    1d74:	80 e2       	ldi	r24, 0x20	; 32
    1d76:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <uart_writechar>
    1d7a:	61 01       	movw	r12, r2
    1d7c:	78 01       	movw	r14, r16
    1d7e:	41 2c       	mov	r4, r1
    1d80:	51 2c       	mov	r5, r1
    1d82:	32 01       	movw	r6, r4
    1d84:	41 e0       	ldi	r20, 0x01	; 1
    1d86:	b6 01       	movw	r22, r12
    1d88:	c7 01       	movw	r24, r14
    1d8a:	0e 94 a6 03 	call	0x74c	; 0x74c <eeprom_readbuf>
    1d8e:	bf ef       	ldi	r27, 0xFF	; 255
    1d90:	eb 1a       	sub	r14, r27
    1d92:	fb 0a       	sbc	r15, r27
    1d94:	ef ef       	ldi	r30, 0xFF	; 255
    1d96:	4e 1a       	sub	r4, r30
    1d98:	5e 0a       	sbc	r5, r30
    1d9a:	6e 0a       	sbc	r6, r30
    1d9c:	7e 0a       	sbc	r7, r30
    1d9e:	ff ef       	ldi	r31, 0xFF	; 255
    1da0:	8f 1a       	sub	r8, r31
    1da2:	9f 0a       	sbc	r9, r31
    1da4:	af 0a       	sbc	r10, r31
    1da6:	bf 0a       	sbc	r11, r31
    1da8:	89 89       	ldd	r24, Y+17	; 0x11
    1daa:	9a 89       	ldd	r25, Y+18	; 0x12
    1dac:	ab 89       	ldd	r26, Y+19	; 0x13
    1dae:	bc 89       	ldd	r27, Y+20	; 0x14
    1db0:	88 16       	cp	r8, r24
    1db2:	99 06       	cpc	r9, r25
    1db4:	aa 06       	cpc	r10, r26
    1db6:	bb 06       	cpc	r11, r27
    1db8:	50 f0       	brcs	.+20     	; 0x1dce <dump_eeprom+0xd4>
    1dba:	68 01       	movw	r12, r16
    1dbc:	9f e0       	ldi	r25, 0x0F	; 15
    1dbe:	c9 22       	and	r12, r25
    1dc0:	dd 24       	eor	r13, r13
    1dc2:	00 e0       	ldi	r16, 0x00	; 0
    1dc4:	10 e0       	ldi	r17, 0x00	; 0
    1dc6:	32 01       	movw	r6, r4
    1dc8:	6c 0c       	add	r6, r12
    1dca:	7d 1c       	adc	r7, r13
    1dcc:	09 c0       	rjmp	.+18     	; 0x1de0 <dump_eeprom+0xe6>
    1dce:	af ef       	ldi	r26, 0xFF	; 255
    1dd0:	ca 1a       	sub	r12, r26
    1dd2:	da 0a       	sbc	r13, r26
    1dd4:	c7 01       	movw	r24, r14
    1dd6:	8f 70       	andi	r24, 0x0F	; 15
    1dd8:	99 27       	eor	r25, r25
    1dda:	89 2b       	or	r24, r25
    1ddc:	99 f6       	brne	.-90     	; 0x1d84 <dump_eeprom+0x8a>
    1dde:	ed cf       	rjmp	.-38     	; 0x1dba <dump_eeprom+0xc0>
    1de0:	0c 15       	cp	r16, r12
    1de2:	1d 05       	cpc	r17, r13
    1de4:	18 f0       	brcs	.+6      	; 0x1dec <dump_eeprom+0xf2>
    1de6:	06 15       	cp	r16, r6
    1de8:	17 05       	cpc	r17, r7
    1dea:	28 f0       	brcs	.+10     	; 0x1df6 <dump_eeprom+0xfc>
    1dec:	80 ed       	ldi	r24, 0xD0	; 208
    1dee:	91 e0       	ldi	r25, 0x01	; 1
    1df0:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <uart_writestr>
    1df4:	0b c0       	rjmp	.+22     	; 0x1e0c <dump_eeprom+0x112>
    1df6:	f8 01       	movw	r30, r16
    1df8:	ec 19       	sub	r30, r12
    1dfa:	fd 09       	sbc	r31, r13
    1dfc:	e2 0d       	add	r30, r2
    1dfe:	f3 1d       	adc	r31, r3
    1e00:	80 81       	ld	r24, Z
    1e02:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <uart_writehex8>
    1e06:	80 e2       	ldi	r24, 0x20	; 32
    1e08:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <uart_writechar>
    1e0c:	0f 5f       	subi	r16, 0xFF	; 255
    1e0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e10:	00 31       	cpi	r16, 0x10	; 16
    1e12:	11 05       	cpc	r17, r1
    1e14:	29 f7       	brne	.-54     	; 0x1de0 <dump_eeprom+0xe6>
    1e16:	00 e0       	ldi	r16, 0x00	; 0
    1e18:	10 e0       	ldi	r17, 0x00	; 0
    1e1a:	c0 16       	cp	r12, r16
    1e1c:	d1 06       	cpc	r13, r17
    1e1e:	31 f0       	breq	.+12     	; 0x1e2c <dump_eeprom+0x132>
    1e20:	80 e2       	ldi	r24, 0x20	; 32
    1e22:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <uart_writechar>
    1e26:	0f 5f       	subi	r16, 0xFF	; 255
    1e28:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2a:	f7 cf       	rjmp	.-18     	; 0x1e1a <dump_eeprom+0x120>
    1e2c:	81 01       	movw	r16, r2
    1e2e:	c8 01       	movw	r24, r16
    1e30:	82 19       	sub	r24, r2
    1e32:	93 09       	sbc	r25, r3
    1e34:	84 15       	cp	r24, r4
    1e36:	95 05       	cpc	r25, r5
    1e38:	58 f4       	brcc	.+22     	; 0x1e50 <dump_eeprom+0x156>
    1e3a:	f8 01       	movw	r30, r16
    1e3c:	81 91       	ld	r24, Z+
    1e3e:	8f 01       	movw	r16, r30
    1e40:	90 ee       	ldi	r25, 0xE0	; 224
    1e42:	98 0f       	add	r25, r24
    1e44:	90 36       	cpi	r25, 0x60	; 96
    1e46:	08 f0       	brcs	.+2      	; 0x1e4a <dump_eeprom+0x150>
    1e48:	8e e2       	ldi	r24, 0x2E	; 46
    1e4a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <uart_writechar>
    1e4e:	ef cf       	rjmp	.-34     	; 0x1e2e <dump_eeprom+0x134>
    1e50:	84 ed       	ldi	r24, 0xD4	; 212
    1e52:	91 e0       	ldi	r25, 0x01	; 1
    1e54:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <uart_writestr>
    1e58:	87 01       	movw	r16, r14
    1e5a:	7b cf       	rjmp	.-266    	; 0x1d52 <dump_eeprom+0x58>
    1e5c:	64 96       	adiw	r28, 0x14	; 20
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	f8 94       	cli
    1e62:	de bf       	out	0x3e, r29	; 62
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	cd bf       	out	0x3d, r28	; 61
    1e68:	df 91       	pop	r29
    1e6a:	cf 91       	pop	r28
    1e6c:	1f 91       	pop	r17
    1e6e:	0f 91       	pop	r16
    1e70:	ff 90       	pop	r15
    1e72:	ef 90       	pop	r14
    1e74:	df 90       	pop	r13
    1e76:	cf 90       	pop	r12
    1e78:	bf 90       	pop	r11
    1e7a:	af 90       	pop	r10
    1e7c:	9f 90       	pop	r9
    1e7e:	8f 90       	pop	r8
    1e80:	7f 90       	pop	r7
    1e82:	6f 90       	pop	r6
    1e84:	5f 90       	pop	r5
    1e86:	4f 90       	pop	r4
    1e88:	3f 90       	pop	r3
    1e8a:	2f 90       	pop	r2
    1e8c:	08 95       	ret

00001e8e <serial_init>:
    1e8e:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1e92:	87 e6       	ldi	r24, 0x67	; 103
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1e9a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1e9e:	e1 ec       	ldi	r30, 0xC1	; 193
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	88 e1       	ldi	r24, 0x18	; 24
    1ea4:	80 83       	st	Z, r24
    1ea6:	86 e0       	ldi	r24, 0x06	; 6
    1ea8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    1eac:	80 81       	ld	r24, Z
    1eae:	80 6a       	ori	r24, 0xA0	; 160
    1eb0:	80 83       	st	Z, r24
    1eb2:	08 95       	ret

00001eb4 <__vector_18>:
    1eb4:	1f 92       	push	r1
    1eb6:	0f 92       	push	r0
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	0f 92       	push	r0
    1ebc:	11 24       	eor	r1, r1
    1ebe:	2f 93       	push	r18
    1ec0:	8f 93       	push	r24
    1ec2:	9f 93       	push	r25
    1ec4:	ef 93       	push	r30
    1ec6:	ff 93       	push	r31
    1ec8:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <rxtail>
    1ecc:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <rxhead>
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	82 1b       	sub	r24, r18
    1ed4:	91 09       	sbc	r25, r1
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	8f 73       	andi	r24, 0x3F	; 63
    1eda:	99 27       	eor	r25, r25
    1edc:	89 2b       	or	r24, r25
    1ede:	79 f0       	breq	.+30     	; 0x1efe <__vector_18+0x4a>
    1ee0:	e0 91 6c 02 	lds	r30, 0x026C	; 0x80026c <rxhead>
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1eea:	ee 5e       	subi	r30, 0xEE	; 238
    1eec:	fc 4f       	sbci	r31, 0xFC	; 252
    1eee:	80 83       	st	Z, r24
    1ef0:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <rxhead>
    1ef4:	8f 5f       	subi	r24, 0xFF	; 255
    1ef6:	8f 73       	andi	r24, 0x3F	; 63
    1ef8:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <rxhead>
    1efc:	02 c0       	rjmp	.+4      	; 0x1f02 <__vector_18+0x4e>
    1efe:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1f02:	ff 91       	pop	r31
    1f04:	ef 91       	pop	r30
    1f06:	9f 91       	pop	r25
    1f08:	8f 91       	pop	r24
    1f0a:	2f 91       	pop	r18
    1f0c:	0f 90       	pop	r0
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	0f 90       	pop	r0
    1f12:	1f 90       	pop	r1
    1f14:	18 95       	reti

00001f16 <__vector_19>:
    1f16:	1f 92       	push	r1
    1f18:	0f 92       	push	r0
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	0f 92       	push	r0
    1f1e:	11 24       	eor	r1, r1
    1f20:	2f 93       	push	r18
    1f22:	8f 93       	push	r24
    1f24:	9f 93       	push	r25
    1f26:	ef 93       	push	r30
    1f28:	ff 93       	push	r31
    1f2a:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <txhead>
    1f2e:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <txtail>
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	82 1b       	sub	r24, r18
    1f36:	91 09       	sbc	r25, r1
    1f38:	8f 73       	andi	r24, 0x3F	; 63
    1f3a:	99 27       	eor	r25, r25
    1f3c:	89 2b       	or	r24, r25
    1f3e:	79 f0       	breq	.+30     	; 0x1f5e <__vector_19+0x48>
    1f40:	e0 91 69 02 	lds	r30, 0x0269	; 0x800269 <txtail>
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	ee 5a       	subi	r30, 0xAE	; 174
    1f48:	fc 4f       	sbci	r31, 0xFC	; 252
    1f4a:	80 81       	ld	r24, Z
    1f4c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1f50:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <txtail>
    1f54:	8f 5f       	subi	r24, 0xFF	; 255
    1f56:	8f 73       	andi	r24, 0x3F	; 63
    1f58:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <txtail>
    1f5c:	05 c0       	rjmp	.+10     	; 0x1f68 <__vector_19+0x52>
    1f5e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1f62:	8f 7d       	andi	r24, 0xDF	; 223
    1f64:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1f68:	ff 91       	pop	r31
    1f6a:	ef 91       	pop	r30
    1f6c:	9f 91       	pop	r25
    1f6e:	8f 91       	pop	r24
    1f70:	2f 91       	pop	r18
    1f72:	0f 90       	pop	r0
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	0f 90       	pop	r0
    1f78:	1f 90       	pop	r1
    1f7a:	18 95       	reti

00001f7c <serial_rxchars>:
    1f7c:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <rxhead>
    1f80:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <rxtail>
    1f84:	89 1b       	sub	r24, r25
    1f86:	8f 73       	andi	r24, 0x3F	; 63
    1f88:	08 95       	ret

00001f8a <serial_popchar>:
    1f8a:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <rxhead>
    1f8e:	20 91 6b 02 	lds	r18, 0x026B	; 0x80026b <rxtail>
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	82 1b       	sub	r24, r18
    1f96:	91 09       	sbc	r25, r1
    1f98:	8f 73       	andi	r24, 0x3F	; 63
    1f9a:	99 27       	eor	r25, r25
    1f9c:	89 2b       	or	r24, r25
    1f9e:	69 f0       	breq	.+26     	; 0x1fba <serial_popchar+0x30>
    1fa0:	e0 91 6b 02 	lds	r30, 0x026B	; 0x80026b <rxtail>
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	ee 5e       	subi	r30, 0xEE	; 238
    1fa8:	fc 4f       	sbci	r31, 0xFC	; 252
    1faa:	80 81       	ld	r24, Z
    1fac:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <rxtail>
    1fb0:	9f 5f       	subi	r25, 0xFF	; 255
    1fb2:	9f 73       	andi	r25, 0x3F	; 63
    1fb4:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <rxtail>
    1fb8:	08 95       	ret
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	08 95       	ret

00001fbe <serial_writechar>:
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	07 fe       	sbrs	r0, 7
    1fc2:	0e c0       	rjmp	.+28     	; 0x1fe0 <serial_writechar+0x22>
    1fc4:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <txtail>
    1fc8:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <txhead>
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	29 1b       	sub	r18, r25
    1fd0:	31 09       	sbc	r19, r1
    1fd2:	21 50       	subi	r18, 0x01	; 1
    1fd4:	31 09       	sbc	r19, r1
    1fd6:	2f 73       	andi	r18, 0x3F	; 63
    1fd8:	33 27       	eor	r19, r19
    1fda:	23 2b       	or	r18, r19
    1fdc:	99 f3       	breq	.-26     	; 0x1fc4 <serial_writechar+0x6>
    1fde:	0d c0       	rjmp	.+26     	; 0x1ffa <serial_writechar+0x3c>
    1fe0:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <txtail>
    1fe4:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <txhead>
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	29 1b       	sub	r18, r25
    1fec:	31 09       	sbc	r19, r1
    1fee:	21 50       	subi	r18, 0x01	; 1
    1ff0:	31 09       	sbc	r19, r1
    1ff2:	2f 73       	andi	r18, 0x3F	; 63
    1ff4:	33 27       	eor	r19, r19
    1ff6:	23 2b       	or	r18, r19
    1ff8:	61 f0       	breq	.+24     	; 0x2012 <serial_writechar+0x54>
    1ffa:	e0 91 6a 02 	lds	r30, 0x026A	; 0x80026a <txhead>
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	ee 5a       	subi	r30, 0xAE	; 174
    2002:	fc 4f       	sbci	r31, 0xFC	; 252
    2004:	80 83       	st	Z, r24
    2006:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <txhead>
    200a:	8f 5f       	subi	r24, 0xFF	; 255
    200c:	8f 73       	andi	r24, 0x3F	; 63
    200e:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <txhead>
    2012:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2016:	80 62       	ori	r24, 0x20	; 32
    2018:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    201c:	08 95       	ret

0000201e <serial_writestr>:
    201e:	1f 93       	push	r17
    2020:	cf 93       	push	r28
    2022:	df 93       	push	r29
    2024:	ec 01       	movw	r28, r24
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	11 e0       	ldi	r17, 0x01	; 1
    202a:	18 0f       	add	r17, r24
    202c:	fe 01       	movw	r30, r28
    202e:	e8 0f       	add	r30, r24
    2030:	f1 1d       	adc	r31, r1
    2032:	80 81       	ld	r24, Z
    2034:	88 23       	and	r24, r24
    2036:	21 f0       	breq	.+8      	; 0x2040 <serial_writestr+0x22>
    2038:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <serial_writechar>
    203c:	81 2f       	mov	r24, r17
    203e:	f4 cf       	rjmp	.-24     	; 0x2028 <serial_writestr+0xa>
    2040:	df 91       	pop	r29
    2042:	cf 91       	pop	r28
    2044:	1f 91       	pop	r17
    2046:	08 95       	ret

00002048 <serial_writestr_P>:
    2048:	1f 93       	push	r17
    204a:	cf 93       	push	r28
    204c:	df 93       	push	r29
    204e:	ec 01       	movw	r28, r24
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	11 e0       	ldi	r17, 0x01	; 1
    2054:	18 0f       	add	r17, r24
    2056:	fe 01       	movw	r30, r28
    2058:	e8 0f       	add	r30, r24
    205a:	f1 1d       	adc	r31, r1
    205c:	84 91       	lpm	r24, Z
    205e:	88 23       	and	r24, r24
    2060:	21 f0       	breq	.+8      	; 0x206a <serial_writestr_P+0x22>
    2062:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <serial_writechar>
    2066:	81 2f       	mov	r24, r17
    2068:	f4 cf       	rjmp	.-24     	; 0x2052 <serial_writestr_P+0xa>
    206a:	df 91       	pop	r29
    206c:	cf 91       	pop	r28
    206e:	1f 91       	pop	r17
    2070:	08 95       	ret

00002072 <_Z10delay_initv>:
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	00 d0       	rcall	.+0      	; 0x2078 <_Z10delay_initv+0x6>
    2078:	cd b7       	in	r28, 0x3d	; 61
    207a:	de b7       	in	r29, 0x3e	; 62
    207c:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <_ZL11initialized>
    2080:	88 23       	and	r24, r24
    2082:	89 f5       	brne	.+98     	; 0x20e6 <_Z10delay_initv+0x74>
    2084:	8a ef       	ldi	r24, 0xFA	; 250
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	9a 83       	std	Y+2, r25	; 0x02
    208a:	89 83       	std	Y+1, r24	; 0x01
    208c:	87 e4       	ldi	r24, 0x47	; 71
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	29 81       	ldd	r18, Y+1	; 0x01
    2092:	21 50       	subi	r18, 0x01	; 1
    2094:	fc 01       	movw	r30, r24
    2096:	20 83       	st	Z, r18
    2098:	84 e4       	ldi	r24, 0x44	; 68
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	24 e4       	ldi	r18, 0x44	; 68
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	f9 01       	movw	r30, r18
    20a2:	20 81       	ld	r18, Z
    20a4:	22 60       	ori	r18, 0x02	; 2
    20a6:	fc 01       	movw	r30, r24
    20a8:	20 83       	st	Z, r18
    20aa:	85 e4       	ldi	r24, 0x45	; 69
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	25 e4       	ldi	r18, 0x45	; 69
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	f9 01       	movw	r30, r18
    20b4:	20 81       	ld	r18, Z
    20b6:	23 60       	ori	r18, 0x03	; 3
    20b8:	fc 01       	movw	r30, r24
    20ba:	20 83       	st	Z, r18
    20bc:	8f e5       	ldi	r24, 0x5F	; 95
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	2f e5       	ldi	r18, 0x5F	; 95
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	f9 01       	movw	r30, r18
    20c6:	20 81       	ld	r18, Z
    20c8:	20 68       	ori	r18, 0x80	; 128
    20ca:	fc 01       	movw	r30, r24
    20cc:	20 83       	st	Z, r18
    20ce:	8e e6       	ldi	r24, 0x6E	; 110
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	2e e6       	ldi	r18, 0x6E	; 110
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	f9 01       	movw	r30, r18
    20d8:	20 81       	ld	r18, Z
    20da:	22 60       	ori	r18, 0x02	; 2
    20dc:	fc 01       	movw	r30, r24
    20de:	20 83       	st	Z, r18
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <_ZL11initialized>
    20e6:	00 00       	nop
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	08 95       	ret

000020f2 <_Z9delay_getj>:
    20f2:	cf 93       	push	r28
    20f4:	df 93       	push	r29
    20f6:	00 d0       	rcall	.+0      	; 0x20f8 <_Z9delay_getj+0x6>
    20f8:	00 d0       	rcall	.+0      	; 0x20fa <_Z9delay_getj+0x8>
    20fa:	00 d0       	rcall	.+0      	; 0x20fc <_Z9delay_getj+0xa>
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
    2100:	9e 83       	std	Y+6, r25	; 0x06
    2102:	8d 83       	std	Y+5, r24	; 0x05
    2104:	8f e5       	ldi	r24, 0x5F	; 95
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	fc 01       	movw	r30, r24
    210a:	80 81       	ld	r24, Z
    210c:	08 2e       	mov	r0, r24
    210e:	00 0c       	add	r0, r0
    2110:	99 0b       	sbc	r25, r25
    2112:	80 78       	andi	r24, 0x80	; 128
    2114:	99 27       	eor	r25, r25
    2116:	9a 83       	std	Y+2, r25	; 0x02
    2118:	89 83       	std	Y+1, r24	; 0x01
    211a:	8f e5       	ldi	r24, 0x5F	; 95
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	2f e5       	ldi	r18, 0x5F	; 95
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	f9 01       	movw	r30, r18
    2124:	20 81       	ld	r18, Z
    2126:	2f 77       	andi	r18, 0x7F	; 127
    2128:	fc 01       	movw	r30, r24
    212a:	20 83       	st	Z, r18
    212c:	8d 81       	ldd	r24, Y+5	; 0x05
    212e:	9e 81       	ldd	r25, Y+6	; 0x06
    2130:	88 0f       	add	r24, r24
    2132:	99 1f       	adc	r25, r25
    2134:	83 59       	subi	r24, 0x93	; 147
    2136:	9d 4f       	sbci	r25, 0xFD	; 253
    2138:	fc 01       	movw	r30, r24
    213a:	80 81       	ld	r24, Z
    213c:	91 81       	ldd	r25, Z+1	; 0x01
    213e:	9c 83       	std	Y+4, r25	; 0x04
    2140:	8b 83       	std	Y+3, r24	; 0x03
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	9a 81       	ldd	r25, Y+2	; 0x02
    2146:	89 2b       	or	r24, r25
    2148:	49 f0       	breq	.+18     	; 0x215c <_Z9delay_getj+0x6a>
    214a:	8f e5       	ldi	r24, 0x5F	; 95
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	2f e5       	ldi	r18, 0x5F	; 95
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	f9 01       	movw	r30, r18
    2154:	20 81       	ld	r18, Z
    2156:	20 68       	ori	r18, 0x80	; 128
    2158:	fc 01       	movw	r30, r24
    215a:	20 83       	st	Z, r18
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	9c 81       	ldd	r25, Y+4	; 0x04
    2160:	26 96       	adiw	r28, 0x06	; 6
    2162:	0f b6       	in	r0, 0x3f	; 63
    2164:	f8 94       	cli
    2166:	de bf       	out	0x3e, r29	; 62
    2168:	0f be       	out	0x3f, r0	; 63
    216a:	cd bf       	out	0x3d, r28	; 61
    216c:	df 91       	pop	r29
    216e:	cf 91       	pop	r28
    2170:	08 95       	ret

00002172 <_Z9delay_setjj>:
    2172:	cf 93       	push	r28
    2174:	df 93       	push	r29
    2176:	00 d0       	rcall	.+0      	; 0x2178 <_Z9delay_setjj+0x6>
    2178:	00 d0       	rcall	.+0      	; 0x217a <_Z9delay_setjj+0x8>
    217a:	00 d0       	rcall	.+0      	; 0x217c <_Z9delay_setjj+0xa>
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
    2180:	9c 83       	std	Y+4, r25	; 0x04
    2182:	8b 83       	std	Y+3, r24	; 0x03
    2184:	7e 83       	std	Y+6, r23	; 0x06
    2186:	6d 83       	std	Y+5, r22	; 0x05
    2188:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <_ZL11initialized>
    218c:	88 23       	and	r24, r24
    218e:	11 f4       	brne	.+4      	; 0x2194 <_Z9delay_setjj+0x22>
    2190:	0e 94 39 10 	call	0x2072	; 0x2072 <_Z10delay_initv>
    2194:	8f e5       	ldi	r24, 0x5F	; 95
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	fc 01       	movw	r30, r24
    219a:	80 81       	ld	r24, Z
    219c:	08 2e       	mov	r0, r24
    219e:	00 0c       	add	r0, r0
    21a0:	99 0b       	sbc	r25, r25
    21a2:	80 78       	andi	r24, 0x80	; 128
    21a4:	99 27       	eor	r25, r25
    21a6:	9a 83       	std	Y+2, r25	; 0x02
    21a8:	89 83       	std	Y+1, r24	; 0x01
    21aa:	8f e5       	ldi	r24, 0x5F	; 95
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	2f e5       	ldi	r18, 0x5F	; 95
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	f9 01       	movw	r30, r18
    21b4:	20 81       	ld	r18, Z
    21b6:	2f 77       	andi	r18, 0x7F	; 127
    21b8:	fc 01       	movw	r30, r24
    21ba:	20 83       	st	Z, r18
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	9c 81       	ldd	r25, Y+4	; 0x04
    21c0:	88 0f       	add	r24, r24
    21c2:	99 1f       	adc	r25, r25
    21c4:	8f 58       	subi	r24, 0x8F	; 143
    21c6:	9d 4f       	sbci	r25, 0xFD	; 253
    21c8:	2d 81       	ldd	r18, Y+5	; 0x05
    21ca:	3e 81       	ldd	r19, Y+6	; 0x06
    21cc:	fc 01       	movw	r30, r24
    21ce:	31 83       	std	Z+1, r19	; 0x01
    21d0:	20 83       	st	Z, r18
    21d2:	8b 81       	ldd	r24, Y+3	; 0x03
    21d4:	9c 81       	ldd	r25, Y+4	; 0x04
    21d6:	88 0f       	add	r24, r24
    21d8:	99 1f       	adc	r25, r25
    21da:	83 59       	subi	r24, 0x93	; 147
    21dc:	9d 4f       	sbci	r25, 0xFD	; 253
    21de:	fc 01       	movw	r30, r24
    21e0:	11 82       	std	Z+1, r1	; 0x01
    21e2:	10 82       	st	Z, r1
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	9a 81       	ldd	r25, Y+2	; 0x02
    21e8:	89 2b       	or	r24, r25
    21ea:	49 f0       	breq	.+18     	; 0x21fe <_Z9delay_setjj+0x8c>
    21ec:	8f e5       	ldi	r24, 0x5F	; 95
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	2f e5       	ldi	r18, 0x5F	; 95
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	f9 01       	movw	r30, r18
    21f6:	20 81       	ld	r18, Z
    21f8:	20 68       	ori	r18, 0x80	; 128
    21fa:	fc 01       	movw	r30, r24
    21fc:	20 83       	st	Z, r18
    21fe:	00 00       	nop
    2200:	26 96       	adiw	r28, 0x06	; 6
    2202:	0f b6       	in	r0, 0x3f	; 63
    2204:	f8 94       	cli
    2206:	de bf       	out	0x3e, r29	; 62
    2208:	0f be       	out	0x3f, r0	; 63
    220a:	cd bf       	out	0x3d, r28	; 61
    220c:	df 91       	pop	r29
    220e:	cf 91       	pop	r28
    2210:	08 95       	ret

00002212 <_Z12delay_isdonej>:
    2212:	cf 93       	push	r28
    2214:	df 93       	push	r29
    2216:	00 d0       	rcall	.+0      	; 0x2218 <_Z12delay_isdonej+0x6>
    2218:	00 d0       	rcall	.+0      	; 0x221a <_Z12delay_isdonej+0x8>
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	9c 83       	std	Y+4, r25	; 0x04
    2220:	8b 83       	std	Y+3, r24	; 0x03
    2222:	1a 82       	std	Y+2, r1	; 0x02
    2224:	19 82       	std	Y+1, r1	; 0x01
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	9c 81       	ldd	r25, Y+4	; 0x04
    222a:	88 0f       	add	r24, r24
    222c:	99 1f       	adc	r25, r25
    222e:	83 59       	subi	r24, 0x93	; 147
    2230:	9d 4f       	sbci	r25, 0xFD	; 253
    2232:	fc 01       	movw	r30, r24
    2234:	20 81       	ld	r18, Z
    2236:	31 81       	ldd	r19, Z+1	; 0x01
    2238:	8b 81       	ldd	r24, Y+3	; 0x03
    223a:	9c 81       	ldd	r25, Y+4	; 0x04
    223c:	88 0f       	add	r24, r24
    223e:	99 1f       	adc	r25, r25
    2240:	8f 58       	subi	r24, 0x8F	; 143
    2242:	9d 4f       	sbci	r25, 0xFD	; 253
    2244:	fc 01       	movw	r30, r24
    2246:	80 81       	ld	r24, Z
    2248:	91 81       	ldd	r25, Z+1	; 0x01
    224a:	41 e0       	ldi	r20, 0x01	; 1
    224c:	28 17       	cp	r18, r24
    224e:	39 07       	cpc	r19, r25
    2250:	09 f0       	breq	.+2      	; 0x2254 <_Z12delay_isdonej+0x42>
    2252:	40 e0       	ldi	r20, 0x00	; 0
    2254:	44 23       	and	r20, r20
    2256:	21 f0       	breq	.+8      	; 0x2260 <_Z12delay_isdonej+0x4e>
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	9a 83       	std	Y+2, r25	; 0x02
    225e:	89 83       	std	Y+1, r24	; 0x01
    2260:	89 81       	ldd	r24, Y+1	; 0x01
    2262:	9a 81       	ldd	r25, Y+2	; 0x02
    2264:	0f 90       	pop	r0
    2266:	0f 90       	pop	r0
    2268:	0f 90       	pop	r0
    226a:	0f 90       	pop	r0
    226c:	df 91       	pop	r29
    226e:	cf 91       	pop	r28
    2270:	08 95       	ret

00002272 <_Z11__vector_14v>:
    2272:	1f 92       	push	r1
    2274:	0f 92       	push	r0
    2276:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    227a:	0f 92       	push	r0
    227c:	11 24       	eor	r1, r1
    227e:	2f 93       	push	r18
    2280:	3f 93       	push	r19
    2282:	4f 93       	push	r20
    2284:	8f 93       	push	r24
    2286:	9f 93       	push	r25
    2288:	ef 93       	push	r30
    228a:	ff 93       	push	r31
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
    2290:	00 d0       	rcall	.+0      	; 0x2292 <_Z11__vector_14v+0x20>
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	1a 82       	std	Y+2, r1	; 0x02
    2298:	19 82       	std	Y+1, r1	; 0x01
    229a:	22 e0       	ldi	r18, 0x02	; 2
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	9a 81       	ldd	r25, Y+2	; 0x02
    22a2:	82 17       	cp	r24, r18
    22a4:	93 07       	cpc	r25, r19
    22a6:	a0 f5       	brcc	.+104    	; 0x2310 <_Z11__vector_14v+0x9e>
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	9a 81       	ldd	r25, Y+2	; 0x02
    22ac:	88 0f       	add	r24, r24
    22ae:	99 1f       	adc	r25, r25
    22b0:	83 59       	subi	r24, 0x93	; 147
    22b2:	9d 4f       	sbci	r25, 0xFD	; 253
    22b4:	fc 01       	movw	r30, r24
    22b6:	20 81       	ld	r18, Z
    22b8:	31 81       	ldd	r19, Z+1	; 0x01
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	9a 81       	ldd	r25, Y+2	; 0x02
    22be:	88 0f       	add	r24, r24
    22c0:	99 1f       	adc	r25, r25
    22c2:	8f 58       	subi	r24, 0x8F	; 143
    22c4:	9d 4f       	sbci	r25, 0xFD	; 253
    22c6:	fc 01       	movw	r30, r24
    22c8:	80 81       	ld	r24, Z
    22ca:	91 81       	ldd	r25, Z+1	; 0x01
    22cc:	41 e0       	ldi	r20, 0x01	; 1
    22ce:	28 17       	cp	r18, r24
    22d0:	39 07       	cpc	r19, r25
    22d2:	08 f0       	brcs	.+2      	; 0x22d6 <_Z11__vector_14v+0x64>
    22d4:	40 e0       	ldi	r20, 0x00	; 0
    22d6:	44 23       	and	r20, r20
    22d8:	a9 f0       	breq	.+42     	; 0x2304 <_Z11__vector_14v+0x92>
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	9a 81       	ldd	r25, Y+2	; 0x02
    22de:	88 0f       	add	r24, r24
    22e0:	99 1f       	adc	r25, r25
    22e2:	83 59       	subi	r24, 0x93	; 147
    22e4:	9d 4f       	sbci	r25, 0xFD	; 253
    22e6:	fc 01       	movw	r30, r24
    22e8:	80 81       	ld	r24, Z
    22ea:	91 81       	ldd	r25, Z+1	; 0x01
    22ec:	9c 01       	movw	r18, r24
    22ee:	2f 5f       	subi	r18, 0xFF	; 255
    22f0:	3f 4f       	sbci	r19, 0xFF	; 255
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	9a 81       	ldd	r25, Y+2	; 0x02
    22f6:	88 0f       	add	r24, r24
    22f8:	99 1f       	adc	r25, r25
    22fa:	83 59       	subi	r24, 0x93	; 147
    22fc:	9d 4f       	sbci	r25, 0xFD	; 253
    22fe:	fc 01       	movw	r30, r24
    2300:	31 83       	std	Z+1, r19	; 0x01
    2302:	20 83       	st	Z, r18
    2304:	89 81       	ldd	r24, Y+1	; 0x01
    2306:	9a 81       	ldd	r25, Y+2	; 0x02
    2308:	01 96       	adiw	r24, 0x01	; 1
    230a:	9a 83       	std	Y+2, r25	; 0x02
    230c:	89 83       	std	Y+1, r24	; 0x01
    230e:	c5 cf       	rjmp	.-118    	; 0x229a <_Z11__vector_14v+0x28>
    2310:	00 00       	nop
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	df 91       	pop	r29
    2318:	cf 91       	pop	r28
    231a:	ff 91       	pop	r31
    231c:	ef 91       	pop	r30
    231e:	9f 91       	pop	r25
    2320:	8f 91       	pop	r24
    2322:	4f 91       	pop	r20
    2324:	3f 91       	pop	r19
    2326:	2f 91       	pop	r18
    2328:	0f 90       	pop	r0
    232a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    232e:	0f 90       	pop	r0
    2330:	1f 90       	pop	r1
    2332:	18 95       	reti

00002334 <_Z8led_initv>:
    2334:	cf 93       	push	r28
    2336:	df 93       	push	r29
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
    233c:	84 e2       	ldi	r24, 0x24	; 36
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	24 e2       	ldi	r18, 0x24	; 36
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	f9 01       	movw	r30, r18
    2346:	20 81       	ld	r18, Z
    2348:	22 60       	ori	r18, 0x02	; 2
    234a:	fc 01       	movw	r30, r24
    234c:	20 83       	st	Z, r18
    234e:	85 e2       	ldi	r24, 0x25	; 37
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	25 e2       	ldi	r18, 0x25	; 37
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	f9 01       	movw	r30, r18
    2358:	20 81       	ld	r18, Z
    235a:	2d 7f       	andi	r18, 0xFD	; 253
    235c:	fc 01       	movw	r30, r24
    235e:	20 83       	st	Z, r18
    2360:	00 00       	nop
    2362:	df 91       	pop	r29
    2364:	cf 91       	pop	r28
    2366:	08 95       	ret

00002368 <_Z6led_onv>:
    2368:	cf 93       	push	r28
    236a:	df 93       	push	r29
    236c:	cd b7       	in	r28, 0x3d	; 61
    236e:	de b7       	in	r29, 0x3e	; 62
    2370:	85 e2       	ldi	r24, 0x25	; 37
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	25 e2       	ldi	r18, 0x25	; 37
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	f9 01       	movw	r30, r18
    237a:	20 81       	ld	r18, Z
    237c:	22 60       	ori	r18, 0x02	; 2
    237e:	fc 01       	movw	r30, r24
    2380:	20 83       	st	Z, r18
    2382:	00 00       	nop
    2384:	df 91       	pop	r29
    2386:	cf 91       	pop	r28
    2388:	08 95       	ret

0000238a <_Z7led_offv>:
    238a:	cf 93       	push	r28
    238c:	df 93       	push	r29
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	85 e2       	ldi	r24, 0x25	; 37
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	25 e2       	ldi	r18, 0x25	; 37
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	f9 01       	movw	r30, r18
    239c:	20 81       	ld	r18, Z
    239e:	2d 7f       	andi	r18, 0xFD	; 253
    23a0:	fc 01       	movw	r30, r24
    23a2:	20 83       	st	Z, r18
    23a4:	00 00       	nop
    23a6:	df 91       	pop	r29
    23a8:	cf 91       	pop	r28
    23aa:	08 95       	ret

000023ac <_Z9led_is_onv>:
    23ac:	cf 93       	push	r28
    23ae:	df 93       	push	r29
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
    23b4:	85 e2       	ldi	r24, 0x25	; 37
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	fc 01       	movw	r30, r24
    23ba:	80 81       	ld	r24, Z
    23bc:	88 2f       	mov	r24, r24
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	82 70       	andi	r24, 0x02	; 2
    23c2:	99 27       	eor	r25, r25
    23c4:	89 2b       	or	r24, r25
    23c6:	19 f0       	breq	.+6      	; 0x23ce <_Z9led_is_onv+0x22>
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	02 c0       	rjmp	.+4      	; 0x23d2 <_Z9led_is_onv+0x26>
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	df 91       	pop	r29
    23d4:	cf 91       	pop	r28
    23d6:	08 95       	ret

000023d8 <_Z13led_set_blinkPc>:
    23d8:	cf 93       	push	r28
    23da:	df 93       	push	r29
    23dc:	00 d0       	rcall	.+0      	; 0x23de <_Z13led_set_blinkPc+0x6>
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
    23e2:	9a 83       	std	Y+2, r25	; 0x02
    23e4:	89 83       	std	Y+1, r24	; 0x01
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ea:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <Blink_msg+0x1>
    23ee:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <Blink_msg>
    23f2:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <Blink_pos+0x1>
    23f6:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <Blink_pos>
    23fa:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <blink_state+0x1>
    23fe:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <blink_state>
    2402:	60 e0       	ldi	r22, 0x00	; 0
    2404:	70 e0       	ldi	r23, 0x00	; 0
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	0e 94 b9 10 	call	0x2172	; 0x2172 <_Z9delay_setjj>
    240e:	0e 94 c5 11 	call	0x238a	; 0x238a <_Z7led_offv>
    2412:	00 00       	nop
    2414:	0f 90       	pop	r0
    2416:	0f 90       	pop	r0
    2418:	df 91       	pop	r29
    241a:	cf 91       	pop	r28
    241c:	08 95       	ret

0000241e <_Z10led_updatev>:
    241e:	cf 93       	push	r28
    2420:	df 93       	push	r29
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
    2426:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <blink_state>
    242a:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <blink_state+0x1>
    242e:	00 97       	sbiw	r24, 0x00	; 0
    2430:	21 f0       	breq	.+8      	; 0x243a <_Z10led_updatev+0x1c>
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	09 f4       	brne	.+2      	; 0x2438 <_Z10led_updatev+0x1a>
    2436:	55 c0       	rjmp	.+170    	; 0x24e2 <_Z10led_updatev+0xc4>
    2438:	89 c0       	rjmp	.+274    	; 0x254c <_Z10led_updatev+0x12e>
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	0e 94 09 11 	call	0x2212	; 0x2212 <_Z12delay_isdonej>
    2442:	21 e0       	ldi	r18, 0x01	; 1
    2444:	89 2b       	or	r24, r25
    2446:	09 f4       	brne	.+2      	; 0x244a <_Z10led_updatev+0x2c>
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	22 23       	and	r18, r18
    244c:	09 f4       	brne	.+2      	; 0x2450 <_Z10led_updatev+0x32>
    244e:	7b c0       	rjmp	.+246    	; 0x2546 <_Z10led_updatev+0x128>
    2450:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <Blink_msg>
    2454:	30 91 77 02 	lds	r19, 0x0277	; 0x800277 <Blink_msg+0x1>
    2458:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Blink_pos>
    245c:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <Blink_pos+0x1>
    2460:	82 0f       	add	r24, r18
    2462:	93 1f       	adc	r25, r19
    2464:	fc 01       	movw	r30, r24
    2466:	80 81       	ld	r24, Z
    2468:	08 2e       	mov	r0, r24
    246a:	00 0c       	add	r0, r0
    246c:	99 0b       	sbc	r25, r25
    246e:	8d 32       	cpi	r24, 0x2D	; 45
    2470:	91 05       	cpc	r25, r1
    2472:	31 f0       	breq	.+12     	; 0x2480 <_Z10led_updatev+0x62>
    2474:	8e 32       	cpi	r24, 0x2E	; 46
    2476:	91 05       	cpc	r25, r1
    2478:	91 f0       	breq	.+36     	; 0x249e <_Z10led_updatev+0x80>
    247a:	80 97       	sbiw	r24, 0x20	; 32
    247c:	f9 f0       	breq	.+62     	; 0x24bc <_Z10led_updatev+0x9e>
    247e:	27 c0       	rjmp	.+78     	; 0x24ce <_Z10led_updatev+0xb0>
    2480:	0e 94 b4 11 	call	0x2368	; 0x2368 <_Z6led_onv>
    2484:	6e ee       	ldi	r22, 0xEE	; 238
    2486:	72 e0       	ldi	r23, 0x02	; 2
    2488:	80 e0       	ldi	r24, 0x00	; 0
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	0e 94 b9 10 	call	0x2172	; 0x2172 <_Z9delay_setjj>
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <blink_state+0x1>
    2498:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <blink_state>
    249c:	21 c0       	rjmp	.+66     	; 0x24e0 <_Z10led_updatev+0xc2>
    249e:	0e 94 b4 11 	call	0x2368	; 0x2368 <_Z6led_onv>
    24a2:	6a ef       	ldi	r22, 0xFA	; 250
    24a4:	70 e0       	ldi	r23, 0x00	; 0
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	0e 94 b9 10 	call	0x2172	; 0x2172 <_Z9delay_setjj>
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <blink_state+0x1>
    24b6:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <blink_state>
    24ba:	12 c0       	rjmp	.+36     	; 0x24e0 <_Z10led_updatev+0xc2>
    24bc:	0e 94 c5 11 	call	0x238a	; 0x238a <_Z7led_offv>
    24c0:	68 ee       	ldi	r22, 0xE8	; 232
    24c2:	73 e0       	ldi	r23, 0x03	; 3
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	0e 94 b9 10 	call	0x2172	; 0x2172 <_Z9delay_setjj>
    24cc:	09 c0       	rjmp	.+18     	; 0x24e0 <_Z10led_updatev+0xc2>
    24ce:	0e 94 c5 11 	call	0x238a	; 0x238a <_Z7led_offv>
    24d2:	60 e0       	ldi	r22, 0x00	; 0
    24d4:	70 e0       	ldi	r23, 0x00	; 0
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	0e 94 b9 10 	call	0x2172	; 0x2172 <_Z9delay_setjj>
    24de:	00 00       	nop
    24e0:	32 c0       	rjmp	.+100    	; 0x2546 <_Z10led_updatev+0x128>
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	0e 94 09 11 	call	0x2212	; 0x2212 <_Z12delay_isdonej>
    24ea:	21 e0       	ldi	r18, 0x01	; 1
    24ec:	89 2b       	or	r24, r25
    24ee:	09 f4       	brne	.+2      	; 0x24f2 <_Z10led_updatev+0xd4>
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	22 23       	and	r18, r18
    24f4:	51 f1       	breq	.+84     	; 0x254a <_Z10led_updatev+0x12c>
    24f6:	0e 94 c5 11 	call	0x238a	; 0x238a <_Z7led_offv>
    24fa:	64 e6       	ldi	r22, 0x64	; 100
    24fc:	70 e0       	ldi	r23, 0x00	; 0
    24fe:	80 e0       	ldi	r24, 0x00	; 0
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	0e 94 b9 10 	call	0x2172	; 0x2172 <_Z9delay_setjj>
    2506:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Blink_pos>
    250a:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <Blink_pos+0x1>
    250e:	01 96       	adiw	r24, 0x01	; 1
    2510:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <Blink_pos+0x1>
    2514:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <Blink_pos>
    2518:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Blink_msg>
    251c:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <Blink_msg+0x1>
    2520:	0e 94 25 14 	call	0x284a	; 0x284a <strlen>
    2524:	9c 01       	movw	r18, r24
    2526:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Blink_pos>
    252a:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <Blink_pos+0x1>
    252e:	82 17       	cp	r24, r18
    2530:	93 07       	cpc	r25, r19
    2532:	20 f0       	brcs	.+8      	; 0x253c <_Z10led_updatev+0x11e>
    2534:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <Blink_pos+0x1>
    2538:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <Blink_pos>
    253c:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <blink_state+0x1>
    2540:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <blink_state>
    2544:	02 c0       	rjmp	.+4      	; 0x254a <_Z10led_updatev+0x12c>
    2546:	00 00       	nop
    2548:	01 c0       	rjmp	.+2      	; 0x254c <_Z10led_updatev+0x12e>
    254a:	00 00       	nop
    254c:	00 00       	nop
    254e:	df 91       	pop	r29
    2550:	cf 91       	pop	r28
    2552:	08 95       	ret

00002554 <_Z11timer1_initv>:
    2554:	cf 93       	push	r28
    2556:	df 93       	push	r29
    2558:	00 d0       	rcall	.+0      	; 0x255a <_Z11timer1_initv+0x6>
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    255e:	89 e0       	ldi	r24, 0x09	; 9
    2560:	9d e3       	ldi	r25, 0x3D	; 61
    2562:	9a 83       	std	Y+2, r25	; 0x02
    2564:	89 83       	std	Y+1, r24	; 0x01
    2566:	81 e8       	ldi	r24, 0x81	; 129
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	21 e8       	ldi	r18, 0x81	; 129
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	f9 01       	movw	r30, r18
    2570:	20 81       	ld	r18, Z
    2572:	28 60       	ori	r18, 0x08	; 8
    2574:	fc 01       	movw	r30, r24
    2576:	20 83       	st	Z, r18
    2578:	81 e8       	ldi	r24, 0x81	; 129
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	21 e8       	ldi	r18, 0x81	; 129
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	f9 01       	movw	r30, r18
    2582:	20 81       	ld	r18, Z
    2584:	25 60       	ori	r18, 0x05	; 5
    2586:	fc 01       	movw	r30, r24
    2588:	20 83       	st	Z, r18
    258a:	88 e8       	ldi	r24, 0x88	; 136
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	29 81       	ldd	r18, Y+1	; 0x01
    2590:	3a 81       	ldd	r19, Y+2	; 0x02
    2592:	21 50       	subi	r18, 0x01	; 1
    2594:	31 09       	sbc	r19, r1
    2596:	fc 01       	movw	r30, r24
    2598:	31 83       	std	Z+1, r19	; 0x01
    259a:	20 83       	st	Z, r18
    259c:	8f e6       	ldi	r24, 0x6F	; 111
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	2f e6       	ldi	r18, 0x6F	; 111
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	f9 01       	movw	r30, r18
    25a6:	20 81       	ld	r18, Z
    25a8:	22 60       	ori	r18, 0x02	; 2
    25aa:	fc 01       	movw	r30, r24
    25ac:	20 83       	st	Z, r18
    25ae:	8f e5       	ldi	r24, 0x5F	; 95
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	2f e5       	ldi	r18, 0x5F	; 95
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	f9 01       	movw	r30, r18
    25b8:	20 81       	ld	r18, Z
    25ba:	20 68       	ori	r18, 0x80	; 128
    25bc:	fc 01       	movw	r30, r24
    25be:	20 83       	st	Z, r18
    25c0:	00 00       	nop
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	df 91       	pop	r29
    25c8:	cf 91       	pop	r28
    25ca:	08 95       	ret

000025cc <_Z10timer1_getv>:
    25cc:	cf 93       	push	r28
    25ce:	df 93       	push	r29
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <_Z10timer1_getv+0x6>
    25d2:	00 d0       	rcall	.+0      	; 0x25d4 <_Z10timer1_getv+0x8>
    25d4:	00 d0       	rcall	.+0      	; 0x25d6 <_Z10timer1_getv+0xa>
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
    25da:	8f e5       	ldi	r24, 0x5F	; 95
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	fc 01       	movw	r30, r24
    25e0:	80 81       	ld	r24, Z
    25e2:	88 2f       	mov	r24, r24
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	80 78       	andi	r24, 0x80	; 128
    25e8:	99 27       	eor	r25, r25
    25ea:	9a 83       	std	Y+2, r25	; 0x02
    25ec:	89 83       	std	Y+1, r24	; 0x01
    25ee:	8f e5       	ldi	r24, 0x5F	; 95
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	2f e5       	ldi	r18, 0x5F	; 95
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	f9 01       	movw	r30, r18
    25f8:	20 81       	ld	r18, Z
    25fa:	2f 77       	andi	r18, 0x7F	; 127
    25fc:	fc 01       	movw	r30, r24
    25fe:	20 83       	st	Z, r18
    2600:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <_ZL5count>
    2604:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <_ZL5count+0x1>
    2608:	a0 91 7e 02 	lds	r26, 0x027E	; 0x80027e <_ZL5count+0x2>
    260c:	b0 91 7f 02 	lds	r27, 0x027F	; 0x80027f <_ZL5count+0x3>
    2610:	8b 83       	std	Y+3, r24	; 0x03
    2612:	9c 83       	std	Y+4, r25	; 0x04
    2614:	ad 83       	std	Y+5, r26	; 0x05
    2616:	be 83       	std	Y+6, r27	; 0x06
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	9a 81       	ldd	r25, Y+2	; 0x02
    261c:	89 2b       	or	r24, r25
    261e:	49 f0       	breq	.+18     	; 0x2632 <_Z10timer1_getv+0x66>
    2620:	8f e5       	ldi	r24, 0x5F	; 95
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	2f e5       	ldi	r18, 0x5F	; 95
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	f9 01       	movw	r30, r18
    262a:	20 81       	ld	r18, Z
    262c:	20 68       	ori	r18, 0x80	; 128
    262e:	fc 01       	movw	r30, r24
    2630:	20 83       	st	Z, r18
    2632:	8b 81       	ldd	r24, Y+3	; 0x03
    2634:	9c 81       	ldd	r25, Y+4	; 0x04
    2636:	ad 81       	ldd	r26, Y+5	; 0x05
    2638:	be 81       	ldd	r27, Y+6	; 0x06
    263a:	bc 01       	movw	r22, r24
    263c:	cd 01       	movw	r24, r26
    263e:	26 96       	adiw	r28, 0x06	; 6
    2640:	0f b6       	in	r0, 0x3f	; 63
    2642:	f8 94       	cli
    2644:	de bf       	out	0x3e, r29	; 62
    2646:	0f be       	out	0x3f, r0	; 63
    2648:	cd bf       	out	0x3d, r28	; 61
    264a:	df 91       	pop	r29
    264c:	cf 91       	pop	r28
    264e:	08 95       	ret

00002650 <_Z12timer1_clearv>:
    2650:	cf 93       	push	r28
    2652:	df 93       	push	r29
    2654:	00 d0       	rcall	.+0      	; 0x2656 <_Z12timer1_clearv+0x6>
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
    265a:	8f e5       	ldi	r24, 0x5F	; 95
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	fc 01       	movw	r30, r24
    2660:	80 81       	ld	r24, Z
    2662:	88 2f       	mov	r24, r24
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	80 78       	andi	r24, 0x80	; 128
    2668:	99 27       	eor	r25, r25
    266a:	9a 83       	std	Y+2, r25	; 0x02
    266c:	89 83       	std	Y+1, r24	; 0x01
    266e:	8f e5       	ldi	r24, 0x5F	; 95
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	2f e5       	ldi	r18, 0x5F	; 95
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	f9 01       	movw	r30, r18
    2678:	20 81       	ld	r18, Z
    267a:	2f 77       	andi	r18, 0x7F	; 127
    267c:	fc 01       	movw	r30, r24
    267e:	20 83       	st	Z, r18
    2680:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <_ZL5count>
    2684:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <_ZL5count+0x1>
    2688:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <_ZL5count+0x2>
    268c:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <_ZL5count+0x3>
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	9a 81       	ldd	r25, Y+2	; 0x02
    2694:	89 2b       	or	r24, r25
    2696:	49 f0       	breq	.+18     	; 0x26aa <_Z12timer1_clearv+0x5a>
    2698:	8f e5       	ldi	r24, 0x5F	; 95
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	2f e5       	ldi	r18, 0x5F	; 95
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	f9 01       	movw	r30, r18
    26a2:	20 81       	ld	r18, Z
    26a4:	20 68       	ori	r18, 0x80	; 128
    26a6:	fc 01       	movw	r30, r24
    26a8:	20 83       	st	Z, r18
    26aa:	00 00       	nop
    26ac:	0f 90       	pop	r0
    26ae:	0f 90       	pop	r0
    26b0:	df 91       	pop	r29
    26b2:	cf 91       	pop	r28
    26b4:	08 95       	ret

000026b6 <_Z11__vector_11v>:
    26b6:	1f 92       	push	r1
    26b8:	0f 92       	push	r0
    26ba:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    26be:	0f 92       	push	r0
    26c0:	11 24       	eor	r1, r1
    26c2:	8f 93       	push	r24
    26c4:	9f 93       	push	r25
    26c6:	af 93       	push	r26
    26c8:	bf 93       	push	r27
    26ca:	cf 93       	push	r28
    26cc:	df 93       	push	r29
    26ce:	cd b7       	in	r28, 0x3d	; 61
    26d0:	de b7       	in	r29, 0x3e	; 62
    26d2:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <_ZL5count>
    26d6:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <_ZL5count+0x1>
    26da:	a0 91 7e 02 	lds	r26, 0x027E	; 0x80027e <_ZL5count+0x2>
    26de:	b0 91 7f 02 	lds	r27, 0x027F	; 0x80027f <_ZL5count+0x3>
    26e2:	01 96       	adiw	r24, 0x01	; 1
    26e4:	a1 1d       	adc	r26, r1
    26e6:	b1 1d       	adc	r27, r1
    26e8:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <_ZL5count>
    26ec:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <_ZL5count+0x1>
    26f0:	a0 93 7e 02 	sts	0x027E, r26	; 0x80027e <_ZL5count+0x2>
    26f4:	b0 93 7f 02 	sts	0x027F, r27	; 0x80027f <_ZL5count+0x3>
    26f8:	00 00       	nop
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	bf 91       	pop	r27
    2700:	af 91       	pop	r26
    2702:	9f 91       	pop	r25
    2704:	8f 91       	pop	r24
    2706:	0f 90       	pop	r0
    2708:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    270c:	0f 90       	pop	r0
    270e:	1f 90       	pop	r1
    2710:	18 95       	reti

00002712 <__mulsi3>:
    2712:	db 01       	movw	r26, r22
    2714:	8f 93       	push	r24
    2716:	9f 93       	push	r25
    2718:	0e 94 11 14 	call	0x2822	; 0x2822 <__muluhisi3>
    271c:	bf 91       	pop	r27
    271e:	af 91       	pop	r26
    2720:	a2 9f       	mul	r26, r18
    2722:	80 0d       	add	r24, r0
    2724:	91 1d       	adc	r25, r1
    2726:	a3 9f       	mul	r26, r19
    2728:	90 0d       	add	r25, r0
    272a:	b2 9f       	mul	r27, r18
    272c:	90 0d       	add	r25, r0
    272e:	11 24       	eor	r1, r1
    2730:	08 95       	ret

00002732 <__udivmodhi4>:
    2732:	aa 1b       	sub	r26, r26
    2734:	bb 1b       	sub	r27, r27
    2736:	51 e1       	ldi	r21, 0x11	; 17
    2738:	07 c0       	rjmp	.+14     	; 0x2748 <__udivmodhi4_ep>

0000273a <__udivmodhi4_loop>:
    273a:	aa 1f       	adc	r26, r26
    273c:	bb 1f       	adc	r27, r27
    273e:	a6 17       	cp	r26, r22
    2740:	b7 07       	cpc	r27, r23
    2742:	10 f0       	brcs	.+4      	; 0x2748 <__udivmodhi4_ep>
    2744:	a6 1b       	sub	r26, r22
    2746:	b7 0b       	sbc	r27, r23

00002748 <__udivmodhi4_ep>:
    2748:	88 1f       	adc	r24, r24
    274a:	99 1f       	adc	r25, r25
    274c:	5a 95       	dec	r21
    274e:	a9 f7       	brne	.-22     	; 0x273a <__udivmodhi4_loop>
    2750:	80 95       	com	r24
    2752:	90 95       	com	r25
    2754:	bc 01       	movw	r22, r24
    2756:	cd 01       	movw	r24, r26
    2758:	08 95       	ret

0000275a <__divmodhi4>:
    275a:	97 fb       	bst	r25, 7
    275c:	07 2e       	mov	r0, r23
    275e:	16 f4       	brtc	.+4      	; 0x2764 <__divmodhi4+0xa>
    2760:	00 94       	com	r0
    2762:	07 d0       	rcall	.+14     	; 0x2772 <__divmodhi4_neg1>
    2764:	77 fd       	sbrc	r23, 7
    2766:	09 d0       	rcall	.+18     	; 0x277a <__divmodhi4_neg2>
    2768:	0e 94 99 13 	call	0x2732	; 0x2732 <__udivmodhi4>
    276c:	07 fc       	sbrc	r0, 7
    276e:	05 d0       	rcall	.+10     	; 0x277a <__divmodhi4_neg2>
    2770:	3e f4       	brtc	.+14     	; 0x2780 <__divmodhi4_exit>

00002772 <__divmodhi4_neg1>:
    2772:	90 95       	com	r25
    2774:	81 95       	neg	r24
    2776:	9f 4f       	sbci	r25, 0xFF	; 255
    2778:	08 95       	ret

0000277a <__divmodhi4_neg2>:
    277a:	70 95       	com	r23
    277c:	61 95       	neg	r22
    277e:	7f 4f       	sbci	r23, 0xFF	; 255

00002780 <__divmodhi4_exit>:
    2780:	08 95       	ret

00002782 <__udivmodsi4>:
    2782:	a1 e2       	ldi	r26, 0x21	; 33
    2784:	1a 2e       	mov	r1, r26
    2786:	aa 1b       	sub	r26, r26
    2788:	bb 1b       	sub	r27, r27
    278a:	fd 01       	movw	r30, r26
    278c:	0d c0       	rjmp	.+26     	; 0x27a8 <__udivmodsi4_ep>

0000278e <__udivmodsi4_loop>:
    278e:	aa 1f       	adc	r26, r26
    2790:	bb 1f       	adc	r27, r27
    2792:	ee 1f       	adc	r30, r30
    2794:	ff 1f       	adc	r31, r31
    2796:	a2 17       	cp	r26, r18
    2798:	b3 07       	cpc	r27, r19
    279a:	e4 07       	cpc	r30, r20
    279c:	f5 07       	cpc	r31, r21
    279e:	20 f0       	brcs	.+8      	; 0x27a8 <__udivmodsi4_ep>
    27a0:	a2 1b       	sub	r26, r18
    27a2:	b3 0b       	sbc	r27, r19
    27a4:	e4 0b       	sbc	r30, r20
    27a6:	f5 0b       	sbc	r31, r21

000027a8 <__udivmodsi4_ep>:
    27a8:	66 1f       	adc	r22, r22
    27aa:	77 1f       	adc	r23, r23
    27ac:	88 1f       	adc	r24, r24
    27ae:	99 1f       	adc	r25, r25
    27b0:	1a 94       	dec	r1
    27b2:	69 f7       	brne	.-38     	; 0x278e <__udivmodsi4_loop>
    27b4:	60 95       	com	r22
    27b6:	70 95       	com	r23
    27b8:	80 95       	com	r24
    27ba:	90 95       	com	r25
    27bc:	9b 01       	movw	r18, r22
    27be:	ac 01       	movw	r20, r24
    27c0:	bd 01       	movw	r22, r26
    27c2:	cf 01       	movw	r24, r30
    27c4:	08 95       	ret

000027c6 <__divmodsi4>:
    27c6:	05 2e       	mov	r0, r21
    27c8:	97 fb       	bst	r25, 7
    27ca:	1e f4       	brtc	.+6      	; 0x27d2 <__divmodsi4+0xc>
    27cc:	00 94       	com	r0
    27ce:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <__negsi2>
    27d2:	57 fd       	sbrc	r21, 7
    27d4:	07 d0       	rcall	.+14     	; 0x27e4 <__divmodsi4_neg2>
    27d6:	0e 94 c1 13 	call	0x2782	; 0x2782 <__udivmodsi4>
    27da:	07 fc       	sbrc	r0, 7
    27dc:	03 d0       	rcall	.+6      	; 0x27e4 <__divmodsi4_neg2>
    27de:	4e f4       	brtc	.+18     	; 0x27f2 <__divmodsi4_exit>
    27e0:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <__negsi2>

000027e4 <__divmodsi4_neg2>:
    27e4:	50 95       	com	r21
    27e6:	40 95       	com	r20
    27e8:	30 95       	com	r19
    27ea:	21 95       	neg	r18
    27ec:	3f 4f       	sbci	r19, 0xFF	; 255
    27ee:	4f 4f       	sbci	r20, 0xFF	; 255
    27f0:	5f 4f       	sbci	r21, 0xFF	; 255

000027f2 <__divmodsi4_exit>:
    27f2:	08 95       	ret

000027f4 <__negsi2>:
    27f4:	90 95       	com	r25
    27f6:	80 95       	com	r24
    27f8:	70 95       	com	r23
    27fa:	61 95       	neg	r22
    27fc:	7f 4f       	sbci	r23, 0xFF	; 255
    27fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2800:	9f 4f       	sbci	r25, 0xFF	; 255
    2802:	08 95       	ret

00002804 <__umulhisi3>:
    2804:	a2 9f       	mul	r26, r18
    2806:	b0 01       	movw	r22, r0
    2808:	b3 9f       	mul	r27, r19
    280a:	c0 01       	movw	r24, r0
    280c:	a3 9f       	mul	r26, r19
    280e:	70 0d       	add	r23, r0
    2810:	81 1d       	adc	r24, r1
    2812:	11 24       	eor	r1, r1
    2814:	91 1d       	adc	r25, r1
    2816:	b2 9f       	mul	r27, r18
    2818:	70 0d       	add	r23, r0
    281a:	81 1d       	adc	r24, r1
    281c:	11 24       	eor	r1, r1
    281e:	91 1d       	adc	r25, r1
    2820:	08 95       	ret

00002822 <__muluhisi3>:
    2822:	0e 94 02 14 	call	0x2804	; 0x2804 <__umulhisi3>
    2826:	a5 9f       	mul	r26, r21
    2828:	90 0d       	add	r25, r0
    282a:	b4 9f       	mul	r27, r20
    282c:	90 0d       	add	r25, r0
    282e:	a4 9f       	mul	r26, r20
    2830:	80 0d       	add	r24, r0
    2832:	91 1d       	adc	r25, r1
    2834:	11 24       	eor	r1, r1
    2836:	08 95       	ret

00002838 <memcpy>:
    2838:	fb 01       	movw	r30, r22
    283a:	dc 01       	movw	r26, r24
    283c:	02 c0       	rjmp	.+4      	; 0x2842 <memcpy+0xa>
    283e:	01 90       	ld	r0, Z+
    2840:	0d 92       	st	X+, r0
    2842:	41 50       	subi	r20, 0x01	; 1
    2844:	50 40       	sbci	r21, 0x00	; 0
    2846:	d8 f7       	brcc	.-10     	; 0x283e <memcpy+0x6>
    2848:	08 95       	ret

0000284a <strlen>:
    284a:	fc 01       	movw	r30, r24
    284c:	01 90       	ld	r0, Z+
    284e:	00 20       	and	r0, r0
    2850:	e9 f7       	brne	.-6      	; 0x284c <strlen+0x2>
    2852:	80 95       	com	r24
    2854:	90 95       	com	r25
    2856:	8e 0f       	add	r24, r30
    2858:	9f 1f       	adc	r25, r31
    285a:	08 95       	ret

0000285c <_exit>:
    285c:	f8 94       	cli

0000285e <__stop_program>:
    285e:	ff cf       	rjmp	.-2      	; 0x285e <__stop_program>
