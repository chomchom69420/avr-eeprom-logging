
bin/Debug/proj2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800100  00002848  000028dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002820  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .siminfo      00000028  00002820  00002820  000028b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000001ba  008001da  008001da  000029b6  2**0
                  ALLOC
  4 .stab         00003834  00000000  00000000  000029b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000281e  00000000  00000000  000061ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00008a0a  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008a1c  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  00008a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  00009050  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  000095f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  0000960c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 ab 02 	jmp	0x556	; 0x556 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 3a 0f 	jmp	0x1e74	; 0x1e74 <__vector_18>
      4c:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <__vector_22>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e4       	ldi	r30, 0x48	; 72
      7c:	f8 e2       	ldi	r31, 0x28	; 40
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 3d       	cpi	r26, 0xDA	; 218
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	aa ed       	ldi	r26, 0xDA	; 218
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a4 39       	cpi	r26, 0x94	; 148
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 8e 05 	call	0xb1c	; 0xb1c <main>
      9e:	0c 94 0e 14 	jmp	0x281c	; 0x281c <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <config_init>:
    .use_static_ip=0,
    .static_ip={192, 168, 1, 100},
    .checksum=0};

void config_init()
{
      a6:	ef 92       	push	r14
      a8:	ff 92       	push	r15
      aa:	0f 93       	push	r16
      ac:	1f 93       	push	r17
      ae:	cf 93       	push	r28
      b0:	df 93       	push	r29
      b2:	cd b7       	in	r28, 0x3d	; 61
      b4:	de b7       	in	r29, 0x3e	; 62
      b6:	28 97       	sbiw	r28, 0x08	; 8
      b8:	0f b6       	in	r0, 0x3f	; 63
      ba:	f8 94       	cli
      bc:	de bf       	out	0x3e, r29	; 62
      be:	0f be       	out	0x3f, r0	; 63
      c0:	cd bf       	out	0x3d, r28	; 61

    }

    //uart_writedec32(write_busy);
    //get_writebusy();
}
      c2:	0d b7       	in	r16, 0x3d	; 61
      c4:	1e b7       	in	r17, 0x3e	; 62
    .static_ip={192, 168, 1, 100},
    .checksum=0};

void config_init()
{
    while(eeprom_isbusy());  //waits for EEPROM to get out of busy state
      c6:	00 00       	nop
      c8:	0e 94 08 03 	call	0x610	; 0x610 <eeprom_isbusy>
      cc:	89 2b       	or	r24, r25
      ce:	e1 f7       	brne	.-8      	; 0xc8 <config_init+0x22>

    //initialize config
    unsigned int base_addr=0x040;
      d0:	80 e4       	ldi	r24, 0x40	; 64
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	9a 83       	std	Y+2, r25	; 0x02
      d6:	89 83       	std	Y+1, r24	; 0x01
    int size = sizeof(config_struct);
      d8:	82 e1       	ldi	r24, 0x12	; 18
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	9c 83       	std	Y+4, r25	; 0x04
      de:	8b 83       	std	Y+3, r24	; 0x03
    unsigned char buf[size];
      e0:	8b 81       	ldd	r24, Y+3	; 0x03
      e2:	9c 81       	ldd	r25, Y+4	; 0x04
      e4:	2d b7       	in	r18, 0x3d	; 61
      e6:	3e b7       	in	r19, 0x3e	; 62
      e8:	79 01       	movw	r14, r18
      ea:	9c 01       	movw	r18, r24
      ec:	21 50       	subi	r18, 0x01	; 1
      ee:	31 09       	sbc	r19, r1
      f0:	3e 83       	std	Y+6, r19	; 0x06
      f2:	2d 83       	std	Y+5, r18	; 0x05
      f4:	2d b7       	in	r18, 0x3d	; 61
      f6:	3e b7       	in	r19, 0x3e	; 62
      f8:	28 1b       	sub	r18, r24
      fa:	39 0b       	sbc	r19, r25
      fc:	0f b6       	in	r0, 0x3f	; 63
      fe:	f8 94       	cli
     100:	3e bf       	out	0x3e, r19	; 62
     102:	0f be       	out	0x3f, r0	; 63
     104:	2d bf       	out	0x3d, r18	; 61
     106:	8d b7       	in	r24, 0x3d	; 61
     108:	9e b7       	in	r25, 0x3e	; 62
     10a:	01 96       	adiw	r24, 0x01	; 1
     10c:	98 87       	std	Y+8, r25	; 0x08
     10e:	8f 83       	std	Y+7, r24	; 0x07
    eeprom_readbuf(base_addr, buf, size);
     110:	4b 81       	ldd	r20, Y+3	; 0x03
     112:	2f 81       	ldd	r18, Y+7	; 0x07
     114:	38 85       	ldd	r19, Y+8	; 0x08
     116:	89 81       	ldd	r24, Y+1	; 0x01
     118:	9a 81       	ldd	r25, Y+2	; 0x02
     11a:	b9 01       	movw	r22, r18
     11c:	0e 94 85 03 	call	0x70a	; 0x70a <eeprom_readbuf>

    memcpy((unsigned char*)&config, (unsigned char*)buf, size);
     120:	2b 81       	ldd	r18, Y+3	; 0x03
     122:	3c 81       	ldd	r19, Y+4	; 0x04
     124:	8f 81       	ldd	r24, Y+7	; 0x07
     126:	98 85       	ldd	r25, Y+8	; 0x08
     128:	a9 01       	movw	r20, r18
     12a:	bc 01       	movw	r22, r24
     12c:	83 e8       	ldi	r24, 0x83	; 131
     12e:	92 e0       	ldi	r25, 0x02	; 2
     130:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <memcpy>

    if(!config_is_data_valid())
     134:	0e 94 cc 00 	call	0x198	; 0x198 <config_is_data_valid>
     138:	89 2b       	or	r24, r25
     13a:	b1 f4       	brne	.+44     	; 0x168 <config_init+0xc2>
    {

        //Write default values to EEPROM location 0x040
        config_write_defaults();
     13c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <config_write_defaults>

        //Initialize config by reading location 0x040
        eeprom_readbuf(base_addr, (unsigned char*)buf, size);
     140:	4b 81       	ldd	r20, Y+3	; 0x03
     142:	2f 81       	ldd	r18, Y+7	; 0x07
     144:	38 85       	ldd	r19, Y+8	; 0x08
     146:	89 81       	ldd	r24, Y+1	; 0x01
     148:	9a 81       	ldd	r25, Y+2	; 0x02
     14a:	b9 01       	movw	r22, r18
     14c:	0e 94 85 03 	call	0x70a	; 0x70a <eeprom_readbuf>
        memcpy((unsigned char*)&config, (unsigned char*)buf, size);
     150:	2b 81       	ldd	r18, Y+3	; 0x03
     152:	3c 81       	ldd	r19, Y+4	; 0x04
     154:	8f 81       	ldd	r24, Y+7	; 0x07
     156:	98 85       	ldd	r25, Y+8	; 0x08
     158:	a9 01       	movw	r20, r18
     15a:	bc 01       	movw	r22, r24
     15c:	83 e8       	ldi	r24, 0x83	; 131
     15e:	92 e0       	ldi	r25, 0x02	; 2
     160:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <memcpy>

        //Clearing modified flag
        modified=0;
     164:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <modified>
     168:	0f b6       	in	r0, 0x3f	; 63
     16a:	f8 94       	cli
     16c:	fe be       	out	0x3e, r15	; 62
     16e:	0f be       	out	0x3f, r0	; 63
     170:	ed be       	out	0x3d, r14	; 61

    }

    //uart_writedec32(write_busy);
    //get_writebusy();
}
     172:	00 00       	nop
     174:	0f b6       	in	r0, 0x3f	; 63
     176:	f8 94       	cli
     178:	1e bf       	out	0x3e, r17	; 62
     17a:	0f be       	out	0x3f, r0	; 63
     17c:	0d bf       	out	0x3d, r16	; 61
     17e:	28 96       	adiw	r28, 0x08	; 8
     180:	0f b6       	in	r0, 0x3f	; 63
     182:	f8 94       	cli
     184:	de bf       	out	0x3e, r29	; 62
     186:	0f be       	out	0x3f, r0	; 63
     188:	cd bf       	out	0x3d, r28	; 61
     18a:	df 91       	pop	r29
     18c:	cf 91       	pop	r28
     18e:	1f 91       	pop	r17
     190:	0f 91       	pop	r16
     192:	ff 90       	pop	r15
     194:	ef 90       	pop	r14
     196:	08 95       	ret

00000198 <config_is_data_valid>:

int config_is_data_valid()
{
     198:	cf 93       	push	r28
     19a:	df 93       	push	r29
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
    return (config.token=="ASU") && is_checksum_valid((unsigned char*)&config, sizeof(config_struct));
     1a0:	83 e8       	ldi	r24, 0x83	; 131
     1a2:	92 e0       	ldi	r25, 0x02	; 2
     1a4:	8d 55       	subi	r24, 0x5D	; 93
     1a6:	91 40       	sbci	r25, 0x01	; 1
     1a8:	59 f4       	brne	.+22     	; 0x1c0 <config_is_data_valid+0x28>
     1aa:	62 e1       	ldi	r22, 0x12	; 18
     1ac:	70 e0       	ldi	r23, 0x00	; 0
     1ae:	83 e8       	ldi	r24, 0x83	; 131
     1b0:	92 e0       	ldi	r25, 0x02	; 2
     1b2:	0e 94 3a 07 	call	0xe74	; 0xe74 <is_checksum_valid>
     1b6:	89 2b       	or	r24, r25
     1b8:	19 f0       	breq	.+6      	; 0x1c0 <config_is_data_valid+0x28>
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <config_is_data_valid+0x2c>
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	90 e0       	ldi	r25, 0x00	; 0
}
     1c4:	df 91       	pop	r29
     1c6:	cf 91       	pop	r28
     1c8:	08 95       	ret

000001ca <config_set_modified>:

void config_set_modified()
{
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
    modified=1;
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <modified>
}
     1d8:	00 00       	nop
     1da:	df 91       	pop	r29
     1dc:	cf 91       	pop	r28
     1de:	08 95       	ret

000001e0 <config_update>:

void config_update()
{
     1e0:	ef 92       	push	r14
     1e2:	ff 92       	push	r15
     1e4:	0f 93       	push	r16
     1e6:	1f 93       	push	r17
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
     1f0:	28 97       	sbiw	r28, 0x08	; 8
     1f2:	0f b6       	in	r0, 0x3f	; 63
     1f4:	f8 94       	cli
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	0f be       	out	0x3f, r0	; 63
     1fa:	cd bf       	out	0x3d, r28	; 61
        //Clearing modified flag
        modified=0;

    }

}
     1fc:	0d b7       	in	r16, 0x3d	; 61
     1fe:	1e b7       	in	r17, 0x3e	; 62
    modified=1;
}

void config_update()
{
    if(!eeprom_isbusy() && modified)
     200:	0e 94 08 03 	call	0x610	; 0x610 <eeprom_isbusy>
     204:	89 2b       	or	r24, r25
     206:	c9 f5       	brne	.+114    	; 0x27a <config_update+0x9a>
     208:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <modified>
     20c:	88 23       	and	r24, r24
     20e:	a9 f1       	breq	.+106    	; 0x27a <config_update+0x9a>
    {
     210:	8d b7       	in	r24, 0x3d	; 61
     212:	9e b7       	in	r25, 0x3e	; 62
     214:	7c 01       	movw	r14, r24
        //Update the checksum
        update_checksum((unsigned char*)&config, sizeof(config));
     216:	62 e1       	ldi	r22, 0x12	; 18
     218:	70 e0       	ldi	r23, 0x00	; 0
     21a:	83 e8       	ldi	r24, 0x83	; 131
     21c:	92 e0       	ldi	r25, 0x02	; 2
     21e:	0e 94 10 07 	call	0xe20	; 0xe20 <update_checksum>

        //Write config to eeprom
        unsigned int base_addr = 0x040;
     222:	80 e4       	ldi	r24, 0x40	; 64
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	9a 83       	std	Y+2, r25	; 0x02
     228:	89 83       	std	Y+1, r24	; 0x01
        int size = sizeof(config_struct);
     22a:	82 e1       	ldi	r24, 0x12	; 18
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	9c 83       	std	Y+4, r25	; 0x04
     230:	8b 83       	std	Y+3, r24	; 0x03
        unsigned char buf[size];
     232:	8b 81       	ldd	r24, Y+3	; 0x03
     234:	9c 81       	ldd	r25, Y+4	; 0x04
     236:	9c 01       	movw	r18, r24
     238:	21 50       	subi	r18, 0x01	; 1
     23a:	31 09       	sbc	r19, r1
     23c:	3e 83       	std	Y+6, r19	; 0x06
     23e:	2d 83       	std	Y+5, r18	; 0x05
     240:	2d b7       	in	r18, 0x3d	; 61
     242:	3e b7       	in	r19, 0x3e	; 62
     244:	28 1b       	sub	r18, r24
     246:	39 0b       	sbc	r19, r25
     248:	0f b6       	in	r0, 0x3f	; 63
     24a:	f8 94       	cli
     24c:	3e bf       	out	0x3e, r19	; 62
     24e:	0f be       	out	0x3f, r0	; 63
     250:	2d bf       	out	0x3d, r18	; 61
     252:	8d b7       	in	r24, 0x3d	; 61
     254:	9e b7       	in	r25, 0x3e	; 62
     256:	01 96       	adiw	r24, 0x01	; 1
     258:	98 87       	std	Y+8, r25	; 0x08
     25a:	8f 83       	std	Y+7, r24	; 0x07
        eeprom_writebuf(base_addr, (unsigned char*)buf, size);
     25c:	4b 81       	ldd	r20, Y+3	; 0x03
     25e:	2f 81       	ldd	r18, Y+7	; 0x07
     260:	38 85       	ldd	r19, Y+8	; 0x08
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	9a 81       	ldd	r25, Y+2	; 0x02
     266:	b9 01       	movw	r22, r18
     268:	0e 94 17 03 	call	0x62e	; 0x62e <eeprom_writebuf>

        //Clearing modified flag
        modified=0;
     26c:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <modified>
     270:	0f b6       	in	r0, 0x3f	; 63
     272:	f8 94       	cli
     274:	fe be       	out	0x3e, r15	; 62
     276:	0f be       	out	0x3f, r0	; 63
     278:	ed be       	out	0x3d, r14	; 61

    }

}
     27a:	00 00       	nop
     27c:	0f b6       	in	r0, 0x3f	; 63
     27e:	f8 94       	cli
     280:	1e bf       	out	0x3e, r17	; 62
     282:	0f be       	out	0x3f, r0	; 63
     284:	0d bf       	out	0x3d, r16	; 61
     286:	28 96       	adiw	r28, 0x08	; 8
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	f8 94       	cli
     28c:	de bf       	out	0x3e, r29	; 62
     28e:	0f be       	out	0x3f, r0	; 63
     290:	cd bf       	out	0x3d, r28	; 61
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	1f 91       	pop	r17
     298:	0f 91       	pop	r16
     29a:	ff 90       	pop	r15
     29c:	ef 90       	pop	r14
     29e:	08 95       	ret

000002a0 <config_write_defaults>:

void config_write_defaults()
{
     2a0:	ef 92       	push	r14
     2a2:	ff 92       	push	r15
     2a4:	0f 93       	push	r16
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
     2b0:	28 97       	sbiw	r28, 0x08	; 8
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	f8 94       	cli
     2b6:	de bf       	out	0x3e, r29	; 62
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	cd bf       	out	0x3d, r28	; 61
    int size = sizeof(config_struct);
    unsigned char buf[size];
    memcpy((unsigned char*)buf, (unsigned char*)&config_defaults, size);

    eeprom_writebuf(base_addr, (unsigned char*)buf, size);
}
     2bc:	0d b7       	in	r16, 0x3d	; 61
     2be:	1e b7       	in	r17, 0x3e	; 62
    }

}

void config_write_defaults()
{
     2c0:	8d b7       	in	r24, 0x3d	; 61
     2c2:	9e b7       	in	r25, 0x3e	; 62
     2c4:	7c 01       	movw	r14, r24
    update_checksum((unsigned char*)&config, sizeof(config));
     2c6:	62 e1       	ldi	r22, 0x12	; 18
     2c8:	70 e0       	ldi	r23, 0x00	; 0
     2ca:	83 e8       	ldi	r24, 0x83	; 131
     2cc:	92 e0       	ldi	r25, 0x02	; 2
     2ce:	0e 94 10 07 	call	0xe20	; 0xe20 <update_checksum>

    //Writing defaults to eeprom
    unsigned int base_addr = 0x040;
     2d2:	80 e4       	ldi	r24, 0x40	; 64
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	9a 83       	std	Y+2, r25	; 0x02
     2d8:	89 83       	std	Y+1, r24	; 0x01
    int size = sizeof(config_struct);
     2da:	82 e1       	ldi	r24, 0x12	; 18
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	9c 83       	std	Y+4, r25	; 0x04
     2e0:	8b 83       	std	Y+3, r24	; 0x03
    unsigned char buf[size];
     2e2:	8b 81       	ldd	r24, Y+3	; 0x03
     2e4:	9c 81       	ldd	r25, Y+4	; 0x04
     2e6:	9c 01       	movw	r18, r24
     2e8:	21 50       	subi	r18, 0x01	; 1
     2ea:	31 09       	sbc	r19, r1
     2ec:	3e 83       	std	Y+6, r19	; 0x06
     2ee:	2d 83       	std	Y+5, r18	; 0x05
     2f0:	2d b7       	in	r18, 0x3d	; 61
     2f2:	3e b7       	in	r19, 0x3e	; 62
     2f4:	28 1b       	sub	r18, r24
     2f6:	39 0b       	sbc	r19, r25
     2f8:	0f b6       	in	r0, 0x3f	; 63
     2fa:	f8 94       	cli
     2fc:	3e bf       	out	0x3e, r19	; 62
     2fe:	0f be       	out	0x3f, r0	; 63
     300:	2d bf       	out	0x3d, r18	; 61
     302:	8d b7       	in	r24, 0x3d	; 61
     304:	9e b7       	in	r25, 0x3e	; 62
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	98 87       	std	Y+8, r25	; 0x08
     30a:	8f 83       	std	Y+7, r24	; 0x07
    memcpy((unsigned char*)buf, (unsigned char*)&config_defaults, size);
     30c:	2b 81       	ldd	r18, Y+3	; 0x03
     30e:	3c 81       	ldd	r19, Y+4	; 0x04
     310:	8f 81       	ldd	r24, Y+7	; 0x07
     312:	98 85       	ldd	r25, Y+8	; 0x08
     314:	a9 01       	movw	r20, r18
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	71 e0       	ldi	r23, 0x01	; 1
     31a:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <memcpy>

    eeprom_writebuf(base_addr, (unsigned char*)buf, size);
     31e:	4b 81       	ldd	r20, Y+3	; 0x03
     320:	2f 81       	ldd	r18, Y+7	; 0x07
     322:	38 85       	ldd	r19, Y+8	; 0x08
     324:	89 81       	ldd	r24, Y+1	; 0x01
     326:	9a 81       	ldd	r25, Y+2	; 0x02
     328:	b9 01       	movw	r22, r18
     32a:	0e 94 17 03 	call	0x62e	; 0x62e <eeprom_writebuf>
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	f8 94       	cli
     332:	fe be       	out	0x3e, r15	; 62
     334:	0f be       	out	0x3f, r0	; 63
     336:	ed be       	out	0x3d, r14	; 61
}
     338:	00 00       	nop
     33a:	0f b6       	in	r0, 0x3f	; 63
     33c:	f8 94       	cli
     33e:	1e bf       	out	0x3e, r17	; 62
     340:	0f be       	out	0x3f, r0	; 63
     342:	0d bf       	out	0x3d, r16	; 61
     344:	28 96       	adiw	r28, 0x08	; 8
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	f8 94       	cli
     34a:	de bf       	out	0x3e, r29	; 62
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	cd bf       	out	0x3d, r28	; 61
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	1f 91       	pop	r17
     356:	0f 91       	pop	r16
     358:	ff 90       	pop	r15
     35a:	ef 90       	pop	r14
     35c:	08 95       	ret

0000035e <delay_init>:
static unsigned int limit[2] = {0, 0};
static unsigned char initialized = 0;

//typedef void (*func_t)(void);

void delay_init() {
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	00 d0       	rcall	.+0      	; 0x364 <delay_init+0x6>
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
    if (!initialized) {
     368:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <initialized>
     36c:	88 23       	and	r24, r24
     36e:	89 f5       	brne	.+98     	; 0x3d2 <delay_init+0x74>
        /*

        unsigned int PRESCALER_VALUE = 64;
        */

        unsigned int COMPARE_VALUE = 250;
     370:	8a ef       	ldi	r24, 0xFA	; 250
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	9a 83       	std	Y+2, r25	; 0x02
     376:	89 83       	std	Y+1, r24	; 0x01



        OCR0A = COMPARE_VALUE-1; // Set timer0 compare value to 250-1 = 249
     378:	87 e4       	ldi	r24, 0x47	; 71
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	29 81       	ldd	r18, Y+1	; 0x01
     37e:	21 50       	subi	r18, 0x01	; 1
     380:	fc 01       	movw	r30, r24
     382:	20 83       	st	Z, r18

        // Set CTC mode and correct clock divisor
        TCCR0A |= (1 << WGM01); // Set CTC mode //WGM01
     384:	84 e4       	ldi	r24, 0x44	; 68
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	24 e4       	ldi	r18, 0x44	; 68
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	f9 01       	movw	r30, r18
     38e:	20 81       	ld	r18, Z
     390:	22 60       	ori	r18, 0x02	; 2
     392:	fc 01       	movw	r30, r24
     394:	20 83       	st	Z, r18
        TCCR0B |= (1 << CS01) | (1 << CS00); // Set clock divisor (prescaler value = 64)  CS00/CS01
     396:	85 e4       	ldi	r24, 0x45	; 69
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	25 e4       	ldi	r18, 0x45	; 69
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	f9 01       	movw	r30, r18
     3a0:	20 81       	ld	r18, Z
     3a2:	23 60       	ori	r18, 0x03	; 3
     3a4:	fc 01       	movw	r30, r24
     3a6:	20 83       	st	Z, r18

        // Enable global interrupts
        // __builtin_avr_sei();
        SREG |= (1<<I_SREG);
     3a8:	8f e5       	ldi	r24, 0x5F	; 95
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	2f e5       	ldi	r18, 0x5F	; 95
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	f9 01       	movw	r30, r18
     3b2:	20 81       	ld	r18, Z
     3b4:	20 68       	ori	r18, 0x80	; 128
     3b6:	fc 01       	movw	r30, r24
     3b8:	20 83       	st	Z, r18

        // Enable interrupts on output compare A
        TIMSK0 |= (1 << OCIE0A);  //OCIE0A
     3ba:	8e e6       	ldi	r24, 0x6E	; 110
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	2e e6       	ldi	r18, 0x6E	; 110
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	f9 01       	movw	r30, r18
     3c4:	20 81       	ld	r18, Z
     3c6:	22 60       	ori	r18, 0x02	; 2
     3c8:	fc 01       	movw	r30, r24
     3ca:	20 83       	st	Z, r18

        // Stop further initialization by setting initialized to 1
        initialized = 1;
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <initialized>
    }
}
     3d2:	00 00       	nop
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	df 91       	pop	r29
     3da:	cf 91       	pop	r28
     3dc:	08 95       	ret

000003de <delay_get>:


unsigned int delay_get(unsigned int num) {
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	00 d0       	rcall	.+0      	; 0x3e4 <delay_get+0x6>
     3e4:	00 d0       	rcall	.+0      	; 0x3e6 <delay_get+0x8>
     3e6:	00 d0       	rcall	.+0      	; 0x3e8 <delay_get+0xa>
     3e8:	cd b7       	in	r28, 0x3d	; 61
     3ea:	de b7       	in	r29, 0x3e	; 62
     3ec:	9e 83       	std	Y+6, r25	; 0x06
     3ee:	8d 83       	std	Y+5, r24	; 0x05

    unsigned int count_value;

    // Get global interrupt enable bit state
    unsigned int sreg_state = SREG & (1 << I_SREG);
     3f0:	8f e5       	ldi	r24, 0x5F	; 95
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	fc 01       	movw	r30, r24
     3f6:	80 81       	ld	r24, Z
     3f8:	08 2e       	mov	r0, r24
     3fa:	00 0c       	add	r0, r0
     3fc:	99 0b       	sbc	r25, r25
     3fe:	80 78       	andi	r24, 0x80	; 128
     400:	99 27       	eor	r25, r25
     402:	9a 83       	std	Y+2, r25	; 0x02
     404:	89 83       	std	Y+1, r24	; 0x01

    // Disable interrupts
    // __builtin_avr_cli(); //
    SREG &= ~(1<<I_SREG);
     406:	8f e5       	ldi	r24, 0x5F	; 95
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	2f e5       	ldi	r18, 0x5F	; 95
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	f9 01       	movw	r30, r18
     410:	20 81       	ld	r18, Z
     412:	2f 77       	andi	r18, 0x7F	; 127
     414:	fc 01       	movw	r30, r24
     416:	20 83       	st	Z, r18

    // Get the delay_count[num] value
    count_value = delay_count[num];
     418:	8d 81       	ldd	r24, Y+5	; 0x05
     41a:	9e 81       	ldd	r25, Y+6	; 0x06
     41c:	88 0f       	add	r24, r24
     41e:	99 1f       	adc	r25, r25
     420:	86 52       	subi	r24, 0x26	; 38
     422:	9e 4f       	sbci	r25, 0xFE	; 254
     424:	fc 01       	movw	r30, r24
     426:	80 81       	ld	r24, Z
     428:	91 81       	ldd	r25, Z+1	; 0x01
     42a:	9c 83       	std	Y+4, r25	; 0x04
     42c:	8b 83       	std	Y+3, r24	; 0x03

    // Restore global interrupt state
    if (sreg_state) {
     42e:	89 81       	ldd	r24, Y+1	; 0x01
     430:	9a 81       	ldd	r25, Y+2	; 0x02
     432:	89 2b       	or	r24, r25
     434:	49 f0       	breq	.+18     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
        SREG |= (1<<I_SREG); //Enable interrupts
     436:	8f e5       	ldi	r24, 0x5F	; 95
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	2f e5       	ldi	r18, 0x5F	; 95
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	f9 01       	movw	r30, r18
     440:	20 81       	ld	r18, Z
     442:	20 68       	ori	r18, 0x80	; 128
     444:	fc 01       	movw	r30, r24
     446:	20 83       	st	Z, r18
    }

    // Return the count value
    return count_value;
     448:	8b 81       	ldd	r24, Y+3	; 0x03
     44a:	9c 81       	ldd	r25, Y+4	; 0x04
}
     44c:	26 96       	adiw	r28, 0x06	; 6
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	f8 94       	cli
     452:	de bf       	out	0x3e, r29	; 62
     454:	0f be       	out	0x3f, r0	; 63
     456:	cd bf       	out	0x3d, r28	; 61
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	08 95       	ret

0000045e <delay_set>:


void delay_set(unsigned int num, unsigned int time) {
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	00 d0       	rcall	.+0      	; 0x464 <delay_set+0x6>
     464:	00 d0       	rcall	.+0      	; 0x466 <delay_set+0x8>
     466:	00 d0       	rcall	.+0      	; 0x468 <delay_set+0xa>
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	9c 83       	std	Y+4, r25	; 0x04
     46e:	8b 83       	std	Y+3, r24	; 0x03
     470:	7e 83       	std	Y+6, r23	; 0x06
     472:	6d 83       	std	Y+5, r22	; 0x05

    // If not initialized, initialize the delay counter
    if (!initialized) {
     474:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <initialized>
     478:	88 23       	and	r24, r24
     47a:	11 f4       	brne	.+4      	; 0x480 <delay_set+0x22>
        delay_init();
     47c:	0e 94 af 01 	call	0x35e	; 0x35e <delay_init>
    }
    // Get global interrupt enable bit state
    unsigned int sreg_state = SREG & (1 << 7);
     480:	8f e5       	ldi	r24, 0x5F	; 95
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	fc 01       	movw	r30, r24
     486:	80 81       	ld	r24, Z
     488:	08 2e       	mov	r0, r24
     48a:	00 0c       	add	r0, r0
     48c:	99 0b       	sbc	r25, r25
     48e:	80 78       	andi	r24, 0x80	; 128
     490:	99 27       	eor	r25, r25
     492:	9a 83       	std	Y+2, r25	; 0x02
     494:	89 83       	std	Y+1, r24	; 0x01

    // Disable Interrupts
    SREG &= ~(1<<I_SREG); //cli()
     496:	8f e5       	ldi	r24, 0x5F	; 95
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	2f e5       	ldi	r18, 0x5F	; 95
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	f9 01       	movw	r30, r18
     4a0:	20 81       	ld	r18, Z
     4a2:	2f 77       	andi	r18, 0x7F	; 127
     4a4:	fc 01       	movw	r30, r24
     4a6:	20 83       	st	Z, r18

    // Set the limit for delay[num] and clear the count for delay[num]
    limit[num] = time;
     4a8:	8b 81       	ldd	r24, Y+3	; 0x03
     4aa:	9c 81       	ldd	r25, Y+4	; 0x04
     4ac:	88 0f       	add	r24, r24
     4ae:	99 1f       	adc	r25, r25
     4b0:	82 52       	subi	r24, 0x22	; 34
     4b2:	9e 4f       	sbci	r25, 0xFE	; 254
     4b4:	2d 81       	ldd	r18, Y+5	; 0x05
     4b6:	3e 81       	ldd	r19, Y+6	; 0x06
     4b8:	fc 01       	movw	r30, r24
     4ba:	31 83       	std	Z+1, r19	; 0x01
     4bc:	20 83       	st	Z, r18
    delay_count[num] = 0;
     4be:	8b 81       	ldd	r24, Y+3	; 0x03
     4c0:	9c 81       	ldd	r25, Y+4	; 0x04
     4c2:	88 0f       	add	r24, r24
     4c4:	99 1f       	adc	r25, r25
     4c6:	86 52       	subi	r24, 0x26	; 38
     4c8:	9e 4f       	sbci	r25, 0xFE	; 254
     4ca:	fc 01       	movw	r30, r24
     4cc:	11 82       	std	Z+1, r1	; 0x01
     4ce:	10 82       	st	Z, r1

    // Restore global interrupt state
    if (sreg_state) {
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	9a 81       	ldd	r25, Y+2	; 0x02
     4d4:	89 2b       	or	r24, r25
     4d6:	49 f0       	breq	.+18     	; 0x4ea <delay_set+0x8c>
        SREG |= (1<<I_SREG);   //sei()
     4d8:	8f e5       	ldi	r24, 0x5F	; 95
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	2f e5       	ldi	r18, 0x5F	; 95
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	f9 01       	movw	r30, r18
     4e2:	20 81       	ld	r18, Z
     4e4:	20 68       	ori	r18, 0x80	; 128
     4e6:	fc 01       	movw	r30, r24
     4e8:	20 83       	st	Z, r18
    }
}
     4ea:	00 00       	nop
     4ec:	26 96       	adiw	r28, 0x06	; 6
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	f8 94       	cli
     4f2:	de bf       	out	0x3e, r29	; 62
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	cd bf       	out	0x3d, r28	; 61
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	08 95       	ret

000004fe <delay_isdone>:


unsigned int delay_isdone(unsigned int num) {
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	00 d0       	rcall	.+0      	; 0x504 <delay_isdone+0x6>
     504:	00 d0       	rcall	.+0      	; 0x506 <delay_isdone+0x8>
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
     50a:	9c 83       	std	Y+4, r25	; 0x04
     50c:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int result = 0;
     50e:	1a 82       	std	Y+2, r1	; 0x02
     510:	19 82       	std	Y+1, r1	; 0x01

    // If delay_count[num] equals limit[num], set result to 1
    if (delay_count[num] == limit[num]) {
     512:	8b 81       	ldd	r24, Y+3	; 0x03
     514:	9c 81       	ldd	r25, Y+4	; 0x04
     516:	88 0f       	add	r24, r24
     518:	99 1f       	adc	r25, r25
     51a:	86 52       	subi	r24, 0x26	; 38
     51c:	9e 4f       	sbci	r25, 0xFE	; 254
     51e:	fc 01       	movw	r30, r24
     520:	20 81       	ld	r18, Z
     522:	31 81       	ldd	r19, Z+1	; 0x01
     524:	8b 81       	ldd	r24, Y+3	; 0x03
     526:	9c 81       	ldd	r25, Y+4	; 0x04
     528:	88 0f       	add	r24, r24
     52a:	99 1f       	adc	r25, r25
     52c:	82 52       	subi	r24, 0x22	; 34
     52e:	9e 4f       	sbci	r25, 0xFE	; 254
     530:	fc 01       	movw	r30, r24
     532:	80 81       	ld	r24, Z
     534:	91 81       	ldd	r25, Z+1	; 0x01
     536:	28 17       	cp	r18, r24
     538:	39 07       	cpc	r19, r25
     53a:	21 f4       	brne	.+8      	; 0x544 <delay_isdone+0x46>
        result = 1;
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	9a 83       	std	Y+2, r25	; 0x02
     542:	89 83       	std	Y+1, r24	; 0x01
    }

    // Return the result
    return result;
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	9a 81       	ldd	r25, Y+2	; 0x02
}
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	08 95       	ret

00000556 <__vector_14>:

//map to ivt

void __vector_14(void) __attribute__ ((signal, used, externally_visible));

void __vector_14(void) {
     556:	1f 92       	push	r1
     558:	0f 92       	push	r0
     55a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     55e:	0f 92       	push	r0
     560:	11 24       	eor	r1, r1
     562:	2f 93       	push	r18
     564:	3f 93       	push	r19
     566:	8f 93       	push	r24
     568:	9f 93       	push	r25
     56a:	ef 93       	push	r30
     56c:	ff 93       	push	r31
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	00 d0       	rcall	.+0      	; 0x574 <__vector_14+0x1e>
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
    for (unsigned int i = 0; i < sizeof(delay_count) / sizeof(delay_count[0]); i++) {
     578:	1a 82       	std	Y+2, r1	; 0x02
     57a:	19 82       	std	Y+1, r1	; 0x01
     57c:	2f c0       	rjmp	.+94     	; 0x5dc <__vector_14+0x86>
        if (delay_count[i] < limit[i]) {
     57e:	89 81       	ldd	r24, Y+1	; 0x01
     580:	9a 81       	ldd	r25, Y+2	; 0x02
     582:	88 0f       	add	r24, r24
     584:	99 1f       	adc	r25, r25
     586:	86 52       	subi	r24, 0x26	; 38
     588:	9e 4f       	sbci	r25, 0xFE	; 254
     58a:	fc 01       	movw	r30, r24
     58c:	20 81       	ld	r18, Z
     58e:	31 81       	ldd	r19, Z+1	; 0x01
     590:	89 81       	ldd	r24, Y+1	; 0x01
     592:	9a 81       	ldd	r25, Y+2	; 0x02
     594:	88 0f       	add	r24, r24
     596:	99 1f       	adc	r25, r25
     598:	82 52       	subi	r24, 0x22	; 34
     59a:	9e 4f       	sbci	r25, 0xFE	; 254
     59c:	fc 01       	movw	r30, r24
     59e:	80 81       	ld	r24, Z
     5a0:	91 81       	ldd	r25, Z+1	; 0x01
     5a2:	28 17       	cp	r18, r24
     5a4:	39 07       	cpc	r19, r25
     5a6:	a8 f4       	brcc	.+42     	; 0x5d2 <__vector_14+0x7c>
            delay_count[i]++;
     5a8:	89 81       	ldd	r24, Y+1	; 0x01
     5aa:	9a 81       	ldd	r25, Y+2	; 0x02
     5ac:	88 0f       	add	r24, r24
     5ae:	99 1f       	adc	r25, r25
     5b0:	86 52       	subi	r24, 0x26	; 38
     5b2:	9e 4f       	sbci	r25, 0xFE	; 254
     5b4:	fc 01       	movw	r30, r24
     5b6:	80 81       	ld	r24, Z
     5b8:	91 81       	ldd	r25, Z+1	; 0x01
     5ba:	9c 01       	movw	r18, r24
     5bc:	2f 5f       	subi	r18, 0xFF	; 255
     5be:	3f 4f       	sbci	r19, 0xFF	; 255
     5c0:	89 81       	ldd	r24, Y+1	; 0x01
     5c2:	9a 81       	ldd	r25, Y+2	; 0x02
     5c4:	88 0f       	add	r24, r24
     5c6:	99 1f       	adc	r25, r25
     5c8:	86 52       	subi	r24, 0x26	; 38
     5ca:	9e 4f       	sbci	r25, 0xFE	; 254
     5cc:	fc 01       	movw	r30, r24
     5ce:	31 83       	std	Z+1, r19	; 0x01
     5d0:	20 83       	st	Z, r18
//map to ivt

void __vector_14(void) __attribute__ ((signal, used, externally_visible));

void __vector_14(void) {
    for (unsigned int i = 0; i < sizeof(delay_count) / sizeof(delay_count[0]); i++) {
     5d2:	89 81       	ldd	r24, Y+1	; 0x01
     5d4:	9a 81       	ldd	r25, Y+2	; 0x02
     5d6:	01 96       	adiw	r24, 0x01	; 1
     5d8:	9a 83       	std	Y+2, r25	; 0x02
     5da:	89 83       	std	Y+1, r24	; 0x01
     5dc:	89 81       	ldd	r24, Y+1	; 0x01
     5de:	9a 81       	ldd	r25, Y+2	; 0x02
     5e0:	02 97       	sbiw	r24, 0x02	; 2
     5e2:	68 f2       	brcs	.-102    	; 0x57e <__vector_14+0x28>
        if (delay_count[i] < limit[i]) {
            delay_count[i]++;
        }
    }
}
     5e4:	00 00       	nop
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	df 91       	pop	r29
     5ec:	cf 91       	pop	r28
     5ee:	ff 91       	pop	r31
     5f0:	ef 91       	pop	r30
     5f2:	9f 91       	pop	r25
     5f4:	8f 91       	pop	r24
     5f6:	3f 91       	pop	r19
     5f8:	2f 91       	pop	r18
     5fa:	0f 90       	pop	r0
     5fc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     600:	0f 90       	pop	r0
     602:	1f 90       	pop	r1
     604:	18 95       	reti

00000606 <eeprom_unlock>:
#pragma GCC push_options
#pragma GCC optimize ("Os")
void eeprom_unlock()
{
    //EECR &= ~(1<<EEPE);
    EECR |= (1<<EEMPE);                     //enable master write
     606:	fa 9a       	sbi	0x1f, 2	; 31
    EECR |= (1<<EEPE);                      //enable write
     608:	f9 9a       	sbi	0x1f, 1	; 31
     60a:	08 95       	ret

0000060c <eeprom_readenable>:

#pragma GCC push_options
#pragma GCC optimize ("Os")
void eeprom_readenable()
{
    EECR |= (1<<EERE);
     60c:	f8 9a       	sbi	0x1f, 0	; 31
     60e:	08 95       	ret

00000610 <eeprom_isbusy>:
}
#pragma GCC pop_options

int eeprom_isbusy(){
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	cd b7       	in	r28, 0x3d	; 61
     616:	de b7       	in	r29, 0x3e	; 62
    //if(write_busy==1)
    //{
    //    int i=0;
    //}
    return write_busy==1;
     618:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <write_busy>
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	91 30       	cpi	r25, 0x01	; 1
     620:	09 f0       	breq	.+2      	; 0x624 <eeprom_isbusy+0x14>
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	88 2f       	mov	r24, r24
     626:	90 e0       	ldi	r25, 0x00	; 0
    //return 0;
}
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	08 95       	ret

0000062e <eeprom_writebuf>:

void eeprom_writebuf(unsigned int addr, unsigned char* buf, unsigned char size){
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	cd b7       	in	r28, 0x3d	; 61
     634:	de b7       	in	r29, 0x3e	; 62
     636:	27 97       	sbiw	r28, 0x07	; 7
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	f8 94       	cli
     63c:	de bf       	out	0x3e, r29	; 62
     63e:	0f be       	out	0x3f, r0	; 63
     640:	cd bf       	out	0x3d, r28	; 61
     642:	9c 83       	std	Y+4, r25	; 0x04
     644:	8b 83       	std	Y+3, r24	; 0x03
     646:	7e 83       	std	Y+6, r23	; 0x06
     648:	6d 83       	std	Y+5, r22	; 0x05
     64a:	4f 83       	std	Y+7, r20	; 0x07
    writeaddr = addr;
     64c:	8b 81       	ldd	r24, Y+3	; 0x03
     64e:	9c 81       	ldd	r25, Y+4	; 0x04
     650:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <writeaddr+0x1>
     654:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <writeaddr>
    write_busy = 1;
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <write_busy>
    bufidx = 0;
     65e:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <bufidx>

    //Copying
    for (int i=0;i<size;i++)
     662:	1a 82       	std	Y+2, r1	; 0x02
     664:	19 82       	std	Y+1, r1	; 0x01
     666:	13 c0       	rjmp	.+38     	; 0x68e <eeprom_writebuf+0x60>
        writebuf[i] = buf[i];
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	9a 81       	ldd	r25, Y+2	; 0x02
     66c:	2d 81       	ldd	r18, Y+5	; 0x05
     66e:	3e 81       	ldd	r19, Y+6	; 0x06
     670:	82 0f       	add	r24, r18
     672:	93 1f       	adc	r25, r19
     674:	fc 01       	movw	r30, r24
     676:	20 81       	ld	r18, Z
     678:	89 81       	ldd	r24, Y+1	; 0x01
     67a:	9a 81       	ldd	r25, Y+2	; 0x02
     67c:	88 56       	subi	r24, 0x68	; 104
     67e:	9d 4f       	sbci	r25, 0xFD	; 253
     680:	fc 01       	movw	r30, r24
     682:	20 83       	st	Z, r18
    writeaddr = addr;
    write_busy = 1;
    bufidx = 0;

    //Copying
    for (int i=0;i<size;i++)
     684:	89 81       	ldd	r24, Y+1	; 0x01
     686:	9a 81       	ldd	r25, Y+2	; 0x02
     688:	01 96       	adiw	r24, 0x01	; 1
     68a:	9a 83       	std	Y+2, r25	; 0x02
     68c:	89 83       	std	Y+1, r24	; 0x01
     68e:	8f 81       	ldd	r24, Y+7	; 0x07
     690:	28 2f       	mov	r18, r24
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	89 81       	ldd	r24, Y+1	; 0x01
     696:	9a 81       	ldd	r25, Y+2	; 0x02
     698:	82 17       	cp	r24, r18
     69a:	93 07       	cpc	r25, r19
     69c:	2c f3       	brlt	.-54     	; 0x668 <eeprom_writebuf+0x3a>
        writebuf[i] = buf[i];

    writesize = size;
     69e:	8f 81       	ldd	r24, Y+7	; 0x07
     6a0:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <writesize>

    //init EEPROM
    EECR |= (1<<EEPM1);
     6a4:	8f e3       	ldi	r24, 0x3F	; 63
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	2f e3       	ldi	r18, 0x3F	; 63
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	f9 01       	movw	r30, r18
     6ae:	20 81       	ld	r18, Z
     6b0:	20 62       	ori	r18, 0x20	; 32
     6b2:	fc 01       	movw	r30, r24
     6b4:	20 83       	st	Z, r18
    EECR &= ~(1<<EEPM0);
     6b6:	8f e3       	ldi	r24, 0x3F	; 63
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	2f e3       	ldi	r18, 0x3F	; 63
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	f9 01       	movw	r30, r18
     6c0:	20 81       	ld	r18, Z
     6c2:	2f 7e       	andi	r18, 0xEF	; 239
     6c4:	fc 01       	movw	r30, r24
     6c6:	20 83       	st	Z, r18

    //EEARH &= ~(1<<EEAR8);

    SREG |= (1<<I_SREG);        //Global interrupt enable
     6c8:	8f e5       	ldi	r24, 0x5F	; 95
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	2f e5       	ldi	r18, 0x5F	; 95
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	f9 01       	movw	r30, r18
     6d2:	20 81       	ld	r18, Z
     6d4:	20 68       	ori	r18, 0x80	; 128
     6d6:	fc 01       	movw	r30, r24
     6d8:	20 83       	st	Z, r18
    EECR |= (1<<EERIE);         //Enabling EEPROM ready interrupt
     6da:	8f e3       	ldi	r24, 0x3F	; 63
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	2f e3       	ldi	r18, 0x3F	; 63
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	f9 01       	movw	r30, r18
     6e4:	20 81       	ld	r18, Z
     6e6:	28 60       	ori	r18, 0x08	; 8
     6e8:	fc 01       	movw	r30, r24
     6ea:	20 83       	st	Z, r18

    while(write_busy);
     6ec:	00 00       	nop
     6ee:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <write_busy>
     6f2:	88 23       	and	r24, r24
     6f4:	e1 f7       	brne	.-8      	; 0x6ee <eeprom_writebuf+0xc0>
}
     6f6:	00 00       	nop
     6f8:	27 96       	adiw	r28, 0x07	; 7
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	f8 94       	cli
     6fe:	de bf       	out	0x3e, r29	; 62
     700:	0f be       	out	0x3f, r0	; 63
     702:	cd bf       	out	0x3d, r28	; 61
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <eeprom_readbuf>:

void eeprom_readbuf(unsigned int addr, unsigned char* buf, unsigned char size)
{
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	cd b7       	in	r28, 0x3d	; 61
     710:	de b7       	in	r29, 0x3e	; 62
     712:	29 97       	sbiw	r28, 0x09	; 9
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	f8 94       	cli
     718:	de bf       	out	0x3e, r29	; 62
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	cd bf       	out	0x3d, r28	; 61
     71e:	9e 83       	std	Y+6, r25	; 0x06
     720:	8d 83       	std	Y+5, r24	; 0x05
     722:	78 87       	std	Y+8, r23	; 0x08
     724:	6f 83       	std	Y+7, r22	; 0x07
     726:	49 87       	std	Y+9, r20	; 0x09
    unsigned int read_addr=addr;
     728:	8d 81       	ldd	r24, Y+5	; 0x05
     72a:	9e 81       	ldd	r25, Y+6	; 0x06
     72c:	9a 83       	std	Y+2, r25	; 0x02
     72e:	89 83       	std	Y+1, r24	; 0x01
    for(int i=0;i<size;i++)
     730:	1c 82       	std	Y+4, r1	; 0x04
     732:	1b 82       	std	Y+3, r1	; 0x03
     734:	2d c0       	rjmp	.+90     	; 0x790 <eeprom_readbuf+0x86>
    {
        //Read from EEPROM and store in buf[0:size-1]
        while(EECR & (1<<EEPE));     //waiting until EEPE becomes 0
     736:	00 00       	nop
     738:	8f e3       	ldi	r24, 0x3F	; 63
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	fc 01       	movw	r30, r24
     73e:	80 81       	ld	r24, Z
     740:	08 2e       	mov	r0, r24
     742:	00 0c       	add	r0, r0
     744:	99 0b       	sbc	r25, r25
     746:	82 70       	andi	r24, 0x02	; 2
     748:	99 27       	eor	r25, r25
     74a:	89 2b       	or	r24, r25
     74c:	a9 f7       	brne	.-22     	; 0x738 <eeprom_readbuf+0x2e>

        EEAR = read_addr;
     74e:	81 e4       	ldi	r24, 0x41	; 65
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	29 81       	ldd	r18, Y+1	; 0x01
     754:	3a 81       	ldd	r19, Y+2	; 0x02
     756:	fc 01       	movw	r30, r24
     758:	31 83       	std	Z+1, r19	; 0x01
     75a:	20 83       	st	Z, r18

        eeprom_readenable();
     75c:	0e 94 06 03 	call	0x60c	; 0x60c <eeprom_readenable>

        //Wait for 4 cycles
        __builtin_avr_delay_cycles(3);
     760:	00 c0       	rjmp	.+0      	; 0x762 <eeprom_readbuf+0x58>
     762:	00 00       	nop

        buf[i] = EEDR;
     764:	8b 81       	ldd	r24, Y+3	; 0x03
     766:	9c 81       	ldd	r25, Y+4	; 0x04
     768:	2f 81       	ldd	r18, Y+7	; 0x07
     76a:	38 85       	ldd	r19, Y+8	; 0x08
     76c:	82 0f       	add	r24, r18
     76e:	93 1f       	adc	r25, r19
     770:	20 e4       	ldi	r18, 0x40	; 64
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	f9 01       	movw	r30, r18
     776:	20 81       	ld	r18, Z
     778:	fc 01       	movw	r30, r24
     77a:	20 83       	st	Z, r18
        read_addr++;
     77c:	89 81       	ldd	r24, Y+1	; 0x01
     77e:	9a 81       	ldd	r25, Y+2	; 0x02
     780:	01 96       	adiw	r24, 0x01	; 1
     782:	9a 83       	std	Y+2, r25	; 0x02
     784:	89 83       	std	Y+1, r24	; 0x01
}

void eeprom_readbuf(unsigned int addr, unsigned char* buf, unsigned char size)
{
    unsigned int read_addr=addr;
    for(int i=0;i<size;i++)
     786:	8b 81       	ldd	r24, Y+3	; 0x03
     788:	9c 81       	ldd	r25, Y+4	; 0x04
     78a:	01 96       	adiw	r24, 0x01	; 1
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	8b 83       	std	Y+3, r24	; 0x03
     790:	89 85       	ldd	r24, Y+9	; 0x09
     792:	28 2f       	mov	r18, r24
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	8b 81       	ldd	r24, Y+3	; 0x03
     798:	9c 81       	ldd	r25, Y+4	; 0x04
     79a:	82 17       	cp	r24, r18
     79c:	93 07       	cpc	r25, r19
     79e:	5c f2       	brlt	.-106    	; 0x736 <eeprom_readbuf+0x2c>
        __builtin_avr_delay_cycles(3);

        buf[i] = EEDR;
        read_addr++;
    }
}
     7a0:	00 00       	nop
     7a2:	29 96       	adiw	r28, 0x09	; 9
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	f8 94       	cli
     7a8:	de bf       	out	0x3e, r29	; 62
     7aa:	0f be       	out	0x3f, r0	; 63
     7ac:	cd bf       	out	0x3d, r28	; 61
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	08 95       	ret

000007b4 <__vector_22>:

void __vector_22(void) __attribute__ ((signal, used, externally_visible));

void __vector_22(){
     7b4:	1f 92       	push	r1
     7b6:	0f 92       	push	r0
     7b8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     7bc:	0f 92       	push	r0
     7be:	11 24       	eor	r1, r1
     7c0:	2f 93       	push	r18
     7c2:	3f 93       	push	r19
     7c4:	4f 93       	push	r20
     7c6:	5f 93       	push	r21
     7c8:	6f 93       	push	r22
     7ca:	7f 93       	push	r23
     7cc:	8f 93       	push	r24
     7ce:	9f 93       	push	r25
     7d0:	af 93       	push	r26
     7d2:	bf 93       	push	r27
     7d4:	ef 93       	push	r30
     7d6:	ff 93       	push	r31
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	cd b7       	in	r28, 0x3d	; 61
     7de:	de b7       	in	r29, 0x3e	; 62
    //EEPROM ready
    if(bufidx<writesize)
     7e0:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <bufidx>
     7e4:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <writesize>
     7e8:	98 17       	cp	r25, r24
     7ea:	08 f0       	brcs	.+2      	; 0x7ee <__vector_22+0x3a>
     7ec:	59 c0       	rjmp	.+178    	; 0x8a0 <__vector_22+0xec>
    {
        //Clear the global interrupt flag
        SREG &= ~(1<<I_SREG);
     7ee:	8f e5       	ldi	r24, 0x5F	; 95
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	2f e5       	ldi	r18, 0x5F	; 95
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	f9 01       	movw	r30, r18
     7f8:	20 81       	ld	r18, Z
     7fa:	2f 77       	andi	r18, 0x7F	; 127
     7fc:	fc 01       	movw	r30, r24
     7fe:	20 83       	st	Z, r18

        //Write writebuf[bufidx] to EEPROM writeaddr

        while (EECR & (1<<EEPE));     //waiting until EEPE becomes 0
     800:	00 00       	nop
     802:	8f e3       	ldi	r24, 0x3F	; 63
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	fc 01       	movw	r30, r24
     808:	80 81       	ld	r24, Z
     80a:	08 2e       	mov	r0, r24
     80c:	00 0c       	add	r0, r0
     80e:	99 0b       	sbc	r25, r25
     810:	82 70       	andi	r24, 0x02	; 2
     812:	99 27       	eor	r25, r25
     814:	89 2b       	or	r24, r25
     816:	a9 f7       	brne	.-22     	; 0x802 <__vector_22+0x4e>

        //while (SPMCSR & (1<<SELFPRGEN));     //waiting until SELFPRGEN becomes 0

        eeprom_unlock();
     818:	0e 94 03 03 	call	0x606	; 0x606 <eeprom_unlock>

        EEAR = writeaddr;                      //Writes address to EEARL register
     81c:	81 e4       	ldi	r24, 0x41	; 65
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	20 91 95 02 	lds	r18, 0x0295	; 0x800295 <writeaddr>
     824:	30 91 96 02 	lds	r19, 0x0296	; 0x800296 <writeaddr+0x1>
     828:	fc 01       	movw	r30, r24
     82a:	31 83       	std	Z+1, r19	; 0x01
     82c:	20 83       	st	Z, r18
        EEDR = writebuf[bufidx];                //Writes data to EEDR register
     82e:	80 e4       	ldi	r24, 0x40	; 64
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	20 91 d8 02 	lds	r18, 0x02D8	; 0x8002d8 <bufidx>
     836:	22 2f       	mov	r18, r18
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	28 56       	subi	r18, 0x68	; 104
     83c:	3d 4f       	sbci	r19, 0xFD	; 253
     83e:	f9 01       	movw	r30, r18
     840:	20 81       	ld	r18, Z
     842:	fc 01       	movw	r30, r24
     844:	20 83       	st	Z, r18



        writeaddr++;
     846:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <writeaddr>
     84a:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <writeaddr+0x1>
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <writeaddr+0x1>
     854:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <writeaddr>
        bufidx++;
     858:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <bufidx>
     85c:	8f 5f       	subi	r24, 0xFF	; 255
     85e:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <bufidx>

        //Set the interrupt flag
        SREG |= (1<<I_SREG);
     862:	8f e5       	ldi	r24, 0x5F	; 95
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	2f e5       	ldi	r18, 0x5F	; 95
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	f9 01       	movw	r30, r18
     86c:	20 81       	ld	r18, Z
     86e:	20 68       	ori	r18, 0x80	; 128
     870:	fc 01       	movw	r30, r24
     872:	20 83       	st	Z, r18

        //Re-enable eeprom ready interrupt (just in case)
        EECR |= (1<<EERIE);
     874:	8f e3       	ldi	r24, 0x3F	; 63
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	2f e3       	ldi	r18, 0x3F	; 63
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	f9 01       	movw	r30, r18
     87e:	20 81       	ld	r18, Z
     880:	28 60       	ori	r18, 0x08	; 8
     882:	fc 01       	movw	r30, r24
     884:	20 83       	st	Z, r18

        while(EECR & (1<<EEPE));
     886:	00 00       	nop
     888:	8f e3       	ldi	r24, 0x3F	; 63
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	fc 01       	movw	r30, r24
     88e:	80 81       	ld	r24, Z
     890:	08 2e       	mov	r0, r24
     892:	00 0c       	add	r0, r0
     894:	99 0b       	sbc	r25, r25
     896:	82 70       	andi	r24, 0x02	; 2
     898:	99 27       	eor	r25, r25
     89a:	89 2b       	or	r24, r25
     89c:	a9 f7       	brne	.-22     	; 0x888 <__vector_22+0xd4>
    {
        //Disable EEPROM ready interrupts
        EECR &= ~(1<<EERIE);
        write_busy=0;
    }
}
     89e:	11 c0       	rjmp	.+34     	; 0x8c2 <__vector_22+0x10e>
        //Re-enable eeprom ready interrupt (just in case)
        EECR |= (1<<EERIE);

        while(EECR & (1<<EEPE));
    }
    else if (bufidx>=writesize)
     8a0:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <bufidx>
     8a4:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <writesize>
     8a8:	98 17       	cp	r25, r24
     8aa:	58 f0       	brcs	.+22     	; 0x8c2 <__vector_22+0x10e>
    {
        //Disable EEPROM ready interrupts
        EECR &= ~(1<<EERIE);
     8ac:	8f e3       	ldi	r24, 0x3F	; 63
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	2f e3       	ldi	r18, 0x3F	; 63
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	f9 01       	movw	r30, r18
     8b6:	20 81       	ld	r18, Z
     8b8:	27 7f       	andi	r18, 0xF7	; 247
     8ba:	fc 01       	movw	r30, r24
     8bc:	20 83       	st	Z, r18
        write_busy=0;
     8be:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <write_busy>
    }
}
     8c2:	00 00       	nop
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	ff 91       	pop	r31
     8ca:	ef 91       	pop	r30
     8cc:	bf 91       	pop	r27
     8ce:	af 91       	pop	r26
     8d0:	9f 91       	pop	r25
     8d2:	8f 91       	pop	r24
     8d4:	7f 91       	pop	r23
     8d6:	6f 91       	pop	r22
     8d8:	5f 91       	pop	r21
     8da:	4f 91       	pop	r20
     8dc:	3f 91       	pop	r19
     8de:	2f 91       	pop	r18
     8e0:	0f 90       	pop	r0
     8e2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     8e6:	0f 90       	pop	r0
     8e8:	1f 90       	pop	r1
     8ea:	18 95       	reti

000008ec <EEPROM_set_write_mode>:

void EEPROM_set_write_mode(){
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	cd b7       	in	r28, 0x3d	; 61
     8f2:	de b7       	in	r29, 0x3e	; 62
    EECR |= (1<<EEPM1);
     8f4:	8f e3       	ldi	r24, 0x3F	; 63
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	2f e3       	ldi	r18, 0x3F	; 63
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	f9 01       	movw	r30, r18
     8fe:	20 81       	ld	r18, Z
     900:	20 62       	ori	r18, 0x20	; 32
     902:	fc 01       	movw	r30, r24
     904:	20 83       	st	Z, r18
}
     906:	00 00       	nop
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	08 95       	ret

0000090e <led_init>:

const char *Blink_msg;
unsigned int Blink_pos;
enum Blink_state { phase1, phase2 } blink_state;

void led_init() {
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	cd b7       	in	r28, 0x3d	; 61
     914:	de b7       	in	r29, 0x3e	; 62
    DDRB |= LED_PIN; // Set LED pin as output
     916:	84 e2       	ldi	r24, 0x24	; 36
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	24 e2       	ldi	r18, 0x24	; 36
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	f9 01       	movw	r30, r18
     920:	20 81       	ld	r18, Z
     922:	22 60       	ori	r18, 0x02	; 2
     924:	fc 01       	movw	r30, r24
     926:	20 83       	st	Z, r18
    PORTB &= ~LED_PIN; // Turn off the LED
     928:	85 e2       	ldi	r24, 0x25	; 37
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	25 e2       	ldi	r18, 0x25	; 37
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	f9 01       	movw	r30, r18
     932:	20 81       	ld	r18, Z
     934:	2d 7f       	andi	r18, 0xFD	; 253
     936:	fc 01       	movw	r30, r24
     938:	20 83       	st	Z, r18
}
     93a:	00 00       	nop
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	08 95       	ret

00000942 <led_on>:

void led_on() {
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	cd b7       	in	r28, 0x3d	; 61
     948:	de b7       	in	r29, 0x3e	; 62
    PORTB |= LED_PIN;
     94a:	85 e2       	ldi	r24, 0x25	; 37
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	25 e2       	ldi	r18, 0x25	; 37
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	f9 01       	movw	r30, r18
     954:	20 81       	ld	r18, Z
     956:	22 60       	ori	r18, 0x02	; 2
     958:	fc 01       	movw	r30, r24
     95a:	20 83       	st	Z, r18
}
     95c:	00 00       	nop
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	08 95       	ret

00000964 <led_off>:

void led_off() {
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~LED_PIN;
     96c:	85 e2       	ldi	r24, 0x25	; 37
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	25 e2       	ldi	r18, 0x25	; 37
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	f9 01       	movw	r30, r18
     976:	20 81       	ld	r18, Z
     978:	2d 7f       	andi	r18, 0xFD	; 253
     97a:	fc 01       	movw	r30, r24
     97c:	20 83       	st	Z, r18
}
     97e:	00 00       	nop
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	08 95       	ret

00000986 <led_is_on>:

int led_is_on() {
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
    return (PORTB & LED_PIN) ? 1 : 0;
     98e:	85 e2       	ldi	r24, 0x25	; 37
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	fc 01       	movw	r30, r24
     994:	80 81       	ld	r24, Z
     996:	88 2f       	mov	r24, r24
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	82 70       	andi	r24, 0x02	; 2
     99c:	99 27       	eor	r25, r25
     99e:	21 e0       	ldi	r18, 0x01	; 1
     9a0:	89 2b       	or	r24, r25
     9a2:	09 f4       	brne	.+2      	; 0x9a6 <led_is_on+0x20>
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	82 2f       	mov	r24, r18
     9a8:	90 e0       	ldi	r25, 0x00	; 0
}
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	08 95       	ret

000009b0 <led_set_blink>:

void led_set_blink(char *msg) {
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	00 d0       	rcall	.+0      	; 0x9b6 <led_set_blink+0x6>
     9b6:	cd b7       	in	r28, 0x3d	; 61
     9b8:	de b7       	in	r29, 0x3e	; 62
     9ba:	9a 83       	std	Y+2, r25	; 0x02
     9bc:	89 83       	std	Y+1, r24	; 0x01
    Blink_msg = msg;
     9be:	89 81       	ldd	r24, Y+1	; 0x01
     9c0:	9a 81       	ldd	r25, Y+2	; 0x02
     9c2:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <Blink_msg+0x1>
     9c6:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <Blink_msg>
    Blink_pos = 0;
     9ca:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <Blink_pos+0x1>
     9ce:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <Blink_pos>
    blink_state = phase1;
     9d2:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <blink_state+0x1>
     9d6:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <blink_state>
    delay_set(0, 0);
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0e 94 2f 02 	call	0x45e	; 0x45e <delay_set>
    led_off();
     9e6:	0e 94 b2 04 	call	0x964	; 0x964 <led_off>
}
     9ea:	00 00       	nop
     9ec:	0f 90       	pop	r0
     9ee:	0f 90       	pop	r0
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	08 95       	ret

000009f6 <led_update>:

void led_update() {
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	cd b7       	in	r28, 0x3d	; 61
     9fc:	de b7       	in	r29, 0x3e	; 62
    switch (blink_state) {
     9fe:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <blink_state>
     a02:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <blink_state+0x1>
     a06:	00 97       	sbiw	r24, 0x00	; 0
     a08:	21 f0       	breq	.+8      	; 0xa12 <led_update+0x1c>
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	09 f4       	brne	.+2      	; 0xa10 <led_update+0x1a>
     a0e:	51 c0       	rjmp	.+162    	; 0xab2 <led_update+0xbc>
                blink_state = phase1;
            }
            break;

        default:
            break;
     a10:	81 c0       	rjmp	.+258    	; 0xb14 <led_update+0x11e>
}

void led_update() {
    switch (blink_state) {
        case phase1:
            if (delay_isdone(0)) {
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	0e 94 7f 02 	call	0x4fe	; 0x4fe <delay_isdone>
     a1a:	89 2b       	or	r24, r25
     a1c:	09 f4       	brne	.+2      	; 0xa20 <led_update+0x2a>
     a1e:	77 c0       	rjmp	.+238    	; 0xb0e <led_update+0x118>
                switch (Blink_msg[Blink_pos]) {
     a20:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <Blink_msg>
     a24:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <Blink_msg+0x1>
     a28:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <Blink_pos>
     a2c:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <Blink_pos+0x1>
     a30:	82 0f       	add	r24, r18
     a32:	93 1f       	adc	r25, r19
     a34:	fc 01       	movw	r30, r24
     a36:	80 81       	ld	r24, Z
     a38:	08 2e       	mov	r0, r24
     a3a:	00 0c       	add	r0, r0
     a3c:	99 0b       	sbc	r25, r25
     a3e:	8d 32       	cpi	r24, 0x2D	; 45
     a40:	91 05       	cpc	r25, r1
     a42:	31 f0       	breq	.+12     	; 0xa50 <led_update+0x5a>
     a44:	8e 32       	cpi	r24, 0x2E	; 46
     a46:	91 05       	cpc	r25, r1
     a48:	91 f0       	breq	.+36     	; 0xa6e <led_update+0x78>
     a4a:	80 97       	sbiw	r24, 0x20	; 32
     a4c:	f9 f0       	breq	.+62     	; 0xa8c <led_update+0x96>
     a4e:	27 c0       	rjmp	.+78     	; 0xa9e <led_update+0xa8>
                    case '-':
                        led_on();
     a50:	0e 94 a1 04 	call	0x942	; 0x942 <led_on>
                        delay_set(0, 750);
     a54:	6e ee       	ldi	r22, 0xEE	; 238
     a56:	72 e0       	ldi	r23, 0x02	; 2
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0e 94 2f 02 	call	0x45e	; 0x45e <delay_set>
                        //delay_set(0,7);
                        blink_state = phase2;
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <blink_state+0x1>
     a68:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <blink_state>
                        break;
     a6c:	21 c0       	rjmp	.+66     	; 0xab0 <led_update+0xba>
                    case '.':
                        led_on();
     a6e:	0e 94 a1 04 	call	0x942	; 0x942 <led_on>
                        delay_set(0, 250);
     a72:	6a ef       	ldi	r22, 0xFA	; 250
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	0e 94 2f 02 	call	0x45e	; 0x45e <delay_set>
                        //delay_set(0,2);
                        blink_state = phase2;
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <blink_state+0x1>
     a86:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <blink_state>
                        break;
     a8a:	12 c0       	rjmp	.+36     	; 0xab0 <led_update+0xba>
                    case ' ':
                        led_off();
     a8c:	0e 94 b2 04 	call	0x964	; 0x964 <led_off>
                        delay_set(0, 1000);
     a90:	68 ee       	ldi	r22, 0xE8	; 232
     a92:	73 e0       	ldi	r23, 0x03	; 3
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0e 94 2f 02 	call	0x45e	; 0x45e <delay_set>
                        //blink_state = phase2;
                        break;
     a9c:	09 c0       	rjmp	.+18     	; 0xab0 <led_update+0xba>
                    default:
                        led_off();
     a9e:	0e 94 b2 04 	call	0x964	; 0x964 <led_off>
                        delay_set(0, 0);
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	0e 94 2f 02 	call	0x45e	; 0x45e <delay_set>
                        break;
     aae:	00 00       	nop
                }
            }
            break;
     ab0:	2e c0       	rjmp	.+92     	; 0xb0e <led_update+0x118>

        case phase2:
            if (delay_isdone(0)) {
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	0e 94 7f 02 	call	0x4fe	; 0x4fe <delay_isdone>
     aba:	89 2b       	or	r24, r25
     abc:	51 f1       	breq	.+84     	; 0xb12 <led_update+0x11c>
                led_off();
     abe:	0e 94 b2 04 	call	0x964	; 0x964 <led_off>
                delay_set(0, 100);
     ac2:	64 e6       	ldi	r22, 0x64	; 100
     ac4:	70 e0       	ldi	r23, 0x00	; 0
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	0e 94 2f 02 	call	0x45e	; 0x45e <delay_set>
                //delay_set(0, 1);
                Blink_pos++;
     ace:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <Blink_pos>
     ad2:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <Blink_pos+0x1>
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <Blink_pos+0x1>
     adc:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <Blink_pos>
                if (Blink_pos >= strlen(Blink_msg)) {
     ae0:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Blink_msg>
     ae4:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <Blink_msg+0x1>
     ae8:	0e 94 05 14 	call	0x280a	; 0x280a <strlen>
     aec:	9c 01       	movw	r18, r24
     aee:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <Blink_pos>
     af2:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <Blink_pos+0x1>
     af6:	82 17       	cp	r24, r18
     af8:	93 07       	cpc	r25, r19
     afa:	20 f0       	brcs	.+8      	; 0xb04 <led_update+0x10e>
                    Blink_pos = 0;
     afc:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <Blink_pos+0x1>
     b00:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <Blink_pos>
                }
                blink_state = phase1;
     b04:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <blink_state+0x1>
     b08:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <blink_state>
            }
            break;
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <led_update+0x11c>
                        led_off();
                        delay_set(0, 0);
                        break;
                }
            }
            break;
     b0e:	00 00       	nop
     b10:	01 c0       	rjmp	.+2      	; 0xb14 <led_update+0x11e>
                if (Blink_pos >= strlen(Blink_msg)) {
                    Blink_pos = 0;
                }
                blink_state = phase1;
            }
            break;
     b12:	00 00       	nop

        default:
            break;
    }
}
     b14:	00 00       	nop
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	08 95       	ret

00000b1c <main>:
 #include "vpd.h"
 #include "uart.h"
 #include "log.h"

int main(void)
{
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	00 d0       	rcall	.+0      	; 0xb22 <main+0x6>
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
    /* Initialize uart, led, and rtc hardware */
    uart_init();
     b26:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <uart_init>
    config_init();
     b2a:	0e 94 53 00 	call	0xa6	; 0xa6 <config_init>
    led_init();
     b2e:	0e 94 87 04 	call	0x90e	; 0x90e <led_init>
    log_init();
     b32:	0e 94 6e 08 	call	0x10dc	; 0x10dc <log_init>
    rtc_init();
     b36:	0e 94 34 0a 	call	0x1468	; 0x1468 <rtc_init>
    vpd_init();
     b3a:	0e 94 5d 07 	call	0xeba	; 0xeba <vpd_init>
    //timer1_init();
    delay_init();
     b3e:	0e 94 af 01 	call	0x35e	; 0x35e <delay_init>

    /* Initialize led blink pattern to "--- -.-" in Morse Code */
    led_set_blink("-");
     b42:	81 e6       	ldi	r24, 0x61	; 97
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <led_set_blink>

    /* Set RTC date/time to "01/01/2019 00:00:00" */
    rtc_set_by_datestr("01/01/2019 00:00:00");
     b4a:	83 e6       	ldi	r24, 0x63	; 99
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <rtc_set_by_datestr>

    /* Output project information to the console */
    uart_writestr("SER 486 Project 2 - Manish Mysore Rajesh Gangadhar\n\r");
     b52:	87 e7       	ldi	r24, 0x77	; 119
     b54:	91 e0       	ldi	r25, 0x01	; 1
     b56:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <uart_writestr>

    uart_writestr(vpd.model);
     b5a:	8d ed       	ldi	r24, 0xDD	; 221
     b5c:	92 e0       	ldi	r25, 0x02	; 2
     b5e:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <uart_writestr>
    uart_writestr("\n\r");
     b62:	8c ea       	ldi	r24, 0xAC	; 172
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <uart_writestr>
    uart_writestr(vpd.manufacturer);
     b6a:	89 ee       	ldi	r24, 0xE9	; 233
     b6c:	92 e0       	ldi	r25, 0x02	; 2
     b6e:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <uart_writestr>
    uart_writestr("\n\r");
     b72:	8c ea       	ldi	r24, 0xAC	; 172
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <uart_writestr>
    uart_writestr(vpd.token);
     b7a:	89 ed       	ldi	r24, 0xD9	; 217
     b7c:	92 e0       	ldi	r25, 0x02	; 2
     b7e:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <uart_writestr>
    uart_writestr("\n\r");
     b82:	8c ea       	ldi	r24, 0xAC	; 172
     b84:	91 e0       	ldi	r25, 0x01	; 1
     b86:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <uart_writestr>

    //Set the config.use_static_ip=1 and set modified
    config.use_static_ip=1;
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <config+0xc>
    config_set_modified();
     b90:	0e 94 e5 00 	call	0x1ca	; 0x1ca <config_set_modified>

    //Clear event log and add three records to it
    log_clear();
     b94:	0e 94 ba 09 	call	0x1374	; 0x1374 <log_clear>
    log_add_record(0xaa);
     b98:	8a ea       	ldi	r24, 0xAA	; 170
     b9a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <log_add_record>
    log_add_record(0xbb);
     b9e:	8b eb       	ldi	r24, 0xBB	; 187
     ba0:	0e 94 69 09 	call	0x12d2	; 0x12d2 <log_add_record>
    log_add_record(0xcc);
     ba4:	8c ec       	ldi	r24, 0xCC	; 204
     ba6:	0e 94 69 09 	call	0x12d2	; 0x12d2 <log_add_record>

    int dumped=0;
     baa:	1a 82       	std	Y+2, r1	; 0x02
     bac:	19 82       	std	Y+1, r1	; 0x01


    while(1)
    {
        led_update();
     bae:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <led_update>
        log_update();
     bb2:	0e 94 33 09 	call	0x1266	; 0x1266 <log_update>
        config_update();
     bb6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <config_update>

        if(!eeprom_isbusy() && (!dumped))
     bba:	0e 94 08 03 	call	0x610	; 0x610 <eeprom_isbusy>
     bbe:	89 2b       	or	r24, r25
     bc0:	b1 f7       	brne	.-20     	; 0xbae <main+0x92>
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	9a 81       	ldd	r25, Y+2	; 0x02
     bc6:	89 2b       	or	r24, r25
     bc8:	91 f7       	brne	.-28     	; 0xbae <main+0x92>
        {
            dump_eeprom(0, 0x100);
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	71 e0       	ldi	r23, 0x01	; 1
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <dump_eeprom>
            dumped=1;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	9a 83       	std	Y+2, r25	; 0x02
     bdc:	89 83       	std	Y+1, r24	; 0x01
        }
    }
     bde:	e7 cf       	rjmp	.-50     	; 0xbae <main+0x92>

00000be0 <timer1_init>:
#define OCIE1A 1

#define I_SREG 7
static volatile unsigned long count = 0;

void timer1_init() {
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	00 d0       	rcall	.+0      	; 0xbe6 <timer1_init+0x6>
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
    // Example: (16,000,000 / 1024 / 15625) = 1 Hz

    /*
    unsigned int PRESCALER_VALUE = 1024;
    */
    unsigned int COMPARE_VALUE = 15625;  //16 bit max value = 2^16 - 65535
     bea:	89 e0       	ldi	r24, 0x09	; 9
     bec:	9d e3       	ldi	r25, 0x3D	; 61
     bee:	9a 83       	std	Y+2, r25	; 0x02
     bf0:	89 83       	std	Y+1, r24	; 0x01

    // Set CTC mode
    TCCR1B |= (1 << WGM12); // WGM12
     bf2:	81 e8       	ldi	r24, 0x81	; 129
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	21 e8       	ldi	r18, 0x81	; 129
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	f9 01       	movw	r30, r18
     bfc:	20 81       	ld	r18, Z
     bfe:	28 60       	ori	r18, 0x08	; 8
     c00:	fc 01       	movw	r30, r24
     c02:	20 83       	st	Z, r18

    // Set clock divisor (prescaler value = 1024)
    TCCR1B |= (1 << CS12) | (1 << CS10); // CS12 and CS10
     c04:	81 e8       	ldi	r24, 0x81	; 129
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	21 e8       	ldi	r18, 0x81	; 129
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	f9 01       	movw	r30, r18
     c0e:	20 81       	ld	r18, Z
     c10:	25 60       	ori	r18, 0x05	; 5
     c12:	fc 01       	movw	r30, r24
     c14:	20 83       	st	Z, r18

    // Set compare value
    OCR1A = COMPARE_VALUE - 1;
     c16:	88 e8       	ldi	r24, 0x88	; 136
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	29 81       	ldd	r18, Y+1	; 0x01
     c1c:	3a 81       	ldd	r19, Y+2	; 0x02
     c1e:	21 50       	subi	r18, 0x01	; 1
     c20:	31 09       	sbc	r19, r1
     c22:	fc 01       	movw	r30, r24
     c24:	31 83       	std	Z+1, r19	; 0x01
     c26:	20 83       	st	Z, r18

    // Enable interrupts on output compare A
    TIMSK1 |= (1 << OCIE1A); // OCIE1A
     c28:	8f e6       	ldi	r24, 0x6F	; 111
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	2f e6       	ldi	r18, 0x6F	; 111
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	f9 01       	movw	r30, r18
     c32:	20 81       	ld	r18, Z
     c34:	22 60       	ori	r18, 0x02	; 2
     c36:	fc 01       	movw	r30, r24
     c38:	20 83       	st	Z, r18

    // Enable global interrupts
    // __builtin_avr_sei();
    SREG |= (1<<I_SREG);
     c3a:	8f e5       	ldi	r24, 0x5F	; 95
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	2f e5       	ldi	r18, 0x5F	; 95
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	f9 01       	movw	r30, r18
     c44:	20 81       	ld	r18, Z
     c46:	20 68       	ori	r18, 0x80	; 128
     c48:	fc 01       	movw	r30, r24
     c4a:	20 83       	st	Z, r18
}
     c4c:	00 00       	nop
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	08 95       	ret

00000c58 <timer1_get>:

unsigned long timer1_get() {
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	00 d0       	rcall	.+0      	; 0xc5e <timer1_get+0x6>
     c5e:	00 d0       	rcall	.+0      	; 0xc60 <timer1_get+0x8>
     c60:	00 d0       	rcall	.+0      	; 0xc62 <timer1_get+0xa>
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
    unsigned long count_value;

    // Get global interrupt enable bit state
    unsigned int sreg_state = SREG & (1 << I_SREG);
     c66:	8f e5       	ldi	r24, 0x5F	; 95
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	fc 01       	movw	r30, r24
     c6c:	80 81       	ld	r24, Z
     c6e:	88 2f       	mov	r24, r24
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	80 78       	andi	r24, 0x80	; 128
     c74:	99 27       	eor	r25, r25
     c76:	9a 83       	std	Y+2, r25	; 0x02
     c78:	89 83       	std	Y+1, r24	; 0x01

    // Disable interrupts
    // __builtin_avr_cli();
    SREG &= ~(1<<I_SREG);
     c7a:	8f e5       	ldi	r24, 0x5F	; 95
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	2f e5       	ldi	r18, 0x5F	; 95
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	f9 01       	movw	r30, r18
     c84:	20 81       	ld	r18, Z
     c86:	2f 77       	andi	r18, 0x7F	; 127
     c88:	fc 01       	movw	r30, r24
     c8a:	20 83       	st	Z, r18

    // Get the count value
    count_value = count;
     c8c:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <count>
     c90:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <count+0x1>
     c94:	a0 91 e6 01 	lds	r26, 0x01E6	; 0x8001e6 <count+0x2>
     c98:	b0 91 e7 01 	lds	r27, 0x01E7	; 0x8001e7 <count+0x3>
     c9c:	8b 83       	std	Y+3, r24	; 0x03
     c9e:	9c 83       	std	Y+4, r25	; 0x04
     ca0:	ad 83       	std	Y+5, r26	; 0x05
     ca2:	be 83       	std	Y+6, r27	; 0x06

    // Restore global interrupt state
    if (sreg_state) {
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	9a 81       	ldd	r25, Y+2	; 0x02
     ca8:	89 2b       	or	r24, r25
     caa:	49 f0       	breq	.+18     	; 0xcbe <timer1_get+0x66>
        // __builtin_avr_sei();
        SREG |= (1<<I_SREG);
     cac:	8f e5       	ldi	r24, 0x5F	; 95
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	2f e5       	ldi	r18, 0x5F	; 95
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	f9 01       	movw	r30, r18
     cb6:	20 81       	ld	r18, Z
     cb8:	20 68       	ori	r18, 0x80	; 128
     cba:	fc 01       	movw	r30, r24
     cbc:	20 83       	st	Z, r18
    }

    // Return the count value
    return count_value;
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	9c 81       	ldd	r25, Y+4	; 0x04
     cc2:	ad 81       	ldd	r26, Y+5	; 0x05
     cc4:	be 81       	ldd	r27, Y+6	; 0x06
}
     cc6:	bc 01       	movw	r22, r24
     cc8:	cd 01       	movw	r24, r26
     cca:	26 96       	adiw	r28, 0x06	; 6
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	cd bf       	out	0x3d, r28	; 61
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	08 95       	ret

00000cdc <timer1_clear>:

void timer1_clear() {
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	00 d0       	rcall	.+0      	; 0xce2 <timer1_clear+0x6>
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
    // Get global interrupt enable bit state
    unsigned int sreg_state = SREG & (1 << I_SREG);
     ce6:	8f e5       	ldi	r24, 0x5F	; 95
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	fc 01       	movw	r30, r24
     cec:	80 81       	ld	r24, Z
     cee:	88 2f       	mov	r24, r24
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	80 78       	andi	r24, 0x80	; 128
     cf4:	99 27       	eor	r25, r25
     cf6:	9a 83       	std	Y+2, r25	; 0x02
     cf8:	89 83       	std	Y+1, r24	; 0x01

    // Disable interrupts
    // __builtin_avr_cli();
    SREG &= ~(1<<I_SREG);
     cfa:	8f e5       	ldi	r24, 0x5F	; 95
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	2f e5       	ldi	r18, 0x5F	; 95
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	f9 01       	movw	r30, r18
     d04:	20 81       	ld	r18, Z
     d06:	2f 77       	andi	r18, 0x7F	; 127
     d08:	fc 01       	movw	r30, r24
     d0a:	20 83       	st	Z, r18

    // Clear count value
    count = 0;
     d0c:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <count>
     d10:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <count+0x1>
     d14:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <count+0x2>
     d18:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <count+0x3>

    // Restore global interrupt state
    if (sreg_state) {
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	9a 81       	ldd	r25, Y+2	; 0x02
     d20:	89 2b       	or	r24, r25
     d22:	49 f0       	breq	.+18     	; 0xd36 <timer1_clear+0x5a>
        // __builtin_avr_sei();
        SREG |= (1<<I_SREG);
     d24:	8f e5       	ldi	r24, 0x5F	; 95
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	2f e5       	ldi	r18, 0x5F	; 95
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	f9 01       	movw	r30, r18
     d2e:	20 81       	ld	r18, Z
     d30:	20 68       	ori	r18, 0x80	; 128
     d32:	fc 01       	movw	r30, r24
     d34:	20 83       	st	Z, r18
    }
}
     d36:	00 00       	nop
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	08 95       	ret

00000d42 <__vector_11>:


void __vector_11(void) __attribute__ ((signal, used, externally_visible));

void __vector_11(void)
{
     d42:	1f 92       	push	r1
     d44:	0f 92       	push	r0
     d46:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d4a:	0f 92       	push	r0
     d4c:	11 24       	eor	r1, r1
     d4e:	8f 93       	push	r24
     d50:	9f 93       	push	r25
     d52:	af 93       	push	r26
     d54:	bf 93       	push	r27
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
    // Increment the count by 1
    count++;
     d5e:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <count>
     d62:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <count+0x1>
     d66:	a0 91 e6 01 	lds	r26, 0x01E6	; 0x8001e6 <count+0x2>
     d6a:	b0 91 e7 01 	lds	r27, 0x01E7	; 0x8001e7 <count+0x3>
     d6e:	01 96       	adiw	r24, 0x01	; 1
     d70:	a1 1d       	adc	r26, r1
     d72:	b1 1d       	adc	r27, r1
     d74:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <count>
     d78:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <count+0x1>
     d7c:	a0 93 e6 01 	sts	0x01E6, r26	; 0x8001e6 <count+0x2>
     d80:	b0 93 e7 01 	sts	0x01E7, r27	; 0x8001e7 <count+0x3>
}
     d84:	00 00       	nop
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	bf 91       	pop	r27
     d8c:	af 91       	pop	r26
     d8e:	9f 91       	pop	r25
     d90:	8f 91       	pop	r24
     d92:	0f 90       	pop	r0
     d94:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d98:	0f 90       	pop	r0
     d9a:	1f 90       	pop	r1
     d9c:	18 95       	reti

00000d9e <calc_checksum>:
#define SREG    *((volatile char*) 0x5F)

#define C_SREG 0

unsigned char calc_checksum(unsigned char *data, unsigned int dsize)
{
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	27 97       	sbiw	r28, 0x07	; 7
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	f8 94       	cli
     dac:	de bf       	out	0x3e, r29	; 62
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	cd bf       	out	0x3d, r28	; 61
     db2:	9d 83       	std	Y+5, r25	; 0x05
     db4:	8c 83       	std	Y+4, r24	; 0x04
     db6:	7f 83       	std	Y+7, r23	; 0x07
     db8:	6e 83       	std	Y+6, r22	; 0x06
    //Storing checksum result in unsigned byte
    unsigned char checksum_result;

    for(int i=0;i<dsize;i++)
     dba:	1b 82       	std	Y+3, r1	; 0x03
     dbc:	1a 82       	std	Y+2, r1	; 0x02
     dbe:	1e c0       	rjmp	.+60     	; 0xdfc <calc_checksum+0x5e>
    {
        checksum_result += data[i];
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	9b 81       	ldd	r25, Y+3	; 0x03
     dc4:	2c 81       	ldd	r18, Y+4	; 0x04
     dc6:	3d 81       	ldd	r19, Y+5	; 0x05
     dc8:	82 0f       	add	r24, r18
     dca:	93 1f       	adc	r25, r19
     dcc:	fc 01       	movw	r30, r24
     dce:	80 81       	ld	r24, Z
     dd0:	99 81       	ldd	r25, Y+1	; 0x01
     dd2:	89 0f       	add	r24, r25
     dd4:	89 83       	std	Y+1, r24	; 0x01
        if(SREG & (1<<C_SREG))
     dd6:	8f e5       	ldi	r24, 0x5F	; 95
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	fc 01       	movw	r30, r24
     ddc:	80 81       	ld	r24, Z
     dde:	08 2e       	mov	r0, r24
     de0:	00 0c       	add	r0, r0
     de2:	99 0b       	sbc	r25, r25
     de4:	81 70       	andi	r24, 0x01	; 1
     de6:	99 27       	eor	r25, r25
     de8:	89 2b       	or	r24, r25
     dea:	19 f0       	breq	.+6      	; 0xdf2 <calc_checksum+0x54>
        {
            //carry wraparound
            checksum_result+=1;
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	8f 5f       	subi	r24, 0xFF	; 255
     df0:	89 83       	std	Y+1, r24	; 0x01
unsigned char calc_checksum(unsigned char *data, unsigned int dsize)
{
    //Storing checksum result in unsigned byte
    unsigned char checksum_result;

    for(int i=0;i<dsize;i++)
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	9b 81       	ldd	r25, Y+3	; 0x03
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	9b 83       	std	Y+3, r25	; 0x03
     dfa:	8a 83       	std	Y+2, r24	; 0x02
     dfc:	2a 81       	ldd	r18, Y+2	; 0x02
     dfe:	3b 81       	ldd	r19, Y+3	; 0x03
     e00:	8e 81       	ldd	r24, Y+6	; 0x06
     e02:	9f 81       	ldd	r25, Y+7	; 0x07
     e04:	28 17       	cp	r18, r24
     e06:	39 07       	cpc	r19, r25
     e08:	d8 f2       	brcs	.-74     	; 0xdc0 <calc_checksum+0x22>
            checksum_result+=1;
        }

    }

    return ~checksum_result;
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	80 95       	com	r24

}
     e0e:	27 96       	adiw	r28, 0x07	; 7
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	08 95       	ret

00000e20 <update_checksum>:

void update_checksum(unsigned char *data, unsigned int dsize)
{
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	00 d0       	rcall	.+0      	; 0xe26 <update_checksum+0x6>
     e26:	00 d0       	rcall	.+0      	; 0xe28 <update_checksum+0x8>
     e28:	00 d0       	rcall	.+0      	; 0xe2a <update_checksum+0xa>
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	9c 83       	std	Y+4, r25	; 0x04
     e30:	8b 83       	std	Y+3, r24	; 0x03
     e32:	7e 83       	std	Y+6, r23	; 0x06
     e34:	6d 83       	std	Y+5, r22	; 0x05
    unsigned char checksum_val = calc_checksum(data, dsize);
     e36:	2d 81       	ldd	r18, Y+5	; 0x05
     e38:	3e 81       	ldd	r19, Y+6	; 0x06
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	9c 81       	ldd	r25, Y+4	; 0x04
     e3e:	b9 01       	movw	r22, r18
     e40:	0e 94 cf 06 	call	0xd9e	; 0xd9e <calc_checksum>
     e44:	89 83       	std	Y+1, r24	; 0x01
    unsigned char last_byte = 0b11111111 + (~checksum_val + 0b00000001);
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	80 95       	com	r24
     e4a:	8a 83       	std	Y+2, r24	; 0x02
    data[dsize-1]=last_byte;
     e4c:	8d 81       	ldd	r24, Y+5	; 0x05
     e4e:	9e 81       	ldd	r25, Y+6	; 0x06
     e50:	01 97       	sbiw	r24, 0x01	; 1
     e52:	2b 81       	ldd	r18, Y+3	; 0x03
     e54:	3c 81       	ldd	r19, Y+4	; 0x04
     e56:	82 0f       	add	r24, r18
     e58:	93 1f       	adc	r25, r19
     e5a:	2a 81       	ldd	r18, Y+2	; 0x02
     e5c:	fc 01       	movw	r30, r24
     e5e:	20 83       	st	Z, r18
}
     e60:	00 00       	nop
     e62:	26 96       	adiw	r28, 0x06	; 6
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	f8 94       	cli
     e68:	de bf       	out	0x3e, r29	; 62
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	cd bf       	out	0x3d, r28	; 61
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	08 95       	ret

00000e74 <is_checksum_valid>:


int is_checksum_valid(unsigned char* data, unsigned int dsize)
{
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
     e78:	00 d0       	rcall	.+0      	; 0xe7a <is_checksum_valid+0x6>
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <is_checksum_valid+0x8>
     e7c:	1f 92       	push	r1
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	9b 83       	std	Y+3, r25	; 0x03
     e84:	8a 83       	std	Y+2, r24	; 0x02
     e86:	7d 83       	std	Y+5, r23	; 0x05
     e88:	6c 83       	std	Y+4, r22	; 0x04
    unsigned char checksum_val = calc_checksum(data, dsize);
     e8a:	2c 81       	ldd	r18, Y+4	; 0x04
     e8c:	3d 81       	ldd	r19, Y+5	; 0x05
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	9b 81       	ldd	r25, Y+3	; 0x03
     e92:	b9 01       	movw	r22, r18
     e94:	0e 94 cf 06 	call	0xd9e	; 0xd9e <calc_checksum>
     e98:	89 83       	std	Y+1, r24	; 0x01

    if(checksum_val==0)
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	88 23       	and	r24, r24
     e9e:	19 f4       	brne	.+6      	; 0xea6 <is_checksum_valid+0x32>
        return 1;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <is_checksum_valid+0x36>
    else
        return 0;
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	90 e0       	ldi	r25, 0x00	; 0
}
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	08 95       	ret

00000eba <vpd_init>:
#include <string.h>

vpd_struct vpd_defaults = {"SER", "Manish", "Mani", "abcd1234", 0, "sbsdjb", "USA", 0};

void vpd_init()
{
     eba:	ef 92       	push	r14
     ebc:	ff 92       	push	r15
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	28 97       	sbiw	r28, 0x08	; 8
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	f8 94       	cli
     ed0:	de bf       	out	0x3e, r29	; 62
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	cd bf       	out	0x3d, r28	; 61
        //Initialize data by reading default values
        eeprom_readbuf(base_addr, (unsigned char*)buf, size);
        memcpy((unsigned char*)&vpd, buf, size);

    }
}
     ed6:	0d b7       	in	r16, 0x3d	; 61
     ed8:	1e b7       	in	r17, 0x3e	; 62

vpd_struct vpd_defaults = {"SER", "Manish", "Mani", "abcd1234", 0, "sbsdjb", "USA", 0};

void vpd_init()
{
    while(eeprom_isbusy());  //waits for EEPROM to get out of busy state
     eda:	00 00       	nop
     edc:	0e 94 08 03 	call	0x610	; 0x610 <eeprom_isbusy>
     ee0:	89 2b       	or	r24, r25
     ee2:	e1 f7       	brne	.-8      	; 0xedc <vpd_init+0x22>

    //Read 43 bytes from 0x000
    unsigned int base_addr=0x000;
     ee4:	1a 82       	std	Y+2, r1	; 0x02
     ee6:	19 82       	std	Y+1, r1	; 0x01
    int size = sizeof(vpd_struct);
     ee8:	87 e3       	ldi	r24, 0x37	; 55
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	9c 83       	std	Y+4, r25	; 0x04
     eee:	8b 83       	std	Y+3, r24	; 0x03
    unsigned char buf[size];
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	9c 81       	ldd	r25, Y+4	; 0x04
     ef4:	2d b7       	in	r18, 0x3d	; 61
     ef6:	3e b7       	in	r19, 0x3e	; 62
     ef8:	79 01       	movw	r14, r18
     efa:	9c 01       	movw	r18, r24
     efc:	21 50       	subi	r18, 0x01	; 1
     efe:	31 09       	sbc	r19, r1
     f00:	3e 83       	std	Y+6, r19	; 0x06
     f02:	2d 83       	std	Y+5, r18	; 0x05
     f04:	2d b7       	in	r18, 0x3d	; 61
     f06:	3e b7       	in	r19, 0x3e	; 62
     f08:	28 1b       	sub	r18, r24
     f0a:	39 0b       	sbc	r19, r25
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	3e bf       	out	0x3e, r19	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	2d bf       	out	0x3d, r18	; 61
     f16:	8d b7       	in	r24, 0x3d	; 61
     f18:	9e b7       	in	r25, 0x3e	; 62
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	98 87       	std	Y+8, r25	; 0x08
     f1e:	8f 83       	std	Y+7, r24	; 0x07
    eeprom_readbuf(base_addr, (unsigned char*)buf, size);
     f20:	4b 81       	ldd	r20, Y+3	; 0x03
     f22:	2f 81       	ldd	r18, Y+7	; 0x07
     f24:	38 85       	ldd	r19, Y+8	; 0x08
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	9a 81       	ldd	r25, Y+2	; 0x02
     f2a:	b9 01       	movw	r22, r18
     f2c:	0e 94 85 03 	call	0x70a	; 0x70a <eeprom_readbuf>

    memcpy((unsigned char*)&vpd, (unsigned char*)buf, size);
     f30:	2b 81       	ldd	r18, Y+3	; 0x03
     f32:	3c 81       	ldd	r19, Y+4	; 0x04
     f34:	8f 81       	ldd	r24, Y+7	; 0x07
     f36:	98 85       	ldd	r25, Y+8	; 0x08
     f38:	a9 01       	movw	r20, r18
     f3a:	bc 01       	movw	r22, r24
     f3c:	89 ed       	ldi	r24, 0xD9	; 217
     f3e:	92 e0       	ldi	r25, 0x02	; 2
     f40:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <memcpy>

    if(!vpd_is_data_valid())
     f44:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <vpd_is_data_valid>
     f48:	89 2b       	or	r24, r25
     f4a:	a1 f4       	brne	.+40     	; 0xf74 <vpd_init+0xba>
    {
        vpd_write_defaults();
     f4c:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <vpd_write_defaults>

        //Initialize data by reading default values
        eeprom_readbuf(base_addr, (unsigned char*)buf, size);
     f50:	4b 81       	ldd	r20, Y+3	; 0x03
     f52:	2f 81       	ldd	r18, Y+7	; 0x07
     f54:	38 85       	ldd	r19, Y+8	; 0x08
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	b9 01       	movw	r22, r18
     f5c:	0e 94 85 03 	call	0x70a	; 0x70a <eeprom_readbuf>
        memcpy((unsigned char*)&vpd, buf, size);
     f60:	2b 81       	ldd	r18, Y+3	; 0x03
     f62:	3c 81       	ldd	r19, Y+4	; 0x04
     f64:	8f 81       	ldd	r24, Y+7	; 0x07
     f66:	98 85       	ldd	r25, Y+8	; 0x08
     f68:	a9 01       	movw	r20, r18
     f6a:	bc 01       	movw	r22, r24
     f6c:	89 ed       	ldi	r24, 0xD9	; 217
     f6e:	92 e0       	ldi	r25, 0x02	; 2
     f70:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <memcpy>
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	fe be       	out	0x3e, r15	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	ed be       	out	0x3d, r14	; 61

    }
}
     f7e:	00 00       	nop
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	f8 94       	cli
     f84:	1e bf       	out	0x3e, r17	; 62
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0d bf       	out	0x3d, r16	; 61
     f8a:	28 96       	adiw	r28, 0x08	; 8
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14
     fa2:	08 95       	ret

00000fa4 <vpd_is_data_valid>:

int vpd_is_data_valid()
{
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
    return (vpd.token == "SER") && is_checksum_valid((unsigned char*)&vpd, sizeof(vpd_struct));
     fac:	89 ed       	ldi	r24, 0xD9	; 217
     fae:	92 e0       	ldi	r25, 0x02	; 2
     fb0:	8f 5a       	subi	r24, 0xAF	; 175
     fb2:	91 40       	sbci	r25, 0x01	; 1
     fb4:	59 f4       	brne	.+22     	; 0xfcc <vpd_is_data_valid+0x28>
     fb6:	67 e3       	ldi	r22, 0x37	; 55
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	89 ed       	ldi	r24, 0xD9	; 217
     fbc:	92 e0       	ldi	r25, 0x02	; 2
     fbe:	0e 94 3a 07 	call	0xe74	; 0xe74 <is_checksum_valid>
     fc2:	89 2b       	or	r24, r25
     fc4:	19 f0       	breq	.+6      	; 0xfcc <vpd_is_data_valid+0x28>
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <vpd_is_data_valid+0x2c>
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	90 e0       	ldi	r25, 0x00	; 0
}
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	08 95       	ret

00000fd6 <vpd_write_defaults>:

void vpd_write_defaults()
{
     fd6:	ef 92       	push	r14
     fd8:	ff 92       	push	r15
     fda:	0f 93       	push	r16
     fdc:	1f 93       	push	r17
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	28 97       	sbiw	r28, 0x08	; 8
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
    int size = sizeof(vpd_struct);
    unsigned char buf[size];
    memcpy((unsigned char*)buf, (unsigned char*)&vpd_defaults, size);

    eeprom_writebuf(base_addr, (unsigned char*)buf, size);
}
     ff2:	0d b7       	in	r16, 0x3d	; 61
     ff4:	1e b7       	in	r17, 0x3e	; 62
{
    return (vpd.token == "SER") && is_checksum_valid((unsigned char*)&vpd, sizeof(vpd_struct));
}

void vpd_write_defaults()
{
     ff6:	8d b7       	in	r24, 0x3d	; 61
     ff8:	9e b7       	in	r25, 0x3e	; 62
     ffa:	7c 01       	movw	r14, r24
    update_checksum((unsigned char*)&vpd, sizeof(vpd));
     ffc:	67 e3       	ldi	r22, 0x37	; 55
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	89 ed       	ldi	r24, 0xD9	; 217
    1002:	92 e0       	ldi	r25, 0x02	; 2
    1004:	0e 94 10 07 	call	0xe20	; 0xe20 <update_checksum>

    //Writing defaults to eeprom
    unsigned int base_addr = 0x000;
    1008:	1a 82       	std	Y+2, r1	; 0x02
    100a:	19 82       	std	Y+1, r1	; 0x01
    int size = sizeof(vpd_struct);
    100c:	87 e3       	ldi	r24, 0x37	; 55
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	9c 83       	std	Y+4, r25	; 0x04
    1012:	8b 83       	std	Y+3, r24	; 0x03
    unsigned char buf[size];
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	9c 81       	ldd	r25, Y+4	; 0x04
    1018:	9c 01       	movw	r18, r24
    101a:	21 50       	subi	r18, 0x01	; 1
    101c:	31 09       	sbc	r19, r1
    101e:	3e 83       	std	Y+6, r19	; 0x06
    1020:	2d 83       	std	Y+5, r18	; 0x05
    1022:	2d b7       	in	r18, 0x3d	; 61
    1024:	3e b7       	in	r19, 0x3e	; 62
    1026:	28 1b       	sub	r18, r24
    1028:	39 0b       	sbc	r19, r25
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	3e bf       	out	0x3e, r19	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	2d bf       	out	0x3d, r18	; 61
    1034:	8d b7       	in	r24, 0x3d	; 61
    1036:	9e b7       	in	r25, 0x3e	; 62
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	98 87       	std	Y+8, r25	; 0x08
    103c:	8f 83       	std	Y+7, r24	; 0x07
    memcpy((unsigned char*)buf, (unsigned char*)&vpd_defaults, size);
    103e:	2b 81       	ldd	r18, Y+3	; 0x03
    1040:	3c 81       	ldd	r19, Y+4	; 0x04
    1042:	8f 81       	ldd	r24, Y+7	; 0x07
    1044:	98 85       	ldd	r25, Y+8	; 0x08
    1046:	a9 01       	movw	r20, r18
    1048:	62 e1       	ldi	r22, 0x12	; 18
    104a:	71 e0       	ldi	r23, 0x01	; 1
    104c:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <memcpy>

    eeprom_writebuf(base_addr, (unsigned char*)buf, size);
    1050:	4b 81       	ldd	r20, Y+3	; 0x03
    1052:	2f 81       	ldd	r18, Y+7	; 0x07
    1054:	38 85       	ldd	r19, Y+8	; 0x08
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	9a 81       	ldd	r25, Y+2	; 0x02
    105a:	b9 01       	movw	r22, r18
    105c:	0e 94 17 03 	call	0x62e	; 0x62e <eeprom_writebuf>
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	fe be       	out	0x3e, r15	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	ed be       	out	0x3d, r14	; 61
}
    106a:	00 00       	nop
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	f8 94       	cli
    1070:	1e bf       	out	0x3e, r17	; 62
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	0d bf       	out	0x3d, r16	; 61
    1076:	28 96       	adiw	r28, 0x08	; 8
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	de bf       	out	0x3e, r29	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	cd bf       	out	0x3d, r28	; 61
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	1f 91       	pop	r17
    1088:	0f 91       	pop	r16
    108a:	ff 90       	pop	r15
    108c:	ef 90       	pop	r14
    108e:	08 95       	ret

00001090 <log_is_data_valid>:
    1090:	80 31       	cpi	r24, 0x10	; 16
    1092:	91 05       	cpc	r25, r1
    1094:	04 f5       	brge	.+64     	; 0x10d6 <log_is_data_valid+0x46>
    1096:	27 e0       	ldi	r18, 0x07	; 7
    1098:	28 9f       	mul	r18, r24
    109a:	a0 01       	movw	r20, r0
    109c:	29 9f       	mul	r18, r25
    109e:	50 0d       	add	r21, r0
    10a0:	11 24       	eor	r1, r1
    10a2:	fa 01       	movw	r30, r20
    10a4:	e5 51       	subi	r30, 0x15	; 21
    10a6:	fe 4f       	sbci	r31, 0xFE	; 254
    10a8:	80 81       	ld	r24, Z
    10aa:	81 32       	cpi	r24, 0x21	; 33
    10ac:	a0 f4       	brcc	.+40     	; 0x10d6 <log_is_data_valid+0x46>
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	fa 01       	movw	r30, r20
    10b6:	e8 0f       	add	r30, r24
    10b8:	f9 1f       	adc	r31, r25
    10ba:	e5 51       	subi	r30, 0x15	; 21
    10bc:	fe 4f       	sbci	r31, 0xFE	; 254
    10be:	30 81       	ld	r19, Z
    10c0:	23 0f       	add	r18, r19
    10c2:	01 96       	adiw	r24, 0x01	; 1
    10c4:	87 30       	cpi	r24, 0x07	; 7
    10c6:	91 05       	cpc	r25, r1
    10c8:	a9 f7       	brne	.-22     	; 0x10b4 <log_is_data_valid+0x24>
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	22 23       	and	r18, r18
    10d0:	21 f0       	breq	.+8      	; 0x10da <log_is_data_valid+0x4a>
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	08 95       	ret
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	08 95       	ret

000010dc <log_init>:
    10dc:	6f 92       	push	r6
    10de:	7f 92       	push	r7
    10e0:	8f 92       	push	r8
    10e2:	9f 92       	push	r9
    10e4:	af 92       	push	r10
    10e6:	bf 92       	push	r11
    10e8:	cf 92       	push	r12
    10ea:	df 92       	push	r13
    10ec:	ef 92       	push	r14
    10ee:	ff 92       	push	r15
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	0e 94 08 03 	call	0x610	; 0x610 <eeprom_isbusy>
    10fc:	89 2b       	or	r24, r25
    10fe:	e1 f7       	brne	.-8      	; 0x10f8 <log_init+0x1c>
    1100:	0b e5       	ldi	r16, 0x5B	; 91
    1102:	12 e0       	ldi	r17, 0x02	; 2
    1104:	c0 e8       	ldi	r28, 0x80	; 128
    1106:	d0 e0       	ldi	r29, 0x00	; 0
    1108:	be 01       	movw	r22, r28
    110a:	65 59       	subi	r22, 0x95	; 149
    110c:	7e 4f       	sbci	r23, 0xFE	; 254
    110e:	47 e0       	ldi	r20, 0x07	; 7
    1110:	ce 01       	movw	r24, r28
    1112:	0e 94 85 03 	call	0x70a	; 0x70a <eeprom_readbuf>
    1116:	f8 01       	movw	r30, r16
    1118:	11 92       	st	Z+, r1
    111a:	8f 01       	movw	r16, r30
    111c:	27 96       	adiw	r28, 0x07	; 7
    111e:	c0 3f       	cpi	r28, 0xF0	; 240
    1120:	d1 05       	cpc	r29, r1
    1122:	91 f7       	brne	.-28     	; 0x1108 <log_init+0x2c>
    1124:	4b ee       	ldi	r20, 0xEB	; 235
    1126:	e4 2e       	mov	r14, r20
    1128:	41 e0       	ldi	r20, 0x01	; 1
    112a:	f4 2e       	mov	r15, r20
    112c:	87 01       	movw	r16, r14
    112e:	c0 e0       	ldi	r28, 0x00	; 0
    1130:	d0 e0       	ldi	r29, 0x00	; 0
    1132:	d1 2c       	mov	r13, r1
    1134:	b1 2c       	mov	r11, r1
    1136:	77 24       	eor	r7, r7
    1138:	7a 94       	dec	r7
    113a:	ce 01       	movw	r24, r28
    113c:	0e 94 48 08 	call	0x1090	; 0x1090 <log_is_data_valid>
    1140:	89 2b       	or	r24, r25
    1142:	41 f0       	breq	.+16     	; 0x1154 <log_init+0x78>
    1144:	f8 01       	movw	r30, r16
    1146:	80 81       	ld	r24, Z
    1148:	87 15       	cp	r24, r7
    114a:	20 f4       	brcc	.+8      	; 0x1154 <log_init+0x78>
    114c:	bc 2e       	mov	r11, r28
    114e:	78 2e       	mov	r7, r24
    1150:	dd 24       	eor	r13, r13
    1152:	d3 94       	inc	r13
    1154:	21 96       	adiw	r28, 0x01	; 1
    1156:	09 5f       	subi	r16, 0xF9	; 249
    1158:	1f 4f       	sbci	r17, 0xFF	; 255
    115a:	c0 31       	cpi	r28, 0x10	; 16
    115c:	d1 05       	cpc	r29, r1
    115e:	69 f7       	brne	.-38     	; 0x113a <log_init+0x5e>
    1160:	dd 20       	and	r13, r13
    1162:	09 f4       	brne	.+2      	; 0x1166 <log_init+0x8a>
    1164:	6a c0       	rjmp	.+212    	; 0x123a <log_init+0x15e>
    1166:	b0 92 ea 01 	sts	0x01EA, r11	; 0x8001ea <last_written>
    116a:	70 92 e9 01 	sts	0x01E9, r7	; 0x8001e9 <last_transaction_written>
    116e:	cb 2d       	mov	r28, r11
    1170:	d0 e0       	ldi	r29, 0x00	; 0
    1172:	8e 01       	movw	r16, r28
    1174:	0f 5f       	subi	r16, 0xFF	; 255
    1176:	1f 4f       	sbci	r17, 0xFF	; 255
    1178:	87 2c       	mov	r8, r7
    117a:	2f e0       	ldi	r18, 0x0F	; 15
    117c:	a2 2e       	mov	r10, r18
    117e:	37 e0       	ldi	r19, 0x07	; 7
    1180:	93 2e       	mov	r9, r19
    1182:	68 01       	movw	r12, r16
    1184:	ff e0       	ldi	r31, 0x0F	; 15
    1186:	cf 22       	and	r12, r31
    1188:	dd 24       	eor	r13, r13
    118a:	c6 01       	movw	r24, r12
    118c:	0e 94 48 08 	call	0x1090	; 0x1090 <log_is_data_valid>
    1190:	89 2b       	or	r24, r25
    1192:	61 f4       	brne	.+24     	; 0x11ac <log_init+0xd0>
    1194:	b0 92 e8 01 	sts	0x01E8, r11	; 0x8001e8 <tail>
    1198:	8e 01       	movw	r16, r28
    119a:	01 50       	subi	r16, 0x01	; 1
    119c:	11 09       	sbc	r17, r1
    119e:	60 97       	sbiw	r28, 0x10	; 16
    11a0:	80 e1       	ldi	r24, 0x10	; 16
    11a2:	a8 2e       	mov	r10, r24
    11a4:	b1 2c       	mov	r11, r1
    11a6:	97 e0       	ldi	r25, 0x07	; 7
    11a8:	69 2e       	mov	r6, r25
    11aa:	3a c0       	rjmp	.+116    	; 0x1220 <log_init+0x144>
    11ac:	9c 9c       	mul	r9, r12
    11ae:	f0 01       	movw	r30, r0
    11b0:	9d 9c       	mul	r9, r13
    11b2:	f0 0d       	add	r31, r0
    11b4:	11 24       	eor	r1, r1
    11b6:	e5 51       	subi	r30, 0x15	; 21
    11b8:	fe 4f       	sbci	r31, 0xFE	; 254
    11ba:	40 81       	ld	r20, Z
    11bc:	24 2f       	mov	r18, r20
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	88 2d       	mov	r24, r8
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	01 96       	adiw	r24, 0x01	; 1
    11c6:	8f 71       	andi	r24, 0x1F	; 31
    11c8:	99 27       	eor	r25, r25
    11ca:	28 17       	cp	r18, r24
    11cc:	39 07       	cpc	r19, r25
    11ce:	11 f7       	brne	.-60     	; 0x1194 <log_init+0xb8>
    11d0:	c0 92 ea 01 	sts	0x01EA, r12	; 0x8001ea <last_written>
    11d4:	40 93 e9 01 	sts	0x01E9, r20	; 0x8001e9 <last_transaction_written>
    11d8:	aa 94       	dec	r10
    11da:	0f 5f       	subi	r16, 0xFF	; 255
    11dc:	1f 4f       	sbci	r17, 0xFF	; 255
    11de:	aa 20       	and	r10, r10
    11e0:	c9 f2       	breq	.-78     	; 0x1194 <log_init+0xb8>
    11e2:	84 2e       	mov	r8, r20
    11e4:	ce cf       	rjmp	.-100    	; 0x1182 <log_init+0xa6>
    11e6:	f7 01       	movw	r30, r14
    11e8:	20 81       	ld	r18, Z
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	87 2d       	mov	r24, r7
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	4f 96       	adiw	r24, 0x1f	; 31
    11f2:	8f 71       	andi	r24, 0x1F	; 31
    11f4:	99 27       	eor	r25, r25
    11f6:	28 17       	cp	r18, r24
    11f8:	39 07       	cpc	r19, r25
    11fa:	31 f5       	brne	.+76     	; 0x1248 <log_init+0x16c>
    11fc:	c0 92 e8 01 	sts	0x01E8, r12	; 0x8001e8 <tail>
    1200:	68 9c       	mul	r6, r8
    1202:	f0 01       	movw	r30, r0
    1204:	69 9c       	mul	r6, r9
    1206:	f0 0d       	add	r31, r0
    1208:	11 24       	eor	r1, r1
    120a:	e5 51       	subi	r30, 0x15	; 21
    120c:	fe 4f       	sbci	r31, 0xFE	; 254
    120e:	70 80       	ld	r7, Z
    1210:	01 50       	subi	r16, 0x01	; 1
    1212:	11 09       	sbc	r17, r1
    1214:	f7 e0       	ldi	r31, 0x07	; 7
    1216:	ef 0e       	add	r14, r31
    1218:	f1 1c       	adc	r15, r1
    121a:	0c 17       	cp	r16, r28
    121c:	1d 07       	cpc	r17, r29
    121e:	a1 f0       	breq	.+40     	; 0x1248 <log_init+0x16c>
    1220:	c8 01       	movw	r24, r16
    1222:	b5 01       	movw	r22, r10
    1224:	0e 94 8d 13 	call	0x271a	; 0x271a <__divmodhi4>
    1228:	6c 01       	movw	r12, r24
    122a:	4c 01       	movw	r8, r24
    122c:	99 24       	eor	r9, r9
    122e:	c4 01       	movw	r24, r8
    1230:	0e 94 48 08 	call	0x1090	; 0x1090 <log_is_data_valid>
    1234:	89 2b       	or	r24, r25
    1236:	b9 f6       	brne	.-82     	; 0x11e6 <log_init+0x10a>
    1238:	07 c0       	rjmp	.+14     	; 0x1248 <log_init+0x16c>
    123a:	8f e0       	ldi	r24, 0x0F	; 15
    123c:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <last_written>
    1240:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <last_transaction_written>
    1244:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <tail>
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	1f 91       	pop	r17
    124e:	0f 91       	pop	r16
    1250:	ff 90       	pop	r15
    1252:	ef 90       	pop	r14
    1254:	df 90       	pop	r13
    1256:	cf 90       	pop	r12
    1258:	bf 90       	pop	r11
    125a:	af 90       	pop	r10
    125c:	9f 90       	pop	r9
    125e:	8f 90       	pop	r8
    1260:	7f 90       	pop	r7
    1262:	6f 90       	pop	r6
    1264:	08 95       	ret

00001266 <log_update>:
    1266:	ef 92       	push	r14
    1268:	ff 92       	push	r15
    126a:	1f 93       	push	r17
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	0e 94 08 03 	call	0x610	; 0x610 <eeprom_isbusy>
    1274:	89 2b       	or	r24, r25
    1276:	39 f5       	brne	.+78     	; 0x12c6 <log_update+0x60>
    1278:	eb e5       	ldi	r30, 0x5B	; 91
    127a:	f2 e0       	ldi	r31, 0x02	; 2
    127c:	c0 e0       	ldi	r28, 0x00	; 0
    127e:	d0 e0       	ldi	r29, 0x00	; 0
    1280:	81 91       	ld	r24, Z+
    1282:	88 23       	and	r24, r24
    1284:	e1 f0       	breq	.+56     	; 0x12be <log_update+0x58>
    1286:	17 e0       	ldi	r17, 0x07	; 7
    1288:	1c 9f       	mul	r17, r28
    128a:	c0 01       	movw	r24, r0
    128c:	1d 9f       	mul	r17, r29
    128e:	90 0d       	add	r25, r0
    1290:	11 24       	eor	r1, r1
    1292:	9c 01       	movw	r18, r24
    1294:	25 51       	subi	r18, 0x15	; 21
    1296:	3e 4f       	sbci	r19, 0xFE	; 254
    1298:	79 01       	movw	r14, r18
    129a:	67 e0       	ldi	r22, 0x07	; 7
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	c9 01       	movw	r24, r18
    12a0:	0e 94 10 07 	call	0xe20	; 0xe20 <update_checksum>
    12a4:	c1 9f       	mul	r28, r17
    12a6:	c0 01       	movw	r24, r0
    12a8:	11 24       	eor	r1, r1
    12aa:	47 e0       	ldi	r20, 0x07	; 7
    12ac:	b7 01       	movw	r22, r14
    12ae:	80 58       	subi	r24, 0x80	; 128
    12b0:	9f 4f       	sbci	r25, 0xFF	; 255
    12b2:	0e 94 17 03 	call	0x62e	; 0x62e <eeprom_writebuf>
    12b6:	c5 5a       	subi	r28, 0xA5	; 165
    12b8:	dd 4f       	sbci	r29, 0xFD	; 253
    12ba:	18 82       	st	Y, r1
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <log_update+0x60>
    12be:	21 96       	adiw	r28, 0x01	; 1
    12c0:	c0 31       	cpi	r28, 0x10	; 16
    12c2:	d1 05       	cpc	r29, r1
    12c4:	e9 f6       	brne	.-70     	; 0x1280 <log_update+0x1a>
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	1f 91       	pop	r17
    12cc:	ff 90       	pop	r15
    12ce:	ef 90       	pop	r14
    12d0:	08 95       	ret

000012d2 <log_add_record>:
    12d2:	ef 92       	push	r14
    12d4:	ff 92       	push	r15
    12d6:	0f 93       	push	r16
    12d8:	1f 93       	push	r17
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	e8 2e       	mov	r14, r24
    12e0:	c0 91 ea 01 	lds	r28, 0x01EA	; 0x8001ea <last_written>
    12e4:	d0 e0       	ldi	r29, 0x00	; 0
    12e6:	21 96       	adiw	r28, 0x01	; 1
    12e8:	cf 70       	andi	r28, 0x0F	; 15
    12ea:	dd 27       	eor	r29, r29
    12ec:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <tail>
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	0e 94 48 08 	call	0x1090	; 0x1090 <log_is_data_valid>
    12f6:	f8 2e       	mov	r15, r24
    12f8:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <last_transaction_written>
    12fc:	8f 5f       	subi	r24, 0xFF	; 255
    12fe:	81 32       	cpi	r24, 0x21	; 33
    1300:	18 f4       	brcc	.+6      	; 0x1308 <log_add_record+0x36>
    1302:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <last_transaction_written>
    1306:	02 c0       	rjmp	.+4      	; 0x130c <log_add_record+0x3a>
    1308:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <last_transaction_written>
    130c:	87 e0       	ldi	r24, 0x07	; 7
    130e:	8c 9f       	mul	r24, r28
    1310:	80 01       	movw	r16, r0
    1312:	8d 9f       	mul	r24, r29
    1314:	10 0d       	add	r17, r0
    1316:	11 24       	eor	r1, r1
    1318:	05 51       	subi	r16, 0x15	; 21
    131a:	1e 4f       	sbci	r17, 0xFE	; 254
    131c:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <last_transaction_written>
    1320:	f8 01       	movw	r30, r16
    1322:	80 83       	st	Z, r24
    1324:	0e 94 36 0a 	call	0x146c	; 0x146c <rtc_get_date>
    1328:	f8 01       	movw	r30, r16
    132a:	61 83       	std	Z+1, r22	; 0x01
    132c:	72 83       	std	Z+2, r23	; 0x02
    132e:	83 83       	std	Z+3, r24	; 0x03
    1330:	94 83       	std	Z+4, r25	; 0x04
    1332:	e5 82       	std	Z+5, r14	; 0x05
    1334:	c0 93 ea 01 	sts	0x01EA, r28	; 0x8001ea <last_written>
    1338:	67 e0       	ldi	r22, 0x07	; 7
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	c8 01       	movw	r24, r16
    133e:	0e 94 10 07 	call	0xe20	; 0xe20 <update_checksum>
    1342:	c5 5a       	subi	r28, 0xA5	; 165
    1344:	dd 4f       	sbci	r29, 0xFD	; 253
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	88 83       	st	Y, r24
    134a:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <last_written>
    134e:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <tail>
    1352:	89 13       	cpse	r24, r25
    1354:	08 c0       	rjmp	.+16     	; 0x1366 <log_add_record+0x94>
    1356:	ff 20       	and	r15, r15
    1358:	31 f0       	breq	.+12     	; 0x1366 <log_add_record+0x94>
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	01 96       	adiw	r24, 0x01	; 1
    135e:	8f 70       	andi	r24, 0x0F	; 15
    1360:	99 27       	eor	r25, r25
    1362:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <tail>
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	1f 91       	pop	r17
    136c:	0f 91       	pop	r16
    136e:	ff 90       	pop	r15
    1370:	ef 90       	pop	r14
    1372:	08 95       	ret

00001374 <log_clear>:
    1374:	eb ee       	ldi	r30, 0xEB	; 235
    1376:	f1 e0       	ldi	r31, 0x01	; 1
    1378:	ab e5       	ldi	r26, 0x5B	; 91
    137a:	b2 e0       	ldi	r27, 0x02	; 2
    137c:	8f ef       	ldi	r24, 0xFF	; 255
    137e:	4f ef       	ldi	r20, 0xFF	; 255
    1380:	5f ef       	ldi	r21, 0xFF	; 255
    1382:	ba 01       	movw	r22, r20
    1384:	91 e0       	ldi	r25, 0x01	; 1
    1386:	80 83       	st	Z, r24
    1388:	85 83       	std	Z+5, r24	; 0x05
    138a:	41 83       	std	Z+1, r20	; 0x01
    138c:	52 83       	std	Z+2, r21	; 0x02
    138e:	63 83       	std	Z+3, r22	; 0x03
    1390:	74 83       	std	Z+4, r23	; 0x04
    1392:	9d 93       	st	X+, r25
    1394:	37 96       	adiw	r30, 0x07	; 7
    1396:	22 e0       	ldi	r18, 0x02	; 2
    1398:	eb 35       	cpi	r30, 0x5B	; 91
    139a:	f2 07       	cpc	r31, r18
    139c:	a1 f7       	brne	.-24     	; 0x1386 <log_clear+0x12>
    139e:	8f e0       	ldi	r24, 0x0F	; 15
    13a0:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <last_written>
    13a4:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <tail>
    13a8:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <last_transaction_written>
    13ac:	08 95       	ret

000013ae <log_get_num_entries>:
    13ae:	0f 93       	push	r16
    13b0:	1f 93       	push	r17
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	00 91 e8 01 	lds	r16, 0x01E8	; 0x8001e8 <tail>
    13ba:	c0 2f       	mov	r28, r16
    13bc:	10 e0       	ldi	r17, 0x00	; 0
    13be:	d0 e0       	ldi	r29, 0x00	; 0
    13c0:	ce 01       	movw	r24, r28
    13c2:	0e 94 48 08 	call	0x1090	; 0x1090 <log_is_data_valid>
    13c6:	89 2b       	or	r24, r25
    13c8:	29 f0       	breq	.+10     	; 0x13d4 <log_get_num_entries+0x26>
    13ca:	21 96       	adiw	r28, 0x01	; 1
    13cc:	cf 70       	andi	r28, 0x0F	; 15
    13ce:	1f 5f       	subi	r17, 0xFF	; 255
    13d0:	0c 13       	cpse	r16, r28
    13d2:	f5 cf       	rjmp	.-22     	; 0x13be <log_get_num_entries+0x10>
    13d4:	81 2f       	mov	r24, r17
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	1f 91       	pop	r17
    13dc:	0f 91       	pop	r16
    13de:	08 95       	ret

000013e0 <log_get_record>:
    13e0:	af 92       	push	r10
    13e2:	bf 92       	push	r11
    13e4:	cf 92       	push	r12
    13e6:	df 92       	push	r13
    13e8:	ef 92       	push	r14
    13ea:	ff 92       	push	r15
    13ec:	0f 93       	push	r16
    13ee:	1f 93       	push	r17
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	6b 01       	movw	r12, r22
    13f6:	7c 01       	movw	r14, r24
    13f8:	8a 01       	movw	r16, r20
    13fa:	59 01       	movw	r10, r18
    13fc:	0e 94 d7 09 	call	0x13ae	; 0x13ae <log_get_num_entries>
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	a0 e0       	ldi	r26, 0x00	; 0
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	c8 16       	cp	r12, r24
    1408:	d9 06       	cpc	r13, r25
    140a:	ea 06       	cpc	r14, r26
    140c:	fb 06       	cpc	r15, r27
    140e:	f8 f4       	brcc	.+62     	; 0x144e <log_get_record+0x6e>
    1410:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <tail>
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	c8 0e       	add	r12, r24
    1418:	d9 1e       	adc	r13, r25
    141a:	8f e0       	ldi	r24, 0x0F	; 15
    141c:	c8 22       	and	r12, r24
    141e:	dd 24       	eor	r13, r13
    1420:	87 e0       	ldi	r24, 0x07	; 7
    1422:	8c 9d       	mul	r24, r12
    1424:	f0 01       	movw	r30, r0
    1426:	8d 9d       	mul	r24, r13
    1428:	f0 0d       	add	r31, r0
    142a:	11 24       	eor	r1, r1
    142c:	e5 51       	subi	r30, 0x15	; 21
    142e:	fe 4f       	sbci	r31, 0xFE	; 254
    1430:	81 81       	ldd	r24, Z+1	; 0x01
    1432:	92 81       	ldd	r25, Z+2	; 0x02
    1434:	a3 81       	ldd	r26, Z+3	; 0x03
    1436:	b4 81       	ldd	r27, Z+4	; 0x04
    1438:	e8 01       	movw	r28, r16
    143a:	88 83       	st	Y, r24
    143c:	99 83       	std	Y+1, r25	; 0x01
    143e:	aa 83       	std	Y+2, r26	; 0x02
    1440:	bb 83       	std	Y+3, r27	; 0x03
    1442:	85 81       	ldd	r24, Z+5	; 0x05
    1444:	f5 01       	movw	r30, r10
    1446:	80 83       	st	Z, r24
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <log_get_record+0x72>
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	1f 91       	pop	r17
    1458:	0f 91       	pop	r16
    145a:	ff 90       	pop	r15
    145c:	ef 90       	pop	r14
    145e:	df 90       	pop	r13
    1460:	cf 90       	pop	r12
    1462:	bf 90       	pop	r11
    1464:	af 90       	pop	r10
    1466:	08 95       	ret

00001468 <rtc_init>:
    1468:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <timer1_init>

0000146c <rtc_get_date>:
    146c:	0f 93       	push	r16
    146e:	1f 93       	push	r17
    1470:	0e 94 2c 06 	call	0xc58	; 0xc58 <timer1_get>
    1474:	00 91 10 03 	lds	r16, 0x0310	; 0x800310 <rtc_base>
    1478:	10 91 11 03 	lds	r17, 0x0311	; 0x800311 <rtc_base+0x1>
    147c:	20 91 12 03 	lds	r18, 0x0312	; 0x800312 <rtc_base+0x2>
    1480:	30 91 13 03 	lds	r19, 0x0313	; 0x800313 <rtc_base+0x3>
    1484:	60 0f       	add	r22, r16
    1486:	71 1f       	adc	r23, r17
    1488:	82 1f       	adc	r24, r18
    148a:	93 1f       	adc	r25, r19
    148c:	1f 91       	pop	r17
    148e:	0f 91       	pop	r16
    1490:	08 95       	ret

00001492 <is_leapyear>:
    1492:	9c 01       	movw	r18, r24
    1494:	60 e9       	ldi	r22, 0x90	; 144
    1496:	71 e0       	ldi	r23, 0x01	; 1
    1498:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__udivmodhi4>
    149c:	89 2b       	or	r24, r25
    149e:	79 f0       	breq	.+30     	; 0x14be <is_leapyear+0x2c>
    14a0:	c9 01       	movw	r24, r18
    14a2:	83 70       	andi	r24, 0x03	; 3
    14a4:	99 27       	eor	r25, r25
    14a6:	89 2b       	or	r24, r25
    14a8:	61 f4       	brne	.+24     	; 0x14c2 <is_leapyear+0x30>
    14aa:	c9 01       	movw	r24, r18
    14ac:	64 e6       	ldi	r22, 0x64	; 100
    14ae:	70 e0       	ldi	r23, 0x00	; 0
    14b0:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__udivmodhi4>
    14b4:	9c 01       	movw	r18, r24
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	23 2b       	or	r18, r19
    14ba:	21 f4       	brne	.+8      	; 0x14c4 <is_leapyear+0x32>
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <is_leapyear+0x30>
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	08 95       	ret
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	08 95       	ret

000014c6 <rtc_set_by_datestr>:
    14c6:	2f 92       	push	r2
    14c8:	3f 92       	push	r3
    14ca:	4f 92       	push	r4
    14cc:	5f 92       	push	r5
    14ce:	6f 92       	push	r6
    14d0:	7f 92       	push	r7
    14d2:	8f 92       	push	r8
    14d4:	9f 92       	push	r9
    14d6:	af 92       	push	r10
    14d8:	bf 92       	push	r11
    14da:	cf 92       	push	r12
    14dc:	df 92       	push	r13
    14de:	ef 92       	push	r14
    14e0:	ff 92       	push	r15
    14e2:	0f 93       	push	r16
    14e4:	1f 93       	push	r17
    14e6:	cf 93       	push	r28
    14e8:	df 93       	push	r29
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
    14ee:	67 97       	sbiw	r28, 0x17	; 23
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	f8 94       	cli
    14f4:	de bf       	out	0x3e, r29	; 62
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	cd bf       	out	0x3d, r28	; 61
    14fa:	2c e0       	ldi	r18, 0x0C	; 12
    14fc:	e3 eb       	ldi	r30, 0xB3	; 179
    14fe:	f1 e0       	ldi	r31, 0x01	; 1
    1500:	ae 01       	movw	r20, r28
    1502:	4f 5f       	subi	r20, 0xFF	; 255
    1504:	5f 4f       	sbci	r21, 0xFF	; 255
    1506:	1a 01       	movw	r2, r20
    1508:	da 01       	movw	r26, r20
    150a:	01 90       	ld	r0, Z+
    150c:	0d 92       	st	X+, r0
    150e:	2a 95       	dec	r18
    1510:	e1 f7       	brne	.-8      	; 0x150a <rtc_set_by_datestr+0x44>
    1512:	dc 01       	movw	r26, r24
    1514:	2c 91       	ld	r18, X
    1516:	22 0f       	add	r18, r18
    1518:	20 56       	subi	r18, 0x60	; 96
    151a:	32 2f       	mov	r19, r18
    151c:	33 0f       	add	r19, r19
    151e:	33 0f       	add	r19, r19
    1520:	23 0f       	add	r18, r19
    1522:	11 96       	adiw	r26, 0x01	; 1
    1524:	3c 91       	ld	r19, X
    1526:	11 97       	sbiw	r26, 0x01	; 1
    1528:	31 53       	subi	r19, 0x31	; 49
    152a:	23 0f       	add	r18, r19
    152c:	2d 87       	std	Y+13, r18	; 0x0d
    152e:	13 96       	adiw	r26, 0x03	; 3
    1530:	2c 91       	ld	r18, X
    1532:	13 97       	sbiw	r26, 0x03	; 3
    1534:	02 2e       	mov	r0, r18
    1536:	00 0c       	add	r0, r0
    1538:	33 0b       	sbc	r19, r19
    153a:	20 53       	subi	r18, 0x30	; 48
    153c:	31 09       	sbc	r19, r1
    153e:	6a e0       	ldi	r22, 0x0A	; 10
    1540:	62 9f       	mul	r22, r18
    1542:	a0 01       	movw	r20, r0
    1544:	63 9f       	mul	r22, r19
    1546:	50 0d       	add	r21, r0
    1548:	11 24       	eor	r1, r1
    154a:	14 96       	adiw	r26, 0x04	; 4
    154c:	cc 90       	ld	r12, X
    154e:	0c 2c       	mov	r0, r12
    1550:	00 0c       	add	r0, r0
    1552:	dd 08       	sbc	r13, r13
    1554:	b0 e3       	ldi	r27, 0x30	; 48
    1556:	cb 1a       	sub	r12, r27
    1558:	d1 08       	sbc	r13, r1
    155a:	c4 0e       	add	r12, r20
    155c:	d5 1e       	adc	r13, r21
    155e:	86 01       	movw	r16, r12
    1560:	01 50       	subi	r16, 0x01	; 1
    1562:	11 09       	sbc	r17, r1
    1564:	fc 01       	movw	r30, r24
    1566:	26 81       	ldd	r18, Z+6	; 0x06
    1568:	02 2e       	mov	r0, r18
    156a:	00 0c       	add	r0, r0
    156c:	33 0b       	sbc	r19, r19
    156e:	20 53       	subi	r18, 0x30	; 48
    1570:	31 09       	sbc	r19, r1
    1572:	e8 ee       	ldi	r30, 0xE8	; 232
    1574:	f3 e0       	ldi	r31, 0x03	; 3
    1576:	2e 9f       	mul	r18, r30
    1578:	a0 01       	movw	r20, r0
    157a:	2f 9f       	mul	r18, r31
    157c:	50 0d       	add	r21, r0
    157e:	3e 9f       	mul	r19, r30
    1580:	50 0d       	add	r21, r0
    1582:	11 24       	eor	r1, r1
    1584:	dc 01       	movw	r26, r24
    1586:	17 96       	adiw	r26, 0x07	; 7
    1588:	2c 91       	ld	r18, X
    158a:	17 97       	sbiw	r26, 0x07	; 7
    158c:	02 2e       	mov	r0, r18
    158e:	00 0c       	add	r0, r0
    1590:	33 0b       	sbc	r19, r19
    1592:	20 53       	subi	r18, 0x30	; 48
    1594:	31 09       	sbc	r19, r1
    1596:	74 e6       	ldi	r23, 0x64	; 100
    1598:	72 9f       	mul	r23, r18
    159a:	70 01       	movw	r14, r0
    159c:	73 9f       	mul	r23, r19
    159e:	f0 0c       	add	r15, r0
    15a0:	11 24       	eor	r1, r1
    15a2:	e4 0e       	add	r14, r20
    15a4:	f5 1e       	adc	r15, r21
    15a6:	18 96       	adiw	r26, 0x08	; 8
    15a8:	4c 91       	ld	r20, X
    15aa:	18 97       	sbiw	r26, 0x08	; 8
    15ac:	04 2e       	mov	r0, r20
    15ae:	00 0c       	add	r0, r0
    15b0:	55 0b       	sbc	r21, r21
    15b2:	40 53       	subi	r20, 0x30	; 48
    15b4:	51 09       	sbc	r21, r1
    15b6:	64 9f       	mul	r22, r20
    15b8:	90 01       	movw	r18, r0
    15ba:	65 9f       	mul	r22, r21
    15bc:	30 0d       	add	r19, r0
    15be:	11 24       	eor	r1, r1
    15c0:	e2 0e       	add	r14, r18
    15c2:	f3 1e       	adc	r15, r19
    15c4:	19 96       	adiw	r26, 0x09	; 9
    15c6:	2c 91       	ld	r18, X
    15c8:	19 97       	sbiw	r26, 0x09	; 9
    15ca:	f7 01       	movw	r30, r14
    15cc:	e2 0f       	add	r30, r18
    15ce:	f1 1d       	adc	r31, r1
    15d0:	27 fd       	sbrc	r18, 7
    15d2:	fa 95       	dec	r31
    15d4:	af 01       	movw	r20, r30
    15d6:	58 50       	subi	r21, 0x08	; 8
    15d8:	7a 01       	movw	r14, r20
    15da:	1b 96       	adiw	r26, 0x0b	; 11
    15dc:	2c 91       	ld	r18, X
    15de:	1b 97       	sbiw	r26, 0x0b	; 11
    15e0:	22 0f       	add	r18, r18
    15e2:	20 56       	subi	r18, 0x60	; 96
    15e4:	32 2f       	mov	r19, r18
    15e6:	33 0f       	add	r19, r19
    15e8:	33 0f       	add	r19, r19
    15ea:	23 0f       	add	r18, r19
    15ec:	1c 96       	adiw	r26, 0x0c	; 12
    15ee:	3c 91       	ld	r19, X
    15f0:	1c 97       	sbiw	r26, 0x0c	; 12
    15f2:	30 53       	subi	r19, 0x30	; 48
    15f4:	23 0f       	add	r18, r19
    15f6:	29 8b       	std	Y+17, r18	; 0x11
    15f8:	1e 96       	adiw	r26, 0x0e	; 14
    15fa:	2c 91       	ld	r18, X
    15fc:	1e 97       	sbiw	r26, 0x0e	; 14
    15fe:	22 0f       	add	r18, r18
    1600:	20 56       	subi	r18, 0x60	; 96
    1602:	32 2f       	mov	r19, r18
    1604:	33 0f       	add	r19, r19
    1606:	33 0f       	add	r19, r19
    1608:	23 0f       	add	r18, r19
    160a:	1f 96       	adiw	r26, 0x0f	; 15
    160c:	3c 91       	ld	r19, X
    160e:	1f 97       	sbiw	r26, 0x0f	; 15
    1610:	30 53       	subi	r19, 0x30	; 48
    1612:	23 0f       	add	r18, r19
    1614:	2a 8b       	std	Y+18, r18	; 0x12
    1616:	51 96       	adiw	r26, 0x11	; 17
    1618:	2c 91       	ld	r18, X
    161a:	51 97       	sbiw	r26, 0x11	; 17
    161c:	22 0f       	add	r18, r18
    161e:	20 56       	subi	r18, 0x60	; 96
    1620:	32 2f       	mov	r19, r18
    1622:	33 0f       	add	r19, r19
    1624:	33 0f       	add	r19, r19
    1626:	23 0f       	add	r18, r19
    1628:	52 96       	adiw	r26, 0x12	; 18
    162a:	8c 91       	ld	r24, X
    162c:	80 53       	subi	r24, 0x30	; 48
    162e:	28 0f       	add	r18, r24
    1630:	2b 8b       	std	Y+19, r18	; 0x13
    1632:	ca 01       	movw	r24, r20
    1634:	0e 94 49 0a 	call	0x1492	; 0x1492 <is_leapyear>
    1638:	88 23       	and	r24, r24
    163a:	21 f0       	breq	.+8      	; 0x1644 <rtc_set_by_datestr+0x17e>
    163c:	5d 85       	ldd	r21, Y+13	; 0x0d
    163e:	52 30       	cpi	r21, 0x02	; 2
    1640:	08 f0       	brcs	.+2      	; 0x1644 <rtc_set_by_datestr+0x17e>
    1642:	86 01       	movw	r16, r12
    1644:	c7 01       	movw	r24, r14
    1646:	60 e9       	ldi	r22, 0x90	; 144
    1648:	71 e0       	ldi	r23, 0x01	; 1
    164a:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__udivmodhi4>
    164e:	fc 01       	movw	r30, r24
    1650:	db 01       	movw	r26, r22
    1652:	20 e8       	ldi	r18, 0x80	; 128
    1654:	39 e5       	ldi	r19, 0x59	; 89
    1656:	40 e6       	ldi	r20, 0x60	; 96
    1658:	50 ef       	ldi	r21, 0xF0	; 240
    165a:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__muluhisi3>
    165e:	2b 01       	movw	r4, r22
    1660:	3c 01       	movw	r6, r24
    1662:	cf 01       	movw	r24, r30
    1664:	64 e6       	ldi	r22, 0x64	; 100
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__udivmodhi4>
    166c:	fc 01       	movw	r30, r24
    166e:	db 01       	movw	r26, r22
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	32 ec       	ldi	r19, 0xC2	; 194
    1674:	47 e1       	ldi	r20, 0x17	; 23
    1676:	5c eb       	ldi	r21, 0xBC	; 188
    1678:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__muluhisi3>
    167c:	4b 01       	movw	r8, r22
    167e:	5c 01       	movw	r10, r24
    1680:	df 01       	movw	r26, r30
    1682:	b6 95       	lsr	r27
    1684:	a7 95       	ror	r26
    1686:	b6 95       	lsr	r27
    1688:	a7 95       	ror	r26
    168a:	20 e8       	ldi	r18, 0x80	; 128
    168c:	3f e1       	ldi	r19, 0x1F	; 31
    168e:	46 e8       	ldi	r20, 0x86	; 134
    1690:	57 e0       	ldi	r21, 0x07	; 7
    1692:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__muluhisi3>
    1696:	6b 01       	movw	r12, r22
    1698:	7c 01       	movw	r14, r24
    169a:	df 01       	movw	r26, r30
    169c:	a3 70       	andi	r26, 0x03	; 3
    169e:	bb 27       	eor	r27, r27
    16a0:	20 e8       	ldi	r18, 0x80	; 128
    16a2:	33 e3       	ldi	r19, 0x33	; 51
    16a4:	41 ee       	ldi	r20, 0xE1	; 225
    16a6:	51 e0       	ldi	r21, 0x01	; 1
    16a8:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__muluhisi3>
    16ac:	6c 8b       	std	Y+20, r22	; 0x14
    16ae:	7d 8b       	std	Y+21, r23	; 0x15
    16b0:	8e 8b       	std	Y+22, r24	; 0x16
    16b2:	9f 8b       	std	Y+23, r25	; 0x17
    16b4:	f1 01       	movw	r30, r2
    16b6:	8e 2f       	mov	r24, r30
    16b8:	82 19       	sub	r24, r2
    16ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    16bc:	89 17       	cp	r24, r25
    16be:	20 f4       	brcc	.+8      	; 0x16c8 <rtc_set_by_datestr+0x202>
    16c0:	81 91       	ld	r24, Z+
    16c2:	08 0f       	add	r16, r24
    16c4:	11 1d       	adc	r17, r1
    16c6:	f7 cf       	rjmp	.-18     	; 0x16b6 <rtc_set_by_datestr+0x1f0>
    16c8:	a9 89       	ldd	r26, Y+17	; 0x11
    16ca:	2a 2f       	mov	r18, r26
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	a0 e1       	ldi	r26, 0x10	; 16
    16d0:	be e0       	ldi	r27, 0x0E	; 14
    16d2:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__umulhisi3>
    16d6:	6d 87       	std	Y+13, r22	; 0x0d
    16d8:	7e 87       	std	Y+14, r23	; 0x0e
    16da:	8f 87       	std	Y+15, r24	; 0x0f
    16dc:	98 8b       	std	Y+16, r25	; 0x10
    16de:	ba 89       	ldd	r27, Y+18	; 0x12
    16e0:	2b 2f       	mov	r18, r27
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	ac e3       	ldi	r26, 0x3C	; 60
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__umulhisi3>
    16ec:	2d 85       	ldd	r18, Y+13	; 0x0d
    16ee:	3e 85       	ldd	r19, Y+14	; 0x0e
    16f0:	4f 85       	ldd	r20, Y+15	; 0x0f
    16f2:	58 89       	ldd	r21, Y+16	; 0x10
    16f4:	26 0f       	add	r18, r22
    16f6:	37 1f       	adc	r19, r23
    16f8:	48 1f       	adc	r20, r24
    16fa:	59 1f       	adc	r21, r25
    16fc:	da 01       	movw	r26, r20
    16fe:	c9 01       	movw	r24, r18
    1700:	3b 89       	ldd	r19, Y+19	; 0x13
    1702:	83 0f       	add	r24, r19
    1704:	91 1d       	adc	r25, r1
    1706:	a1 1d       	adc	r26, r1
    1708:	b1 1d       	adc	r27, r1
    170a:	48 0e       	add	r4, r24
    170c:	59 1e       	adc	r5, r25
    170e:	6a 1e       	adc	r6, r26
    1710:	7b 1e       	adc	r7, r27
    1712:	84 0c       	add	r8, r4
    1714:	95 1c       	adc	r9, r5
    1716:	a6 1c       	adc	r10, r6
    1718:	b7 1c       	adc	r11, r7
    171a:	c8 0c       	add	r12, r8
    171c:	d9 1c       	adc	r13, r9
    171e:	ea 1c       	adc	r14, r10
    1720:	fb 1c       	adc	r15, r11
    1722:	8c 89       	ldd	r24, Y+20	; 0x14
    1724:	9d 89       	ldd	r25, Y+21	; 0x15
    1726:	ae 89       	ldd	r26, Y+22	; 0x16
    1728:	bf 89       	ldd	r27, Y+23	; 0x17
    172a:	c8 0e       	add	r12, r24
    172c:	d9 1e       	adc	r13, r25
    172e:	ea 1e       	adc	r14, r26
    1730:	fb 1e       	adc	r15, r27
    1732:	d8 01       	movw	r26, r16
    1734:	20 e8       	ldi	r18, 0x80	; 128
    1736:	31 e5       	ldi	r19, 0x51	; 81
    1738:	41 e0       	ldi	r20, 0x01	; 1
    173a:	50 e0       	ldi	r21, 0x00	; 0
    173c:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__muluhisi3>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	8c 0d       	add	r24, r12
    1746:	9d 1d       	adc	r25, r13
    1748:	ae 1d       	adc	r26, r14
    174a:	bf 1d       	adc	r27, r15
    174c:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <rtc_base>
    1750:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <rtc_base+0x1>
    1754:	a0 93 12 03 	sts	0x0312, r26	; 0x800312 <rtc_base+0x2>
    1758:	b0 93 13 03 	sts	0x0313, r27	; 0x800313 <rtc_base+0x3>
    175c:	67 96       	adiw	r28, 0x17	; 23
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	1f 91       	pop	r17
    176e:	0f 91       	pop	r16
    1770:	ff 90       	pop	r15
    1772:	ef 90       	pop	r14
    1774:	df 90       	pop	r13
    1776:	cf 90       	pop	r12
    1778:	bf 90       	pop	r11
    177a:	af 90       	pop	r10
    177c:	9f 90       	pop	r9
    177e:	8f 90       	pop	r8
    1780:	7f 90       	pop	r7
    1782:	6f 90       	pop	r6
    1784:	5f 90       	pop	r5
    1786:	4f 90       	pop	r4
    1788:	3f 90       	pop	r3
    178a:	2f 90       	pop	r2
    178c:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <timer1_clear>

00001790 <get_month>:
    1790:	ef 92       	push	r14
    1792:	ff 92       	push	r15
    1794:	0f 93       	push	r16
    1796:	1f 93       	push	r17
    1798:	cf 93       	push	r28
    179a:	df 93       	push	r29
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	68 97       	sbiw	r28, 0x18	; 24
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61
    17ac:	7b 01       	movw	r14, r22
    17ae:	2c e0       	ldi	r18, 0x0C	; 12
    17b0:	e3 eb       	ldi	r30, 0xB3	; 179
    17b2:	f1 e0       	ldi	r31, 0x01	; 1
    17b4:	de 01       	movw	r26, r28
    17b6:	1d 96       	adiw	r26, 0x0d	; 13
    17b8:	01 90       	ld	r0, Z+
    17ba:	0d 92       	st	X+, r0
    17bc:	2a 95       	dec	r18
    17be:	e1 f7       	brne	.-8      	; 0x17b8 <get_month+0x28>
    17c0:	8e 01       	movw	r16, r28
    17c2:	0f 5f       	subi	r16, 0xFF	; 255
    17c4:	1f 4f       	sbci	r17, 0xFF	; 255
    17c6:	2c e0       	ldi	r18, 0x0C	; 12
    17c8:	f8 01       	movw	r30, r16
    17ca:	11 92       	st	Z+, r1
    17cc:	2a 95       	dec	r18
    17ce:	e9 f7       	brne	.-6      	; 0x17ca <get_month+0x3a>
    17d0:	0e 94 49 0a 	call	0x1492	; 0x1492 <is_leapyear>
    17d4:	8a 83       	std	Y+2, r24	; 0x02
    17d6:	de 01       	movw	r26, r28
    17d8:	1d 96       	adiw	r26, 0x0d	; 13
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	f7 01       	movw	r30, r14
    17de:	40 81       	ld	r20, Z
    17e0:	51 81       	ldd	r21, Z+1	; 0x01
    17e2:	9d 91       	ld	r25, X+
    17e4:	f8 01       	movw	r30, r16
    17e6:	21 91       	ld	r18, Z+
    17e8:	8f 01       	movw	r16, r30
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	29 0f       	add	r18, r25
    17ee:	31 1d       	adc	r19, r1
    17f0:	42 17       	cp	r20, r18
    17f2:	53 07       	cpc	r21, r19
    17f4:	40 f0       	brcs	.+16     	; 0x1806 <get_month+0x76>
    17f6:	42 1b       	sub	r20, r18
    17f8:	53 0b       	sbc	r21, r19
    17fa:	f7 01       	movw	r30, r14
    17fc:	51 83       	std	Z+1, r21	; 0x01
    17fe:	40 83       	st	Z, r20
    1800:	8f 5f       	subi	r24, 0xFF	; 255
    1802:	8c 30       	cpi	r24, 0x0C	; 12
    1804:	59 f7       	brne	.-42     	; 0x17dc <get_month+0x4c>
    1806:	68 96       	adiw	r28, 0x18	; 24
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	1f 91       	pop	r17
    1818:	0f 91       	pop	r16
    181a:	ff 90       	pop	r15
    181c:	ef 90       	pop	r14
    181e:	08 95       	ret

00001820 <rtc_num2datestr>:
    1820:	4f 92       	push	r4
    1822:	5f 92       	push	r5
    1824:	6f 92       	push	r6
    1826:	7f 92       	push	r7
    1828:	8f 92       	push	r8
    182a:	9f 92       	push	r9
    182c:	af 92       	push	r10
    182e:	bf 92       	push	r11
    1830:	cf 92       	push	r12
    1832:	df 92       	push	r13
    1834:	ef 92       	push	r14
    1836:	ff 92       	push	r15
    1838:	cf 93       	push	r28
    183a:	df 93       	push	r29
    183c:	00 d0       	rcall	.+0      	; 0x183e <rtc_num2datestr+0x1e>
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	2b 01       	movw	r4, r22
    1844:	3c 01       	movw	r6, r24
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	a0 e0       	ldi	r26, 0x00	; 0
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	20 e8       	ldi	r18, 0x80	; 128
    1850:	42 16       	cp	r4, r18
    1852:	29 e5       	ldi	r18, 0x59	; 89
    1854:	52 06       	cpc	r5, r18
    1856:	20 e6       	ldi	r18, 0x60	; 96
    1858:	62 06       	cpc	r6, r18
    185a:	20 ef       	ldi	r18, 0xF0	; 240
    185c:	72 06       	cpc	r7, r18
    185e:	18 f4       	brcc	.+6      	; 0x1866 <rtc_num2datestr+0x46>
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	dc 01       	movw	r26, r24
    1866:	20 e9       	ldi	r18, 0x90	; 144
    1868:	31 e0       	ldi	r19, 0x01	; 1
    186a:	82 9f       	mul	r24, r18
    186c:	50 01       	movw	r10, r0
    186e:	83 9f       	mul	r24, r19
    1870:	b0 0c       	add	r11, r0
    1872:	92 9f       	mul	r25, r18
    1874:	b0 0c       	add	r11, r0
    1876:	11 24       	eor	r1, r1
    1878:	80 e3       	ldi	r24, 0x30	; 48
    187a:	a8 1a       	sub	r10, r24
    187c:	88 ef       	ldi	r24, 0xF8	; 248
    187e:	b8 0a       	sbc	r11, r24
    1880:	c1 2c       	mov	r12, r1
    1882:	d1 2c       	mov	r13, r1
    1884:	76 01       	movw	r14, r12
    1886:	c3 94       	inc	r12
    1888:	20 e8       	ldi	r18, 0x80	; 128
    188a:	42 16       	cp	r4, r18
    188c:	29 e5       	ldi	r18, 0x59	; 89
    188e:	52 06       	cpc	r5, r18
    1890:	20 e6       	ldi	r18, 0x60	; 96
    1892:	62 06       	cpc	r6, r18
    1894:	20 ef       	ldi	r18, 0xF0	; 240
    1896:	72 06       	cpc	r7, r18
    1898:	18 f4       	brcc	.+6      	; 0x18a0 <rtc_num2datestr+0x80>
    189a:	c1 2c       	mov	r12, r1
    189c:	d1 2c       	mov	r13, r1
    189e:	76 01       	movw	r14, r12
    18a0:	a7 01       	movw	r20, r14
    18a2:	96 01       	movw	r18, r12
    18a4:	60 e8       	ldi	r22, 0x80	; 128
    18a6:	79 e5       	ldi	r23, 0x59	; 89
    18a8:	80 e6       	ldi	r24, 0x60	; 96
    18aa:	90 ef       	ldi	r25, 0xF0	; 240
    18ac:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsi3>
    18b0:	73 01       	movw	r14, r6
    18b2:	62 01       	movw	r12, r4
    18b4:	c6 1a       	sub	r12, r22
    18b6:	d7 0a       	sbc	r13, r23
    18b8:	e8 0a       	sbc	r14, r24
    18ba:	f9 0a       	sbc	r15, r25
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	a0 e0       	ldi	r26, 0x00	; 0
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	c1 14       	cp	r12, r1
    18c6:	22 ec       	ldi	r18, 0xC2	; 194
    18c8:	d2 06       	cpc	r13, r18
    18ca:	27 e1       	ldi	r18, 0x17	; 23
    18cc:	e2 06       	cpc	r14, r18
    18ce:	2c eb       	ldi	r18, 0xBC	; 188
    18d0:	f2 06       	cpc	r15, r18
    18d2:	18 f4       	brcc	.+6      	; 0x18da <rtc_num2datestr+0xba>
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	dc 01       	movw	r26, r24
    18da:	44 e6       	ldi	r20, 0x64	; 100
    18dc:	48 9f       	mul	r20, r24
    18de:	90 01       	movw	r18, r0
    18e0:	49 9f       	mul	r20, r25
    18e2:	30 0d       	add	r19, r0
    18e4:	11 24       	eor	r1, r1
    18e6:	a2 0e       	add	r10, r18
    18e8:	b3 1e       	adc	r11, r19
    18ea:	21 e0       	ldi	r18, 0x01	; 1
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	50 e0       	ldi	r21, 0x00	; 0
    18f2:	c1 14       	cp	r12, r1
    18f4:	82 ec       	ldi	r24, 0xC2	; 194
    18f6:	d8 06       	cpc	r13, r24
    18f8:	87 e1       	ldi	r24, 0x17	; 23
    18fa:	e8 06       	cpc	r14, r24
    18fc:	8c eb       	ldi	r24, 0xBC	; 188
    18fe:	f8 06       	cpc	r15, r24
    1900:	18 f4       	brcc	.+6      	; 0x1908 <rtc_num2datestr+0xe8>
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	a9 01       	movw	r20, r18
    1908:	60 e0       	ldi	r22, 0x00	; 0
    190a:	72 ec       	ldi	r23, 0xC2	; 194
    190c:	87 e1       	ldi	r24, 0x17	; 23
    190e:	9c eb       	ldi	r25, 0xBC	; 188
    1910:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsi3>
    1914:	a7 01       	movw	r20, r14
    1916:	96 01       	movw	r18, r12
    1918:	26 1b       	sub	r18, r22
    191a:	37 0b       	sbc	r19, r23
    191c:	48 0b       	sbc	r20, r24
    191e:	59 0b       	sbc	r21, r25
    1920:	ca 01       	movw	r24, r20
    1922:	b9 01       	movw	r22, r18
    1924:	20 e8       	ldi	r18, 0x80	; 128
    1926:	3f e1       	ldi	r19, 0x1F	; 31
    1928:	46 e8       	ldi	r20, 0x86	; 134
    192a:	57 e0       	ldi	r21, 0x07	; 7
    192c:	0e 94 a1 13 	call	0x2742	; 0x2742 <__udivmodsi4>
    1930:	22 0f       	add	r18, r18
    1932:	33 1f       	adc	r19, r19
    1934:	22 0f       	add	r18, r18
    1936:	33 1f       	adc	r19, r19
    1938:	a2 0e       	add	r10, r18
    193a:	b3 1e       	adc	r11, r19
    193c:	20 e8       	ldi	r18, 0x80	; 128
    193e:	33 e3       	ldi	r19, 0x33	; 51
    1940:	41 ee       	ldi	r20, 0xE1	; 225
    1942:	51 e0       	ldi	r21, 0x01	; 1
    1944:	0e 94 a1 13 	call	0x2742	; 0x2742 <__udivmodsi4>
    1948:	75 01       	movw	r14, r10
    194a:	e2 0e       	add	r14, r18
    194c:	f3 1e       	adc	r15, r19
    194e:	20 e8       	ldi	r18, 0x80	; 128
    1950:	31 e5       	ldi	r19, 0x51	; 81
    1952:	41 e0       	ldi	r20, 0x01	; 1
    1954:	50 e0       	ldi	r21, 0x00	; 0
    1956:	0e 94 a1 13 	call	0x2742	; 0x2742 <__udivmodsi4>
    195a:	4b 01       	movw	r8, r22
    195c:	5c 01       	movw	r10, r24
    195e:	3a 83       	std	Y+2, r19	; 0x02
    1960:	29 83       	std	Y+1, r18	; 0x01
    1962:	be 01       	movw	r22, r28
    1964:	6f 5f       	subi	r22, 0xFF	; 255
    1966:	7f 4f       	sbci	r23, 0xFF	; 255
    1968:	c7 01       	movw	r24, r14
    196a:	0e 94 c8 0b 	call	0x1790	; 0x1790 <get_month>
    196e:	d8 2e       	mov	r13, r24
    1970:	c5 01       	movw	r24, r10
    1972:	b4 01       	movw	r22, r8
    1974:	20 e1       	ldi	r18, 0x10	; 16
    1976:	3e e0       	ldi	r19, 0x0E	; 14
    1978:	40 e0       	ldi	r20, 0x00	; 0
    197a:	50 e0       	ldi	r21, 0x00	; 0
    197c:	0e 94 a1 13 	call	0x2742	; 0x2742 <__udivmodsi4>
    1980:	29 01       	movw	r4, r18
    1982:	3a 01       	movw	r6, r20
    1984:	4b 01       	movw	r8, r22
    1986:	5c 01       	movw	r10, r24
    1988:	6f eb       	ldi	r22, 0xBF	; 191
    198a:	71 e0       	ldi	r23, 0x01	; 1
    198c:	89 e4       	ldi	r24, 0x49	; 73
    198e:	91 e0       	ldi	r25, 0x01	; 1
    1990:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <str_cpy>
    1994:	6d 2d       	mov	r22, r13
    1996:	70 e0       	ldi	r23, 0x00	; 0
    1998:	6f 5f       	subi	r22, 0xFF	; 255
    199a:	7f 4f       	sbci	r23, 0xFF	; 255
    199c:	42 e0       	ldi	r20, 0x02	; 2
    199e:	89 e4       	ldi	r24, 0x49	; 73
    19a0:	91 e0       	ldi	r25, 0x01	; 1
    19a2:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <str_writeudec16>
    19a6:	69 81       	ldd	r22, Y+1	; 0x01
    19a8:	7a 81       	ldd	r23, Y+2	; 0x02
    19aa:	6f 5f       	subi	r22, 0xFF	; 255
    19ac:	7f 4f       	sbci	r23, 0xFF	; 255
    19ae:	42 e0       	ldi	r20, 0x02	; 2
    19b0:	8c e4       	ldi	r24, 0x4C	; 76
    19b2:	91 e0       	ldi	r25, 0x01	; 1
    19b4:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <str_writeudec16>
    19b8:	44 e0       	ldi	r20, 0x04	; 4
    19ba:	b7 01       	movw	r22, r14
    19bc:	8f e4       	ldi	r24, 0x4F	; 79
    19be:	91 e0       	ldi	r25, 0x01	; 1
    19c0:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <str_writeudec16>
    19c4:	42 e0       	ldi	r20, 0x02	; 2
    19c6:	b2 01       	movw	r22, r4
    19c8:	84 e5       	ldi	r24, 0x54	; 84
    19ca:	91 e0       	ldi	r25, 0x01	; 1
    19cc:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <str_writeudec16>
    19d0:	c5 01       	movw	r24, r10
    19d2:	b4 01       	movw	r22, r8
    19d4:	2c e3       	ldi	r18, 0x3C	; 60
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	0e 94 a1 13 	call	0x2742	; 0x2742 <__udivmodsi4>
    19e0:	49 01       	movw	r8, r18
    19e2:	5a 01       	movw	r10, r20
    19e4:	6b 01       	movw	r12, r22
    19e6:	7c 01       	movw	r14, r24
    19e8:	42 e0       	ldi	r20, 0x02	; 2
    19ea:	b4 01       	movw	r22, r8
    19ec:	87 e5       	ldi	r24, 0x57	; 87
    19ee:	91 e0       	ldi	r25, 0x01	; 1
    19f0:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <str_writeudec16>
    19f4:	42 e0       	ldi	r20, 0x02	; 2
    19f6:	b6 01       	movw	r22, r12
    19f8:	8a e5       	ldi	r24, 0x5A	; 90
    19fa:	91 e0       	ldi	r25, 0x01	; 1
    19fc:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <str_writeudec16>
    1a00:	89 e4       	ldi	r24, 0x49	; 73
    1a02:	91 e0       	ldi	r25, 0x01	; 1
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	df 91       	pop	r29
    1a0a:	cf 91       	pop	r28
    1a0c:	ff 90       	pop	r15
    1a0e:	ef 90       	pop	r14
    1a10:	df 90       	pop	r13
    1a12:	cf 90       	pop	r12
    1a14:	bf 90       	pop	r11
    1a16:	af 90       	pop	r10
    1a18:	9f 90       	pop	r9
    1a1a:	8f 90       	pop	r8
    1a1c:	7f 90       	pop	r7
    1a1e:	6f 90       	pop	r6
    1a20:	5f 90       	pop	r5
    1a22:	4f 90       	pop	r4
    1a24:	08 95       	ret

00001a26 <rtc_get_date_string>:
    1a26:	0f 93       	push	r16
    1a28:	1f 93       	push	r17
    1a2a:	0e 94 2c 06 	call	0xc58	; 0xc58 <timer1_get>
    1a2e:	00 91 10 03 	lds	r16, 0x0310	; 0x800310 <rtc_base>
    1a32:	10 91 11 03 	lds	r17, 0x0311	; 0x800311 <rtc_base+0x1>
    1a36:	20 91 12 03 	lds	r18, 0x0312	; 0x800312 <rtc_base+0x2>
    1a3a:	30 91 13 03 	lds	r19, 0x0313	; 0x800313 <rtc_base+0x3>
    1a3e:	60 0f       	add	r22, r16
    1a40:	71 1f       	adc	r23, r17
    1a42:	82 1f       	adc	r24, r18
    1a44:	93 1f       	adc	r25, r19
    1a46:	1f 91       	pop	r17
    1a48:	0f 91       	pop	r16
    1a4a:	0c 94 10 0c 	jmp	0x1820	; 0x1820 <rtc_num2datestr>

00001a4e <str_cpy>:
    1a4e:	fc 01       	movw	r30, r24
    1a50:	db 01       	movw	r26, r22
    1a52:	8d 91       	ld	r24, X+
    1a54:	bd 01       	movw	r22, r26
    1a56:	88 23       	and	r24, r24
    1a58:	11 f0       	breq	.+4      	; 0x1a5e <str_cpy+0x10>
    1a5a:	81 93       	st	Z+, r24
    1a5c:	f9 cf       	rjmp	.-14     	; 0x1a50 <str_cpy+0x2>
    1a5e:	10 82       	st	Z, r1
    1a60:	08 95       	ret

00001a62 <str_writeudec16>:
    1a62:	9f 92       	push	r9
    1a64:	af 92       	push	r10
    1a66:	bf 92       	push	r11
    1a68:	cf 92       	push	r12
    1a6a:	df 92       	push	r13
    1a6c:	ef 92       	push	r14
    1a6e:	ff 92       	push	r15
    1a70:	0f 93       	push	r16
    1a72:	1f 93       	push	r17
    1a74:	cf 93       	push	r28
    1a76:	df 93       	push	r29
    1a78:	00 d0       	rcall	.+0      	; 0x1a7a <str_writeudec16+0x18>
    1a7a:	00 d0       	rcall	.+0      	; 0x1a7c <str_writeudec16+0x1a>
    1a7c:	1f 92       	push	r1
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	fc 01       	movw	r30, r24
    1a84:	6b 01       	movw	r12, r22
    1a86:	9e 01       	movw	r18, r28
    1a88:	2f 5f       	subi	r18, 0xFF	; 255
    1a8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8c:	8e 01       	movw	r16, r28
    1a8e:	0a 5f       	subi	r16, 0xFA	; 250
    1a90:	1f 4f       	sbci	r17, 0xFF	; 255
    1a92:	ee 24       	eor	r14, r14
    1a94:	e3 94       	inc	r14
    1a96:	f1 2c       	mov	r15, r1
    1a98:	9a e0       	ldi	r25, 0x0A	; 10
    1a9a:	99 2e       	mov	r9, r25
    1a9c:	9e 9c       	mul	r9, r14
    1a9e:	50 01       	movw	r10, r0
    1aa0:	9f 9c       	mul	r9, r15
    1aa2:	b0 0c       	add	r11, r0
    1aa4:	11 24       	eor	r1, r1
    1aa6:	c6 01       	movw	r24, r12
    1aa8:	b5 01       	movw	r22, r10
    1aaa:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__udivmodhi4>
    1aae:	b7 01       	movw	r22, r14
    1ab0:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__udivmodhi4>
    1ab4:	d9 01       	movw	r26, r18
    1ab6:	6d 93       	st	X+, r22
    1ab8:	9d 01       	movw	r18, r26
    1aba:	c6 1a       	sub	r12, r22
    1abc:	d1 08       	sbc	r13, r1
    1abe:	67 fd       	sbrc	r22, 7
    1ac0:	d3 94       	inc	r13
    1ac2:	75 01       	movw	r14, r10
    1ac4:	a0 17       	cp	r26, r16
    1ac6:	b1 07       	cpc	r27, r17
    1ac8:	49 f7       	brne	.-46     	; 0x1a9c <str_writeudec16+0x3a>
    1aca:	60 e0       	ldi	r22, 0x00	; 0
    1acc:	70 e0       	ldi	r23, 0x00	; 0
    1ace:	84 e0       	ldi	r24, 0x04	; 4
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	50 e0       	ldi	r21, 0x00	; 0
    1ad4:	d8 01       	movw	r26, r16
    1ad6:	2e 91       	ld	r18, -X
    1ad8:	8d 01       	movw	r16, r26
    1ada:	21 11       	cpse	r18, r1
    1adc:	05 c0       	rjmp	.+10     	; 0x1ae8 <str_writeudec16+0x86>
    1ade:	61 15       	cp	r22, r1
    1ae0:	71 05       	cpc	r23, r1
    1ae2:	11 f4       	brne	.+4      	; 0x1ae8 <str_writeudec16+0x86>
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	41 f4       	brne	.+16     	; 0x1af8 <str_writeudec16+0x96>
    1ae8:	84 17       	cp	r24, r20
    1aea:	95 07       	cpc	r25, r21
    1aec:	2c f4       	brge	.+10     	; 0x1af8 <str_writeudec16+0x96>
    1aee:	20 5d       	subi	r18, 0xD0	; 208
    1af0:	21 93       	st	Z+, r18
    1af2:	61 e0       	ldi	r22, 0x01	; 1
    1af4:	70 e0       	ldi	r23, 0x00	; 0
    1af6:	04 c0       	rjmp	.+8      	; 0x1b00 <str_writeudec16+0x9e>
    1af8:	84 17       	cp	r24, r20
    1afa:	95 07       	cpc	r25, r21
    1afc:	0c f4       	brge	.+2      	; 0x1b00 <str_writeudec16+0x9e>
    1afe:	31 96       	adiw	r30, 0x01	; 1
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	40 f7       	brcc	.-48     	; 0x1ad4 <str_writeudec16+0x72>
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	df 91       	pop	r29
    1b10:	cf 91       	pop	r28
    1b12:	1f 91       	pop	r17
    1b14:	0f 91       	pop	r16
    1b16:	ff 90       	pop	r15
    1b18:	ef 90       	pop	r14
    1b1a:	df 90       	pop	r13
    1b1c:	cf 90       	pop	r12
    1b1e:	bf 90       	pop	r11
    1b20:	af 90       	pop	r10
    1b22:	9f 90       	pop	r9
    1b24:	08 95       	ret

00001b26 <uart_init>:
    1b26:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <serial_init>
    1b2a:	78 94       	sei
    1b2c:	08 95       	ret

00001b2e <uart_writechar>:
    1b2e:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <serial_writechar>

00001b32 <uart_writestr>:
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
    1b36:	ec 01       	movw	r28, r24
    1b38:	89 91       	ld	r24, Y+
    1b3a:	88 23       	and	r24, r24
    1b3c:	19 f0       	breq	.+6      	; 0x1b44 <uart_writestr+0x12>
    1b3e:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <serial_writechar>
    1b42:	fa cf       	rjmp	.-12     	; 0x1b38 <uart_writestr+0x6>
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	08 95       	ret

00001b4a <uart_writehex8>:
    1b4a:	cf 93       	push	r28
    1b4c:	c8 2f       	mov	r28, r24
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	24 e0       	ldi	r18, 0x04	; 4
    1b52:	95 95       	asr	r25
    1b54:	87 95       	ror	r24
    1b56:	2a 95       	dec	r18
    1b58:	e1 f7       	brne	.-8      	; 0x1b52 <uart_writehex8+0x8>
    1b5a:	8a 30       	cpi	r24, 0x0A	; 10
    1b5c:	10 f4       	brcc	.+4      	; 0x1b62 <uart_writehex8+0x18>
    1b5e:	80 5d       	subi	r24, 0xD0	; 208
    1b60:	01 c0       	rjmp	.+2      	; 0x1b64 <uart_writehex8+0x1a>
    1b62:	89 5c       	subi	r24, 0xC9	; 201
    1b64:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <serial_writechar>
    1b68:	8c 2f       	mov	r24, r28
    1b6a:	8f 70       	andi	r24, 0x0F	; 15
    1b6c:	8a 30       	cpi	r24, 0x0A	; 10
    1b6e:	10 f0       	brcs	.+4      	; 0x1b74 <uart_writehex8+0x2a>
    1b70:	89 5c       	subi	r24, 0xC9	; 201
    1b72:	01 c0       	rjmp	.+2      	; 0x1b76 <uart_writehex8+0x2c>
    1b74:	80 5d       	subi	r24, 0xD0	; 208
    1b76:	cf 91       	pop	r28
    1b78:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <serial_writechar>

00001b7c <uart_writehex16>:
    1b7c:	cf 93       	push	r28
    1b7e:	c8 2f       	mov	r28, r24
    1b80:	89 2f       	mov	r24, r25
    1b82:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <uart_writehex8>
    1b86:	8c 2f       	mov	r24, r28
    1b88:	cf 91       	pop	r28
    1b8a:	0c 94 a5 0d 	jmp	0x1b4a	; 0x1b4a <uart_writehex8>

00001b8e <uart_writedec32>:
    1b8e:	2f 92       	push	r2
    1b90:	3f 92       	push	r3
    1b92:	4f 92       	push	r4
    1b94:	5f 92       	push	r5
    1b96:	6f 92       	push	r6
    1b98:	7f 92       	push	r7
    1b9a:	8f 92       	push	r8
    1b9c:	9f 92       	push	r9
    1b9e:	af 92       	push	r10
    1ba0:	bf 92       	push	r11
    1ba2:	cf 92       	push	r12
    1ba4:	df 92       	push	r13
    1ba6:	ef 92       	push	r14
    1ba8:	ff 92       	push	r15
    1baa:	0f 93       	push	r16
    1bac:	1f 93       	push	r17
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	63 97       	sbiw	r28, 0x13	; 19
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	f8 94       	cli
    1bbc:	de bf       	out	0x3e, r29	; 62
    1bbe:	0f be       	out	0x3f, r0	; 63
    1bc0:	cd bf       	out	0x3d, r28	; 61
    1bc2:	6b 01       	movw	r12, r22
    1bc4:	7c 01       	movw	r14, r24
    1bc6:	97 ff       	sbrs	r25, 7
    1bc8:	0d c0       	rjmp	.+26     	; 0x1be4 <uart_writedec32+0x56>
    1bca:	f0 94       	com	r15
    1bcc:	e0 94       	com	r14
    1bce:	d0 94       	com	r13
    1bd0:	c0 94       	com	r12
    1bd2:	c1 1c       	adc	r12, r1
    1bd4:	d1 1c       	adc	r13, r1
    1bd6:	e1 1c       	adc	r14, r1
    1bd8:	f1 1c       	adc	r15, r1
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	9b 8b       	std	Y+19, r25	; 0x13
    1be0:	8a 8b       	std	Y+18, r24	; 0x12
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <uart_writedec32+0x5a>
    1be4:	1b 8a       	std	Y+19, r1	; 0x13
    1be6:	1a 8a       	std	Y+18, r1	; 0x12
    1be8:	fe 01       	movw	r30, r28
    1bea:	31 96       	adiw	r30, 0x01	; 1
    1bec:	5f 01       	movw	r10, r30
    1bee:	8e 01       	movw	r16, r28
    1bf0:	05 5f       	subi	r16, 0xF5	; 245
    1bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf4:	f9 8b       	std	Y+17, r31	; 0x11
    1bf6:	e8 8b       	std	Y+16, r30	; 0x10
    1bf8:	66 24       	eor	r6, r6
    1bfa:	63 94       	inc	r6
    1bfc:	71 2c       	mov	r7, r1
    1bfe:	81 2c       	mov	r8, r1
    1c00:	91 2c       	mov	r9, r1
    1c02:	aa e0       	ldi	r26, 0x0A	; 10
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	93 01       	movw	r18, r6
    1c08:	a4 01       	movw	r20, r8
    1c0a:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__muluhisi3>
    1c0e:	1b 01       	movw	r2, r22
    1c10:	2c 01       	movw	r4, r24
    1c12:	c7 01       	movw	r24, r14
    1c14:	b6 01       	movw	r22, r12
    1c16:	91 01       	movw	r18, r2
    1c18:	a2 01       	movw	r20, r4
    1c1a:	0e 94 c3 13 	call	0x2786	; 0x2786 <__divmodsi4>
    1c1e:	93 01       	movw	r18, r6
    1c20:	a4 01       	movw	r20, r8
    1c22:	0e 94 c3 13 	call	0x2786	; 0x2786 <__divmodsi4>
    1c26:	e8 89       	ldd	r30, Y+16	; 0x10
    1c28:	f9 89       	ldd	r31, Y+17	; 0x11
    1c2a:	21 93       	st	Z+, r18
    1c2c:	f9 8b       	std	Y+17, r31	; 0x11
    1c2e:	e8 8b       	std	Y+16, r30	; 0x10
    1c30:	82 2f       	mov	r24, r18
    1c32:	22 0f       	add	r18, r18
    1c34:	99 0b       	sbc	r25, r25
    1c36:	aa 0b       	sbc	r26, r26
    1c38:	bb 0b       	sbc	r27, r27
    1c3a:	c8 1a       	sub	r12, r24
    1c3c:	d9 0a       	sbc	r13, r25
    1c3e:	ea 0a       	sbc	r14, r26
    1c40:	fb 0a       	sbc	r15, r27
    1c42:	31 01       	movw	r6, r2
    1c44:	42 01       	movw	r8, r4
    1c46:	0e 17       	cp	r16, r30
    1c48:	1f 07       	cpc	r17, r31
    1c4a:	d9 f6       	brne	.-74     	; 0x1c02 <uart_writedec32+0x74>
    1c4c:	8a 89       	ldd	r24, Y+18	; 0x12
    1c4e:	9b 89       	ldd	r25, Y+19	; 0x13
    1c50:	89 2b       	or	r24, r25
    1c52:	11 f0       	breq	.+4      	; 0x1c58 <uart_writedec32+0xca>
    1c54:	8d e2       	ldi	r24, 0x2D	; 45
    1c56:	01 c0       	rjmp	.+2      	; 0x1c5a <uart_writedec32+0xcc>
    1c58:	80 e2       	ldi	r24, 0x20	; 32
    1c5a:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <serial_writechar>
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	f8 01       	movw	r30, r16
    1c64:	82 91       	ld	r24, -Z
    1c66:	8f 01       	movw	r16, r30
    1c68:	81 11       	cpse	r24, r1
    1c6a:	06 c0       	rjmp	.+12     	; 0x1c78 <uart_writedec32+0xea>
    1c6c:	21 15       	cp	r18, r1
    1c6e:	31 05       	cpc	r19, r1
    1c70:	19 f4       	brne	.+6      	; 0x1c78 <uart_writedec32+0xea>
    1c72:	ea 15       	cp	r30, r10
    1c74:	fb 05       	cpc	r31, r11
    1c76:	29 f4       	brne	.+10     	; 0x1c82 <uart_writedec32+0xf4>
    1c78:	80 5d       	subi	r24, 0xD0	; 208
    1c7a:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <serial_writechar>
    1c7e:	21 e0       	ldi	r18, 0x01	; 1
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	0a 15       	cp	r16, r10
    1c84:	1b 05       	cpc	r17, r11
    1c86:	69 f7       	brne	.-38     	; 0x1c62 <uart_writedec32+0xd4>
    1c88:	63 96       	adiw	r28, 0x13	; 19
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	f8 94       	cli
    1c8e:	de bf       	out	0x3e, r29	; 62
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	cd bf       	out	0x3d, r28	; 61
    1c94:	df 91       	pop	r29
    1c96:	cf 91       	pop	r28
    1c98:	1f 91       	pop	r17
    1c9a:	0f 91       	pop	r16
    1c9c:	ff 90       	pop	r15
    1c9e:	ef 90       	pop	r14
    1ca0:	df 90       	pop	r13
    1ca2:	cf 90       	pop	r12
    1ca4:	bf 90       	pop	r11
    1ca6:	af 90       	pop	r10
    1ca8:	9f 90       	pop	r9
    1caa:	8f 90       	pop	r8
    1cac:	7f 90       	pop	r7
    1cae:	6f 90       	pop	r6
    1cb0:	5f 90       	pop	r5
    1cb2:	4f 90       	pop	r4
    1cb4:	3f 90       	pop	r3
    1cb6:	2f 90       	pop	r2
    1cb8:	08 95       	ret

00001cba <dump_eeprom>:
    1cba:	2f 92       	push	r2
    1cbc:	3f 92       	push	r3
    1cbe:	4f 92       	push	r4
    1cc0:	5f 92       	push	r5
    1cc2:	6f 92       	push	r6
    1cc4:	7f 92       	push	r7
    1cc6:	8f 92       	push	r8
    1cc8:	9f 92       	push	r9
    1cca:	af 92       	push	r10
    1ccc:	bf 92       	push	r11
    1cce:	cf 92       	push	r12
    1cd0:	df 92       	push	r13
    1cd2:	ef 92       	push	r14
    1cd4:	ff 92       	push	r15
    1cd6:	0f 93       	push	r16
    1cd8:	1f 93       	push	r17
    1cda:	cf 93       	push	r28
    1cdc:	df 93       	push	r29
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
    1ce2:	64 97       	sbiw	r28, 0x14	; 20
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	f8 94       	cli
    1ce8:	de bf       	out	0x3e, r29	; 62
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	cd bf       	out	0x3d, r28	; 61
    1cee:	8c 01       	movw	r16, r24
    1cf0:	61 15       	cp	r22, r1
    1cf2:	71 05       	cpc	r23, r1
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <dump_eeprom+0x3e>
    1cf6:	92 c0       	rjmp	.+292    	; 0x1e1c <dump_eeprom+0x162>
    1cf8:	81 2c       	mov	r8, r1
    1cfa:	91 2c       	mov	r9, r1
    1cfc:	54 01       	movw	r10, r8
    1cfe:	cb 01       	movw	r24, r22
    1d00:	a0 e0       	ldi	r26, 0x00	; 0
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	89 8b       	std	Y+17, r24	; 0x11
    1d06:	9a 8b       	std	Y+18, r25	; 0x12
    1d08:	ab 8b       	std	Y+19, r26	; 0x13
    1d0a:	bc 8b       	std	Y+20, r27	; 0x14
    1d0c:	de 01       	movw	r26, r28
    1d0e:	11 96       	adiw	r26, 0x01	; 1
    1d10:	1d 01       	movw	r2, r26
    1d12:	89 89       	ldd	r24, Y+17	; 0x11
    1d14:	9a 89       	ldd	r25, Y+18	; 0x12
    1d16:	ab 89       	ldd	r26, Y+19	; 0x13
    1d18:	bc 89       	ldd	r27, Y+20	; 0x14
    1d1a:	88 16       	cp	r8, r24
    1d1c:	99 06       	cpc	r9, r25
    1d1e:	aa 06       	cpc	r10, r26
    1d20:	bb 06       	cpc	r11, r27
    1d22:	08 f0       	brcs	.+2      	; 0x1d26 <dump_eeprom+0x6c>
    1d24:	7b c0       	rjmp	.+246    	; 0x1e1c <dump_eeprom+0x162>
    1d26:	81 2f       	mov	r24, r17
    1d28:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <uart_writehex8>
    1d2c:	80 2f       	mov	r24, r16
    1d2e:	80 7f       	andi	r24, 0xF0	; 240
    1d30:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <uart_writehex8>
    1d34:	80 e2       	ldi	r24, 0x20	; 32
    1d36:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <uart_writechar>
    1d3a:	61 01       	movw	r12, r2
    1d3c:	78 01       	movw	r14, r16
    1d3e:	41 2c       	mov	r4, r1
    1d40:	51 2c       	mov	r5, r1
    1d42:	32 01       	movw	r6, r4
    1d44:	41 e0       	ldi	r20, 0x01	; 1
    1d46:	b6 01       	movw	r22, r12
    1d48:	c7 01       	movw	r24, r14
    1d4a:	0e 94 85 03 	call	0x70a	; 0x70a <eeprom_readbuf>
    1d4e:	bf ef       	ldi	r27, 0xFF	; 255
    1d50:	eb 1a       	sub	r14, r27
    1d52:	fb 0a       	sbc	r15, r27
    1d54:	ef ef       	ldi	r30, 0xFF	; 255
    1d56:	4e 1a       	sub	r4, r30
    1d58:	5e 0a       	sbc	r5, r30
    1d5a:	6e 0a       	sbc	r6, r30
    1d5c:	7e 0a       	sbc	r7, r30
    1d5e:	ff ef       	ldi	r31, 0xFF	; 255
    1d60:	8f 1a       	sub	r8, r31
    1d62:	9f 0a       	sbc	r9, r31
    1d64:	af 0a       	sbc	r10, r31
    1d66:	bf 0a       	sbc	r11, r31
    1d68:	89 89       	ldd	r24, Y+17	; 0x11
    1d6a:	9a 89       	ldd	r25, Y+18	; 0x12
    1d6c:	ab 89       	ldd	r26, Y+19	; 0x13
    1d6e:	bc 89       	ldd	r27, Y+20	; 0x14
    1d70:	88 16       	cp	r8, r24
    1d72:	99 06       	cpc	r9, r25
    1d74:	aa 06       	cpc	r10, r26
    1d76:	bb 06       	cpc	r11, r27
    1d78:	50 f0       	brcs	.+20     	; 0x1d8e <dump_eeprom+0xd4>
    1d7a:	68 01       	movw	r12, r16
    1d7c:	9f e0       	ldi	r25, 0x0F	; 15
    1d7e:	c9 22       	and	r12, r25
    1d80:	dd 24       	eor	r13, r13
    1d82:	00 e0       	ldi	r16, 0x00	; 0
    1d84:	10 e0       	ldi	r17, 0x00	; 0
    1d86:	32 01       	movw	r6, r4
    1d88:	6c 0c       	add	r6, r12
    1d8a:	7d 1c       	adc	r7, r13
    1d8c:	09 c0       	rjmp	.+18     	; 0x1da0 <dump_eeprom+0xe6>
    1d8e:	af ef       	ldi	r26, 0xFF	; 255
    1d90:	ca 1a       	sub	r12, r26
    1d92:	da 0a       	sbc	r13, r26
    1d94:	c7 01       	movw	r24, r14
    1d96:	8f 70       	andi	r24, 0x0F	; 15
    1d98:	99 27       	eor	r25, r25
    1d9a:	89 2b       	or	r24, r25
    1d9c:	99 f6       	brne	.-90     	; 0x1d44 <dump_eeprom+0x8a>
    1d9e:	ed cf       	rjmp	.-38     	; 0x1d7a <dump_eeprom+0xc0>
    1da0:	0c 15       	cp	r16, r12
    1da2:	1d 05       	cpc	r17, r13
    1da4:	18 f0       	brcs	.+6      	; 0x1dac <dump_eeprom+0xf2>
    1da6:	06 15       	cp	r16, r6
    1da8:	17 05       	cpc	r17, r7
    1daa:	28 f0       	brcs	.+10     	; 0x1db6 <dump_eeprom+0xfc>
    1dac:	83 ed       	ldi	r24, 0xD3	; 211
    1dae:	91 e0       	ldi	r25, 0x01	; 1
    1db0:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <uart_writestr>
    1db4:	0b c0       	rjmp	.+22     	; 0x1dcc <dump_eeprom+0x112>
    1db6:	f8 01       	movw	r30, r16
    1db8:	ec 19       	sub	r30, r12
    1dba:	fd 09       	sbc	r31, r13
    1dbc:	e2 0d       	add	r30, r2
    1dbe:	f3 1d       	adc	r31, r3
    1dc0:	80 81       	ld	r24, Z
    1dc2:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <uart_writehex8>
    1dc6:	80 e2       	ldi	r24, 0x20	; 32
    1dc8:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <uart_writechar>
    1dcc:	0f 5f       	subi	r16, 0xFF	; 255
    1dce:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd0:	00 31       	cpi	r16, 0x10	; 16
    1dd2:	11 05       	cpc	r17, r1
    1dd4:	29 f7       	brne	.-54     	; 0x1da0 <dump_eeprom+0xe6>
    1dd6:	00 e0       	ldi	r16, 0x00	; 0
    1dd8:	10 e0       	ldi	r17, 0x00	; 0
    1dda:	c0 16       	cp	r12, r16
    1ddc:	d1 06       	cpc	r13, r17
    1dde:	31 f0       	breq	.+12     	; 0x1dec <dump_eeprom+0x132>
    1de0:	80 e2       	ldi	r24, 0x20	; 32
    1de2:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <uart_writechar>
    1de6:	0f 5f       	subi	r16, 0xFF	; 255
    1de8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dea:	f7 cf       	rjmp	.-18     	; 0x1dda <dump_eeprom+0x120>
    1dec:	81 01       	movw	r16, r2
    1dee:	c8 01       	movw	r24, r16
    1df0:	82 19       	sub	r24, r2
    1df2:	93 09       	sbc	r25, r3
    1df4:	84 15       	cp	r24, r4
    1df6:	95 05       	cpc	r25, r5
    1df8:	58 f4       	brcc	.+22     	; 0x1e10 <dump_eeprom+0x156>
    1dfa:	f8 01       	movw	r30, r16
    1dfc:	81 91       	ld	r24, Z+
    1dfe:	8f 01       	movw	r16, r30
    1e00:	90 ee       	ldi	r25, 0xE0	; 224
    1e02:	98 0f       	add	r25, r24
    1e04:	90 36       	cpi	r25, 0x60	; 96
    1e06:	08 f0       	brcs	.+2      	; 0x1e0a <dump_eeprom+0x150>
    1e08:	8e e2       	ldi	r24, 0x2E	; 46
    1e0a:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <uart_writechar>
    1e0e:	ef cf       	rjmp	.-34     	; 0x1dee <dump_eeprom+0x134>
    1e10:	87 ed       	ldi	r24, 0xD7	; 215
    1e12:	91 e0       	ldi	r25, 0x01	; 1
    1e14:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <uart_writestr>
    1e18:	87 01       	movw	r16, r14
    1e1a:	7b cf       	rjmp	.-266    	; 0x1d12 <dump_eeprom+0x58>
    1e1c:	64 96       	adiw	r28, 0x14	; 20
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	de bf       	out	0x3e, r29	; 62
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	cd bf       	out	0x3d, r28	; 61
    1e28:	df 91       	pop	r29
    1e2a:	cf 91       	pop	r28
    1e2c:	1f 91       	pop	r17
    1e2e:	0f 91       	pop	r16
    1e30:	ff 90       	pop	r15
    1e32:	ef 90       	pop	r14
    1e34:	df 90       	pop	r13
    1e36:	cf 90       	pop	r12
    1e38:	bf 90       	pop	r11
    1e3a:	af 90       	pop	r10
    1e3c:	9f 90       	pop	r9
    1e3e:	8f 90       	pop	r8
    1e40:	7f 90       	pop	r7
    1e42:	6f 90       	pop	r6
    1e44:	5f 90       	pop	r5
    1e46:	4f 90       	pop	r4
    1e48:	3f 90       	pop	r3
    1e4a:	2f 90       	pop	r2
    1e4c:	08 95       	ret

00001e4e <serial_init>:
    1e4e:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1e52:	87 e6       	ldi	r24, 0x67	; 103
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1e5a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1e5e:	e1 ec       	ldi	r30, 0xC1	; 193
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	88 e1       	ldi	r24, 0x18	; 24
    1e64:	80 83       	st	Z, r24
    1e66:	86 e0       	ldi	r24, 0x06	; 6
    1e68:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    1e6c:	80 81       	ld	r24, Z
    1e6e:	80 6a       	ori	r24, 0xA0	; 160
    1e70:	80 83       	st	Z, r24
    1e72:	08 95       	ret

00001e74 <__vector_18>:
    1e74:	1f 92       	push	r1
    1e76:	0f 92       	push	r0
    1e78:	0f b6       	in	r0, 0x3f	; 63
    1e7a:	0f 92       	push	r0
    1e7c:	11 24       	eor	r1, r1
    1e7e:	2f 93       	push	r18
    1e80:	8f 93       	push	r24
    1e82:	9f 93       	push	r25
    1e84:	ef 93       	push	r30
    1e86:	ff 93       	push	r31
    1e88:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <rxtail>
    1e8c:	20 91 6e 02 	lds	r18, 0x026E	; 0x80026e <rxhead>
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	82 1b       	sub	r24, r18
    1e94:	91 09       	sbc	r25, r1
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	8f 73       	andi	r24, 0x3F	; 63
    1e9a:	99 27       	eor	r25, r25
    1e9c:	89 2b       	or	r24, r25
    1e9e:	79 f0       	breq	.+30     	; 0x1ebe <__vector_18+0x4a>
    1ea0:	e0 91 6e 02 	lds	r30, 0x026E	; 0x80026e <rxhead>
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1eaa:	ec 5e       	subi	r30, 0xEC	; 236
    1eac:	fc 4f       	sbci	r31, 0xFC	; 252
    1eae:	80 83       	st	Z, r24
    1eb0:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <rxhead>
    1eb4:	8f 5f       	subi	r24, 0xFF	; 255
    1eb6:	8f 73       	andi	r24, 0x3F	; 63
    1eb8:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <rxhead>
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <__vector_18+0x4e>
    1ebe:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1ec2:	ff 91       	pop	r31
    1ec4:	ef 91       	pop	r30
    1ec6:	9f 91       	pop	r25
    1ec8:	8f 91       	pop	r24
    1eca:	2f 91       	pop	r18
    1ecc:	0f 90       	pop	r0
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	0f 90       	pop	r0
    1ed2:	1f 90       	pop	r1
    1ed4:	18 95       	reti

00001ed6 <__vector_19>:
    1ed6:	1f 92       	push	r1
    1ed8:	0f 92       	push	r0
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	0f 92       	push	r0
    1ede:	11 24       	eor	r1, r1
    1ee0:	2f 93       	push	r18
    1ee2:	8f 93       	push	r24
    1ee4:	9f 93       	push	r25
    1ee6:	ef 93       	push	r30
    1ee8:	ff 93       	push	r31
    1eea:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <txhead>
    1eee:	20 91 6b 02 	lds	r18, 0x026B	; 0x80026b <txtail>
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	82 1b       	sub	r24, r18
    1ef6:	91 09       	sbc	r25, r1
    1ef8:	8f 73       	andi	r24, 0x3F	; 63
    1efa:	99 27       	eor	r25, r25
    1efc:	89 2b       	or	r24, r25
    1efe:	79 f0       	breq	.+30     	; 0x1f1e <__vector_19+0x48>
    1f00:	e0 91 6b 02 	lds	r30, 0x026B	; 0x80026b <txtail>
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	ec 5a       	subi	r30, 0xAC	; 172
    1f08:	fc 4f       	sbci	r31, 0xFC	; 252
    1f0a:	80 81       	ld	r24, Z
    1f0c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1f10:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <txtail>
    1f14:	8f 5f       	subi	r24, 0xFF	; 255
    1f16:	8f 73       	andi	r24, 0x3F	; 63
    1f18:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <txtail>
    1f1c:	05 c0       	rjmp	.+10     	; 0x1f28 <__vector_19+0x52>
    1f1e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1f22:	8f 7d       	andi	r24, 0xDF	; 223
    1f24:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1f28:	ff 91       	pop	r31
    1f2a:	ef 91       	pop	r30
    1f2c:	9f 91       	pop	r25
    1f2e:	8f 91       	pop	r24
    1f30:	2f 91       	pop	r18
    1f32:	0f 90       	pop	r0
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	0f 90       	pop	r0
    1f38:	1f 90       	pop	r1
    1f3a:	18 95       	reti

00001f3c <serial_rxchars>:
    1f3c:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <rxhead>
    1f40:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <rxtail>
    1f44:	89 1b       	sub	r24, r25
    1f46:	8f 73       	andi	r24, 0x3F	; 63
    1f48:	08 95       	ret

00001f4a <serial_popchar>:
    1f4a:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <rxhead>
    1f4e:	20 91 6d 02 	lds	r18, 0x026D	; 0x80026d <rxtail>
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	82 1b       	sub	r24, r18
    1f56:	91 09       	sbc	r25, r1
    1f58:	8f 73       	andi	r24, 0x3F	; 63
    1f5a:	99 27       	eor	r25, r25
    1f5c:	89 2b       	or	r24, r25
    1f5e:	69 f0       	breq	.+26     	; 0x1f7a <serial_popchar+0x30>
    1f60:	e0 91 6d 02 	lds	r30, 0x026D	; 0x80026d <rxtail>
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	ec 5e       	subi	r30, 0xEC	; 236
    1f68:	fc 4f       	sbci	r31, 0xFC	; 252
    1f6a:	80 81       	ld	r24, Z
    1f6c:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <rxtail>
    1f70:	9f 5f       	subi	r25, 0xFF	; 255
    1f72:	9f 73       	andi	r25, 0x3F	; 63
    1f74:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <rxtail>
    1f78:	08 95       	ret
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	08 95       	ret

00001f7e <serial_writechar>:
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	07 fe       	sbrs	r0, 7
    1f82:	0e c0       	rjmp	.+28     	; 0x1fa0 <serial_writechar+0x22>
    1f84:	20 91 6b 02 	lds	r18, 0x026B	; 0x80026b <txtail>
    1f88:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <txhead>
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	29 1b       	sub	r18, r25
    1f90:	31 09       	sbc	r19, r1
    1f92:	21 50       	subi	r18, 0x01	; 1
    1f94:	31 09       	sbc	r19, r1
    1f96:	2f 73       	andi	r18, 0x3F	; 63
    1f98:	33 27       	eor	r19, r19
    1f9a:	23 2b       	or	r18, r19
    1f9c:	99 f3       	breq	.-26     	; 0x1f84 <serial_writechar+0x6>
    1f9e:	0d c0       	rjmp	.+26     	; 0x1fba <serial_writechar+0x3c>
    1fa0:	20 91 6b 02 	lds	r18, 0x026B	; 0x80026b <txtail>
    1fa4:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <txhead>
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	29 1b       	sub	r18, r25
    1fac:	31 09       	sbc	r19, r1
    1fae:	21 50       	subi	r18, 0x01	; 1
    1fb0:	31 09       	sbc	r19, r1
    1fb2:	2f 73       	andi	r18, 0x3F	; 63
    1fb4:	33 27       	eor	r19, r19
    1fb6:	23 2b       	or	r18, r19
    1fb8:	61 f0       	breq	.+24     	; 0x1fd2 <serial_writechar+0x54>
    1fba:	e0 91 6c 02 	lds	r30, 0x026C	; 0x80026c <txhead>
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	ec 5a       	subi	r30, 0xAC	; 172
    1fc2:	fc 4f       	sbci	r31, 0xFC	; 252
    1fc4:	80 83       	st	Z, r24
    1fc6:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <txhead>
    1fca:	8f 5f       	subi	r24, 0xFF	; 255
    1fcc:	8f 73       	andi	r24, 0x3F	; 63
    1fce:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <txhead>
    1fd2:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1fd6:	80 62       	ori	r24, 0x20	; 32
    1fd8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1fdc:	08 95       	ret

00001fde <serial_writestr>:
    1fde:	1f 93       	push	r17
    1fe0:	cf 93       	push	r28
    1fe2:	df 93       	push	r29
    1fe4:	ec 01       	movw	r28, r24
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	11 e0       	ldi	r17, 0x01	; 1
    1fea:	18 0f       	add	r17, r24
    1fec:	fe 01       	movw	r30, r28
    1fee:	e8 0f       	add	r30, r24
    1ff0:	f1 1d       	adc	r31, r1
    1ff2:	80 81       	ld	r24, Z
    1ff4:	88 23       	and	r24, r24
    1ff6:	21 f0       	breq	.+8      	; 0x2000 <serial_writestr+0x22>
    1ff8:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <serial_writechar>
    1ffc:	81 2f       	mov	r24, r17
    1ffe:	f4 cf       	rjmp	.-24     	; 0x1fe8 <serial_writestr+0xa>
    2000:	df 91       	pop	r29
    2002:	cf 91       	pop	r28
    2004:	1f 91       	pop	r17
    2006:	08 95       	ret

00002008 <serial_writestr_P>:
    2008:	1f 93       	push	r17
    200a:	cf 93       	push	r28
    200c:	df 93       	push	r29
    200e:	ec 01       	movw	r28, r24
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	11 e0       	ldi	r17, 0x01	; 1
    2014:	18 0f       	add	r17, r24
    2016:	fe 01       	movw	r30, r28
    2018:	e8 0f       	add	r30, r24
    201a:	f1 1d       	adc	r31, r1
    201c:	84 91       	lpm	r24, Z
    201e:	88 23       	and	r24, r24
    2020:	21 f0       	breq	.+8      	; 0x202a <serial_writestr_P+0x22>
    2022:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <serial_writechar>
    2026:	81 2f       	mov	r24, r17
    2028:	f4 cf       	rjmp	.-24     	; 0x2012 <serial_writestr_P+0xa>
    202a:	df 91       	pop	r29
    202c:	cf 91       	pop	r28
    202e:	1f 91       	pop	r17
    2030:	08 95       	ret

00002032 <_Z10delay_initv>:
    2032:	cf 93       	push	r28
    2034:	df 93       	push	r29
    2036:	00 d0       	rcall	.+0      	; 0x2038 <_Z10delay_initv+0x6>
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
    203c:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <_ZL11initialized>
    2040:	88 23       	and	r24, r24
    2042:	89 f5       	brne	.+98     	; 0x20a6 <_Z10delay_initv+0x74>
    2044:	8a ef       	ldi	r24, 0xFA	; 250
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9a 83       	std	Y+2, r25	; 0x02
    204a:	89 83       	std	Y+1, r24	; 0x01
    204c:	87 e4       	ldi	r24, 0x47	; 71
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	29 81       	ldd	r18, Y+1	; 0x01
    2052:	21 50       	subi	r18, 0x01	; 1
    2054:	fc 01       	movw	r30, r24
    2056:	20 83       	st	Z, r18
    2058:	84 e4       	ldi	r24, 0x44	; 68
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	24 e4       	ldi	r18, 0x44	; 68
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	f9 01       	movw	r30, r18
    2062:	20 81       	ld	r18, Z
    2064:	22 60       	ori	r18, 0x02	; 2
    2066:	fc 01       	movw	r30, r24
    2068:	20 83       	st	Z, r18
    206a:	85 e4       	ldi	r24, 0x45	; 69
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	25 e4       	ldi	r18, 0x45	; 69
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	f9 01       	movw	r30, r18
    2074:	20 81       	ld	r18, Z
    2076:	23 60       	ori	r18, 0x03	; 3
    2078:	fc 01       	movw	r30, r24
    207a:	20 83       	st	Z, r18
    207c:	8f e5       	ldi	r24, 0x5F	; 95
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	2f e5       	ldi	r18, 0x5F	; 95
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	f9 01       	movw	r30, r18
    2086:	20 81       	ld	r18, Z
    2088:	20 68       	ori	r18, 0x80	; 128
    208a:	fc 01       	movw	r30, r24
    208c:	20 83       	st	Z, r18
    208e:	8e e6       	ldi	r24, 0x6E	; 110
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	2e e6       	ldi	r18, 0x6E	; 110
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	f9 01       	movw	r30, r18
    2098:	20 81       	ld	r18, Z
    209a:	22 60       	ori	r18, 0x02	; 2
    209c:	fc 01       	movw	r30, r24
    209e:	20 83       	st	Z, r18
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <_ZL11initialized>
    20a6:	00 00       	nop
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	df 91       	pop	r29
    20ae:	cf 91       	pop	r28
    20b0:	08 95       	ret

000020b2 <_Z9delay_getj>:
    20b2:	cf 93       	push	r28
    20b4:	df 93       	push	r29
    20b6:	00 d0       	rcall	.+0      	; 0x20b8 <_Z9delay_getj+0x6>
    20b8:	00 d0       	rcall	.+0      	; 0x20ba <_Z9delay_getj+0x8>
    20ba:	00 d0       	rcall	.+0      	; 0x20bc <_Z9delay_getj+0xa>
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
    20c0:	9e 83       	std	Y+6, r25	; 0x06
    20c2:	8d 83       	std	Y+5, r24	; 0x05
    20c4:	8f e5       	ldi	r24, 0x5F	; 95
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	fc 01       	movw	r30, r24
    20ca:	80 81       	ld	r24, Z
    20cc:	08 2e       	mov	r0, r24
    20ce:	00 0c       	add	r0, r0
    20d0:	99 0b       	sbc	r25, r25
    20d2:	80 78       	andi	r24, 0x80	; 128
    20d4:	99 27       	eor	r25, r25
    20d6:	9a 83       	std	Y+2, r25	; 0x02
    20d8:	89 83       	std	Y+1, r24	; 0x01
    20da:	8f e5       	ldi	r24, 0x5F	; 95
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	2f e5       	ldi	r18, 0x5F	; 95
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	f9 01       	movw	r30, r18
    20e4:	20 81       	ld	r18, Z
    20e6:	2f 77       	andi	r18, 0x7F	; 127
    20e8:	fc 01       	movw	r30, r24
    20ea:	20 83       	st	Z, r18
    20ec:	8d 81       	ldd	r24, Y+5	; 0x05
    20ee:	9e 81       	ldd	r25, Y+6	; 0x06
    20f0:	88 0f       	add	r24, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	81 59       	subi	r24, 0x91	; 145
    20f6:	9d 4f       	sbci	r25, 0xFD	; 253
    20f8:	fc 01       	movw	r30, r24
    20fa:	80 81       	ld	r24, Z
    20fc:	91 81       	ldd	r25, Z+1	; 0x01
    20fe:	9c 83       	std	Y+4, r25	; 0x04
    2100:	8b 83       	std	Y+3, r24	; 0x03
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	9a 81       	ldd	r25, Y+2	; 0x02
    2106:	89 2b       	or	r24, r25
    2108:	49 f0       	breq	.+18     	; 0x211c <_Z9delay_getj+0x6a>
    210a:	8f e5       	ldi	r24, 0x5F	; 95
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	2f e5       	ldi	r18, 0x5F	; 95
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	f9 01       	movw	r30, r18
    2114:	20 81       	ld	r18, Z
    2116:	20 68       	ori	r18, 0x80	; 128
    2118:	fc 01       	movw	r30, r24
    211a:	20 83       	st	Z, r18
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	9c 81       	ldd	r25, Y+4	; 0x04
    2120:	26 96       	adiw	r28, 0x06	; 6
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	f8 94       	cli
    2126:	de bf       	out	0x3e, r29	; 62
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	cd bf       	out	0x3d, r28	; 61
    212c:	df 91       	pop	r29
    212e:	cf 91       	pop	r28
    2130:	08 95       	ret

00002132 <_Z9delay_setjj>:
    2132:	cf 93       	push	r28
    2134:	df 93       	push	r29
    2136:	00 d0       	rcall	.+0      	; 0x2138 <_Z9delay_setjj+0x6>
    2138:	00 d0       	rcall	.+0      	; 0x213a <_Z9delay_setjj+0x8>
    213a:	00 d0       	rcall	.+0      	; 0x213c <_Z9delay_setjj+0xa>
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
    2140:	9c 83       	std	Y+4, r25	; 0x04
    2142:	8b 83       	std	Y+3, r24	; 0x03
    2144:	7e 83       	std	Y+6, r23	; 0x06
    2146:	6d 83       	std	Y+5, r22	; 0x05
    2148:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <_ZL11initialized>
    214c:	88 23       	and	r24, r24
    214e:	11 f4       	brne	.+4      	; 0x2154 <_Z9delay_setjj+0x22>
    2150:	0e 94 19 10 	call	0x2032	; 0x2032 <_Z10delay_initv>
    2154:	8f e5       	ldi	r24, 0x5F	; 95
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	fc 01       	movw	r30, r24
    215a:	80 81       	ld	r24, Z
    215c:	08 2e       	mov	r0, r24
    215e:	00 0c       	add	r0, r0
    2160:	99 0b       	sbc	r25, r25
    2162:	80 78       	andi	r24, 0x80	; 128
    2164:	99 27       	eor	r25, r25
    2166:	9a 83       	std	Y+2, r25	; 0x02
    2168:	89 83       	std	Y+1, r24	; 0x01
    216a:	8f e5       	ldi	r24, 0x5F	; 95
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	2f e5       	ldi	r18, 0x5F	; 95
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	f9 01       	movw	r30, r18
    2174:	20 81       	ld	r18, Z
    2176:	2f 77       	andi	r18, 0x7F	; 127
    2178:	fc 01       	movw	r30, r24
    217a:	20 83       	st	Z, r18
    217c:	8b 81       	ldd	r24, Y+3	; 0x03
    217e:	9c 81       	ldd	r25, Y+4	; 0x04
    2180:	88 0f       	add	r24, r24
    2182:	99 1f       	adc	r25, r25
    2184:	8d 58       	subi	r24, 0x8D	; 141
    2186:	9d 4f       	sbci	r25, 0xFD	; 253
    2188:	2d 81       	ldd	r18, Y+5	; 0x05
    218a:	3e 81       	ldd	r19, Y+6	; 0x06
    218c:	fc 01       	movw	r30, r24
    218e:	31 83       	std	Z+1, r19	; 0x01
    2190:	20 83       	st	Z, r18
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	9c 81       	ldd	r25, Y+4	; 0x04
    2196:	88 0f       	add	r24, r24
    2198:	99 1f       	adc	r25, r25
    219a:	81 59       	subi	r24, 0x91	; 145
    219c:	9d 4f       	sbci	r25, 0xFD	; 253
    219e:	fc 01       	movw	r30, r24
    21a0:	11 82       	std	Z+1, r1	; 0x01
    21a2:	10 82       	st	Z, r1
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	9a 81       	ldd	r25, Y+2	; 0x02
    21a8:	89 2b       	or	r24, r25
    21aa:	49 f0       	breq	.+18     	; 0x21be <_Z9delay_setjj+0x8c>
    21ac:	8f e5       	ldi	r24, 0x5F	; 95
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	2f e5       	ldi	r18, 0x5F	; 95
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	f9 01       	movw	r30, r18
    21b6:	20 81       	ld	r18, Z
    21b8:	20 68       	ori	r18, 0x80	; 128
    21ba:	fc 01       	movw	r30, r24
    21bc:	20 83       	st	Z, r18
    21be:	00 00       	nop
    21c0:	26 96       	adiw	r28, 0x06	; 6
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	de bf       	out	0x3e, r29	; 62
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	df 91       	pop	r29
    21ce:	cf 91       	pop	r28
    21d0:	08 95       	ret

000021d2 <_Z12delay_isdonej>:
    21d2:	cf 93       	push	r28
    21d4:	df 93       	push	r29
    21d6:	00 d0       	rcall	.+0      	; 0x21d8 <_Z12delay_isdonej+0x6>
    21d8:	00 d0       	rcall	.+0      	; 0x21da <_Z12delay_isdonej+0x8>
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
    21de:	9c 83       	std	Y+4, r25	; 0x04
    21e0:	8b 83       	std	Y+3, r24	; 0x03
    21e2:	1a 82       	std	Y+2, r1	; 0x02
    21e4:	19 82       	std	Y+1, r1	; 0x01
    21e6:	8b 81       	ldd	r24, Y+3	; 0x03
    21e8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	81 59       	subi	r24, 0x91	; 145
    21f0:	9d 4f       	sbci	r25, 0xFD	; 253
    21f2:	fc 01       	movw	r30, r24
    21f4:	20 81       	ld	r18, Z
    21f6:	31 81       	ldd	r19, Z+1	; 0x01
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	9c 81       	ldd	r25, Y+4	; 0x04
    21fc:	88 0f       	add	r24, r24
    21fe:	99 1f       	adc	r25, r25
    2200:	8d 58       	subi	r24, 0x8D	; 141
    2202:	9d 4f       	sbci	r25, 0xFD	; 253
    2204:	fc 01       	movw	r30, r24
    2206:	80 81       	ld	r24, Z
    2208:	91 81       	ldd	r25, Z+1	; 0x01
    220a:	41 e0       	ldi	r20, 0x01	; 1
    220c:	28 17       	cp	r18, r24
    220e:	39 07       	cpc	r19, r25
    2210:	09 f0       	breq	.+2      	; 0x2214 <_Z12delay_isdonej+0x42>
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	44 23       	and	r20, r20
    2216:	21 f0       	breq	.+8      	; 0x2220 <_Z12delay_isdonej+0x4e>
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	9a 83       	std	Y+2, r25	; 0x02
    221e:	89 83       	std	Y+1, r24	; 0x01
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	9a 81       	ldd	r25, Y+2	; 0x02
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	df 91       	pop	r29
    222e:	cf 91       	pop	r28
    2230:	08 95       	ret

00002232 <_Z11__vector_14v>:
    2232:	1f 92       	push	r1
    2234:	0f 92       	push	r0
    2236:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    223a:	0f 92       	push	r0
    223c:	11 24       	eor	r1, r1
    223e:	2f 93       	push	r18
    2240:	3f 93       	push	r19
    2242:	4f 93       	push	r20
    2244:	8f 93       	push	r24
    2246:	9f 93       	push	r25
    2248:	ef 93       	push	r30
    224a:	ff 93       	push	r31
    224c:	cf 93       	push	r28
    224e:	df 93       	push	r29
    2250:	00 d0       	rcall	.+0      	; 0x2252 <_Z11__vector_14v+0x20>
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	1a 82       	std	Y+2, r1	; 0x02
    2258:	19 82       	std	Y+1, r1	; 0x01
    225a:	22 e0       	ldi	r18, 0x02	; 2
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	9a 81       	ldd	r25, Y+2	; 0x02
    2262:	82 17       	cp	r24, r18
    2264:	93 07       	cpc	r25, r19
    2266:	a0 f5       	brcc	.+104    	; 0x22d0 <_Z11__vector_14v+0x9e>
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	9a 81       	ldd	r25, Y+2	; 0x02
    226c:	88 0f       	add	r24, r24
    226e:	99 1f       	adc	r25, r25
    2270:	81 59       	subi	r24, 0x91	; 145
    2272:	9d 4f       	sbci	r25, 0xFD	; 253
    2274:	fc 01       	movw	r30, r24
    2276:	20 81       	ld	r18, Z
    2278:	31 81       	ldd	r19, Z+1	; 0x01
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	9a 81       	ldd	r25, Y+2	; 0x02
    227e:	88 0f       	add	r24, r24
    2280:	99 1f       	adc	r25, r25
    2282:	8d 58       	subi	r24, 0x8D	; 141
    2284:	9d 4f       	sbci	r25, 0xFD	; 253
    2286:	fc 01       	movw	r30, r24
    2288:	80 81       	ld	r24, Z
    228a:	91 81       	ldd	r25, Z+1	; 0x01
    228c:	41 e0       	ldi	r20, 0x01	; 1
    228e:	28 17       	cp	r18, r24
    2290:	39 07       	cpc	r19, r25
    2292:	08 f0       	brcs	.+2      	; 0x2296 <_Z11__vector_14v+0x64>
    2294:	40 e0       	ldi	r20, 0x00	; 0
    2296:	44 23       	and	r20, r20
    2298:	a9 f0       	breq	.+42     	; 0x22c4 <_Z11__vector_14v+0x92>
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	9a 81       	ldd	r25, Y+2	; 0x02
    229e:	88 0f       	add	r24, r24
    22a0:	99 1f       	adc	r25, r25
    22a2:	81 59       	subi	r24, 0x91	; 145
    22a4:	9d 4f       	sbci	r25, 0xFD	; 253
    22a6:	fc 01       	movw	r30, r24
    22a8:	80 81       	ld	r24, Z
    22aa:	91 81       	ldd	r25, Z+1	; 0x01
    22ac:	9c 01       	movw	r18, r24
    22ae:	2f 5f       	subi	r18, 0xFF	; 255
    22b0:	3f 4f       	sbci	r19, 0xFF	; 255
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	9a 81       	ldd	r25, Y+2	; 0x02
    22b6:	88 0f       	add	r24, r24
    22b8:	99 1f       	adc	r25, r25
    22ba:	81 59       	subi	r24, 0x91	; 145
    22bc:	9d 4f       	sbci	r25, 0xFD	; 253
    22be:	fc 01       	movw	r30, r24
    22c0:	31 83       	std	Z+1, r19	; 0x01
    22c2:	20 83       	st	Z, r18
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	9a 81       	ldd	r25, Y+2	; 0x02
    22c8:	01 96       	adiw	r24, 0x01	; 1
    22ca:	9a 83       	std	Y+2, r25	; 0x02
    22cc:	89 83       	std	Y+1, r24	; 0x01
    22ce:	c5 cf       	rjmp	.-118    	; 0x225a <_Z11__vector_14v+0x28>
    22d0:	00 00       	nop
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	df 91       	pop	r29
    22d8:	cf 91       	pop	r28
    22da:	ff 91       	pop	r31
    22dc:	ef 91       	pop	r30
    22de:	9f 91       	pop	r25
    22e0:	8f 91       	pop	r24
    22e2:	4f 91       	pop	r20
    22e4:	3f 91       	pop	r19
    22e6:	2f 91       	pop	r18
    22e8:	0f 90       	pop	r0
    22ea:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    22ee:	0f 90       	pop	r0
    22f0:	1f 90       	pop	r1
    22f2:	18 95       	reti

000022f4 <_Z8led_initv>:
    22f4:	cf 93       	push	r28
    22f6:	df 93       	push	r29
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
    22fc:	84 e2       	ldi	r24, 0x24	; 36
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	24 e2       	ldi	r18, 0x24	; 36
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	f9 01       	movw	r30, r18
    2306:	20 81       	ld	r18, Z
    2308:	22 60       	ori	r18, 0x02	; 2
    230a:	fc 01       	movw	r30, r24
    230c:	20 83       	st	Z, r18
    230e:	85 e2       	ldi	r24, 0x25	; 37
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	25 e2       	ldi	r18, 0x25	; 37
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	f9 01       	movw	r30, r18
    2318:	20 81       	ld	r18, Z
    231a:	2d 7f       	andi	r18, 0xFD	; 253
    231c:	fc 01       	movw	r30, r24
    231e:	20 83       	st	Z, r18
    2320:	00 00       	nop
    2322:	df 91       	pop	r29
    2324:	cf 91       	pop	r28
    2326:	08 95       	ret

00002328 <_Z6led_onv>:
    2328:	cf 93       	push	r28
    232a:	df 93       	push	r29
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	85 e2       	ldi	r24, 0x25	; 37
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	25 e2       	ldi	r18, 0x25	; 37
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	f9 01       	movw	r30, r18
    233a:	20 81       	ld	r18, Z
    233c:	22 60       	ori	r18, 0x02	; 2
    233e:	fc 01       	movw	r30, r24
    2340:	20 83       	st	Z, r18
    2342:	00 00       	nop
    2344:	df 91       	pop	r29
    2346:	cf 91       	pop	r28
    2348:	08 95       	ret

0000234a <_Z7led_offv>:
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
    2352:	85 e2       	ldi	r24, 0x25	; 37
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	25 e2       	ldi	r18, 0x25	; 37
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	f9 01       	movw	r30, r18
    235c:	20 81       	ld	r18, Z
    235e:	2d 7f       	andi	r18, 0xFD	; 253
    2360:	fc 01       	movw	r30, r24
    2362:	20 83       	st	Z, r18
    2364:	00 00       	nop
    2366:	df 91       	pop	r29
    2368:	cf 91       	pop	r28
    236a:	08 95       	ret

0000236c <_Z9led_is_onv>:
    236c:	cf 93       	push	r28
    236e:	df 93       	push	r29
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62
    2374:	85 e2       	ldi	r24, 0x25	; 37
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	fc 01       	movw	r30, r24
    237a:	80 81       	ld	r24, Z
    237c:	88 2f       	mov	r24, r24
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	82 70       	andi	r24, 0x02	; 2
    2382:	99 27       	eor	r25, r25
    2384:	89 2b       	or	r24, r25
    2386:	19 f0       	breq	.+6      	; 0x238e <_Z9led_is_onv+0x22>
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	02 c0       	rjmp	.+4      	; 0x2392 <_Z9led_is_onv+0x26>
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	df 91       	pop	r29
    2394:	cf 91       	pop	r28
    2396:	08 95       	ret

00002398 <_Z13led_set_blinkPc>:
    2398:	cf 93       	push	r28
    239a:	df 93       	push	r29
    239c:	00 d0       	rcall	.+0      	; 0x239e <_Z13led_set_blinkPc+0x6>
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
    23a2:	9a 83       	std	Y+2, r25	; 0x02
    23a4:	89 83       	std	Y+1, r24	; 0x01
    23a6:	89 81       	ldd	r24, Y+1	; 0x01
    23a8:	9a 81       	ldd	r25, Y+2	; 0x02
    23aa:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <Blink_msg+0x1>
    23ae:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <Blink_msg>
    23b2:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <Blink_pos+0x1>
    23b6:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <Blink_pos>
    23ba:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <blink_state+0x1>
    23be:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <blink_state>
    23c2:	60 e0       	ldi	r22, 0x00	; 0
    23c4:	70 e0       	ldi	r23, 0x00	; 0
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	0e 94 99 10 	call	0x2132	; 0x2132 <_Z9delay_setjj>
    23ce:	0e 94 a5 11 	call	0x234a	; 0x234a <_Z7led_offv>
    23d2:	00 00       	nop
    23d4:	0f 90       	pop	r0
    23d6:	0f 90       	pop	r0
    23d8:	df 91       	pop	r29
    23da:	cf 91       	pop	r28
    23dc:	08 95       	ret

000023de <_Z10led_updatev>:
    23de:	cf 93       	push	r28
    23e0:	df 93       	push	r29
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <blink_state>
    23ea:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <blink_state+0x1>
    23ee:	00 97       	sbiw	r24, 0x00	; 0
    23f0:	21 f0       	breq	.+8      	; 0x23fa <_Z10led_updatev+0x1c>
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	09 f4       	brne	.+2      	; 0x23f8 <_Z10led_updatev+0x1a>
    23f6:	55 c0       	rjmp	.+170    	; 0x24a2 <_Z10led_updatev+0xc4>
    23f8:	89 c0       	rjmp	.+274    	; 0x250c <_Z10led_updatev+0x12e>
    23fa:	80 e0       	ldi	r24, 0x00	; 0
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <_Z12delay_isdonej>
    2402:	21 e0       	ldi	r18, 0x01	; 1
    2404:	89 2b       	or	r24, r25
    2406:	09 f4       	brne	.+2      	; 0x240a <_Z10led_updatev+0x2c>
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	22 23       	and	r18, r18
    240c:	09 f4       	brne	.+2      	; 0x2410 <_Z10led_updatev+0x32>
    240e:	7b c0       	rjmp	.+246    	; 0x2506 <_Z10led_updatev+0x128>
    2410:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <Blink_msg>
    2414:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <Blink_msg+0x1>
    2418:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <Blink_pos>
    241c:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <Blink_pos+0x1>
    2420:	82 0f       	add	r24, r18
    2422:	93 1f       	adc	r25, r19
    2424:	fc 01       	movw	r30, r24
    2426:	80 81       	ld	r24, Z
    2428:	08 2e       	mov	r0, r24
    242a:	00 0c       	add	r0, r0
    242c:	99 0b       	sbc	r25, r25
    242e:	8d 32       	cpi	r24, 0x2D	; 45
    2430:	91 05       	cpc	r25, r1
    2432:	31 f0       	breq	.+12     	; 0x2440 <_Z10led_updatev+0x62>
    2434:	8e 32       	cpi	r24, 0x2E	; 46
    2436:	91 05       	cpc	r25, r1
    2438:	91 f0       	breq	.+36     	; 0x245e <_Z10led_updatev+0x80>
    243a:	80 97       	sbiw	r24, 0x20	; 32
    243c:	f9 f0       	breq	.+62     	; 0x247c <_Z10led_updatev+0x9e>
    243e:	27 c0       	rjmp	.+78     	; 0x248e <_Z10led_updatev+0xb0>
    2440:	0e 94 94 11 	call	0x2328	; 0x2328 <_Z6led_onv>
    2444:	6e ee       	ldi	r22, 0xEE	; 238
    2446:	72 e0       	ldi	r23, 0x02	; 2
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	0e 94 99 10 	call	0x2132	; 0x2132 <_Z9delay_setjj>
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <blink_state+0x1>
    2458:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <blink_state>
    245c:	21 c0       	rjmp	.+66     	; 0x24a0 <_Z10led_updatev+0xc2>
    245e:	0e 94 94 11 	call	0x2328	; 0x2328 <_Z6led_onv>
    2462:	6a ef       	ldi	r22, 0xFA	; 250
    2464:	70 e0       	ldi	r23, 0x00	; 0
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	0e 94 99 10 	call	0x2132	; 0x2132 <_Z9delay_setjj>
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <blink_state+0x1>
    2476:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <blink_state>
    247a:	12 c0       	rjmp	.+36     	; 0x24a0 <_Z10led_updatev+0xc2>
    247c:	0e 94 a5 11 	call	0x234a	; 0x234a <_Z7led_offv>
    2480:	68 ee       	ldi	r22, 0xE8	; 232
    2482:	73 e0       	ldi	r23, 0x03	; 3
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	0e 94 99 10 	call	0x2132	; 0x2132 <_Z9delay_setjj>
    248c:	09 c0       	rjmp	.+18     	; 0x24a0 <_Z10led_updatev+0xc2>
    248e:	0e 94 a5 11 	call	0x234a	; 0x234a <_Z7led_offv>
    2492:	60 e0       	ldi	r22, 0x00	; 0
    2494:	70 e0       	ldi	r23, 0x00	; 0
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	0e 94 99 10 	call	0x2132	; 0x2132 <_Z9delay_setjj>
    249e:	00 00       	nop
    24a0:	32 c0       	rjmp	.+100    	; 0x2506 <_Z10led_updatev+0x128>
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <_Z12delay_isdonej>
    24aa:	21 e0       	ldi	r18, 0x01	; 1
    24ac:	89 2b       	or	r24, r25
    24ae:	09 f4       	brne	.+2      	; 0x24b2 <_Z10led_updatev+0xd4>
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	22 23       	and	r18, r18
    24b4:	51 f1       	breq	.+84     	; 0x250a <_Z10led_updatev+0x12c>
    24b6:	0e 94 a5 11 	call	0x234a	; 0x234a <_Z7led_offv>
    24ba:	64 e6       	ldi	r22, 0x64	; 100
    24bc:	70 e0       	ldi	r23, 0x00	; 0
    24be:	80 e0       	ldi	r24, 0x00	; 0
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	0e 94 99 10 	call	0x2132	; 0x2132 <_Z9delay_setjj>
    24c6:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <Blink_pos>
    24ca:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <Blink_pos+0x1>
    24ce:	01 96       	adiw	r24, 0x01	; 1
    24d0:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <Blink_pos+0x1>
    24d4:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <Blink_pos>
    24d8:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Blink_msg>
    24dc:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <Blink_msg+0x1>
    24e0:	0e 94 05 14 	call	0x280a	; 0x280a <strlen>
    24e4:	9c 01       	movw	r18, r24
    24e6:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <Blink_pos>
    24ea:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <Blink_pos+0x1>
    24ee:	82 17       	cp	r24, r18
    24f0:	93 07       	cpc	r25, r19
    24f2:	20 f0       	brcs	.+8      	; 0x24fc <_Z10led_updatev+0x11e>
    24f4:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <Blink_pos+0x1>
    24f8:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <Blink_pos>
    24fc:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <blink_state+0x1>
    2500:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <blink_state>
    2504:	02 c0       	rjmp	.+4      	; 0x250a <_Z10led_updatev+0x12c>
    2506:	00 00       	nop
    2508:	01 c0       	rjmp	.+2      	; 0x250c <_Z10led_updatev+0x12e>
    250a:	00 00       	nop
    250c:	00 00       	nop
    250e:	df 91       	pop	r29
    2510:	cf 91       	pop	r28
    2512:	08 95       	ret

00002514 <_Z11timer1_initv>:
    2514:	cf 93       	push	r28
    2516:	df 93       	push	r29
    2518:	00 d0       	rcall	.+0      	; 0x251a <_Z11timer1_initv+0x6>
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	89 e0       	ldi	r24, 0x09	; 9
    2520:	9d e3       	ldi	r25, 0x3D	; 61
    2522:	9a 83       	std	Y+2, r25	; 0x02
    2524:	89 83       	std	Y+1, r24	; 0x01
    2526:	81 e8       	ldi	r24, 0x81	; 129
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	21 e8       	ldi	r18, 0x81	; 129
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	f9 01       	movw	r30, r18
    2530:	20 81       	ld	r18, Z
    2532:	28 60       	ori	r18, 0x08	; 8
    2534:	fc 01       	movw	r30, r24
    2536:	20 83       	st	Z, r18
    2538:	81 e8       	ldi	r24, 0x81	; 129
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	21 e8       	ldi	r18, 0x81	; 129
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	f9 01       	movw	r30, r18
    2542:	20 81       	ld	r18, Z
    2544:	25 60       	ori	r18, 0x05	; 5
    2546:	fc 01       	movw	r30, r24
    2548:	20 83       	st	Z, r18
    254a:	88 e8       	ldi	r24, 0x88	; 136
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	29 81       	ldd	r18, Y+1	; 0x01
    2550:	3a 81       	ldd	r19, Y+2	; 0x02
    2552:	21 50       	subi	r18, 0x01	; 1
    2554:	31 09       	sbc	r19, r1
    2556:	fc 01       	movw	r30, r24
    2558:	31 83       	std	Z+1, r19	; 0x01
    255a:	20 83       	st	Z, r18
    255c:	8f e6       	ldi	r24, 0x6F	; 111
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	2f e6       	ldi	r18, 0x6F	; 111
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	f9 01       	movw	r30, r18
    2566:	20 81       	ld	r18, Z
    2568:	22 60       	ori	r18, 0x02	; 2
    256a:	fc 01       	movw	r30, r24
    256c:	20 83       	st	Z, r18
    256e:	8f e5       	ldi	r24, 0x5F	; 95
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	2f e5       	ldi	r18, 0x5F	; 95
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	f9 01       	movw	r30, r18
    2578:	20 81       	ld	r18, Z
    257a:	20 68       	ori	r18, 0x80	; 128
    257c:	fc 01       	movw	r30, r24
    257e:	20 83       	st	Z, r18
    2580:	00 00       	nop
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	df 91       	pop	r29
    2588:	cf 91       	pop	r28
    258a:	08 95       	ret

0000258c <_Z10timer1_getv>:
    258c:	cf 93       	push	r28
    258e:	df 93       	push	r29
    2590:	00 d0       	rcall	.+0      	; 0x2592 <_Z10timer1_getv+0x6>
    2592:	00 d0       	rcall	.+0      	; 0x2594 <_Z10timer1_getv+0x8>
    2594:	00 d0       	rcall	.+0      	; 0x2596 <_Z10timer1_getv+0xa>
    2596:	cd b7       	in	r28, 0x3d	; 61
    2598:	de b7       	in	r29, 0x3e	; 62
    259a:	8f e5       	ldi	r24, 0x5F	; 95
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	fc 01       	movw	r30, r24
    25a0:	80 81       	ld	r24, Z
    25a2:	88 2f       	mov	r24, r24
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	80 78       	andi	r24, 0x80	; 128
    25a8:	99 27       	eor	r25, r25
    25aa:	9a 83       	std	Y+2, r25	; 0x02
    25ac:	89 83       	std	Y+1, r24	; 0x01
    25ae:	8f e5       	ldi	r24, 0x5F	; 95
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	2f e5       	ldi	r18, 0x5F	; 95
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	f9 01       	movw	r30, r18
    25b8:	20 81       	ld	r18, Z
    25ba:	2f 77       	andi	r18, 0x7F	; 127
    25bc:	fc 01       	movw	r30, r24
    25be:	20 83       	st	Z, r18
    25c0:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <_ZL5count>
    25c4:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <_ZL5count+0x1>
    25c8:	a0 91 80 02 	lds	r26, 0x0280	; 0x800280 <_ZL5count+0x2>
    25cc:	b0 91 81 02 	lds	r27, 0x0281	; 0x800281 <_ZL5count+0x3>
    25d0:	8b 83       	std	Y+3, r24	; 0x03
    25d2:	9c 83       	std	Y+4, r25	; 0x04
    25d4:	ad 83       	std	Y+5, r26	; 0x05
    25d6:	be 83       	std	Y+6, r27	; 0x06
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	9a 81       	ldd	r25, Y+2	; 0x02
    25dc:	89 2b       	or	r24, r25
    25de:	49 f0       	breq	.+18     	; 0x25f2 <_Z10timer1_getv+0x66>
    25e0:	8f e5       	ldi	r24, 0x5F	; 95
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	2f e5       	ldi	r18, 0x5F	; 95
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	f9 01       	movw	r30, r18
    25ea:	20 81       	ld	r18, Z
    25ec:	20 68       	ori	r18, 0x80	; 128
    25ee:	fc 01       	movw	r30, r24
    25f0:	20 83       	st	Z, r18
    25f2:	8b 81       	ldd	r24, Y+3	; 0x03
    25f4:	9c 81       	ldd	r25, Y+4	; 0x04
    25f6:	ad 81       	ldd	r26, Y+5	; 0x05
    25f8:	be 81       	ldd	r27, Y+6	; 0x06
    25fa:	bc 01       	movw	r22, r24
    25fc:	cd 01       	movw	r24, r26
    25fe:	26 96       	adiw	r28, 0x06	; 6
    2600:	0f b6       	in	r0, 0x3f	; 63
    2602:	f8 94       	cli
    2604:	de bf       	out	0x3e, r29	; 62
    2606:	0f be       	out	0x3f, r0	; 63
    2608:	cd bf       	out	0x3d, r28	; 61
    260a:	df 91       	pop	r29
    260c:	cf 91       	pop	r28
    260e:	08 95       	ret

00002610 <_Z12timer1_clearv>:
    2610:	cf 93       	push	r28
    2612:	df 93       	push	r29
    2614:	00 d0       	rcall	.+0      	; 0x2616 <_Z12timer1_clearv+0x6>
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	8f e5       	ldi	r24, 0x5F	; 95
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	fc 01       	movw	r30, r24
    2620:	80 81       	ld	r24, Z
    2622:	88 2f       	mov	r24, r24
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	80 78       	andi	r24, 0x80	; 128
    2628:	99 27       	eor	r25, r25
    262a:	9a 83       	std	Y+2, r25	; 0x02
    262c:	89 83       	std	Y+1, r24	; 0x01
    262e:	8f e5       	ldi	r24, 0x5F	; 95
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	2f e5       	ldi	r18, 0x5F	; 95
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	f9 01       	movw	r30, r18
    2638:	20 81       	ld	r18, Z
    263a:	2f 77       	andi	r18, 0x7F	; 127
    263c:	fc 01       	movw	r30, r24
    263e:	20 83       	st	Z, r18
    2640:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <_ZL5count>
    2644:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <_ZL5count+0x1>
    2648:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <_ZL5count+0x2>
    264c:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <_ZL5count+0x3>
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	9a 81       	ldd	r25, Y+2	; 0x02
    2654:	89 2b       	or	r24, r25
    2656:	49 f0       	breq	.+18     	; 0x266a <_Z12timer1_clearv+0x5a>
    2658:	8f e5       	ldi	r24, 0x5F	; 95
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	2f e5       	ldi	r18, 0x5F	; 95
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	f9 01       	movw	r30, r18
    2662:	20 81       	ld	r18, Z
    2664:	20 68       	ori	r18, 0x80	; 128
    2666:	fc 01       	movw	r30, r24
    2668:	20 83       	st	Z, r18
    266a:	00 00       	nop
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	df 91       	pop	r29
    2672:	cf 91       	pop	r28
    2674:	08 95       	ret

00002676 <_Z11__vector_11v>:
    2676:	1f 92       	push	r1
    2678:	0f 92       	push	r0
    267a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    267e:	0f 92       	push	r0
    2680:	11 24       	eor	r1, r1
    2682:	8f 93       	push	r24
    2684:	9f 93       	push	r25
    2686:	af 93       	push	r26
    2688:	bf 93       	push	r27
    268a:	cf 93       	push	r28
    268c:	df 93       	push	r29
    268e:	cd b7       	in	r28, 0x3d	; 61
    2690:	de b7       	in	r29, 0x3e	; 62
    2692:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <_ZL5count>
    2696:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <_ZL5count+0x1>
    269a:	a0 91 80 02 	lds	r26, 0x0280	; 0x800280 <_ZL5count+0x2>
    269e:	b0 91 81 02 	lds	r27, 0x0281	; 0x800281 <_ZL5count+0x3>
    26a2:	01 96       	adiw	r24, 0x01	; 1
    26a4:	a1 1d       	adc	r26, r1
    26a6:	b1 1d       	adc	r27, r1
    26a8:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <_ZL5count>
    26ac:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <_ZL5count+0x1>
    26b0:	a0 93 80 02 	sts	0x0280, r26	; 0x800280 <_ZL5count+0x2>
    26b4:	b0 93 81 02 	sts	0x0281, r27	; 0x800281 <_ZL5count+0x3>
    26b8:	00 00       	nop
    26ba:	df 91       	pop	r29
    26bc:	cf 91       	pop	r28
    26be:	bf 91       	pop	r27
    26c0:	af 91       	pop	r26
    26c2:	9f 91       	pop	r25
    26c4:	8f 91       	pop	r24
    26c6:	0f 90       	pop	r0
    26c8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    26cc:	0f 90       	pop	r0
    26ce:	1f 90       	pop	r1
    26d0:	18 95       	reti

000026d2 <__mulsi3>:
    26d2:	db 01       	movw	r26, r22
    26d4:	8f 93       	push	r24
    26d6:	9f 93       	push	r25
    26d8:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__muluhisi3>
    26dc:	bf 91       	pop	r27
    26de:	af 91       	pop	r26
    26e0:	a2 9f       	mul	r26, r18
    26e2:	80 0d       	add	r24, r0
    26e4:	91 1d       	adc	r25, r1
    26e6:	a3 9f       	mul	r26, r19
    26e8:	90 0d       	add	r25, r0
    26ea:	b2 9f       	mul	r27, r18
    26ec:	90 0d       	add	r25, r0
    26ee:	11 24       	eor	r1, r1
    26f0:	08 95       	ret

000026f2 <__udivmodhi4>:
    26f2:	aa 1b       	sub	r26, r26
    26f4:	bb 1b       	sub	r27, r27
    26f6:	51 e1       	ldi	r21, 0x11	; 17
    26f8:	07 c0       	rjmp	.+14     	; 0x2708 <__udivmodhi4_ep>

000026fa <__udivmodhi4_loop>:
    26fa:	aa 1f       	adc	r26, r26
    26fc:	bb 1f       	adc	r27, r27
    26fe:	a6 17       	cp	r26, r22
    2700:	b7 07       	cpc	r27, r23
    2702:	10 f0       	brcs	.+4      	; 0x2708 <__udivmodhi4_ep>
    2704:	a6 1b       	sub	r26, r22
    2706:	b7 0b       	sbc	r27, r23

00002708 <__udivmodhi4_ep>:
    2708:	88 1f       	adc	r24, r24
    270a:	99 1f       	adc	r25, r25
    270c:	5a 95       	dec	r21
    270e:	a9 f7       	brne	.-22     	; 0x26fa <__udivmodhi4_loop>
    2710:	80 95       	com	r24
    2712:	90 95       	com	r25
    2714:	bc 01       	movw	r22, r24
    2716:	cd 01       	movw	r24, r26
    2718:	08 95       	ret

0000271a <__divmodhi4>:
    271a:	97 fb       	bst	r25, 7
    271c:	07 2e       	mov	r0, r23
    271e:	16 f4       	brtc	.+4      	; 0x2724 <__divmodhi4+0xa>
    2720:	00 94       	com	r0
    2722:	07 d0       	rcall	.+14     	; 0x2732 <__divmodhi4_neg1>
    2724:	77 fd       	sbrc	r23, 7
    2726:	09 d0       	rcall	.+18     	; 0x273a <__divmodhi4_neg2>
    2728:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__udivmodhi4>
    272c:	07 fc       	sbrc	r0, 7
    272e:	05 d0       	rcall	.+10     	; 0x273a <__divmodhi4_neg2>
    2730:	3e f4       	brtc	.+14     	; 0x2740 <__divmodhi4_exit>

00002732 <__divmodhi4_neg1>:
    2732:	90 95       	com	r25
    2734:	81 95       	neg	r24
    2736:	9f 4f       	sbci	r25, 0xFF	; 255
    2738:	08 95       	ret

0000273a <__divmodhi4_neg2>:
    273a:	70 95       	com	r23
    273c:	61 95       	neg	r22
    273e:	7f 4f       	sbci	r23, 0xFF	; 255

00002740 <__divmodhi4_exit>:
    2740:	08 95       	ret

00002742 <__udivmodsi4>:
    2742:	a1 e2       	ldi	r26, 0x21	; 33
    2744:	1a 2e       	mov	r1, r26
    2746:	aa 1b       	sub	r26, r26
    2748:	bb 1b       	sub	r27, r27
    274a:	fd 01       	movw	r30, r26
    274c:	0d c0       	rjmp	.+26     	; 0x2768 <__udivmodsi4_ep>

0000274e <__udivmodsi4_loop>:
    274e:	aa 1f       	adc	r26, r26
    2750:	bb 1f       	adc	r27, r27
    2752:	ee 1f       	adc	r30, r30
    2754:	ff 1f       	adc	r31, r31
    2756:	a2 17       	cp	r26, r18
    2758:	b3 07       	cpc	r27, r19
    275a:	e4 07       	cpc	r30, r20
    275c:	f5 07       	cpc	r31, r21
    275e:	20 f0       	brcs	.+8      	; 0x2768 <__udivmodsi4_ep>
    2760:	a2 1b       	sub	r26, r18
    2762:	b3 0b       	sbc	r27, r19
    2764:	e4 0b       	sbc	r30, r20
    2766:	f5 0b       	sbc	r31, r21

00002768 <__udivmodsi4_ep>:
    2768:	66 1f       	adc	r22, r22
    276a:	77 1f       	adc	r23, r23
    276c:	88 1f       	adc	r24, r24
    276e:	99 1f       	adc	r25, r25
    2770:	1a 94       	dec	r1
    2772:	69 f7       	brne	.-38     	; 0x274e <__udivmodsi4_loop>
    2774:	60 95       	com	r22
    2776:	70 95       	com	r23
    2778:	80 95       	com	r24
    277a:	90 95       	com	r25
    277c:	9b 01       	movw	r18, r22
    277e:	ac 01       	movw	r20, r24
    2780:	bd 01       	movw	r22, r26
    2782:	cf 01       	movw	r24, r30
    2784:	08 95       	ret

00002786 <__divmodsi4>:
    2786:	05 2e       	mov	r0, r21
    2788:	97 fb       	bst	r25, 7
    278a:	1e f4       	brtc	.+6      	; 0x2792 <__divmodsi4+0xc>
    278c:	00 94       	com	r0
    278e:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__negsi2>
    2792:	57 fd       	sbrc	r21, 7
    2794:	07 d0       	rcall	.+14     	; 0x27a4 <__divmodsi4_neg2>
    2796:	0e 94 a1 13 	call	0x2742	; 0x2742 <__udivmodsi4>
    279a:	07 fc       	sbrc	r0, 7
    279c:	03 d0       	rcall	.+6      	; 0x27a4 <__divmodsi4_neg2>
    279e:	4e f4       	brtc	.+18     	; 0x27b2 <__divmodsi4_exit>
    27a0:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <__negsi2>

000027a4 <__divmodsi4_neg2>:
    27a4:	50 95       	com	r21
    27a6:	40 95       	com	r20
    27a8:	30 95       	com	r19
    27aa:	21 95       	neg	r18
    27ac:	3f 4f       	sbci	r19, 0xFF	; 255
    27ae:	4f 4f       	sbci	r20, 0xFF	; 255
    27b0:	5f 4f       	sbci	r21, 0xFF	; 255

000027b2 <__divmodsi4_exit>:
    27b2:	08 95       	ret

000027b4 <__negsi2>:
    27b4:	90 95       	com	r25
    27b6:	80 95       	com	r24
    27b8:	70 95       	com	r23
    27ba:	61 95       	neg	r22
    27bc:	7f 4f       	sbci	r23, 0xFF	; 255
    27be:	8f 4f       	sbci	r24, 0xFF	; 255
    27c0:	9f 4f       	sbci	r25, 0xFF	; 255
    27c2:	08 95       	ret

000027c4 <__umulhisi3>:
    27c4:	a2 9f       	mul	r26, r18
    27c6:	b0 01       	movw	r22, r0
    27c8:	b3 9f       	mul	r27, r19
    27ca:	c0 01       	movw	r24, r0
    27cc:	a3 9f       	mul	r26, r19
    27ce:	70 0d       	add	r23, r0
    27d0:	81 1d       	adc	r24, r1
    27d2:	11 24       	eor	r1, r1
    27d4:	91 1d       	adc	r25, r1
    27d6:	b2 9f       	mul	r27, r18
    27d8:	70 0d       	add	r23, r0
    27da:	81 1d       	adc	r24, r1
    27dc:	11 24       	eor	r1, r1
    27de:	91 1d       	adc	r25, r1
    27e0:	08 95       	ret

000027e2 <__muluhisi3>:
    27e2:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__umulhisi3>
    27e6:	a5 9f       	mul	r26, r21
    27e8:	90 0d       	add	r25, r0
    27ea:	b4 9f       	mul	r27, r20
    27ec:	90 0d       	add	r25, r0
    27ee:	a4 9f       	mul	r26, r20
    27f0:	80 0d       	add	r24, r0
    27f2:	91 1d       	adc	r25, r1
    27f4:	11 24       	eor	r1, r1
    27f6:	08 95       	ret

000027f8 <memcpy>:
    27f8:	fb 01       	movw	r30, r22
    27fa:	dc 01       	movw	r26, r24
    27fc:	02 c0       	rjmp	.+4      	; 0x2802 <memcpy+0xa>
    27fe:	01 90       	ld	r0, Z+
    2800:	0d 92       	st	X+, r0
    2802:	41 50       	subi	r20, 0x01	; 1
    2804:	50 40       	sbci	r21, 0x00	; 0
    2806:	d8 f7       	brcc	.-10     	; 0x27fe <memcpy+0x6>
    2808:	08 95       	ret

0000280a <strlen>:
    280a:	fc 01       	movw	r30, r24
    280c:	01 90       	ld	r0, Z+
    280e:	00 20       	and	r0, r0
    2810:	e9 f7       	brne	.-6      	; 0x280c <strlen+0x2>
    2812:	80 95       	com	r24
    2814:	90 95       	com	r25
    2816:	8e 0f       	add	r24, r30
    2818:	9f 1f       	adc	r25, r31
    281a:	08 95       	ret

0000281c <_exit>:
    281c:	f8 94       	cli

0000281e <__stop_program>:
    281e:	ff cf       	rjmp	.-2      	; 0x281e <__stop_program>
