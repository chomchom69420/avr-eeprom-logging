
bin/Debug/proj2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d2  00800100  0000290a  0000299e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .siminfo      00000028  000028e2  000028e2  00002976  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000001ba  008001d2  008001d2  00002a70  2**0
                  ALLOC
  4 .stab         000036b4  00000000  00000000  00002a70  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00001d50  00000000  00000000  00006124  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00007e74  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007e88  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  00007ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  000084bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  00008a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  00008a78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 b8 06 	jmp	0xd70	; 0xd70 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <__vector_18>
      4c:	0c 94 d5 0f 	jmp	0x1faa	; 0x1faa <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 02 04 	jmp	0x804	; 0x804 <__vector_22>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e0       	ldi	r30, 0x0A	; 10
      7c:	f9 e2       	ldi	r31, 0x29	; 41
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 3d       	cpi	r26, 0xD2	; 210
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a2 ed       	ldi	r26, 0xD2	; 210
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 38       	cpi	r26, 0x8C	; 140
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 97 05 	call	0xb2e	; 0xb2e <main>
      9e:	0c 94 6f 14 	jmp	0x28de	; 0x28de <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <str_compare>:
    .checksum=0};



int str_compare(char a[],char b[])
{
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
      ae:	28 97       	sbiw	r28, 0x08	; 8
      b0:	0f b6       	in	r0, 0x3f	; 63
      b2:	f8 94       	cli
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	0f be       	out	0x3f, r0	; 63
      b8:	cd bf       	out	0x3d, r28	; 61
      ba:	9e 83       	std	Y+6, r25	; 0x06
      bc:	8d 83       	std	Y+5, r24	; 0x05
      be:	78 87       	std	Y+8, r23	; 0x08
      c0:	6f 83       	std	Y+7, r22	; 0x07
    int flag=0,i=0;  // integer variables declaration
      c2:	1a 82       	std	Y+2, r1	; 0x02
      c4:	19 82       	std	Y+1, r1	; 0x01
      c6:	1c 82       	std	Y+4, r1	; 0x04
      c8:	1b 82       	std	Y+3, r1	; 0x03
    while(a[i]!='\0' &&b[i]!='\0')  // while loop
      ca:	1c c0       	rjmp	.+56     	; 0x104 <str_compare+0x5e>
    {
       if(a[i]!=b[i])
      cc:	8b 81       	ldd	r24, Y+3	; 0x03
      ce:	9c 81       	ldd	r25, Y+4	; 0x04
      d0:	2d 81       	ldd	r18, Y+5	; 0x05
      d2:	3e 81       	ldd	r19, Y+6	; 0x06
      d4:	82 0f       	add	r24, r18
      d6:	93 1f       	adc	r25, r19
      d8:	fc 01       	movw	r30, r24
      da:	40 81       	ld	r20, Z
      dc:	8b 81       	ldd	r24, Y+3	; 0x03
      de:	9c 81       	ldd	r25, Y+4	; 0x04
      e0:	2f 81       	ldd	r18, Y+7	; 0x07
      e2:	38 85       	ldd	r19, Y+8	; 0x08
      e4:	82 0f       	add	r24, r18
      e6:	93 1f       	adc	r25, r19
      e8:	fc 01       	movw	r30, r24
      ea:	80 81       	ld	r24, Z
      ec:	48 17       	cp	r20, r24
      ee:	29 f0       	breq	.+10     	; 0xfa <str_compare+0x54>
       {
           flag=1;
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	9a 83       	std	Y+2, r25	; 0x02
      f6:	89 83       	std	Y+1, r24	; 0x01
           break;
      f8:	19 c0       	rjmp	.+50     	; 0x12c <str_compare+0x86>
       }
       i++;
      fa:	8b 81       	ldd	r24, Y+3	; 0x03
      fc:	9c 81       	ldd	r25, Y+4	; 0x04
      fe:	01 96       	adiw	r24, 0x01	; 1
     100:	9c 83       	std	Y+4, r25	; 0x04
     102:	8b 83       	std	Y+3, r24	; 0x03


int str_compare(char a[],char b[])
{
    int flag=0,i=0;  // integer variables declaration
    while(a[i]!='\0' &&b[i]!='\0')  // while loop
     104:	8b 81       	ldd	r24, Y+3	; 0x03
     106:	9c 81       	ldd	r25, Y+4	; 0x04
     108:	2d 81       	ldd	r18, Y+5	; 0x05
     10a:	3e 81       	ldd	r19, Y+6	; 0x06
     10c:	82 0f       	add	r24, r18
     10e:	93 1f       	adc	r25, r19
     110:	fc 01       	movw	r30, r24
     112:	80 81       	ld	r24, Z
     114:	88 23       	and	r24, r24
     116:	51 f0       	breq	.+20     	; 0x12c <str_compare+0x86>
     118:	8b 81       	ldd	r24, Y+3	; 0x03
     11a:	9c 81       	ldd	r25, Y+4	; 0x04
     11c:	2f 81       	ldd	r18, Y+7	; 0x07
     11e:	38 85       	ldd	r19, Y+8	; 0x08
     120:	82 0f       	add	r24, r18
     122:	93 1f       	adc	r25, r19
     124:	fc 01       	movw	r30, r24
     126:	80 81       	ld	r24, Z
     128:	88 23       	and	r24, r24
     12a:	81 f6       	brne	.-96     	; 0xcc <str_compare+0x26>
           flag=1;
           break;
       }
       i++;
    }
    if(flag==0)
     12c:	89 81       	ldd	r24, Y+1	; 0x01
     12e:	9a 81       	ldd	r25, Y+2	; 0x02
     130:	89 2b       	or	r24, r25
     132:	19 f4       	brne	.+6      	; 0x13a <str_compare+0x94>
    return 0;
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	02 c0       	rjmp	.+4      	; 0x13e <str_compare+0x98>
    else
    return 1;
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	90 e0       	ldi	r25, 0x00	; 0
}
     13e:	28 96       	adiw	r28, 0x08	; 8
     140:	0f b6       	in	r0, 0x3f	; 63
     142:	f8 94       	cli
     144:	de bf       	out	0x3e, r29	; 62
     146:	0f be       	out	0x3f, r0	; 63
     148:	cd bf       	out	0x3d, r28	; 61
     14a:	df 91       	pop	r29
     14c:	cf 91       	pop	r28
     14e:	08 95       	ret

00000150 <config_init>:

void config_init()
{
     150:	ef 92       	push	r14
     152:	ff 92       	push	r15
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	2e 97       	sbiw	r28, 0x0e	; 14
     162:	0f b6       	in	r0, 0x3f	; 63
     164:	f8 94       	cli
     166:	de bf       	out	0x3e, r29	; 62
     168:	0f be       	out	0x3f, r0	; 63
     16a:	cd bf       	out	0x3d, r28	; 61

    }

    //uart_writedec32(write_busy);
    //get_writebusy();
}
     16c:	0d b7       	in	r16, 0x3d	; 61
     16e:	1e b7       	in	r17, 0x3e	; 62
    return 1;
}

void config_init()
{
    while(eeprom_isbusy());  //waits for EEPROM to get out of busy state
     170:	00 00       	nop
     172:	0e 94 30 03 	call	0x660	; 0x660 <eeprom_isbusy>
     176:	89 2b       	or	r24, r25
     178:	e1 f7       	brne	.-8      	; 0x172 <config_init+0x22>

    //initialize config
    unsigned int base_addr=0x040;
     17a:	80 e4       	ldi	r24, 0x40	; 64
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	9e 83       	std	Y+6, r25	; 0x06
     180:	8d 83       	std	Y+5, r24	; 0x05
    int size = sizeof(config_struct);
     182:	82 e1       	ldi	r24, 0x12	; 18
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	98 87       	std	Y+8, r25	; 0x08
     188:	8f 83       	std	Y+7, r24	; 0x07
    unsigned char buf[size+10];
     18a:	8f 81       	ldd	r24, Y+7	; 0x07
     18c:	98 85       	ldd	r25, Y+8	; 0x08
     18e:	0a 96       	adiw	r24, 0x0a	; 10
     190:	2d b7       	in	r18, 0x3d	; 61
     192:	3e b7       	in	r19, 0x3e	; 62
     194:	79 01       	movw	r14, r18
     196:	9c 01       	movw	r18, r24
     198:	21 50       	subi	r18, 0x01	; 1
     19a:	31 09       	sbc	r19, r1
     19c:	3a 87       	std	Y+10, r19	; 0x0a
     19e:	29 87       	std	Y+9, r18	; 0x09
     1a0:	2d b7       	in	r18, 0x3d	; 61
     1a2:	3e b7       	in	r19, 0x3e	; 62
     1a4:	28 1b       	sub	r18, r24
     1a6:	39 0b       	sbc	r19, r25
     1a8:	0f b6       	in	r0, 0x3f	; 63
     1aa:	f8 94       	cli
     1ac:	3e bf       	out	0x3e, r19	; 62
     1ae:	0f be       	out	0x3f, r0	; 63
     1b0:	2d bf       	out	0x3d, r18	; 61
     1b2:	8d b7       	in	r24, 0x3d	; 61
     1b4:	9e b7       	in	r25, 0x3e	; 62
     1b6:	01 96       	adiw	r24, 0x01	; 1
     1b8:	9c 87       	std	Y+12, r25	; 0x0c
     1ba:	8b 87       	std	Y+11, r24	; 0x0b
    unsigned char* p = (unsigned char*)&config;
     1bc:	8b e7       	ldi	r24, 0x7B	; 123
     1be:	92 e0       	ldi	r25, 0x02	; 2
     1c0:	9e 87       	std	Y+14, r25	; 0x0e
     1c2:	8d 87       	std	Y+13, r24	; 0x0d

    eeprom_readbuf(base_addr, buf, size);
     1c4:	4f 81       	ldd	r20, Y+7	; 0x07
     1c6:	2b 85       	ldd	r18, Y+11	; 0x0b
     1c8:	3c 85       	ldd	r19, Y+12	; 0x0c
     1ca:	8d 81       	ldd	r24, Y+5	; 0x05
     1cc:	9e 81       	ldd	r25, Y+6	; 0x06
     1ce:	b9 01       	movw	r22, r18
     1d0:	0e 94 ad 03 	call	0x75a	; 0x75a <eeprom_readbuf>

    //memcpy((unsigned char*)&config, (unsigned char*)buf, size);

    for(int i=0;i<size;i++)
     1d4:	1a 82       	std	Y+2, r1	; 0x02
     1d6:	19 82       	std	Y+1, r1	; 0x01
     1d8:	15 c0       	rjmp	.+42     	; 0x204 <config_init+0xb4>
    {
        p[i]=buf[i];
     1da:	89 81       	ldd	r24, Y+1	; 0x01
     1dc:	9a 81       	ldd	r25, Y+2	; 0x02
     1de:	2d 85       	ldd	r18, Y+13	; 0x0d
     1e0:	3e 85       	ldd	r19, Y+14	; 0x0e
     1e2:	82 0f       	add	r24, r18
     1e4:	93 1f       	adc	r25, r19
     1e6:	4b 85       	ldd	r20, Y+11	; 0x0b
     1e8:	5c 85       	ldd	r21, Y+12	; 0x0c
     1ea:	29 81       	ldd	r18, Y+1	; 0x01
     1ec:	3a 81       	ldd	r19, Y+2	; 0x02
     1ee:	24 0f       	add	r18, r20
     1f0:	35 1f       	adc	r19, r21
     1f2:	f9 01       	movw	r30, r18
     1f4:	20 81       	ld	r18, Z
     1f6:	fc 01       	movw	r30, r24
     1f8:	20 83       	st	Z, r18

    eeprom_readbuf(base_addr, buf, size);

    //memcpy((unsigned char*)&config, (unsigned char*)buf, size);

    for(int i=0;i<size;i++)
     1fa:	89 81       	ldd	r24, Y+1	; 0x01
     1fc:	9a 81       	ldd	r25, Y+2	; 0x02
     1fe:	01 96       	adiw	r24, 0x01	; 1
     200:	9a 83       	std	Y+2, r25	; 0x02
     202:	89 83       	std	Y+1, r24	; 0x01
     204:	29 81       	ldd	r18, Y+1	; 0x01
     206:	3a 81       	ldd	r19, Y+2	; 0x02
     208:	8f 81       	ldd	r24, Y+7	; 0x07
     20a:	98 85       	ldd	r25, Y+8	; 0x08
     20c:	28 17       	cp	r18, r24
     20e:	39 07       	cpc	r19, r25
     210:	24 f3       	brlt	.-56     	; 0x1da <config_init+0x8a>
    {
        p[i]=buf[i];
    }

    if(!config_is_data_valid())
     212:	0e 94 50 01 	call	0x2a0	; 0x2a0 <config_is_data_valid>
     216:	89 2b       	or	r24, r25
     218:	59 f5       	brne	.+86     	; 0x270 <config_init+0x120>
    {

        //Write default values to EEPROM location 0x040
        config_write_defaults();
     21a:	0e 94 ac 01 	call	0x358	; 0x358 <config_write_defaults>

        //Initialize config by reading location 0x040
        eeprom_readbuf(base_addr, (unsigned char*)buf, size);
     21e:	4f 81       	ldd	r20, Y+7	; 0x07
     220:	2b 85       	ldd	r18, Y+11	; 0x0b
     222:	3c 85       	ldd	r19, Y+12	; 0x0c
     224:	8d 81       	ldd	r24, Y+5	; 0x05
     226:	9e 81       	ldd	r25, Y+6	; 0x06
     228:	b9 01       	movw	r22, r18
     22a:	0e 94 ad 03 	call	0x75a	; 0x75a <eeprom_readbuf>
        //memcpy((unsigned char*)&config, (unsigned char*)buf, size);

        for(int i=0;i<size;i++)
     22e:	1c 82       	std	Y+4, r1	; 0x04
     230:	1b 82       	std	Y+3, r1	; 0x03
     232:	15 c0       	rjmp	.+42     	; 0x25e <config_init+0x10e>
        {
            p[i]=buf[i];
     234:	8b 81       	ldd	r24, Y+3	; 0x03
     236:	9c 81       	ldd	r25, Y+4	; 0x04
     238:	2d 85       	ldd	r18, Y+13	; 0x0d
     23a:	3e 85       	ldd	r19, Y+14	; 0x0e
     23c:	82 0f       	add	r24, r18
     23e:	93 1f       	adc	r25, r19
     240:	4b 85       	ldd	r20, Y+11	; 0x0b
     242:	5c 85       	ldd	r21, Y+12	; 0x0c
     244:	2b 81       	ldd	r18, Y+3	; 0x03
     246:	3c 81       	ldd	r19, Y+4	; 0x04
     248:	24 0f       	add	r18, r20
     24a:	35 1f       	adc	r19, r21
     24c:	f9 01       	movw	r30, r18
     24e:	20 81       	ld	r18, Z
     250:	fc 01       	movw	r30, r24
     252:	20 83       	st	Z, r18

        //Initialize config by reading location 0x040
        eeprom_readbuf(base_addr, (unsigned char*)buf, size);
        //memcpy((unsigned char*)&config, (unsigned char*)buf, size);

        for(int i=0;i<size;i++)
     254:	8b 81       	ldd	r24, Y+3	; 0x03
     256:	9c 81       	ldd	r25, Y+4	; 0x04
     258:	01 96       	adiw	r24, 0x01	; 1
     25a:	9c 83       	std	Y+4, r25	; 0x04
     25c:	8b 83       	std	Y+3, r24	; 0x03
     25e:	2b 81       	ldd	r18, Y+3	; 0x03
     260:	3c 81       	ldd	r19, Y+4	; 0x04
     262:	8f 81       	ldd	r24, Y+7	; 0x07
     264:	98 85       	ldd	r25, Y+8	; 0x08
     266:	28 17       	cp	r18, r24
     268:	39 07       	cpc	r19, r25
     26a:	24 f3       	brlt	.-56     	; 0x234 <config_init+0xe4>
        {
            p[i]=buf[i];
        }

        //Clearing modified flag
        modified=0;
     26c:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <modified>
     270:	0f b6       	in	r0, 0x3f	; 63
     272:	f8 94       	cli
     274:	fe be       	out	0x3e, r15	; 62
     276:	0f be       	out	0x3f, r0	; 63
     278:	ed be       	out	0x3d, r14	; 61

    }

    //uart_writedec32(write_busy);
    //get_writebusy();
}
     27a:	00 00       	nop
     27c:	0f b6       	in	r0, 0x3f	; 63
     27e:	f8 94       	cli
     280:	1e bf       	out	0x3e, r17	; 62
     282:	0f be       	out	0x3f, r0	; 63
     284:	0d bf       	out	0x3d, r16	; 61
     286:	2e 96       	adiw	r28, 0x0e	; 14
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	f8 94       	cli
     28c:	de bf       	out	0x3e, r29	; 62
     28e:	0f be       	out	0x3f, r0	; 63
     290:	cd bf       	out	0x3d, r28	; 61
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	1f 91       	pop	r17
     298:	0f 91       	pop	r16
     29a:	ff 90       	pop	r15
     29c:	ef 90       	pop	r14
     29e:	08 95       	ret

000002a0 <config_is_data_valid>:

int config_is_data_valid()
{
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	cd b7       	in	r28, 0x3d	; 61
     2a6:	de b7       	in	r29, 0x3e	; 62
    return str_compare(config.token, config_defaults.token) && is_checksum_valid((unsigned char*)&config, sizeof(config_struct));
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	71 e0       	ldi	r23, 0x01	; 1
     2ac:	8b e7       	ldi	r24, 0x7B	; 123
     2ae:	92 e0       	ldi	r25, 0x02	; 2
     2b0:	0e 94 53 00 	call	0xa6	; 0xa6 <str_compare>
     2b4:	89 2b       	or	r24, r25
     2b6:	59 f0       	breq	.+22     	; 0x2ce <config_is_data_valid+0x2e>
     2b8:	62 e1       	ldi	r22, 0x12	; 18
     2ba:	70 e0       	ldi	r23, 0x00	; 0
     2bc:	8b e7       	ldi	r24, 0x7B	; 123
     2be:	92 e0       	ldi	r25, 0x02	; 2
     2c0:	0e 94 51 07 	call	0xea2	; 0xea2 <is_checksum_valid>
     2c4:	89 2b       	or	r24, r25
     2c6:	19 f0       	breq	.+6      	; 0x2ce <config_is_data_valid+0x2e>
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <config_is_data_valid+0x32>
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	90 e0       	ldi	r25, 0x00	; 0
}
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	08 95       	ret

000002d8 <config_set_modified>:

void config_set_modified()
{
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	cd b7       	in	r28, 0x3d	; 61
     2de:	de b7       	in	r29, 0x3e	; 62
    modified=1;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <modified>
}
     2e6:	00 00       	nop
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	08 95       	ret

000002ee <config_update>:

void config_update()
{
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	00 d0       	rcall	.+0      	; 0x2f4 <config_update+0x6>
     2f4:	00 d0       	rcall	.+0      	; 0x2f6 <config_update+0x8>
     2f6:	00 d0       	rcall	.+0      	; 0x2f8 <config_update+0xa>
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
    if(!eeprom_isbusy() && modified)
     2fc:	0e 94 30 03 	call	0x660	; 0x660 <eeprom_isbusy>
     300:	89 2b       	or	r24, r25
     302:	01 f5       	brne	.+64     	; 0x344 <config_update+0x56>
     304:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <modified>
     308:	88 23       	and	r24, r24
     30a:	e1 f0       	breq	.+56     	; 0x344 <config_update+0x56>
    {
        //Update the checksum
        update_checksum((unsigned char*)&config, sizeof(config));
     30c:	62 e1       	ldi	r22, 0x12	; 18
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	8b e7       	ldi	r24, 0x7B	; 123
     312:	92 e0       	ldi	r25, 0x02	; 2
     314:	0e 94 27 07 	call	0xe4e	; 0xe4e <update_checksum>

        //Write config to eeprom
        unsigned int base_addr = 0x040;
     318:	80 e4       	ldi	r24, 0x40	; 64
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	9a 83       	std	Y+2, r25	; 0x02
     31e:	89 83       	std	Y+1, r24	; 0x01
        int size = sizeof(config_struct);
     320:	82 e1       	ldi	r24, 0x12	; 18
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	9c 83       	std	Y+4, r25	; 0x04
     326:	8b 83       	std	Y+3, r24	; 0x03
        unsigned char* p = (unsigned char*)&config;
     328:	8b e7       	ldi	r24, 0x7B	; 123
     32a:	92 e0       	ldi	r25, 0x02	; 2
     32c:	9e 83       	std	Y+6, r25	; 0x06
     32e:	8d 83       	std	Y+5, r24	; 0x05

        eeprom_writebuf(base_addr, p, size);
     330:	4b 81       	ldd	r20, Y+3	; 0x03
     332:	2d 81       	ldd	r18, Y+5	; 0x05
     334:	3e 81       	ldd	r19, Y+6	; 0x06
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	9a 81       	ldd	r25, Y+2	; 0x02
     33a:	b9 01       	movw	r22, r18
     33c:	0e 94 3f 03 	call	0x67e	; 0x67e <eeprom_writebuf>

        //Clearing modified flag
        modified=0;
     340:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <modified>

    }

}
     344:	00 00       	nop
     346:	26 96       	adiw	r28, 0x06	; 6
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	f8 94       	cli
     34c:	de bf       	out	0x3e, r29	; 62
     34e:	0f be       	out	0x3f, r0	; 63
     350:	cd bf       	out	0x3d, r28	; 61
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	08 95       	ret

00000358 <config_write_defaults>:

void config_write_defaults()
{
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	00 d0       	rcall	.+0      	; 0x35e <config_write_defaults+0x6>
     35e:	00 d0       	rcall	.+0      	; 0x360 <config_write_defaults+0x8>
     360:	00 d0       	rcall	.+0      	; 0x362 <config_write_defaults+0xa>
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
    update_checksum((unsigned char*)&config, sizeof(config));
     366:	62 e1       	ldi	r22, 0x12	; 18
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	8b e7       	ldi	r24, 0x7B	; 123
     36c:	92 e0       	ldi	r25, 0x02	; 2
     36e:	0e 94 27 07 	call	0xe4e	; 0xe4e <update_checksum>

    //Writing defaults to eeprom
    unsigned int base_addr = 0x040;
     372:	80 e4       	ldi	r24, 0x40	; 64
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	9a 83       	std	Y+2, r25	; 0x02
     378:	89 83       	std	Y+1, r24	; 0x01
    int size = sizeof(config_struct);
     37a:	82 e1       	ldi	r24, 0x12	; 18
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	9c 83       	std	Y+4, r25	; 0x04
     380:	8b 83       	std	Y+3, r24	; 0x03
    //unsigned char buf[size];
    unsigned char* p = (unsigned char*)&config_defaults;
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	9e 83       	std	Y+6, r25	; 0x06
     388:	8d 83       	std	Y+5, r24	; 0x05
    //memcpy((unsigned char*)buf, (unsigned char*)&config_defaults, size);

    eeprom_writebuf(base_addr, p, size);
     38a:	4b 81       	ldd	r20, Y+3	; 0x03
     38c:	2d 81       	ldd	r18, Y+5	; 0x05
     38e:	3e 81       	ldd	r19, Y+6	; 0x06
     390:	89 81       	ldd	r24, Y+1	; 0x01
     392:	9a 81       	ldd	r25, Y+2	; 0x02
     394:	b9 01       	movw	r22, r18
     396:	0e 94 3f 03 	call	0x67e	; 0x67e <eeprom_writebuf>
}
     39a:	00 00       	nop
     39c:	26 96       	adiw	r28, 0x06	; 6
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	f8 94       	cli
     3a2:	de bf       	out	0x3e, r29	; 62
     3a4:	0f be       	out	0x3f, r0	; 63
     3a6:	cd bf       	out	0x3d, r28	; 61
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	08 95       	ret

000003ae <delay_init>:
static unsigned int limit[2] = {0, 0};
static unsigned char initialized = 0;

//typedef void (*func_t)(void);

void delay_init() {
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	00 d0       	rcall	.+0      	; 0x3b4 <delay_init+0x6>
     3b4:	cd b7       	in	r28, 0x3d	; 61
     3b6:	de b7       	in	r29, 0x3e	; 62
    if (!initialized) {
     3b8:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <initialized>
     3bc:	88 23       	and	r24, r24
     3be:	89 f5       	brne	.+98     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
        /*

        unsigned int PRESCALER_VALUE = 64;
        */

        unsigned int COMPARE_VALUE = 250;
     3c0:	8a ef       	ldi	r24, 0xFA	; 250
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	9a 83       	std	Y+2, r25	; 0x02
     3c6:	89 83       	std	Y+1, r24	; 0x01



        OCR0A = COMPARE_VALUE-1; // Set timer0 compare value to 250-1 = 249
     3c8:	87 e4       	ldi	r24, 0x47	; 71
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	29 81       	ldd	r18, Y+1	; 0x01
     3ce:	21 50       	subi	r18, 0x01	; 1
     3d0:	fc 01       	movw	r30, r24
     3d2:	20 83       	st	Z, r18

        // Set CTC mode and correct clock divisor
        TCCR0A |= (1 << WGM01); // Set CTC mode //WGM01
     3d4:	84 e4       	ldi	r24, 0x44	; 68
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	24 e4       	ldi	r18, 0x44	; 68
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	f9 01       	movw	r30, r18
     3de:	20 81       	ld	r18, Z
     3e0:	22 60       	ori	r18, 0x02	; 2
     3e2:	fc 01       	movw	r30, r24
     3e4:	20 83       	st	Z, r18
        TCCR0B |= (1 << CS01) | (1 << CS00); // Set clock divisor (prescaler value = 64)  CS00/CS01
     3e6:	85 e4       	ldi	r24, 0x45	; 69
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	25 e4       	ldi	r18, 0x45	; 69
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	f9 01       	movw	r30, r18
     3f0:	20 81       	ld	r18, Z
     3f2:	23 60       	ori	r18, 0x03	; 3
     3f4:	fc 01       	movw	r30, r24
     3f6:	20 83       	st	Z, r18

        // Enable global interrupts
        // __builtin_avr_sei();
        SREG |= (1<<I_SREG);
     3f8:	8f e5       	ldi	r24, 0x5F	; 95
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	2f e5       	ldi	r18, 0x5F	; 95
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	f9 01       	movw	r30, r18
     402:	20 81       	ld	r18, Z
     404:	20 68       	ori	r18, 0x80	; 128
     406:	fc 01       	movw	r30, r24
     408:	20 83       	st	Z, r18

        // Enable interrupts on output compare A
        TIMSK0 |= (1 << OCIE0A);  //OCIE0A
     40a:	8e e6       	ldi	r24, 0x6E	; 110
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	2e e6       	ldi	r18, 0x6E	; 110
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	f9 01       	movw	r30, r18
     414:	20 81       	ld	r18, Z
     416:	22 60       	ori	r18, 0x02	; 2
     418:	fc 01       	movw	r30, r24
     41a:	20 83       	st	Z, r18

        // Stop further initialization by setting initialized to 1
        initialized = 1;
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <initialized>
    }
}
     422:	00 00       	nop
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <delay_get>:


unsigned int delay_get(unsigned int num) {
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	00 d0       	rcall	.+0      	; 0x434 <delay_get+0x6>
     434:	00 d0       	rcall	.+0      	; 0x436 <delay_get+0x8>
     436:	00 d0       	rcall	.+0      	; 0x438 <delay_get+0xa>
     438:	cd b7       	in	r28, 0x3d	; 61
     43a:	de b7       	in	r29, 0x3e	; 62
     43c:	9e 83       	std	Y+6, r25	; 0x06
     43e:	8d 83       	std	Y+5, r24	; 0x05

    unsigned int count_value;

    // Get global interrupt enable bit state
    unsigned int sreg_state = SREG & (1 << I_SREG);
     440:	8f e5       	ldi	r24, 0x5F	; 95
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	fc 01       	movw	r30, r24
     446:	80 81       	ld	r24, Z
     448:	08 2e       	mov	r0, r24
     44a:	00 0c       	add	r0, r0
     44c:	99 0b       	sbc	r25, r25
     44e:	80 78       	andi	r24, 0x80	; 128
     450:	99 27       	eor	r25, r25
     452:	9a 83       	std	Y+2, r25	; 0x02
     454:	89 83       	std	Y+1, r24	; 0x01

    // Disable interrupts
    // __builtin_avr_cli(); //
    SREG &= ~(1<<I_SREG);
     456:	8f e5       	ldi	r24, 0x5F	; 95
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	2f e5       	ldi	r18, 0x5F	; 95
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	f9 01       	movw	r30, r18
     460:	20 81       	ld	r18, Z
     462:	2f 77       	andi	r18, 0x7F	; 127
     464:	fc 01       	movw	r30, r24
     466:	20 83       	st	Z, r18

    // Get the delay_count[num] value
    count_value = delay_count[num];
     468:	8d 81       	ldd	r24, Y+5	; 0x05
     46a:	9e 81       	ldd	r25, Y+6	; 0x06
     46c:	88 0f       	add	r24, r24
     46e:	99 1f       	adc	r25, r25
     470:	8e 52       	subi	r24, 0x2E	; 46
     472:	9e 4f       	sbci	r25, 0xFE	; 254
     474:	fc 01       	movw	r30, r24
     476:	80 81       	ld	r24, Z
     478:	91 81       	ldd	r25, Z+1	; 0x01
     47a:	9c 83       	std	Y+4, r25	; 0x04
     47c:	8b 83       	std	Y+3, r24	; 0x03

    // Restore global interrupt state
    if (sreg_state) {
     47e:	89 81       	ldd	r24, Y+1	; 0x01
     480:	9a 81       	ldd	r25, Y+2	; 0x02
     482:	89 2b       	or	r24, r25
     484:	49 f0       	breq	.+18     	; 0x498 <delay_get+0x6a>
        SREG |= (1<<I_SREG); //Enable interrupts
     486:	8f e5       	ldi	r24, 0x5F	; 95
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	2f e5       	ldi	r18, 0x5F	; 95
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	f9 01       	movw	r30, r18
     490:	20 81       	ld	r18, Z
     492:	20 68       	ori	r18, 0x80	; 128
     494:	fc 01       	movw	r30, r24
     496:	20 83       	st	Z, r18
    }

    // Return the count value
    return count_value;
     498:	8b 81       	ldd	r24, Y+3	; 0x03
     49a:	9c 81       	ldd	r25, Y+4	; 0x04
}
     49c:	26 96       	adiw	r28, 0x06	; 6
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	de bf       	out	0x3e, r29	; 62
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	cd bf       	out	0x3d, r28	; 61
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <delay_set>:


void delay_set(unsigned int num, unsigned int time) {
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	00 d0       	rcall	.+0      	; 0x4b4 <delay_set+0x6>
     4b4:	00 d0       	rcall	.+0      	; 0x4b6 <delay_set+0x8>
     4b6:	00 d0       	rcall	.+0      	; 0x4b8 <delay_set+0xa>
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
     4bc:	9c 83       	std	Y+4, r25	; 0x04
     4be:	8b 83       	std	Y+3, r24	; 0x03
     4c0:	7e 83       	std	Y+6, r23	; 0x06
     4c2:	6d 83       	std	Y+5, r22	; 0x05

    // If not initialized, initialize the delay counter
    if (!initialized) {
     4c4:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <initialized>
     4c8:	88 23       	and	r24, r24
     4ca:	11 f4       	brne	.+4      	; 0x4d0 <delay_set+0x22>
        delay_init();
     4cc:	0e 94 d7 01 	call	0x3ae	; 0x3ae <delay_init>
    }
    // Get global interrupt enable bit state
    unsigned int sreg_state = SREG & (1 << 7);
     4d0:	8f e5       	ldi	r24, 0x5F	; 95
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	fc 01       	movw	r30, r24
     4d6:	80 81       	ld	r24, Z
     4d8:	08 2e       	mov	r0, r24
     4da:	00 0c       	add	r0, r0
     4dc:	99 0b       	sbc	r25, r25
     4de:	80 78       	andi	r24, 0x80	; 128
     4e0:	99 27       	eor	r25, r25
     4e2:	9a 83       	std	Y+2, r25	; 0x02
     4e4:	89 83       	std	Y+1, r24	; 0x01

    // Disable Interrupts
    SREG &= ~(1<<I_SREG); //cli()
     4e6:	8f e5       	ldi	r24, 0x5F	; 95
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	2f e5       	ldi	r18, 0x5F	; 95
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	f9 01       	movw	r30, r18
     4f0:	20 81       	ld	r18, Z
     4f2:	2f 77       	andi	r18, 0x7F	; 127
     4f4:	fc 01       	movw	r30, r24
     4f6:	20 83       	st	Z, r18

    // Set the limit for delay[num] and clear the count for delay[num]
    limit[num] = time;
     4f8:	8b 81       	ldd	r24, Y+3	; 0x03
     4fa:	9c 81       	ldd	r25, Y+4	; 0x04
     4fc:	88 0f       	add	r24, r24
     4fe:	99 1f       	adc	r25, r25
     500:	8a 52       	subi	r24, 0x2A	; 42
     502:	9e 4f       	sbci	r25, 0xFE	; 254
     504:	2d 81       	ldd	r18, Y+5	; 0x05
     506:	3e 81       	ldd	r19, Y+6	; 0x06
     508:	fc 01       	movw	r30, r24
     50a:	31 83       	std	Z+1, r19	; 0x01
     50c:	20 83       	st	Z, r18
    delay_count[num] = 0;
     50e:	8b 81       	ldd	r24, Y+3	; 0x03
     510:	9c 81       	ldd	r25, Y+4	; 0x04
     512:	88 0f       	add	r24, r24
     514:	99 1f       	adc	r25, r25
     516:	8e 52       	subi	r24, 0x2E	; 46
     518:	9e 4f       	sbci	r25, 0xFE	; 254
     51a:	fc 01       	movw	r30, r24
     51c:	11 82       	std	Z+1, r1	; 0x01
     51e:	10 82       	st	Z, r1

    // Restore global interrupt state
    if (sreg_state) {
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	9a 81       	ldd	r25, Y+2	; 0x02
     524:	89 2b       	or	r24, r25
     526:	49 f0       	breq	.+18     	; 0x53a <delay_set+0x8c>
        SREG |= (1<<I_SREG);   //sei()
     528:	8f e5       	ldi	r24, 0x5F	; 95
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	2f e5       	ldi	r18, 0x5F	; 95
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	f9 01       	movw	r30, r18
     532:	20 81       	ld	r18, Z
     534:	20 68       	ori	r18, 0x80	; 128
     536:	fc 01       	movw	r30, r24
     538:	20 83       	st	Z, r18
    }
}
     53a:	00 00       	nop
     53c:	26 96       	adiw	r28, 0x06	; 6
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	f8 94       	cli
     542:	de bf       	out	0x3e, r29	; 62
     544:	0f be       	out	0x3f, r0	; 63
     546:	cd bf       	out	0x3d, r28	; 61
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	08 95       	ret

0000054e <delay_isdone>:


unsigned int delay_isdone(unsigned int num) {
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	00 d0       	rcall	.+0      	; 0x554 <delay_isdone+0x6>
     554:	00 d0       	rcall	.+0      	; 0x556 <delay_isdone+0x8>
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
     55a:	9c 83       	std	Y+4, r25	; 0x04
     55c:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int result = 0;
     55e:	1a 82       	std	Y+2, r1	; 0x02
     560:	19 82       	std	Y+1, r1	; 0x01

    // If delay_count[num] equals limit[num], set result to 1
    if (delay_count[num] == limit[num]) {
     562:	8b 81       	ldd	r24, Y+3	; 0x03
     564:	9c 81       	ldd	r25, Y+4	; 0x04
     566:	88 0f       	add	r24, r24
     568:	99 1f       	adc	r25, r25
     56a:	8e 52       	subi	r24, 0x2E	; 46
     56c:	9e 4f       	sbci	r25, 0xFE	; 254
     56e:	fc 01       	movw	r30, r24
     570:	20 81       	ld	r18, Z
     572:	31 81       	ldd	r19, Z+1	; 0x01
     574:	8b 81       	ldd	r24, Y+3	; 0x03
     576:	9c 81       	ldd	r25, Y+4	; 0x04
     578:	88 0f       	add	r24, r24
     57a:	99 1f       	adc	r25, r25
     57c:	8a 52       	subi	r24, 0x2A	; 42
     57e:	9e 4f       	sbci	r25, 0xFE	; 254
     580:	fc 01       	movw	r30, r24
     582:	80 81       	ld	r24, Z
     584:	91 81       	ldd	r25, Z+1	; 0x01
     586:	28 17       	cp	r18, r24
     588:	39 07       	cpc	r19, r25
     58a:	21 f4       	brne	.+8      	; 0x594 <delay_isdone+0x46>
        result = 1;
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	9a 83       	std	Y+2, r25	; 0x02
     592:	89 83       	std	Y+1, r24	; 0x01
    }

    // Return the result
    return result;
     594:	89 81       	ldd	r24, Y+1	; 0x01
     596:	9a 81       	ldd	r25, Y+2	; 0x02
}
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	08 95       	ret

000005a6 <__vector_14>:

//map to ivt

void __vector_14(void) __attribute__ ((signal, used, externally_visible));

void __vector_14(void) {
     5a6:	1f 92       	push	r1
     5a8:	0f 92       	push	r0
     5aa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     5ae:	0f 92       	push	r0
     5b0:	11 24       	eor	r1, r1
     5b2:	2f 93       	push	r18
     5b4:	3f 93       	push	r19
     5b6:	8f 93       	push	r24
     5b8:	9f 93       	push	r25
     5ba:	ef 93       	push	r30
     5bc:	ff 93       	push	r31
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	00 d0       	rcall	.+0      	; 0x5c4 <__vector_14+0x1e>
     5c4:	cd b7       	in	r28, 0x3d	; 61
     5c6:	de b7       	in	r29, 0x3e	; 62
    for (unsigned int i = 0; i < sizeof(delay_count) / sizeof(delay_count[0]); i++) {
     5c8:	1a 82       	std	Y+2, r1	; 0x02
     5ca:	19 82       	std	Y+1, r1	; 0x01
     5cc:	2f c0       	rjmp	.+94     	; 0x62c <__vector_14+0x86>
        if (delay_count[i] < limit[i]) {
     5ce:	89 81       	ldd	r24, Y+1	; 0x01
     5d0:	9a 81       	ldd	r25, Y+2	; 0x02
     5d2:	88 0f       	add	r24, r24
     5d4:	99 1f       	adc	r25, r25
     5d6:	8e 52       	subi	r24, 0x2E	; 46
     5d8:	9e 4f       	sbci	r25, 0xFE	; 254
     5da:	fc 01       	movw	r30, r24
     5dc:	20 81       	ld	r18, Z
     5de:	31 81       	ldd	r19, Z+1	; 0x01
     5e0:	89 81       	ldd	r24, Y+1	; 0x01
     5e2:	9a 81       	ldd	r25, Y+2	; 0x02
     5e4:	88 0f       	add	r24, r24
     5e6:	99 1f       	adc	r25, r25
     5e8:	8a 52       	subi	r24, 0x2A	; 42
     5ea:	9e 4f       	sbci	r25, 0xFE	; 254
     5ec:	fc 01       	movw	r30, r24
     5ee:	80 81       	ld	r24, Z
     5f0:	91 81       	ldd	r25, Z+1	; 0x01
     5f2:	28 17       	cp	r18, r24
     5f4:	39 07       	cpc	r19, r25
     5f6:	a8 f4       	brcc	.+42     	; 0x622 <__vector_14+0x7c>
            delay_count[i]++;
     5f8:	89 81       	ldd	r24, Y+1	; 0x01
     5fa:	9a 81       	ldd	r25, Y+2	; 0x02
     5fc:	88 0f       	add	r24, r24
     5fe:	99 1f       	adc	r25, r25
     600:	8e 52       	subi	r24, 0x2E	; 46
     602:	9e 4f       	sbci	r25, 0xFE	; 254
     604:	fc 01       	movw	r30, r24
     606:	80 81       	ld	r24, Z
     608:	91 81       	ldd	r25, Z+1	; 0x01
     60a:	9c 01       	movw	r18, r24
     60c:	2f 5f       	subi	r18, 0xFF	; 255
     60e:	3f 4f       	sbci	r19, 0xFF	; 255
     610:	89 81       	ldd	r24, Y+1	; 0x01
     612:	9a 81       	ldd	r25, Y+2	; 0x02
     614:	88 0f       	add	r24, r24
     616:	99 1f       	adc	r25, r25
     618:	8e 52       	subi	r24, 0x2E	; 46
     61a:	9e 4f       	sbci	r25, 0xFE	; 254
     61c:	fc 01       	movw	r30, r24
     61e:	31 83       	std	Z+1, r19	; 0x01
     620:	20 83       	st	Z, r18
//map to ivt

void __vector_14(void) __attribute__ ((signal, used, externally_visible));

void __vector_14(void) {
    for (unsigned int i = 0; i < sizeof(delay_count) / sizeof(delay_count[0]); i++) {
     622:	89 81       	ldd	r24, Y+1	; 0x01
     624:	9a 81       	ldd	r25, Y+2	; 0x02
     626:	01 96       	adiw	r24, 0x01	; 1
     628:	9a 83       	std	Y+2, r25	; 0x02
     62a:	89 83       	std	Y+1, r24	; 0x01
     62c:	89 81       	ldd	r24, Y+1	; 0x01
     62e:	9a 81       	ldd	r25, Y+2	; 0x02
     630:	02 97       	sbiw	r24, 0x02	; 2
     632:	68 f2       	brcs	.-102    	; 0x5ce <__vector_14+0x28>
        if (delay_count[i] < limit[i]) {
            delay_count[i]++;
        }
    }
}
     634:	00 00       	nop
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	ff 91       	pop	r31
     640:	ef 91       	pop	r30
     642:	9f 91       	pop	r25
     644:	8f 91       	pop	r24
     646:	3f 91       	pop	r19
     648:	2f 91       	pop	r18
     64a:	0f 90       	pop	r0
     64c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     650:	0f 90       	pop	r0
     652:	1f 90       	pop	r1
     654:	18 95       	reti

00000656 <eeprom_unlock>:
#pragma GCC push_options
#pragma GCC optimize ("Os")
void eeprom_unlock()
{
    //EECR &= ~(1<<EEPE);
    EECR |= (1<<EEMPE);                     //enable master write
     656:	fa 9a       	sbi	0x1f, 2	; 31
    EECR |= (1<<EEPE);                      //enable write
     658:	f9 9a       	sbi	0x1f, 1	; 31
     65a:	08 95       	ret

0000065c <eeprom_readenable>:

#pragma GCC push_options
#pragma GCC optimize ("Os")
void eeprom_readenable()
{
    EECR |= (1<<EERE);
     65c:	f8 9a       	sbi	0x1f, 0	; 31
     65e:	08 95       	ret

00000660 <eeprom_isbusy>:
}
#pragma GCC pop_options

int eeprom_isbusy(){
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	cd b7       	in	r28, 0x3d	; 61
     666:	de b7       	in	r29, 0x3e	; 62
    //if(write_busy==1)
    //{
    //    int i=0;
    //}
    return write_busy==1;
     668:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <write_busy>
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	91 30       	cpi	r25, 0x01	; 1
     670:	09 f0       	breq	.+2      	; 0x674 <eeprom_isbusy+0x14>
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	88 2f       	mov	r24, r24
     676:	90 e0       	ldi	r25, 0x00	; 0
    //return 0;
}
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	08 95       	ret

0000067e <eeprom_writebuf>:

void eeprom_writebuf(unsigned int addr, unsigned char* buf, unsigned char size){
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
     686:	27 97       	sbiw	r28, 0x07	; 7
     688:	0f b6       	in	r0, 0x3f	; 63
     68a:	f8 94       	cli
     68c:	de bf       	out	0x3e, r29	; 62
     68e:	0f be       	out	0x3f, r0	; 63
     690:	cd bf       	out	0x3d, r28	; 61
     692:	9c 83       	std	Y+4, r25	; 0x04
     694:	8b 83       	std	Y+3, r24	; 0x03
     696:	7e 83       	std	Y+6, r23	; 0x06
     698:	6d 83       	std	Y+5, r22	; 0x05
     69a:	4f 83       	std	Y+7, r20	; 0x07
    writeaddr = addr;
     69c:	8b 81       	ldd	r24, Y+3	; 0x03
     69e:	9c 81       	ldd	r25, Y+4	; 0x04
     6a0:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <writeaddr+0x1>
     6a4:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <writeaddr>
    write_busy = 1;
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <write_busy>
    bufidx = 0;
     6ae:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <bufidx>

    //Copying
    for (int i=0;i<size;i++)
     6b2:	1a 82       	std	Y+2, r1	; 0x02
     6b4:	19 82       	std	Y+1, r1	; 0x01
     6b6:	13 c0       	rjmp	.+38     	; 0x6de <eeprom_writebuf+0x60>
    {
        writebuf[i] = buf[i];
     6b8:	89 81       	ldd	r24, Y+1	; 0x01
     6ba:	9a 81       	ldd	r25, Y+2	; 0x02
     6bc:	2d 81       	ldd	r18, Y+5	; 0x05
     6be:	3e 81       	ldd	r19, Y+6	; 0x06
     6c0:	82 0f       	add	r24, r18
     6c2:	93 1f       	adc	r25, r19
     6c4:	fc 01       	movw	r30, r24
     6c6:	20 81       	ld	r18, Z
     6c8:	89 81       	ldd	r24, Y+1	; 0x01
     6ca:	9a 81       	ldd	r25, Y+2	; 0x02
     6cc:	80 57       	subi	r24, 0x70	; 112
     6ce:	9d 4f       	sbci	r25, 0xFD	; 253
     6d0:	fc 01       	movw	r30, r24
     6d2:	20 83       	st	Z, r18
    writeaddr = addr;
    write_busy = 1;
    bufidx = 0;

    //Copying
    for (int i=0;i<size;i++)
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
     6d6:	9a 81       	ldd	r25, Y+2	; 0x02
     6d8:	01 96       	adiw	r24, 0x01	; 1
     6da:	9a 83       	std	Y+2, r25	; 0x02
     6dc:	89 83       	std	Y+1, r24	; 0x01
     6de:	8f 81       	ldd	r24, Y+7	; 0x07
     6e0:	28 2f       	mov	r18, r24
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	89 81       	ldd	r24, Y+1	; 0x01
     6e6:	9a 81       	ldd	r25, Y+2	; 0x02
     6e8:	82 17       	cp	r24, r18
     6ea:	93 07       	cpc	r25, r19
     6ec:	2c f3       	brlt	.-54     	; 0x6b8 <eeprom_writebuf+0x3a>
    }

    //uart_writestr(writebuf);


    writesize = size;
     6ee:	8f 81       	ldd	r24, Y+7	; 0x07
     6f0:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <writesize>

    //init EEPROM
    EECR |= (1<<EEPM1);
     6f4:	8f e3       	ldi	r24, 0x3F	; 63
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	2f e3       	ldi	r18, 0x3F	; 63
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	f9 01       	movw	r30, r18
     6fe:	20 81       	ld	r18, Z
     700:	20 62       	ori	r18, 0x20	; 32
     702:	fc 01       	movw	r30, r24
     704:	20 83       	st	Z, r18
    EECR &= ~(1<<EEPM0);
     706:	8f e3       	ldi	r24, 0x3F	; 63
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	2f e3       	ldi	r18, 0x3F	; 63
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	f9 01       	movw	r30, r18
     710:	20 81       	ld	r18, Z
     712:	2f 7e       	andi	r18, 0xEF	; 239
     714:	fc 01       	movw	r30, r24
     716:	20 83       	st	Z, r18

    //EEARH &= ~(1<<EEAR8);

    SREG |= (1<<I_SREG);        //Global interrupt enable
     718:	8f e5       	ldi	r24, 0x5F	; 95
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	2f e5       	ldi	r18, 0x5F	; 95
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	f9 01       	movw	r30, r18
     722:	20 81       	ld	r18, Z
     724:	20 68       	ori	r18, 0x80	; 128
     726:	fc 01       	movw	r30, r24
     728:	20 83       	st	Z, r18
    EECR |= (1<<EERIE);         //Enabling EEPROM ready interrupt
     72a:	8f e3       	ldi	r24, 0x3F	; 63
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	2f e3       	ldi	r18, 0x3F	; 63
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	f9 01       	movw	r30, r18
     734:	20 81       	ld	r18, Z
     736:	28 60       	ori	r18, 0x08	; 8
     738:	fc 01       	movw	r30, r24
     73a:	20 83       	st	Z, r18

    while(write_busy);
     73c:	00 00       	nop
     73e:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <write_busy>
     742:	88 23       	and	r24, r24
     744:	e1 f7       	brne	.-8      	; 0x73e <eeprom_writebuf+0xc0>
}
     746:	00 00       	nop
     748:	27 96       	adiw	r28, 0x07	; 7
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <eeprom_readbuf>:

void eeprom_readbuf(unsigned int addr, unsigned char* buf, unsigned char size)
{
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62
     762:	29 97       	sbiw	r28, 0x09	; 9
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	f8 94       	cli
     768:	de bf       	out	0x3e, r29	; 62
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	cd bf       	out	0x3d, r28	; 61
     76e:	9e 83       	std	Y+6, r25	; 0x06
     770:	8d 83       	std	Y+5, r24	; 0x05
     772:	78 87       	std	Y+8, r23	; 0x08
     774:	6f 83       	std	Y+7, r22	; 0x07
     776:	49 87       	std	Y+9, r20	; 0x09
    unsigned int read_addr=addr;
     778:	8d 81       	ldd	r24, Y+5	; 0x05
     77a:	9e 81       	ldd	r25, Y+6	; 0x06
     77c:	9a 83       	std	Y+2, r25	; 0x02
     77e:	89 83       	std	Y+1, r24	; 0x01
    for(int i=0;i<size;i++)
     780:	1c 82       	std	Y+4, r1	; 0x04
     782:	1b 82       	std	Y+3, r1	; 0x03
     784:	2d c0       	rjmp	.+90     	; 0x7e0 <eeprom_readbuf+0x86>
    {
        //Read from EEPROM and store in buf[0:size-1]
        while(EECR & (1<<EEPE));     //waiting until EEPE becomes 0
     786:	00 00       	nop
     788:	8f e3       	ldi	r24, 0x3F	; 63
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	fc 01       	movw	r30, r24
     78e:	80 81       	ld	r24, Z
     790:	08 2e       	mov	r0, r24
     792:	00 0c       	add	r0, r0
     794:	99 0b       	sbc	r25, r25
     796:	82 70       	andi	r24, 0x02	; 2
     798:	99 27       	eor	r25, r25
     79a:	89 2b       	or	r24, r25
     79c:	a9 f7       	brne	.-22     	; 0x788 <eeprom_readbuf+0x2e>

        EEAR = read_addr;
     79e:	81 e4       	ldi	r24, 0x41	; 65
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	29 81       	ldd	r18, Y+1	; 0x01
     7a4:	3a 81       	ldd	r19, Y+2	; 0x02
     7a6:	fc 01       	movw	r30, r24
     7a8:	31 83       	std	Z+1, r19	; 0x01
     7aa:	20 83       	st	Z, r18

        eeprom_readenable();
     7ac:	0e 94 2e 03 	call	0x65c	; 0x65c <eeprom_readenable>

        //Wait for 4 cycles
        __builtin_avr_delay_cycles(4);
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <eeprom_readbuf+0x58>
     7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <eeprom_readbuf+0x5a>

        buf[i] = EEDR;
     7b4:	8b 81       	ldd	r24, Y+3	; 0x03
     7b6:	9c 81       	ldd	r25, Y+4	; 0x04
     7b8:	2f 81       	ldd	r18, Y+7	; 0x07
     7ba:	38 85       	ldd	r19, Y+8	; 0x08
     7bc:	82 0f       	add	r24, r18
     7be:	93 1f       	adc	r25, r19
     7c0:	20 e4       	ldi	r18, 0x40	; 64
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	f9 01       	movw	r30, r18
     7c6:	20 81       	ld	r18, Z
     7c8:	fc 01       	movw	r30, r24
     7ca:	20 83       	st	Z, r18
        read_addr++;
     7cc:	89 81       	ldd	r24, Y+1	; 0x01
     7ce:	9a 81       	ldd	r25, Y+2	; 0x02
     7d0:	01 96       	adiw	r24, 0x01	; 1
     7d2:	9a 83       	std	Y+2, r25	; 0x02
     7d4:	89 83       	std	Y+1, r24	; 0x01
}

void eeprom_readbuf(unsigned int addr, unsigned char* buf, unsigned char size)
{
    unsigned int read_addr=addr;
    for(int i=0;i<size;i++)
     7d6:	8b 81       	ldd	r24, Y+3	; 0x03
     7d8:	9c 81       	ldd	r25, Y+4	; 0x04
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	9c 83       	std	Y+4, r25	; 0x04
     7de:	8b 83       	std	Y+3, r24	; 0x03
     7e0:	89 85       	ldd	r24, Y+9	; 0x09
     7e2:	28 2f       	mov	r18, r24
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	8b 81       	ldd	r24, Y+3	; 0x03
     7e8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ea:	82 17       	cp	r24, r18
     7ec:	93 07       	cpc	r25, r19
     7ee:	5c f2       	brlt	.-106    	; 0x786 <eeprom_readbuf+0x2c>
        __builtin_avr_delay_cycles(4);

        buf[i] = EEDR;
        read_addr++;
    }
}
     7f0:	00 00       	nop
     7f2:	29 96       	adiw	r28, 0x09	; 9
     7f4:	0f b6       	in	r0, 0x3f	; 63
     7f6:	f8 94       	cli
     7f8:	de bf       	out	0x3e, r29	; 62
     7fa:	0f be       	out	0x3f, r0	; 63
     7fc:	cd bf       	out	0x3d, r28	; 61
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	08 95       	ret

00000804 <__vector_22>:

void __vector_22(void) __attribute__ ((signal, used, externally_visible));

void __vector_22(){
     804:	1f 92       	push	r1
     806:	0f 92       	push	r0
     808:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     80c:	0f 92       	push	r0
     80e:	11 24       	eor	r1, r1
     810:	2f 93       	push	r18
     812:	3f 93       	push	r19
     814:	4f 93       	push	r20
     816:	5f 93       	push	r21
     818:	6f 93       	push	r22
     81a:	7f 93       	push	r23
     81c:	8f 93       	push	r24
     81e:	9f 93       	push	r25
     820:	af 93       	push	r26
     822:	bf 93       	push	r27
     824:	ef 93       	push	r30
     826:	ff 93       	push	r31
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
    //EEPROM ready
    if(bufidx<writesize)
     830:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <bufidx>
     834:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <writesize>
     838:	98 17       	cp	r25, r24
     83a:	d8 f5       	brcc	.+118    	; 0x8b2 <__vector_22+0xae>
    {
        //Clear the global interrupt flag
        SREG &= ~(1<<I_SREG);
     83c:	8f e5       	ldi	r24, 0x5F	; 95
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	2f e5       	ldi	r18, 0x5F	; 95
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	f9 01       	movw	r30, r18
     846:	20 81       	ld	r18, Z
     848:	2f 77       	andi	r18, 0x7F	; 127
     84a:	fc 01       	movw	r30, r24
     84c:	20 83       	st	Z, r18

        //Write writebuf[bufidx] to EEPROM writeaddr

        while (EECR & (1<<EEPE));     //waiting until EEPE becomes 0
     84e:	00 00       	nop
     850:	8f e3       	ldi	r24, 0x3F	; 63
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	fc 01       	movw	r30, r24
     856:	80 81       	ld	r24, Z
     858:	08 2e       	mov	r0, r24
     85a:	00 0c       	add	r0, r0
     85c:	99 0b       	sbc	r25, r25
     85e:	82 70       	andi	r24, 0x02	; 2
     860:	99 27       	eor	r25, r25
     862:	89 2b       	or	r24, r25
     864:	a9 f7       	brne	.-22     	; 0x850 <__vector_22+0x4c>

        //while (SPMCSR & (1<<SELFPRGEN));     //waiting until SELFPRGEN becomes 0

        EEAR = writeaddr;                      //Writes address to EEARL register
     866:	81 e4       	ldi	r24, 0x41	; 65
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	20 91 8d 02 	lds	r18, 0x028D	; 0x80028d <writeaddr>
     86e:	30 91 8e 02 	lds	r19, 0x028E	; 0x80028e <writeaddr+0x1>
     872:	fc 01       	movw	r30, r24
     874:	31 83       	std	Z+1, r19	; 0x01
     876:	20 83       	st	Z, r18
        EEDR = writebuf[bufidx];                //Writes data to EEDR register
     878:	80 e4       	ldi	r24, 0x40	; 64
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	20 91 d0 02 	lds	r18, 0x02D0	; 0x8002d0 <bufidx>
     880:	22 2f       	mov	r18, r18
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	20 57       	subi	r18, 0x70	; 112
     886:	3d 4f       	sbci	r19, 0xFD	; 253
     888:	f9 01       	movw	r30, r18
     88a:	20 81       	ld	r18, Z
     88c:	fc 01       	movw	r30, r24
     88e:	20 83       	st	Z, r18

        eeprom_unlock();
     890:	0e 94 2b 03 	call	0x656	; 0x656 <eeprom_unlock>

        writeaddr++;
     894:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <writeaddr>
     898:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <writeaddr+0x1>
     89c:	01 96       	adiw	r24, 0x01	; 1
     89e:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <writeaddr+0x1>
     8a2:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <writeaddr>
        bufidx++;
     8a6:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <bufidx>
     8aa:	8f 5f       	subi	r24, 0xFF	; 255
     8ac:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <bufidx>
    {
        //Disable EEPROM ready interrupts
        EECR &= ~(1<<EERIE);
        write_busy=0;
    }
}
     8b0:	11 c0       	rjmp	.+34     	; 0x8d4 <__vector_22+0xd0>
        //Re-enable eeprom ready interrupt (just in case)
        //EECR |= (1<<EERIE);

        //while(EECR & (1<<EEPE)); //wait until EEPE becomes 0
    }
    else if (bufidx>=writesize)
     8b2:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <bufidx>
     8b6:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <writesize>
     8ba:	98 17       	cp	r25, r24
     8bc:	58 f0       	brcs	.+22     	; 0x8d4 <__vector_22+0xd0>
    {
        //Disable EEPROM ready interrupts
        EECR &= ~(1<<EERIE);
     8be:	8f e3       	ldi	r24, 0x3F	; 63
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	2f e3       	ldi	r18, 0x3F	; 63
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	f9 01       	movw	r30, r18
     8c8:	20 81       	ld	r18, Z
     8ca:	27 7f       	andi	r18, 0xF7	; 247
     8cc:	fc 01       	movw	r30, r24
     8ce:	20 83       	st	Z, r18
        write_busy=0;
     8d0:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <write_busy>
    }
}
     8d4:	00 00       	nop
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	ff 91       	pop	r31
     8dc:	ef 91       	pop	r30
     8de:	bf 91       	pop	r27
     8e0:	af 91       	pop	r26
     8e2:	9f 91       	pop	r25
     8e4:	8f 91       	pop	r24
     8e6:	7f 91       	pop	r23
     8e8:	6f 91       	pop	r22
     8ea:	5f 91       	pop	r21
     8ec:	4f 91       	pop	r20
     8ee:	3f 91       	pop	r19
     8f0:	2f 91       	pop	r18
     8f2:	0f 90       	pop	r0
     8f4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     8f8:	0f 90       	pop	r0
     8fa:	1f 90       	pop	r1
     8fc:	18 95       	reti

000008fe <EEPROM_set_write_mode>:

void EEPROM_set_write_mode(){
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	cd b7       	in	r28, 0x3d	; 61
     904:	de b7       	in	r29, 0x3e	; 62
    EECR |= (1<<EEPM1);
     906:	8f e3       	ldi	r24, 0x3F	; 63
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	2f e3       	ldi	r18, 0x3F	; 63
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	f9 01       	movw	r30, r18
     910:	20 81       	ld	r18, Z
     912:	20 62       	ori	r18, 0x20	; 32
     914:	fc 01       	movw	r30, r24
     916:	20 83       	st	Z, r18
}
     918:	00 00       	nop
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	08 95       	ret

00000920 <led_init>:

const char *Blink_msg;
unsigned int Blink_pos;
enum Blink_state { phase1, phase2 } blink_state;

void led_init() {
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
     924:	cd b7       	in	r28, 0x3d	; 61
     926:	de b7       	in	r29, 0x3e	; 62
    DDRB |= LED_PIN; // Set LED pin as output
     928:	84 e2       	ldi	r24, 0x24	; 36
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	24 e2       	ldi	r18, 0x24	; 36
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	f9 01       	movw	r30, r18
     932:	20 81       	ld	r18, Z
     934:	22 60       	ori	r18, 0x02	; 2
     936:	fc 01       	movw	r30, r24
     938:	20 83       	st	Z, r18
    PORTB &= ~LED_PIN; // Turn off the LED
     93a:	85 e2       	ldi	r24, 0x25	; 37
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	25 e2       	ldi	r18, 0x25	; 37
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	f9 01       	movw	r30, r18
     944:	20 81       	ld	r18, Z
     946:	2d 7f       	andi	r18, 0xFD	; 253
     948:	fc 01       	movw	r30, r24
     94a:	20 83       	st	Z, r18
}
     94c:	00 00       	nop
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <led_on>:

void led_on() {
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	cd b7       	in	r28, 0x3d	; 61
     95a:	de b7       	in	r29, 0x3e	; 62
    PORTB |= LED_PIN;
     95c:	85 e2       	ldi	r24, 0x25	; 37
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	25 e2       	ldi	r18, 0x25	; 37
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	f9 01       	movw	r30, r18
     966:	20 81       	ld	r18, Z
     968:	22 60       	ori	r18, 0x02	; 2
     96a:	fc 01       	movw	r30, r24
     96c:	20 83       	st	Z, r18
}
     96e:	00 00       	nop
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <led_off>:

void led_off() {
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~LED_PIN;
     97e:	85 e2       	ldi	r24, 0x25	; 37
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	25 e2       	ldi	r18, 0x25	; 37
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	f9 01       	movw	r30, r18
     988:	20 81       	ld	r18, Z
     98a:	2d 7f       	andi	r18, 0xFD	; 253
     98c:	fc 01       	movw	r30, r24
     98e:	20 83       	st	Z, r18
}
     990:	00 00       	nop
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	08 95       	ret

00000998 <led_is_on>:

int led_is_on() {
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	cd b7       	in	r28, 0x3d	; 61
     99e:	de b7       	in	r29, 0x3e	; 62
    return (PORTB & LED_PIN) ? 1 : 0;
     9a0:	85 e2       	ldi	r24, 0x25	; 37
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	fc 01       	movw	r30, r24
     9a6:	80 81       	ld	r24, Z
     9a8:	88 2f       	mov	r24, r24
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	82 70       	andi	r24, 0x02	; 2
     9ae:	99 27       	eor	r25, r25
     9b0:	21 e0       	ldi	r18, 0x01	; 1
     9b2:	89 2b       	or	r24, r25
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <led_is_on+0x20>
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	82 2f       	mov	r24, r18
     9ba:	90 e0       	ldi	r25, 0x00	; 0
}
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	08 95       	ret

000009c2 <led_set_blink>:

void led_set_blink(char *msg) {
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	00 d0       	rcall	.+0      	; 0x9c8 <led_set_blink+0x6>
     9c8:	cd b7       	in	r28, 0x3d	; 61
     9ca:	de b7       	in	r29, 0x3e	; 62
     9cc:	9a 83       	std	Y+2, r25	; 0x02
     9ce:	89 83       	std	Y+1, r24	; 0x01
    Blink_msg = msg;
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
     9d2:	9a 81       	ldd	r25, Y+2	; 0x02
     9d4:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <Blink_msg+0x1>
     9d8:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <Blink_msg>
    Blink_pos = 0;
     9dc:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <Blink_pos+0x1>
     9e0:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <Blink_pos>
    blink_state = phase1;
     9e4:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <blink_state+0x1>
     9e8:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <blink_state>
    delay_set(0, 0);
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	0e 94 57 02 	call	0x4ae	; 0x4ae <delay_set>
    led_off();
     9f8:	0e 94 bb 04 	call	0x976	; 0x976 <led_off>
}
     9fc:	00 00       	nop
     9fe:	0f 90       	pop	r0
     a00:	0f 90       	pop	r0
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	08 95       	ret

00000a08 <led_update>:

void led_update() {
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	cd b7       	in	r28, 0x3d	; 61
     a0e:	de b7       	in	r29, 0x3e	; 62
    switch (blink_state) {
     a10:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <blink_state>
     a14:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <blink_state+0x1>
     a18:	00 97       	sbiw	r24, 0x00	; 0
     a1a:	21 f0       	breq	.+8      	; 0xa24 <led_update+0x1c>
     a1c:	01 97       	sbiw	r24, 0x01	; 1
     a1e:	09 f4       	brne	.+2      	; 0xa22 <led_update+0x1a>
     a20:	51 c0       	rjmp	.+162    	; 0xac4 <led_update+0xbc>
                blink_state = phase1;
            }
            break;

        default:
            break;
     a22:	81 c0       	rjmp	.+258    	; 0xb26 <led_update+0x11e>
}

void led_update() {
    switch (blink_state) {
        case phase1:
            if (delay_isdone(0)) {
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 a7 02 	call	0x54e	; 0x54e <delay_isdone>
     a2c:	89 2b       	or	r24, r25
     a2e:	09 f4       	brne	.+2      	; 0xa32 <led_update+0x2a>
     a30:	77 c0       	rjmp	.+238    	; 0xb20 <led_update+0x118>
                switch (Blink_msg[Blink_pos]) {
     a32:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <Blink_msg>
     a36:	30 91 71 02 	lds	r19, 0x0271	; 0x800271 <Blink_msg+0x1>
     a3a:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <Blink_pos>
     a3e:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <Blink_pos+0x1>
     a42:	82 0f       	add	r24, r18
     a44:	93 1f       	adc	r25, r19
     a46:	fc 01       	movw	r30, r24
     a48:	80 81       	ld	r24, Z
     a4a:	08 2e       	mov	r0, r24
     a4c:	00 0c       	add	r0, r0
     a4e:	99 0b       	sbc	r25, r25
     a50:	8d 32       	cpi	r24, 0x2D	; 45
     a52:	91 05       	cpc	r25, r1
     a54:	31 f0       	breq	.+12     	; 0xa62 <led_update+0x5a>
     a56:	8e 32       	cpi	r24, 0x2E	; 46
     a58:	91 05       	cpc	r25, r1
     a5a:	91 f0       	breq	.+36     	; 0xa80 <led_update+0x78>
     a5c:	80 97       	sbiw	r24, 0x20	; 32
     a5e:	f9 f0       	breq	.+62     	; 0xa9e <led_update+0x96>
     a60:	27 c0       	rjmp	.+78     	; 0xab0 <led_update+0xa8>
                    case '-':
                        led_on();
     a62:	0e 94 aa 04 	call	0x954	; 0x954 <led_on>
                        delay_set(0, 750);
     a66:	6e ee       	ldi	r22, 0xEE	; 238
     a68:	72 e0       	ldi	r23, 0x02	; 2
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 57 02 	call	0x4ae	; 0x4ae <delay_set>
                        //delay_set(0,7);
                        blink_state = phase2;
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <blink_state+0x1>
     a7a:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <blink_state>
                        break;
     a7e:	21 c0       	rjmp	.+66     	; 0xac2 <led_update+0xba>
                    case '.':
                        led_on();
     a80:	0e 94 aa 04 	call	0x954	; 0x954 <led_on>
                        delay_set(0, 250);
     a84:	6a ef       	ldi	r22, 0xFA	; 250
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	0e 94 57 02 	call	0x4ae	; 0x4ae <delay_set>
                        //delay_set(0,2);
                        blink_state = phase2;
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <blink_state+0x1>
     a98:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <blink_state>
                        break;
     a9c:	12 c0       	rjmp	.+36     	; 0xac2 <led_update+0xba>
                    case ' ':
                        led_off();
     a9e:	0e 94 bb 04 	call	0x976	; 0x976 <led_off>
                        delay_set(0, 1000);
     aa2:	68 ee       	ldi	r22, 0xE8	; 232
     aa4:	73 e0       	ldi	r23, 0x03	; 3
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	0e 94 57 02 	call	0x4ae	; 0x4ae <delay_set>
                        //blink_state = phase2;
                        break;
     aae:	09 c0       	rjmp	.+18     	; 0xac2 <led_update+0xba>
                    default:
                        led_off();
     ab0:	0e 94 bb 04 	call	0x976	; 0x976 <led_off>
                        delay_set(0, 0);
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	0e 94 57 02 	call	0x4ae	; 0x4ae <delay_set>
                        break;
     ac0:	00 00       	nop
                }
            }
            break;
     ac2:	2e c0       	rjmp	.+92     	; 0xb20 <led_update+0x118>

        case phase2:
            if (delay_isdone(0)) {
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 a7 02 	call	0x54e	; 0x54e <delay_isdone>
     acc:	89 2b       	or	r24, r25
     ace:	51 f1       	breq	.+84     	; 0xb24 <led_update+0x11c>
                led_off();
     ad0:	0e 94 bb 04 	call	0x976	; 0x976 <led_off>
                delay_set(0, 100);
     ad4:	64 e6       	ldi	r22, 0x64	; 100
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 57 02 	call	0x4ae	; 0x4ae <delay_set>
                //delay_set(0, 1);
                Blink_pos++;
     ae0:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <Blink_pos>
     ae4:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <Blink_pos+0x1>
     ae8:	01 96       	adiw	r24, 0x01	; 1
     aea:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <Blink_pos+0x1>
     aee:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <Blink_pos>
                if (Blink_pos >= strlen(Blink_msg)) {
     af2:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <Blink_msg>
     af6:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <Blink_msg+0x1>
     afa:	0e 94 66 14 	call	0x28cc	; 0x28cc <strlen>
     afe:	9c 01       	movw	r18, r24
     b00:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <Blink_pos>
     b04:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <Blink_pos+0x1>
     b08:	82 17       	cp	r24, r18
     b0a:	93 07       	cpc	r25, r19
     b0c:	20 f0       	brcs	.+8      	; 0xb16 <led_update+0x10e>
                    Blink_pos = 0;
     b0e:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <Blink_pos+0x1>
     b12:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <Blink_pos>
                }
                blink_state = phase1;
     b16:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <blink_state+0x1>
     b1a:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <blink_state>
            }
            break;
     b1e:	02 c0       	rjmp	.+4      	; 0xb24 <led_update+0x11c>
                        led_off();
                        delay_set(0, 0);
                        break;
                }
            }
            break;
     b20:	00 00       	nop
     b22:	01 c0       	rjmp	.+2      	; 0xb26 <led_update+0x11e>
                if (Blink_pos >= strlen(Blink_msg)) {
                    Blink_pos = 0;
                }
                blink_state = phase1;
            }
            break;
     b24:	00 00       	nop

        default:
            break;
    }
}
     b26:	00 00       	nop
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	08 95       	ret

00000b2e <main>:
 #include "vpd.h"
 #include "uart.h"
 #include "log.h"

int main(void)
{
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	00 d0       	rcall	.+0      	; 0xb34 <main+0x6>
     b34:	cd b7       	in	r28, 0x3d	; 61
     b36:	de b7       	in	r29, 0x3e	; 62
    /* Initialize uart, led, and rtc hardware */
    uart_init();
     b38:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <uart_init>
    config_init();
     b3c:	0e 94 a8 00 	call	0x150	; 0x150 <config_init>
    led_init();
     b40:	0e 94 90 04 	call	0x920	; 0x920 <led_init>
    log_init();
     b44:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <log_init>
    rtc_init();
     b48:	0e 94 9e 0a 	call	0x153c	; 0x153c <rtc_init>
    vpd_init();
     b4c:	0e 94 c9 07 	call	0xf92	; 0xf92 <vpd_init>
    //timer1_init();
    delay_init();
     b50:	0e 94 d7 01 	call	0x3ae	; 0x3ae <delay_init>

    /* Initialize led blink pattern to "--- -.-" in Morse Code */
    led_set_blink("-");
     b54:	8d e5       	ldi	r24, 0x5D	; 93
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <led_set_blink>

    /* Set RTC date/time to "01/01/2019 00:00:00" */
    rtc_set_by_datestr("01/01/2019 00:00:00");
     b5c:	8f e5       	ldi	r24, 0x5F	; 95
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	0e 94 cd 0a 	call	0x159a	; 0x159a <rtc_set_by_datestr>

    /* Output project information to the console */
    uart_writestr("SER 486 Project 2 - Manish Mysore Rajesh Gangadhar\n\r");
     b64:	83 e7       	ldi	r24, 0x73	; 115
     b66:	91 e0       	ldi	r25, 0x01	; 1
     b68:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <uart_writestr>

    //uart_writestr("SER 486 Project 2 - Venkata Kanaka Rama Meher Virinchi\n\r");

    uart_writestr(vpd.model);
     b6c:	85 ed       	ldi	r24, 0xD5	; 213
     b6e:	92 e0       	ldi	r25, 0x02	; 2
     b70:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <uart_writestr>
    uart_writestr("\n\r");
     b74:	88 ea       	ldi	r24, 0xA8	; 168
     b76:	91 e0       	ldi	r25, 0x01	; 1
     b78:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <uart_writestr>
    uart_writestr(vpd.manufacturer);
     b7c:	81 ee       	ldi	r24, 0xE1	; 225
     b7e:	92 e0       	ldi	r25, 0x02	; 2
     b80:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <uart_writestr>
    uart_writestr("\n\r");
     b84:	88 ea       	ldi	r24, 0xA8	; 168
     b86:	91 e0       	ldi	r25, 0x01	; 1
     b88:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <uart_writestr>
    uart_writestr(config.token);
     b8c:	8b e7       	ldi	r24, 0x7B	; 123
     b8e:	92 e0       	ldi	r25, 0x02	; 2
     b90:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <uart_writestr>
    uart_writestr("\n\r");
     b94:	88 ea       	ldi	r24, 0xA8	; 168
     b96:	91 e0       	ldi	r25, 0x01	; 1
     b98:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <uart_writestr>

    //Set the config.use_static_ip=1 and set modified
    config.use_static_ip=1;
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <config+0xc>
    config_set_modified();
     ba2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <config_set_modified>

    //Clear event log and add three records to it
    log_clear();
     ba6:	0e 94 24 0a 	call	0x1448	; 0x1448 <log_clear>
    log_add_record(0xaa);
     baa:	8a ea       	ldi	r24, 0xAA	; 170
     bac:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <log_add_record>
    log_add_record(0xbb);
     bb0:	8b eb       	ldi	r24, 0xBB	; 187
     bb2:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <log_add_record>
    log_add_record(0xcc);
     bb6:	8c ec       	ldi	r24, 0xCC	; 204
     bb8:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <log_add_record>

    log_update();
     bbc:	0e 94 9d 09 	call	0x133a	; 0x133a <log_update>
    log_update();
     bc0:	0e 94 9d 09 	call	0x133a	; 0x133a <log_update>
    log_update();
     bc4:	0e 94 9d 09 	call	0x133a	; 0x133a <log_update>

    int dumped=0;
     bc8:	1a 82       	std	Y+2, r1	; 0x02
     bca:	19 82       	std	Y+1, r1	; 0x01

    uart_writehex8(config.checksum);
     bcc:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <config+0x11>
     bd0:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <uart_writehex8>
    uart_writestr("\n\r");
     bd4:	88 ea       	ldi	r24, 0xA8	; 168
     bd6:	91 e0       	ldi	r25, 0x01	; 1
     bd8:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <uart_writestr>


    while(1)
    {
        led_update();
     bdc:	0e 94 04 05 	call	0xa08	; 0xa08 <led_update>
        log_update();
     be0:	0e 94 9d 09 	call	0x133a	; 0x133a <log_update>
        config_update();
     be4:	0e 94 77 01 	call	0x2ee	; 0x2ee <config_update>

        if(!eeprom_isbusy() && (!dumped))
     be8:	0e 94 30 03 	call	0x660	; 0x660 <eeprom_isbusy>
     bec:	89 2b       	or	r24, r25
     bee:	b1 f7       	brne	.-20     	; 0xbdc <main+0xae>
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	9a 81       	ldd	r25, Y+2	; 0x02
     bf4:	89 2b       	or	r24, r25
     bf6:	91 f7       	brne	.-28     	; 0xbdc <main+0xae>
        {
            dump_eeprom(0, 0x100);
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	71 e0       	ldi	r23, 0x01	; 1
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <dump_eeprom>
            dumped=1;
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	9a 83       	std	Y+2, r25	; 0x02
     c0a:	89 83       	std	Y+1, r24	; 0x01
        }
    }
     c0c:	e7 cf       	rjmp	.-50     	; 0xbdc <main+0xae>

00000c0e <timer1_init>:
#define OCIE1A 1

#define I_SREG 7
static volatile unsigned long count = 0;

void timer1_init() {
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	00 d0       	rcall	.+0      	; 0xc14 <timer1_init+0x6>
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
    // Example: (16,000,000 / 1024 / 15625) = 1 Hz

    /*
    unsigned int PRESCALER_VALUE = 1024;
    */
    unsigned int COMPARE_VALUE = 15625;  //16 bit max value = 2^16 - 65535
     c18:	89 e0       	ldi	r24, 0x09	; 9
     c1a:	9d e3       	ldi	r25, 0x3D	; 61
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01

    // Set CTC mode
    TCCR1B |= (1 << WGM12); // WGM12
     c20:	81 e8       	ldi	r24, 0x81	; 129
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	21 e8       	ldi	r18, 0x81	; 129
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	f9 01       	movw	r30, r18
     c2a:	20 81       	ld	r18, Z
     c2c:	28 60       	ori	r18, 0x08	; 8
     c2e:	fc 01       	movw	r30, r24
     c30:	20 83       	st	Z, r18

    // Set clock divisor (prescaler value = 1024)
    TCCR1B |= (1 << CS12) | (1 << CS10); // CS12 and CS10
     c32:	81 e8       	ldi	r24, 0x81	; 129
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	21 e8       	ldi	r18, 0x81	; 129
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	f9 01       	movw	r30, r18
     c3c:	20 81       	ld	r18, Z
     c3e:	25 60       	ori	r18, 0x05	; 5
     c40:	fc 01       	movw	r30, r24
     c42:	20 83       	st	Z, r18

    // Set compare value
    OCR1A = COMPARE_VALUE - 1;
     c44:	88 e8       	ldi	r24, 0x88	; 136
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	29 81       	ldd	r18, Y+1	; 0x01
     c4a:	3a 81       	ldd	r19, Y+2	; 0x02
     c4c:	21 50       	subi	r18, 0x01	; 1
     c4e:	31 09       	sbc	r19, r1
     c50:	fc 01       	movw	r30, r24
     c52:	31 83       	std	Z+1, r19	; 0x01
     c54:	20 83       	st	Z, r18

    // Enable interrupts on output compare A
    TIMSK1 |= (1 << OCIE1A); // OCIE1A
     c56:	8f e6       	ldi	r24, 0x6F	; 111
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	2f e6       	ldi	r18, 0x6F	; 111
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	f9 01       	movw	r30, r18
     c60:	20 81       	ld	r18, Z
     c62:	22 60       	ori	r18, 0x02	; 2
     c64:	fc 01       	movw	r30, r24
     c66:	20 83       	st	Z, r18

    // Enable global interrupts
    // __builtin_avr_sei();
    SREG |= (1<<I_SREG);
     c68:	8f e5       	ldi	r24, 0x5F	; 95
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	2f e5       	ldi	r18, 0x5F	; 95
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	f9 01       	movw	r30, r18
     c72:	20 81       	ld	r18, Z
     c74:	20 68       	ori	r18, 0x80	; 128
     c76:	fc 01       	movw	r30, r24
     c78:	20 83       	st	Z, r18
}
     c7a:	00 00       	nop
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	df 91       	pop	r29
     c82:	cf 91       	pop	r28
     c84:	08 95       	ret

00000c86 <timer1_get>:

unsigned long timer1_get() {
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	00 d0       	rcall	.+0      	; 0xc8c <timer1_get+0x6>
     c8c:	00 d0       	rcall	.+0      	; 0xc8e <timer1_get+0x8>
     c8e:	00 d0       	rcall	.+0      	; 0xc90 <timer1_get+0xa>
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
    unsigned long count_value;

    // Get global interrupt enable bit state
    unsigned int sreg_state = SREG & (1 << I_SREG);
     c94:	8f e5       	ldi	r24, 0x5F	; 95
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	fc 01       	movw	r30, r24
     c9a:	80 81       	ld	r24, Z
     c9c:	88 2f       	mov	r24, r24
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	80 78       	andi	r24, 0x80	; 128
     ca2:	99 27       	eor	r25, r25
     ca4:	9a 83       	std	Y+2, r25	; 0x02
     ca6:	89 83       	std	Y+1, r24	; 0x01

    // Disable interrupts
    // __builtin_avr_cli();
    SREG &= ~(1<<I_SREG);
     ca8:	8f e5       	ldi	r24, 0x5F	; 95
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	2f e5       	ldi	r18, 0x5F	; 95
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	f9 01       	movw	r30, r18
     cb2:	20 81       	ld	r18, Z
     cb4:	2f 77       	andi	r18, 0x7F	; 127
     cb6:	fc 01       	movw	r30, r24
     cb8:	20 83       	st	Z, r18

    // Get the count value
    count_value = count;
     cba:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <count>
     cbe:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <count+0x1>
     cc2:	a0 91 de 01 	lds	r26, 0x01DE	; 0x8001de <count+0x2>
     cc6:	b0 91 df 01 	lds	r27, 0x01DF	; 0x8001df <count+0x3>
     cca:	8b 83       	std	Y+3, r24	; 0x03
     ccc:	9c 83       	std	Y+4, r25	; 0x04
     cce:	ad 83       	std	Y+5, r26	; 0x05
     cd0:	be 83       	std	Y+6, r27	; 0x06

    // Restore global interrupt state
    if (sreg_state) {
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	9a 81       	ldd	r25, Y+2	; 0x02
     cd6:	89 2b       	or	r24, r25
     cd8:	49 f0       	breq	.+18     	; 0xcec <timer1_get+0x66>
        // __builtin_avr_sei();
        SREG |= (1<<I_SREG);
     cda:	8f e5       	ldi	r24, 0x5F	; 95
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	2f e5       	ldi	r18, 0x5F	; 95
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	f9 01       	movw	r30, r18
     ce4:	20 81       	ld	r18, Z
     ce6:	20 68       	ori	r18, 0x80	; 128
     ce8:	fc 01       	movw	r30, r24
     cea:	20 83       	st	Z, r18
    }

    // Return the count value
    return count_value;
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	9c 81       	ldd	r25, Y+4	; 0x04
     cf0:	ad 81       	ldd	r26, Y+5	; 0x05
     cf2:	be 81       	ldd	r27, Y+6	; 0x06
}
     cf4:	bc 01       	movw	r22, r24
     cf6:	cd 01       	movw	r24, r26
     cf8:	26 96       	adiw	r28, 0x06	; 6
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	de bf       	out	0x3e, r29	; 62
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	cd bf       	out	0x3d, r28	; 61
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	08 95       	ret

00000d0a <timer1_clear>:

void timer1_clear() {
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	00 d0       	rcall	.+0      	; 0xd10 <timer1_clear+0x6>
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
    // Get global interrupt enable bit state
    unsigned int sreg_state = SREG & (1 << I_SREG);
     d14:	8f e5       	ldi	r24, 0x5F	; 95
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	fc 01       	movw	r30, r24
     d1a:	80 81       	ld	r24, Z
     d1c:	88 2f       	mov	r24, r24
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	80 78       	andi	r24, 0x80	; 128
     d22:	99 27       	eor	r25, r25
     d24:	9a 83       	std	Y+2, r25	; 0x02
     d26:	89 83       	std	Y+1, r24	; 0x01

    // Disable interrupts
    // __builtin_avr_cli();
    SREG &= ~(1<<I_SREG);
     d28:	8f e5       	ldi	r24, 0x5F	; 95
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	2f e5       	ldi	r18, 0x5F	; 95
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	f9 01       	movw	r30, r18
     d32:	20 81       	ld	r18, Z
     d34:	2f 77       	andi	r18, 0x7F	; 127
     d36:	fc 01       	movw	r30, r24
     d38:	20 83       	st	Z, r18

    // Clear count value
    count = 0;
     d3a:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <count>
     d3e:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <count+0x1>
     d42:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <count+0x2>
     d46:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <count+0x3>

    // Restore global interrupt state
    if (sreg_state) {
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	9a 81       	ldd	r25, Y+2	; 0x02
     d4e:	89 2b       	or	r24, r25
     d50:	49 f0       	breq	.+18     	; 0xd64 <timer1_clear+0x5a>
        // __builtin_avr_sei();
        SREG |= (1<<I_SREG);
     d52:	8f e5       	ldi	r24, 0x5F	; 95
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	2f e5       	ldi	r18, 0x5F	; 95
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	f9 01       	movw	r30, r18
     d5c:	20 81       	ld	r18, Z
     d5e:	20 68       	ori	r18, 0x80	; 128
     d60:	fc 01       	movw	r30, r24
     d62:	20 83       	st	Z, r18
    }
}
     d64:	00 00       	nop
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	08 95       	ret

00000d70 <__vector_11>:


void __vector_11(void) __attribute__ ((signal, used, externally_visible));

void __vector_11(void)
{
     d70:	1f 92       	push	r1
     d72:	0f 92       	push	r0
     d74:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d78:	0f 92       	push	r0
     d7a:	11 24       	eor	r1, r1
     d7c:	8f 93       	push	r24
     d7e:	9f 93       	push	r25
     d80:	af 93       	push	r26
     d82:	bf 93       	push	r27
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
    // Increment the count by 1
    count++;
     d8c:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <count>
     d90:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <count+0x1>
     d94:	a0 91 de 01 	lds	r26, 0x01DE	; 0x8001de <count+0x2>
     d98:	b0 91 df 01 	lds	r27, 0x01DF	; 0x8001df <count+0x3>
     d9c:	01 96       	adiw	r24, 0x01	; 1
     d9e:	a1 1d       	adc	r26, r1
     da0:	b1 1d       	adc	r27, r1
     da2:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <count>
     da6:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <count+0x1>
     daa:	a0 93 de 01 	sts	0x01DE, r26	; 0x8001de <count+0x2>
     dae:	b0 93 df 01 	sts	0x01DF, r27	; 0x8001df <count+0x3>
}
     db2:	00 00       	nop
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	bf 91       	pop	r27
     dba:	af 91       	pop	r26
     dbc:	9f 91       	pop	r25
     dbe:	8f 91       	pop	r24
     dc0:	0f 90       	pop	r0
     dc2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     dc6:	0f 90       	pop	r0
     dc8:	1f 90       	pop	r1
     dca:	18 95       	reti

00000dcc <calc_checksum>:
#define SREG    *((volatile char*) 0x5F)

#define C_SREG 0

unsigned char calc_checksum(unsigned char *data, unsigned int dsize)
{
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
     dd4:	27 97       	sbiw	r28, 0x07	; 7
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	f8 94       	cli
     dda:	de bf       	out	0x3e, r29	; 62
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	cd bf       	out	0x3d, r28	; 61
     de0:	9d 83       	std	Y+5, r25	; 0x05
     de2:	8c 83       	std	Y+4, r24	; 0x04
     de4:	7f 83       	std	Y+7, r23	; 0x07
     de6:	6e 83       	std	Y+6, r22	; 0x06
    //Storing checksum result in unsigned byte
    unsigned char checksum_result;

    for(int i=0;i<dsize;i++)
     de8:	1b 82       	std	Y+3, r1	; 0x03
     dea:	1a 82       	std	Y+2, r1	; 0x02
     dec:	1e c0       	rjmp	.+60     	; 0xe2a <calc_checksum+0x5e>
    {
        checksum_result += data[i];
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	9b 81       	ldd	r25, Y+3	; 0x03
     df2:	2c 81       	ldd	r18, Y+4	; 0x04
     df4:	3d 81       	ldd	r19, Y+5	; 0x05
     df6:	82 0f       	add	r24, r18
     df8:	93 1f       	adc	r25, r19
     dfa:	fc 01       	movw	r30, r24
     dfc:	80 81       	ld	r24, Z
     dfe:	99 81       	ldd	r25, Y+1	; 0x01
     e00:	89 0f       	add	r24, r25
     e02:	89 83       	std	Y+1, r24	; 0x01
        if(SREG & (1<<C_SREG))
     e04:	8f e5       	ldi	r24, 0x5F	; 95
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	fc 01       	movw	r30, r24
     e0a:	80 81       	ld	r24, Z
     e0c:	08 2e       	mov	r0, r24
     e0e:	00 0c       	add	r0, r0
     e10:	99 0b       	sbc	r25, r25
     e12:	81 70       	andi	r24, 0x01	; 1
     e14:	99 27       	eor	r25, r25
     e16:	89 2b       	or	r24, r25
     e18:	19 f0       	breq	.+6      	; 0xe20 <calc_checksum+0x54>
        {
            //carry wraparound
            checksum_result+=1;
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	8f 5f       	subi	r24, 0xFF	; 255
     e1e:	89 83       	std	Y+1, r24	; 0x01
unsigned char calc_checksum(unsigned char *data, unsigned int dsize)
{
    //Storing checksum result in unsigned byte
    unsigned char checksum_result;

    for(int i=0;i<dsize;i++)
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	9b 81       	ldd	r25, Y+3	; 0x03
     e24:	01 96       	adiw	r24, 0x01	; 1
     e26:	9b 83       	std	Y+3, r25	; 0x03
     e28:	8a 83       	std	Y+2, r24	; 0x02
     e2a:	2a 81       	ldd	r18, Y+2	; 0x02
     e2c:	3b 81       	ldd	r19, Y+3	; 0x03
     e2e:	8e 81       	ldd	r24, Y+6	; 0x06
     e30:	9f 81       	ldd	r25, Y+7	; 0x07
     e32:	28 17       	cp	r18, r24
     e34:	39 07       	cpc	r19, r25
     e36:	d8 f2       	brcs	.-74     	; 0xdee <calc_checksum+0x22>
            checksum_result+=1;
        }

    }

    return ~checksum_result;
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	80 95       	com	r24

}
     e3c:	27 96       	adiw	r28, 0x07	; 7
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	08 95       	ret

00000e4e <update_checksum>:

void update_checksum(unsigned char *data, unsigned int dsize)
{
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	00 d0       	rcall	.+0      	; 0xe54 <update_checksum+0x6>
     e54:	00 d0       	rcall	.+0      	; 0xe56 <update_checksum+0x8>
     e56:	00 d0       	rcall	.+0      	; 0xe58 <update_checksum+0xa>
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	9c 83       	std	Y+4, r25	; 0x04
     e5e:	8b 83       	std	Y+3, r24	; 0x03
     e60:	7e 83       	std	Y+6, r23	; 0x06
     e62:	6d 83       	std	Y+5, r22	; 0x05
    unsigned char checksum_val = calc_checksum(data, dsize);
     e64:	2d 81       	ldd	r18, Y+5	; 0x05
     e66:	3e 81       	ldd	r19, Y+6	; 0x06
     e68:	8b 81       	ldd	r24, Y+3	; 0x03
     e6a:	9c 81       	ldd	r25, Y+4	; 0x04
     e6c:	b9 01       	movw	r22, r18
     e6e:	0e 94 e6 06 	call	0xdcc	; 0xdcc <calc_checksum>
     e72:	89 83       	std	Y+1, r24	; 0x01
    unsigned char last_byte = 0b11111111 + (~checksum_val + 0b00000001);
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	80 95       	com	r24
     e78:	8a 83       	std	Y+2, r24	; 0x02
    data[dsize-1]=last_byte;
     e7a:	8d 81       	ldd	r24, Y+5	; 0x05
     e7c:	9e 81       	ldd	r25, Y+6	; 0x06
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	2b 81       	ldd	r18, Y+3	; 0x03
     e82:	3c 81       	ldd	r19, Y+4	; 0x04
     e84:	82 0f       	add	r24, r18
     e86:	93 1f       	adc	r25, r19
     e88:	2a 81       	ldd	r18, Y+2	; 0x02
     e8a:	fc 01       	movw	r30, r24
     e8c:	20 83       	st	Z, r18
}
     e8e:	00 00       	nop
     e90:	26 96       	adiw	r28, 0x06	; 6
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	f8 94       	cli
     e96:	de bf       	out	0x3e, r29	; 62
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	cd bf       	out	0x3d, r28	; 61
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	08 95       	ret

00000ea2 <is_checksum_valid>:


int is_checksum_valid(unsigned char* data, unsigned int dsize)
{
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <is_checksum_valid+0x6>
     ea8:	00 d0       	rcall	.+0      	; 0xeaa <is_checksum_valid+0x8>
     eaa:	1f 92       	push	r1
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	9b 83       	std	Y+3, r25	; 0x03
     eb2:	8a 83       	std	Y+2, r24	; 0x02
     eb4:	7d 83       	std	Y+5, r23	; 0x05
     eb6:	6c 83       	std	Y+4, r22	; 0x04
    unsigned char checksum_val = calc_checksum(data, dsize);
     eb8:	2c 81       	ldd	r18, Y+4	; 0x04
     eba:	3d 81       	ldd	r19, Y+5	; 0x05
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	9b 81       	ldd	r25, Y+3	; 0x03
     ec0:	b9 01       	movw	r22, r18
     ec2:	0e 94 e6 06 	call	0xdcc	; 0xdcc <calc_checksum>
     ec6:	89 83       	std	Y+1, r24	; 0x01

    if(checksum_val==0)
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	88 23       	and	r24, r24
     ecc:	19 f4       	brne	.+6      	; 0xed4 <is_checksum_valid+0x32>
        return 1;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <is_checksum_valid+0x36>
    else
        return 0;
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	90 e0       	ldi	r25, 0x00	; 0
}
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	08 95       	ret

00000ee8 <compare>:


//vpd_struct vpd_defaults = {"SER", "Venkata", "Kanaka", "pqrs1234", 0, {0x56,0x45, 0x4E, 0x4B, 0x41, 0x4E}, "USA", 0};

int compare(char a[],char b[])
{
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	28 97       	sbiw	r28, 0x08	; 8
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	9e 83       	std	Y+6, r25	; 0x06
     efe:	8d 83       	std	Y+5, r24	; 0x05
     f00:	78 87       	std	Y+8, r23	; 0x08
     f02:	6f 83       	std	Y+7, r22	; 0x07
    int flag=0,i=0;  // integer variables declaration
     f04:	1a 82       	std	Y+2, r1	; 0x02
     f06:	19 82       	std	Y+1, r1	; 0x01
     f08:	1c 82       	std	Y+4, r1	; 0x04
     f0a:	1b 82       	std	Y+3, r1	; 0x03
    while(a[i]!='\0' &&b[i]!='\0')  // while loop
     f0c:	1c c0       	rjmp	.+56     	; 0xf46 <compare+0x5e>
    {
       if(a[i]!=b[i])
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	9c 81       	ldd	r25, Y+4	; 0x04
     f12:	2d 81       	ldd	r18, Y+5	; 0x05
     f14:	3e 81       	ldd	r19, Y+6	; 0x06
     f16:	82 0f       	add	r24, r18
     f18:	93 1f       	adc	r25, r19
     f1a:	fc 01       	movw	r30, r24
     f1c:	40 81       	ld	r20, Z
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	9c 81       	ldd	r25, Y+4	; 0x04
     f22:	2f 81       	ldd	r18, Y+7	; 0x07
     f24:	38 85       	ldd	r19, Y+8	; 0x08
     f26:	82 0f       	add	r24, r18
     f28:	93 1f       	adc	r25, r19
     f2a:	fc 01       	movw	r30, r24
     f2c:	80 81       	ld	r24, Z
     f2e:	48 17       	cp	r20, r24
     f30:	29 f0       	breq	.+10     	; 0xf3c <compare+0x54>
       {
           flag=1;
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	9a 83       	std	Y+2, r25	; 0x02
     f38:	89 83       	std	Y+1, r24	; 0x01
           break;
     f3a:	19 c0       	rjmp	.+50     	; 0xf6e <compare+0x86>
       }
       i++;
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	9c 81       	ldd	r25, Y+4	; 0x04
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	9c 83       	std	Y+4, r25	; 0x04
     f44:	8b 83       	std	Y+3, r24	; 0x03
//vpd_struct vpd_defaults = {"SER", "Venkata", "Kanaka", "pqrs1234", 0, {0x56,0x45, 0x4E, 0x4B, 0x41, 0x4E}, "USA", 0};

int compare(char a[],char b[])
{
    int flag=0,i=0;  // integer variables declaration
    while(a[i]!='\0' &&b[i]!='\0')  // while loop
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	9c 81       	ldd	r25, Y+4	; 0x04
     f4a:	2d 81       	ldd	r18, Y+5	; 0x05
     f4c:	3e 81       	ldd	r19, Y+6	; 0x06
     f4e:	82 0f       	add	r24, r18
     f50:	93 1f       	adc	r25, r19
     f52:	fc 01       	movw	r30, r24
     f54:	80 81       	ld	r24, Z
     f56:	88 23       	and	r24, r24
     f58:	51 f0       	breq	.+20     	; 0xf6e <compare+0x86>
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	9c 81       	ldd	r25, Y+4	; 0x04
     f5e:	2f 81       	ldd	r18, Y+7	; 0x07
     f60:	38 85       	ldd	r19, Y+8	; 0x08
     f62:	82 0f       	add	r24, r18
     f64:	93 1f       	adc	r25, r19
     f66:	fc 01       	movw	r30, r24
     f68:	80 81       	ld	r24, Z
     f6a:	88 23       	and	r24, r24
     f6c:	81 f6       	brne	.-96     	; 0xf0e <compare+0x26>
           flag=1;
           break;
       }
       i++;
    }
    if(flag==0)
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	9a 81       	ldd	r25, Y+2	; 0x02
     f72:	89 2b       	or	r24, r25
     f74:	19 f4       	brne	.+6      	; 0xf7c <compare+0x94>
    return 0;
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <compare+0x98>
    else
    return 1;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
}
     f80:	28 96       	adiw	r28, 0x08	; 8
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	de bf       	out	0x3e, r29	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	cd bf       	out	0x3d, r28	; 61
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	08 95       	ret

00000f92 <vpd_init>:

void vpd_init()
{
     f92:	ef 92       	push	r14
     f94:	ff 92       	push	r15
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	2e 97       	sbiw	r28, 0x0e	; 14
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	cd bf       	out	0x3d, r28	; 61
        {
            p[i]=buf[i];
        }

    }
}
     fae:	0d b7       	in	r16, 0x3d	; 61
     fb0:	1e b7       	in	r17, 0x3e	; 62
    return 1;
}

void vpd_init()
{
    while(eeprom_isbusy());  //waits for EEPROM to get out of busy state
     fb2:	00 00       	nop
     fb4:	0e 94 30 03 	call	0x660	; 0x660 <eeprom_isbusy>
     fb8:	89 2b       	or	r24, r25
     fba:	e1 f7       	brne	.-8      	; 0xfb4 <vpd_init+0x22>

    //Read 43 bytes from 0x000
    unsigned int base_addr=0x000;
     fbc:	1e 82       	std	Y+6, r1	; 0x06
     fbe:	1d 82       	std	Y+5, r1	; 0x05
    int size = sizeof(vpd_struct);
     fc0:	87 e3       	ldi	r24, 0x37	; 55
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	98 87       	std	Y+8, r25	; 0x08
     fc6:	8f 83       	std	Y+7, r24	; 0x07
    unsigned char buf[size+10];
     fc8:	8f 81       	ldd	r24, Y+7	; 0x07
     fca:	98 85       	ldd	r25, Y+8	; 0x08
     fcc:	0a 96       	adiw	r24, 0x0a	; 10
     fce:	2d b7       	in	r18, 0x3d	; 61
     fd0:	3e b7       	in	r19, 0x3e	; 62
     fd2:	79 01       	movw	r14, r18
     fd4:	9c 01       	movw	r18, r24
     fd6:	21 50       	subi	r18, 0x01	; 1
     fd8:	31 09       	sbc	r19, r1
     fda:	3a 87       	std	Y+10, r19	; 0x0a
     fdc:	29 87       	std	Y+9, r18	; 0x09
     fde:	2d b7       	in	r18, 0x3d	; 61
     fe0:	3e b7       	in	r19, 0x3e	; 62
     fe2:	28 1b       	sub	r18, r24
     fe4:	39 0b       	sbc	r19, r25
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	f8 94       	cli
     fea:	3e bf       	out	0x3e, r19	; 62
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	2d bf       	out	0x3d, r18	; 61
     ff0:	8d b7       	in	r24, 0x3d	; 61
     ff2:	9e b7       	in	r25, 0x3e	; 62
     ff4:	01 96       	adiw	r24, 0x01	; 1
     ff6:	9c 87       	std	Y+12, r25	; 0x0c
     ff8:	8b 87       	std	Y+11, r24	; 0x0b
    unsigned char* p = (unsigned char*)&vpd;
     ffa:	81 ed       	ldi	r24, 0xD1	; 209
     ffc:	92 e0       	ldi	r25, 0x02	; 2
     ffe:	9e 87       	std	Y+14, r25	; 0x0e
    1000:	8d 87       	std	Y+13, r24	; 0x0d


    eeprom_readbuf(base_addr, (unsigned char*)buf, size);
    1002:	4f 81       	ldd	r20, Y+7	; 0x07
    1004:	2b 85       	ldd	r18, Y+11	; 0x0b
    1006:	3c 85       	ldd	r19, Y+12	; 0x0c
    1008:	8d 81       	ldd	r24, Y+5	; 0x05
    100a:	9e 81       	ldd	r25, Y+6	; 0x06
    100c:	b9 01       	movw	r22, r18
    100e:	0e 94 ad 03 	call	0x75a	; 0x75a <eeprom_readbuf>
    //memcpy((unsigned char*)&vpd, (unsigned char*)buf, size);

    for(int i=0;i<size;i++)
    1012:	1a 82       	std	Y+2, r1	; 0x02
    1014:	19 82       	std	Y+1, r1	; 0x01
    1016:	15 c0       	rjmp	.+42     	; 0x1042 <vpd_init+0xb0>
    {
        p[i]=buf[i];
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	9a 81       	ldd	r25, Y+2	; 0x02
    101c:	2d 85       	ldd	r18, Y+13	; 0x0d
    101e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1020:	82 0f       	add	r24, r18
    1022:	93 1f       	adc	r25, r19
    1024:	4b 85       	ldd	r20, Y+11	; 0x0b
    1026:	5c 85       	ldd	r21, Y+12	; 0x0c
    1028:	29 81       	ldd	r18, Y+1	; 0x01
    102a:	3a 81       	ldd	r19, Y+2	; 0x02
    102c:	24 0f       	add	r18, r20
    102e:	35 1f       	adc	r19, r21
    1030:	f9 01       	movw	r30, r18
    1032:	20 81       	ld	r18, Z
    1034:	fc 01       	movw	r30, r24
    1036:	20 83       	st	Z, r18


    eeprom_readbuf(base_addr, (unsigned char*)buf, size);
    //memcpy((unsigned char*)&vpd, (unsigned char*)buf, size);

    for(int i=0;i<size;i++)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	9a 81       	ldd	r25, Y+2	; 0x02
    103c:	01 96       	adiw	r24, 0x01	; 1
    103e:	9a 83       	std	Y+2, r25	; 0x02
    1040:	89 83       	std	Y+1, r24	; 0x01
    1042:	29 81       	ldd	r18, Y+1	; 0x01
    1044:	3a 81       	ldd	r19, Y+2	; 0x02
    1046:	8f 81       	ldd	r24, Y+7	; 0x07
    1048:	98 85       	ldd	r25, Y+8	; 0x08
    104a:	28 17       	cp	r18, r24
    104c:	39 07       	cpc	r19, r25
    104e:	24 f3       	brlt	.-56     	; 0x1018 <vpd_init+0x86>
    }


    //eeprom_readbuf(base_addr, (unsigned char*)&vpd, size);

    if(!vpd_is_data_valid())
    1050:	0e 94 6d 08 	call	0x10da	; 0x10da <vpd_is_data_valid>
    1054:	89 2b       	or	r24, r25
    1056:	49 f5       	brne	.+82     	; 0x10aa <vpd_init+0x118>
    {
        vpd_write_defaults();
    1058:	0e 94 89 08 	call	0x1112	; 0x1112 <vpd_write_defaults>

        //Initialize data by reading default values
        eeprom_readbuf(base_addr, (unsigned char*)buf, size);
    105c:	4f 81       	ldd	r20, Y+7	; 0x07
    105e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1060:	3c 85       	ldd	r19, Y+12	; 0x0c
    1062:	8d 81       	ldd	r24, Y+5	; 0x05
    1064:	9e 81       	ldd	r25, Y+6	; 0x06
    1066:	b9 01       	movw	r22, r18
    1068:	0e 94 ad 03 	call	0x75a	; 0x75a <eeprom_readbuf>
        //memcpy((unsigned char*)&vpd, buf, size);
        for(int i=0;i<size;i++)
    106c:	1c 82       	std	Y+4, r1	; 0x04
    106e:	1b 82       	std	Y+3, r1	; 0x03
    1070:	15 c0       	rjmp	.+42     	; 0x109c <vpd_init+0x10a>
        {
            p[i]=buf[i];
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	9c 81       	ldd	r25, Y+4	; 0x04
    1076:	2d 85       	ldd	r18, Y+13	; 0x0d
    1078:	3e 85       	ldd	r19, Y+14	; 0x0e
    107a:	82 0f       	add	r24, r18
    107c:	93 1f       	adc	r25, r19
    107e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1080:	5c 85       	ldd	r21, Y+12	; 0x0c
    1082:	2b 81       	ldd	r18, Y+3	; 0x03
    1084:	3c 81       	ldd	r19, Y+4	; 0x04
    1086:	24 0f       	add	r18, r20
    1088:	35 1f       	adc	r19, r21
    108a:	f9 01       	movw	r30, r18
    108c:	20 81       	ld	r18, Z
    108e:	fc 01       	movw	r30, r24
    1090:	20 83       	st	Z, r18
        vpd_write_defaults();

        //Initialize data by reading default values
        eeprom_readbuf(base_addr, (unsigned char*)buf, size);
        //memcpy((unsigned char*)&vpd, buf, size);
        for(int i=0;i<size;i++)
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	9c 81       	ldd	r25, Y+4	; 0x04
    1096:	01 96       	adiw	r24, 0x01	; 1
    1098:	9c 83       	std	Y+4, r25	; 0x04
    109a:	8b 83       	std	Y+3, r24	; 0x03
    109c:	2b 81       	ldd	r18, Y+3	; 0x03
    109e:	3c 81       	ldd	r19, Y+4	; 0x04
    10a0:	8f 81       	ldd	r24, Y+7	; 0x07
    10a2:	98 85       	ldd	r25, Y+8	; 0x08
    10a4:	28 17       	cp	r18, r24
    10a6:	39 07       	cpc	r19, r25
    10a8:	24 f3       	brlt	.-56     	; 0x1072 <vpd_init+0xe0>
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	fe be       	out	0x3e, r15	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	ed be       	out	0x3d, r14	; 61
        {
            p[i]=buf[i];
        }

    }
}
    10b4:	00 00       	nop
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	1e bf       	out	0x3e, r17	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	0d bf       	out	0x3d, r16	; 61
    10c0:	2e 96       	adiw	r28, 0x0e	; 14
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	cd bf       	out	0x3d, r28	; 61
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	ff 90       	pop	r15
    10d6:	ef 90       	pop	r14
    10d8:	08 95       	ret

000010da <vpd_is_data_valid>:

int vpd_is_data_valid()
{
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    return compare(vpd.token, vpd_defaults.token) && is_checksum_valid((unsigned char*)&vpd, sizeof(vpd_struct));
    10e2:	62 e1       	ldi	r22, 0x12	; 18
    10e4:	71 e0       	ldi	r23, 0x01	; 1
    10e6:	81 ed       	ldi	r24, 0xD1	; 209
    10e8:	92 e0       	ldi	r25, 0x02	; 2
    10ea:	0e 94 74 07 	call	0xee8	; 0xee8 <compare>
    10ee:	89 2b       	or	r24, r25
    10f0:	59 f0       	breq	.+22     	; 0x1108 <vpd_is_data_valid+0x2e>
    10f2:	67 e3       	ldi	r22, 0x37	; 55
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	81 ed       	ldi	r24, 0xD1	; 209
    10f8:	92 e0       	ldi	r25, 0x02	; 2
    10fa:	0e 94 51 07 	call	0xea2	; 0xea2 <is_checksum_valid>
    10fe:	89 2b       	or	r24, r25
    1100:	19 f0       	breq	.+6      	; 0x1108 <vpd_is_data_valid+0x2e>
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	02 c0       	rjmp	.+4      	; 0x110c <vpd_is_data_valid+0x32>
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	90 e0       	ldi	r25, 0x00	; 0
}
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	08 95       	ret

00001112 <vpd_write_defaults>:

void vpd_write_defaults()
{
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	00 d0       	rcall	.+0      	; 0x1118 <vpd_write_defaults+0x6>
    1118:	00 d0       	rcall	.+0      	; 0x111a <vpd_write_defaults+0x8>
    111a:	00 d0       	rcall	.+0      	; 0x111c <vpd_write_defaults+0xa>
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    update_checksum((unsigned char*)&vpd, sizeof(vpd));
    1120:	67 e3       	ldi	r22, 0x37	; 55
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	81 ed       	ldi	r24, 0xD1	; 209
    1126:	92 e0       	ldi	r25, 0x02	; 2
    1128:	0e 94 27 07 	call	0xe4e	; 0xe4e <update_checksum>

    //Writing defaults to eeprom
    unsigned int base_addr = 0x000;
    112c:	1a 82       	std	Y+2, r1	; 0x02
    112e:	19 82       	std	Y+1, r1	; 0x01
    int size = sizeof(vpd_struct);
    1130:	87 e3       	ldi	r24, 0x37	; 55
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	9c 83       	std	Y+4, r25	; 0x04
    1136:	8b 83       	std	Y+3, r24	; 0x03
    //unsigned char buf[size+10];
    unsigned char* p = (unsigned char*)&vpd_defaults;
    1138:	82 e1       	ldi	r24, 0x12	; 18
    113a:	91 e0       	ldi	r25, 0x01	; 1
    113c:	9e 83       	std	Y+6, r25	; 0x06
    113e:	8d 83       	std	Y+5, r24	; 0x05

    //memcpy((unsigned char*)buf, (unsigned char*)&vpd_defaults, size);
    eeprom_writebuf(base_addr, p, size);
    1140:	4b 81       	ldd	r20, Y+3	; 0x03
    1142:	2d 81       	ldd	r18, Y+5	; 0x05
    1144:	3e 81       	ldd	r19, Y+6	; 0x06
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	9a 81       	ldd	r25, Y+2	; 0x02
    114a:	b9 01       	movw	r22, r18
    114c:	0e 94 3f 03 	call	0x67e	; 0x67e <eeprom_writebuf>


    //eeprom_writebuf(base_addr, (unsigned char*)&vpd, size);
}
    1150:	00 00       	nop
    1152:	26 96       	adiw	r28, 0x06	; 6
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	08 95       	ret

00001164 <log_is_data_valid>:
    1164:	80 31       	cpi	r24, 0x10	; 16
    1166:	91 05       	cpc	r25, r1
    1168:	04 f5       	brge	.+64     	; 0x11aa <log_is_data_valid+0x46>
    116a:	27 e0       	ldi	r18, 0x07	; 7
    116c:	28 9f       	mul	r18, r24
    116e:	a0 01       	movw	r20, r0
    1170:	29 9f       	mul	r18, r25
    1172:	50 0d       	add	r21, r0
    1174:	11 24       	eor	r1, r1
    1176:	fa 01       	movw	r30, r20
    1178:	ed 51       	subi	r30, 0x1D	; 29
    117a:	fe 4f       	sbci	r31, 0xFE	; 254
    117c:	80 81       	ld	r24, Z
    117e:	81 32       	cpi	r24, 0x21	; 33
    1180:	a0 f4       	brcc	.+40     	; 0x11aa <log_is_data_valid+0x46>
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	fa 01       	movw	r30, r20
    118a:	e8 0f       	add	r30, r24
    118c:	f9 1f       	adc	r31, r25
    118e:	ed 51       	subi	r30, 0x1D	; 29
    1190:	fe 4f       	sbci	r31, 0xFE	; 254
    1192:	30 81       	ld	r19, Z
    1194:	23 0f       	add	r18, r19
    1196:	01 96       	adiw	r24, 0x01	; 1
    1198:	87 30       	cpi	r24, 0x07	; 7
    119a:	91 05       	cpc	r25, r1
    119c:	a9 f7       	brne	.-22     	; 0x1188 <log_is_data_valid+0x24>
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	22 23       	and	r18, r18
    11a4:	21 f0       	breq	.+8      	; 0x11ae <log_is_data_valid+0x4a>
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	08 95       	ret
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	08 95       	ret

000011b0 <log_init>:
    11b0:	6f 92       	push	r6
    11b2:	7f 92       	push	r7
    11b4:	8f 92       	push	r8
    11b6:	9f 92       	push	r9
    11b8:	af 92       	push	r10
    11ba:	bf 92       	push	r11
    11bc:	cf 92       	push	r12
    11be:	df 92       	push	r13
    11c0:	ef 92       	push	r14
    11c2:	ff 92       	push	r15
    11c4:	0f 93       	push	r16
    11c6:	1f 93       	push	r17
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	0e 94 30 03 	call	0x660	; 0x660 <eeprom_isbusy>
    11d0:	89 2b       	or	r24, r25
    11d2:	e1 f7       	brne	.-8      	; 0x11cc <log_init+0x1c>
    11d4:	03 e5       	ldi	r16, 0x53	; 83
    11d6:	12 e0       	ldi	r17, 0x02	; 2
    11d8:	c0 e8       	ldi	r28, 0x80	; 128
    11da:	d0 e0       	ldi	r29, 0x00	; 0
    11dc:	be 01       	movw	r22, r28
    11de:	6d 59       	subi	r22, 0x9D	; 157
    11e0:	7e 4f       	sbci	r23, 0xFE	; 254
    11e2:	47 e0       	ldi	r20, 0x07	; 7
    11e4:	ce 01       	movw	r24, r28
    11e6:	0e 94 ad 03 	call	0x75a	; 0x75a <eeprom_readbuf>
    11ea:	f8 01       	movw	r30, r16
    11ec:	11 92       	st	Z+, r1
    11ee:	8f 01       	movw	r16, r30
    11f0:	27 96       	adiw	r28, 0x07	; 7
    11f2:	c0 3f       	cpi	r28, 0xF0	; 240
    11f4:	d1 05       	cpc	r29, r1
    11f6:	91 f7       	brne	.-28     	; 0x11dc <log_init+0x2c>
    11f8:	43 ee       	ldi	r20, 0xE3	; 227
    11fa:	e4 2e       	mov	r14, r20
    11fc:	41 e0       	ldi	r20, 0x01	; 1
    11fe:	f4 2e       	mov	r15, r20
    1200:	87 01       	movw	r16, r14
    1202:	c0 e0       	ldi	r28, 0x00	; 0
    1204:	d0 e0       	ldi	r29, 0x00	; 0
    1206:	d1 2c       	mov	r13, r1
    1208:	b1 2c       	mov	r11, r1
    120a:	77 24       	eor	r7, r7
    120c:	7a 94       	dec	r7
    120e:	ce 01       	movw	r24, r28
    1210:	0e 94 b2 08 	call	0x1164	; 0x1164 <log_is_data_valid>
    1214:	89 2b       	or	r24, r25
    1216:	41 f0       	breq	.+16     	; 0x1228 <log_init+0x78>
    1218:	f8 01       	movw	r30, r16
    121a:	80 81       	ld	r24, Z
    121c:	87 15       	cp	r24, r7
    121e:	20 f4       	brcc	.+8      	; 0x1228 <log_init+0x78>
    1220:	bc 2e       	mov	r11, r28
    1222:	78 2e       	mov	r7, r24
    1224:	dd 24       	eor	r13, r13
    1226:	d3 94       	inc	r13
    1228:	21 96       	adiw	r28, 0x01	; 1
    122a:	09 5f       	subi	r16, 0xF9	; 249
    122c:	1f 4f       	sbci	r17, 0xFF	; 255
    122e:	c0 31       	cpi	r28, 0x10	; 16
    1230:	d1 05       	cpc	r29, r1
    1232:	69 f7       	brne	.-38     	; 0x120e <log_init+0x5e>
    1234:	dd 20       	and	r13, r13
    1236:	09 f4       	brne	.+2      	; 0x123a <log_init+0x8a>
    1238:	6a c0       	rjmp	.+212    	; 0x130e <log_init+0x15e>
    123a:	b0 92 e2 01 	sts	0x01E2, r11	; 0x8001e2 <last_written>
    123e:	70 92 e1 01 	sts	0x01E1, r7	; 0x8001e1 <last_transaction_written>
    1242:	cb 2d       	mov	r28, r11
    1244:	d0 e0       	ldi	r29, 0x00	; 0
    1246:	8e 01       	movw	r16, r28
    1248:	0f 5f       	subi	r16, 0xFF	; 255
    124a:	1f 4f       	sbci	r17, 0xFF	; 255
    124c:	87 2c       	mov	r8, r7
    124e:	2f e0       	ldi	r18, 0x0F	; 15
    1250:	a2 2e       	mov	r10, r18
    1252:	37 e0       	ldi	r19, 0x07	; 7
    1254:	93 2e       	mov	r9, r19
    1256:	68 01       	movw	r12, r16
    1258:	ff e0       	ldi	r31, 0x0F	; 15
    125a:	cf 22       	and	r12, r31
    125c:	dd 24       	eor	r13, r13
    125e:	c6 01       	movw	r24, r12
    1260:	0e 94 b2 08 	call	0x1164	; 0x1164 <log_is_data_valid>
    1264:	89 2b       	or	r24, r25
    1266:	61 f4       	brne	.+24     	; 0x1280 <log_init+0xd0>
    1268:	b0 92 e0 01 	sts	0x01E0, r11	; 0x8001e0 <tail>
    126c:	8e 01       	movw	r16, r28
    126e:	01 50       	subi	r16, 0x01	; 1
    1270:	11 09       	sbc	r17, r1
    1272:	60 97       	sbiw	r28, 0x10	; 16
    1274:	80 e1       	ldi	r24, 0x10	; 16
    1276:	a8 2e       	mov	r10, r24
    1278:	b1 2c       	mov	r11, r1
    127a:	97 e0       	ldi	r25, 0x07	; 7
    127c:	69 2e       	mov	r6, r25
    127e:	3a c0       	rjmp	.+116    	; 0x12f4 <log_init+0x144>
    1280:	9c 9c       	mul	r9, r12
    1282:	f0 01       	movw	r30, r0
    1284:	9d 9c       	mul	r9, r13
    1286:	f0 0d       	add	r31, r0
    1288:	11 24       	eor	r1, r1
    128a:	ed 51       	subi	r30, 0x1D	; 29
    128c:	fe 4f       	sbci	r31, 0xFE	; 254
    128e:	40 81       	ld	r20, Z
    1290:	24 2f       	mov	r18, r20
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	88 2d       	mov	r24, r8
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	01 96       	adiw	r24, 0x01	; 1
    129a:	8f 71       	andi	r24, 0x1F	; 31
    129c:	99 27       	eor	r25, r25
    129e:	28 17       	cp	r18, r24
    12a0:	39 07       	cpc	r19, r25
    12a2:	11 f7       	brne	.-60     	; 0x1268 <log_init+0xb8>
    12a4:	c0 92 e2 01 	sts	0x01E2, r12	; 0x8001e2 <last_written>
    12a8:	40 93 e1 01 	sts	0x01E1, r20	; 0x8001e1 <last_transaction_written>
    12ac:	aa 94       	dec	r10
    12ae:	0f 5f       	subi	r16, 0xFF	; 255
    12b0:	1f 4f       	sbci	r17, 0xFF	; 255
    12b2:	aa 20       	and	r10, r10
    12b4:	c9 f2       	breq	.-78     	; 0x1268 <log_init+0xb8>
    12b6:	84 2e       	mov	r8, r20
    12b8:	ce cf       	rjmp	.-100    	; 0x1256 <log_init+0xa6>
    12ba:	f7 01       	movw	r30, r14
    12bc:	20 81       	ld	r18, Z
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	87 2d       	mov	r24, r7
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	4f 96       	adiw	r24, 0x1f	; 31
    12c6:	8f 71       	andi	r24, 0x1F	; 31
    12c8:	99 27       	eor	r25, r25
    12ca:	28 17       	cp	r18, r24
    12cc:	39 07       	cpc	r19, r25
    12ce:	31 f5       	brne	.+76     	; 0x131c <log_init+0x16c>
    12d0:	c0 92 e0 01 	sts	0x01E0, r12	; 0x8001e0 <tail>
    12d4:	68 9c       	mul	r6, r8
    12d6:	f0 01       	movw	r30, r0
    12d8:	69 9c       	mul	r6, r9
    12da:	f0 0d       	add	r31, r0
    12dc:	11 24       	eor	r1, r1
    12de:	ed 51       	subi	r30, 0x1D	; 29
    12e0:	fe 4f       	sbci	r31, 0xFE	; 254
    12e2:	70 80       	ld	r7, Z
    12e4:	01 50       	subi	r16, 0x01	; 1
    12e6:	11 09       	sbc	r17, r1
    12e8:	f7 e0       	ldi	r31, 0x07	; 7
    12ea:	ef 0e       	add	r14, r31
    12ec:	f1 1c       	adc	r15, r1
    12ee:	0c 17       	cp	r16, r28
    12f0:	1d 07       	cpc	r17, r29
    12f2:	a1 f0       	breq	.+40     	; 0x131c <log_init+0x16c>
    12f4:	c8 01       	movw	r24, r16
    12f6:	b5 01       	movw	r22, r10
    12f8:	0e 94 f7 13 	call	0x27ee	; 0x27ee <__divmodhi4>
    12fc:	6c 01       	movw	r12, r24
    12fe:	4c 01       	movw	r8, r24
    1300:	99 24       	eor	r9, r9
    1302:	c4 01       	movw	r24, r8
    1304:	0e 94 b2 08 	call	0x1164	; 0x1164 <log_is_data_valid>
    1308:	89 2b       	or	r24, r25
    130a:	b9 f6       	brne	.-82     	; 0x12ba <log_init+0x10a>
    130c:	07 c0       	rjmp	.+14     	; 0x131c <log_init+0x16c>
    130e:	8f e0       	ldi	r24, 0x0F	; 15
    1310:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <last_written>
    1314:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <last_transaction_written>
    1318:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <tail>
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	1f 91       	pop	r17
    1322:	0f 91       	pop	r16
    1324:	ff 90       	pop	r15
    1326:	ef 90       	pop	r14
    1328:	df 90       	pop	r13
    132a:	cf 90       	pop	r12
    132c:	bf 90       	pop	r11
    132e:	af 90       	pop	r10
    1330:	9f 90       	pop	r9
    1332:	8f 90       	pop	r8
    1334:	7f 90       	pop	r7
    1336:	6f 90       	pop	r6
    1338:	08 95       	ret

0000133a <log_update>:
    133a:	ef 92       	push	r14
    133c:	ff 92       	push	r15
    133e:	1f 93       	push	r17
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	0e 94 30 03 	call	0x660	; 0x660 <eeprom_isbusy>
    1348:	89 2b       	or	r24, r25
    134a:	39 f5       	brne	.+78     	; 0x139a <log_update+0x60>
    134c:	e3 e5       	ldi	r30, 0x53	; 83
    134e:	f2 e0       	ldi	r31, 0x02	; 2
    1350:	c0 e0       	ldi	r28, 0x00	; 0
    1352:	d0 e0       	ldi	r29, 0x00	; 0
    1354:	81 91       	ld	r24, Z+
    1356:	88 23       	and	r24, r24
    1358:	e1 f0       	breq	.+56     	; 0x1392 <log_update+0x58>
    135a:	17 e0       	ldi	r17, 0x07	; 7
    135c:	1c 9f       	mul	r17, r28
    135e:	c0 01       	movw	r24, r0
    1360:	1d 9f       	mul	r17, r29
    1362:	90 0d       	add	r25, r0
    1364:	11 24       	eor	r1, r1
    1366:	9c 01       	movw	r18, r24
    1368:	2d 51       	subi	r18, 0x1D	; 29
    136a:	3e 4f       	sbci	r19, 0xFE	; 254
    136c:	79 01       	movw	r14, r18
    136e:	67 e0       	ldi	r22, 0x07	; 7
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	c9 01       	movw	r24, r18
    1374:	0e 94 27 07 	call	0xe4e	; 0xe4e <update_checksum>
    1378:	c1 9f       	mul	r28, r17
    137a:	c0 01       	movw	r24, r0
    137c:	11 24       	eor	r1, r1
    137e:	47 e0       	ldi	r20, 0x07	; 7
    1380:	b7 01       	movw	r22, r14
    1382:	80 58       	subi	r24, 0x80	; 128
    1384:	9f 4f       	sbci	r25, 0xFF	; 255
    1386:	0e 94 3f 03 	call	0x67e	; 0x67e <eeprom_writebuf>
    138a:	cd 5a       	subi	r28, 0xAD	; 173
    138c:	dd 4f       	sbci	r29, 0xFD	; 253
    138e:	18 82       	st	Y, r1
    1390:	04 c0       	rjmp	.+8      	; 0x139a <log_update+0x60>
    1392:	21 96       	adiw	r28, 0x01	; 1
    1394:	c0 31       	cpi	r28, 0x10	; 16
    1396:	d1 05       	cpc	r29, r1
    1398:	e9 f6       	brne	.-70     	; 0x1354 <log_update+0x1a>
    139a:	df 91       	pop	r29
    139c:	cf 91       	pop	r28
    139e:	1f 91       	pop	r17
    13a0:	ff 90       	pop	r15
    13a2:	ef 90       	pop	r14
    13a4:	08 95       	ret

000013a6 <log_add_record>:
    13a6:	ef 92       	push	r14
    13a8:	ff 92       	push	r15
    13aa:	0f 93       	push	r16
    13ac:	1f 93       	push	r17
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	e8 2e       	mov	r14, r24
    13b4:	c0 91 e2 01 	lds	r28, 0x01E2	; 0x8001e2 <last_written>
    13b8:	d0 e0       	ldi	r29, 0x00	; 0
    13ba:	21 96       	adiw	r28, 0x01	; 1
    13bc:	cf 70       	andi	r28, 0x0F	; 15
    13be:	dd 27       	eor	r29, r29
    13c0:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <tail>
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	0e 94 b2 08 	call	0x1164	; 0x1164 <log_is_data_valid>
    13ca:	f8 2e       	mov	r15, r24
    13cc:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <last_transaction_written>
    13d0:	8f 5f       	subi	r24, 0xFF	; 255
    13d2:	81 32       	cpi	r24, 0x21	; 33
    13d4:	18 f4       	brcc	.+6      	; 0x13dc <log_add_record+0x36>
    13d6:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <last_transaction_written>
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <log_add_record+0x3a>
    13dc:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <last_transaction_written>
    13e0:	87 e0       	ldi	r24, 0x07	; 7
    13e2:	8c 9f       	mul	r24, r28
    13e4:	80 01       	movw	r16, r0
    13e6:	8d 9f       	mul	r24, r29
    13e8:	10 0d       	add	r17, r0
    13ea:	11 24       	eor	r1, r1
    13ec:	0d 51       	subi	r16, 0x1D	; 29
    13ee:	1e 4f       	sbci	r17, 0xFE	; 254
    13f0:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <last_transaction_written>
    13f4:	f8 01       	movw	r30, r16
    13f6:	80 83       	st	Z, r24
    13f8:	0e 94 a0 0a 	call	0x1540	; 0x1540 <rtc_get_date>
    13fc:	f8 01       	movw	r30, r16
    13fe:	61 83       	std	Z+1, r22	; 0x01
    1400:	72 83       	std	Z+2, r23	; 0x02
    1402:	83 83       	std	Z+3, r24	; 0x03
    1404:	94 83       	std	Z+4, r25	; 0x04
    1406:	e5 82       	std	Z+5, r14	; 0x05
    1408:	c0 93 e2 01 	sts	0x01E2, r28	; 0x8001e2 <last_written>
    140c:	67 e0       	ldi	r22, 0x07	; 7
    140e:	70 e0       	ldi	r23, 0x00	; 0
    1410:	c8 01       	movw	r24, r16
    1412:	0e 94 27 07 	call	0xe4e	; 0xe4e <update_checksum>
    1416:	cd 5a       	subi	r28, 0xAD	; 173
    1418:	dd 4f       	sbci	r29, 0xFD	; 253
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	88 83       	st	Y, r24
    141e:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <last_written>
    1422:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <tail>
    1426:	89 13       	cpse	r24, r25
    1428:	08 c0       	rjmp	.+16     	; 0x143a <log_add_record+0x94>
    142a:	ff 20       	and	r15, r15
    142c:	31 f0       	breq	.+12     	; 0x143a <log_add_record+0x94>
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	01 96       	adiw	r24, 0x01	; 1
    1432:	8f 70       	andi	r24, 0x0F	; 15
    1434:	99 27       	eor	r25, r25
    1436:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <tail>
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	1f 91       	pop	r17
    1440:	0f 91       	pop	r16
    1442:	ff 90       	pop	r15
    1444:	ef 90       	pop	r14
    1446:	08 95       	ret

00001448 <log_clear>:
    1448:	e3 ee       	ldi	r30, 0xE3	; 227
    144a:	f1 e0       	ldi	r31, 0x01	; 1
    144c:	a3 e5       	ldi	r26, 0x53	; 83
    144e:	b2 e0       	ldi	r27, 0x02	; 2
    1450:	8f ef       	ldi	r24, 0xFF	; 255
    1452:	4f ef       	ldi	r20, 0xFF	; 255
    1454:	5f ef       	ldi	r21, 0xFF	; 255
    1456:	ba 01       	movw	r22, r20
    1458:	91 e0       	ldi	r25, 0x01	; 1
    145a:	80 83       	st	Z, r24
    145c:	85 83       	std	Z+5, r24	; 0x05
    145e:	41 83       	std	Z+1, r20	; 0x01
    1460:	52 83       	std	Z+2, r21	; 0x02
    1462:	63 83       	std	Z+3, r22	; 0x03
    1464:	74 83       	std	Z+4, r23	; 0x04
    1466:	9d 93       	st	X+, r25
    1468:	37 96       	adiw	r30, 0x07	; 7
    146a:	22 e0       	ldi	r18, 0x02	; 2
    146c:	e3 35       	cpi	r30, 0x53	; 83
    146e:	f2 07       	cpc	r31, r18
    1470:	a1 f7       	brne	.-24     	; 0x145a <log_clear+0x12>
    1472:	8f e0       	ldi	r24, 0x0F	; 15
    1474:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <last_written>
    1478:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <tail>
    147c:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <last_transaction_written>
    1480:	08 95       	ret

00001482 <log_get_num_entries>:
    1482:	0f 93       	push	r16
    1484:	1f 93       	push	r17
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
    148a:	00 91 e0 01 	lds	r16, 0x01E0	; 0x8001e0 <tail>
    148e:	c0 2f       	mov	r28, r16
    1490:	10 e0       	ldi	r17, 0x00	; 0
    1492:	d0 e0       	ldi	r29, 0x00	; 0
    1494:	ce 01       	movw	r24, r28
    1496:	0e 94 b2 08 	call	0x1164	; 0x1164 <log_is_data_valid>
    149a:	89 2b       	or	r24, r25
    149c:	29 f0       	breq	.+10     	; 0x14a8 <log_get_num_entries+0x26>
    149e:	21 96       	adiw	r28, 0x01	; 1
    14a0:	cf 70       	andi	r28, 0x0F	; 15
    14a2:	1f 5f       	subi	r17, 0xFF	; 255
    14a4:	0c 13       	cpse	r16, r28
    14a6:	f5 cf       	rjmp	.-22     	; 0x1492 <log_get_num_entries+0x10>
    14a8:	81 2f       	mov	r24, r17
    14aa:	df 91       	pop	r29
    14ac:	cf 91       	pop	r28
    14ae:	1f 91       	pop	r17
    14b0:	0f 91       	pop	r16
    14b2:	08 95       	ret

000014b4 <log_get_record>:
    14b4:	af 92       	push	r10
    14b6:	bf 92       	push	r11
    14b8:	cf 92       	push	r12
    14ba:	df 92       	push	r13
    14bc:	ef 92       	push	r14
    14be:	ff 92       	push	r15
    14c0:	0f 93       	push	r16
    14c2:	1f 93       	push	r17
    14c4:	cf 93       	push	r28
    14c6:	df 93       	push	r29
    14c8:	6b 01       	movw	r12, r22
    14ca:	7c 01       	movw	r14, r24
    14cc:	8a 01       	movw	r16, r20
    14ce:	59 01       	movw	r10, r18
    14d0:	0e 94 41 0a 	call	0x1482	; 0x1482 <log_get_num_entries>
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	a0 e0       	ldi	r26, 0x00	; 0
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	c8 16       	cp	r12, r24
    14dc:	d9 06       	cpc	r13, r25
    14de:	ea 06       	cpc	r14, r26
    14e0:	fb 06       	cpc	r15, r27
    14e2:	f8 f4       	brcc	.+62     	; 0x1522 <log_get_record+0x6e>
    14e4:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <tail>
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	c8 0e       	add	r12, r24
    14ec:	d9 1e       	adc	r13, r25
    14ee:	8f e0       	ldi	r24, 0x0F	; 15
    14f0:	c8 22       	and	r12, r24
    14f2:	dd 24       	eor	r13, r13
    14f4:	87 e0       	ldi	r24, 0x07	; 7
    14f6:	8c 9d       	mul	r24, r12
    14f8:	f0 01       	movw	r30, r0
    14fa:	8d 9d       	mul	r24, r13
    14fc:	f0 0d       	add	r31, r0
    14fe:	11 24       	eor	r1, r1
    1500:	ed 51       	subi	r30, 0x1D	; 29
    1502:	fe 4f       	sbci	r31, 0xFE	; 254
    1504:	81 81       	ldd	r24, Z+1	; 0x01
    1506:	92 81       	ldd	r25, Z+2	; 0x02
    1508:	a3 81       	ldd	r26, Z+3	; 0x03
    150a:	b4 81       	ldd	r27, Z+4	; 0x04
    150c:	e8 01       	movw	r28, r16
    150e:	88 83       	st	Y, r24
    1510:	99 83       	std	Y+1, r25	; 0x01
    1512:	aa 83       	std	Y+2, r26	; 0x02
    1514:	bb 83       	std	Y+3, r27	; 0x03
    1516:	85 81       	ldd	r24, Z+5	; 0x05
    1518:	f5 01       	movw	r30, r10
    151a:	80 83       	st	Z, r24
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <log_get_record+0x72>
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	df 91       	pop	r29
    1528:	cf 91       	pop	r28
    152a:	1f 91       	pop	r17
    152c:	0f 91       	pop	r16
    152e:	ff 90       	pop	r15
    1530:	ef 90       	pop	r14
    1532:	df 90       	pop	r13
    1534:	cf 90       	pop	r12
    1536:	bf 90       	pop	r11
    1538:	af 90       	pop	r10
    153a:	08 95       	ret

0000153c <rtc_init>:
    153c:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <timer1_init>

00001540 <rtc_get_date>:
    1540:	0f 93       	push	r16
    1542:	1f 93       	push	r17
    1544:	0e 94 43 06 	call	0xc86	; 0xc86 <timer1_get>
    1548:	00 91 08 03 	lds	r16, 0x0308	; 0x800308 <rtc_base>
    154c:	10 91 09 03 	lds	r17, 0x0309	; 0x800309 <rtc_base+0x1>
    1550:	20 91 0a 03 	lds	r18, 0x030A	; 0x80030a <rtc_base+0x2>
    1554:	30 91 0b 03 	lds	r19, 0x030B	; 0x80030b <rtc_base+0x3>
    1558:	60 0f       	add	r22, r16
    155a:	71 1f       	adc	r23, r17
    155c:	82 1f       	adc	r24, r18
    155e:	93 1f       	adc	r25, r19
    1560:	1f 91       	pop	r17
    1562:	0f 91       	pop	r16
    1564:	08 95       	ret

00001566 <is_leapyear>:
    1566:	9c 01       	movw	r18, r24
    1568:	60 e9       	ldi	r22, 0x90	; 144
    156a:	71 e0       	ldi	r23, 0x01	; 1
    156c:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__udivmodhi4>
    1570:	89 2b       	or	r24, r25
    1572:	79 f0       	breq	.+30     	; 0x1592 <is_leapyear+0x2c>
    1574:	c9 01       	movw	r24, r18
    1576:	83 70       	andi	r24, 0x03	; 3
    1578:	99 27       	eor	r25, r25
    157a:	89 2b       	or	r24, r25
    157c:	61 f4       	brne	.+24     	; 0x1596 <is_leapyear+0x30>
    157e:	c9 01       	movw	r24, r18
    1580:	64 e6       	ldi	r22, 0x64	; 100
    1582:	70 e0       	ldi	r23, 0x00	; 0
    1584:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__udivmodhi4>
    1588:	9c 01       	movw	r18, r24
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	23 2b       	or	r18, r19
    158e:	21 f4       	brne	.+8      	; 0x1598 <is_leapyear+0x32>
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <is_leapyear+0x30>
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	08 95       	ret
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	08 95       	ret

0000159a <rtc_set_by_datestr>:
    159a:	2f 92       	push	r2
    159c:	3f 92       	push	r3
    159e:	4f 92       	push	r4
    15a0:	5f 92       	push	r5
    15a2:	6f 92       	push	r6
    15a4:	7f 92       	push	r7
    15a6:	8f 92       	push	r8
    15a8:	9f 92       	push	r9
    15aa:	af 92       	push	r10
    15ac:	bf 92       	push	r11
    15ae:	cf 92       	push	r12
    15b0:	df 92       	push	r13
    15b2:	ef 92       	push	r14
    15b4:	ff 92       	push	r15
    15b6:	0f 93       	push	r16
    15b8:	1f 93       	push	r17
    15ba:	cf 93       	push	r28
    15bc:	df 93       	push	r29
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	67 97       	sbiw	r28, 0x17	; 23
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	cd bf       	out	0x3d, r28	; 61
    15ce:	2c e0       	ldi	r18, 0x0C	; 12
    15d0:	eb ea       	ldi	r30, 0xAB	; 171
    15d2:	f1 e0       	ldi	r31, 0x01	; 1
    15d4:	ae 01       	movw	r20, r28
    15d6:	4f 5f       	subi	r20, 0xFF	; 255
    15d8:	5f 4f       	sbci	r21, 0xFF	; 255
    15da:	1a 01       	movw	r2, r20
    15dc:	da 01       	movw	r26, r20
    15de:	01 90       	ld	r0, Z+
    15e0:	0d 92       	st	X+, r0
    15e2:	2a 95       	dec	r18
    15e4:	e1 f7       	brne	.-8      	; 0x15de <rtc_set_by_datestr+0x44>
    15e6:	dc 01       	movw	r26, r24
    15e8:	2c 91       	ld	r18, X
    15ea:	22 0f       	add	r18, r18
    15ec:	20 56       	subi	r18, 0x60	; 96
    15ee:	32 2f       	mov	r19, r18
    15f0:	33 0f       	add	r19, r19
    15f2:	33 0f       	add	r19, r19
    15f4:	23 0f       	add	r18, r19
    15f6:	11 96       	adiw	r26, 0x01	; 1
    15f8:	3c 91       	ld	r19, X
    15fa:	11 97       	sbiw	r26, 0x01	; 1
    15fc:	31 53       	subi	r19, 0x31	; 49
    15fe:	23 0f       	add	r18, r19
    1600:	2d 87       	std	Y+13, r18	; 0x0d
    1602:	13 96       	adiw	r26, 0x03	; 3
    1604:	2c 91       	ld	r18, X
    1606:	13 97       	sbiw	r26, 0x03	; 3
    1608:	02 2e       	mov	r0, r18
    160a:	00 0c       	add	r0, r0
    160c:	33 0b       	sbc	r19, r19
    160e:	20 53       	subi	r18, 0x30	; 48
    1610:	31 09       	sbc	r19, r1
    1612:	6a e0       	ldi	r22, 0x0A	; 10
    1614:	62 9f       	mul	r22, r18
    1616:	a0 01       	movw	r20, r0
    1618:	63 9f       	mul	r22, r19
    161a:	50 0d       	add	r21, r0
    161c:	11 24       	eor	r1, r1
    161e:	14 96       	adiw	r26, 0x04	; 4
    1620:	cc 90       	ld	r12, X
    1622:	0c 2c       	mov	r0, r12
    1624:	00 0c       	add	r0, r0
    1626:	dd 08       	sbc	r13, r13
    1628:	b0 e3       	ldi	r27, 0x30	; 48
    162a:	cb 1a       	sub	r12, r27
    162c:	d1 08       	sbc	r13, r1
    162e:	c4 0e       	add	r12, r20
    1630:	d5 1e       	adc	r13, r21
    1632:	86 01       	movw	r16, r12
    1634:	01 50       	subi	r16, 0x01	; 1
    1636:	11 09       	sbc	r17, r1
    1638:	fc 01       	movw	r30, r24
    163a:	26 81       	ldd	r18, Z+6	; 0x06
    163c:	02 2e       	mov	r0, r18
    163e:	00 0c       	add	r0, r0
    1640:	33 0b       	sbc	r19, r19
    1642:	20 53       	subi	r18, 0x30	; 48
    1644:	31 09       	sbc	r19, r1
    1646:	e8 ee       	ldi	r30, 0xE8	; 232
    1648:	f3 e0       	ldi	r31, 0x03	; 3
    164a:	2e 9f       	mul	r18, r30
    164c:	a0 01       	movw	r20, r0
    164e:	2f 9f       	mul	r18, r31
    1650:	50 0d       	add	r21, r0
    1652:	3e 9f       	mul	r19, r30
    1654:	50 0d       	add	r21, r0
    1656:	11 24       	eor	r1, r1
    1658:	dc 01       	movw	r26, r24
    165a:	17 96       	adiw	r26, 0x07	; 7
    165c:	2c 91       	ld	r18, X
    165e:	17 97       	sbiw	r26, 0x07	; 7
    1660:	02 2e       	mov	r0, r18
    1662:	00 0c       	add	r0, r0
    1664:	33 0b       	sbc	r19, r19
    1666:	20 53       	subi	r18, 0x30	; 48
    1668:	31 09       	sbc	r19, r1
    166a:	74 e6       	ldi	r23, 0x64	; 100
    166c:	72 9f       	mul	r23, r18
    166e:	70 01       	movw	r14, r0
    1670:	73 9f       	mul	r23, r19
    1672:	f0 0c       	add	r15, r0
    1674:	11 24       	eor	r1, r1
    1676:	e4 0e       	add	r14, r20
    1678:	f5 1e       	adc	r15, r21
    167a:	18 96       	adiw	r26, 0x08	; 8
    167c:	4c 91       	ld	r20, X
    167e:	18 97       	sbiw	r26, 0x08	; 8
    1680:	04 2e       	mov	r0, r20
    1682:	00 0c       	add	r0, r0
    1684:	55 0b       	sbc	r21, r21
    1686:	40 53       	subi	r20, 0x30	; 48
    1688:	51 09       	sbc	r21, r1
    168a:	64 9f       	mul	r22, r20
    168c:	90 01       	movw	r18, r0
    168e:	65 9f       	mul	r22, r21
    1690:	30 0d       	add	r19, r0
    1692:	11 24       	eor	r1, r1
    1694:	e2 0e       	add	r14, r18
    1696:	f3 1e       	adc	r15, r19
    1698:	19 96       	adiw	r26, 0x09	; 9
    169a:	2c 91       	ld	r18, X
    169c:	19 97       	sbiw	r26, 0x09	; 9
    169e:	f7 01       	movw	r30, r14
    16a0:	e2 0f       	add	r30, r18
    16a2:	f1 1d       	adc	r31, r1
    16a4:	27 fd       	sbrc	r18, 7
    16a6:	fa 95       	dec	r31
    16a8:	af 01       	movw	r20, r30
    16aa:	58 50       	subi	r21, 0x08	; 8
    16ac:	7a 01       	movw	r14, r20
    16ae:	1b 96       	adiw	r26, 0x0b	; 11
    16b0:	2c 91       	ld	r18, X
    16b2:	1b 97       	sbiw	r26, 0x0b	; 11
    16b4:	22 0f       	add	r18, r18
    16b6:	20 56       	subi	r18, 0x60	; 96
    16b8:	32 2f       	mov	r19, r18
    16ba:	33 0f       	add	r19, r19
    16bc:	33 0f       	add	r19, r19
    16be:	23 0f       	add	r18, r19
    16c0:	1c 96       	adiw	r26, 0x0c	; 12
    16c2:	3c 91       	ld	r19, X
    16c4:	1c 97       	sbiw	r26, 0x0c	; 12
    16c6:	30 53       	subi	r19, 0x30	; 48
    16c8:	23 0f       	add	r18, r19
    16ca:	29 8b       	std	Y+17, r18	; 0x11
    16cc:	1e 96       	adiw	r26, 0x0e	; 14
    16ce:	2c 91       	ld	r18, X
    16d0:	1e 97       	sbiw	r26, 0x0e	; 14
    16d2:	22 0f       	add	r18, r18
    16d4:	20 56       	subi	r18, 0x60	; 96
    16d6:	32 2f       	mov	r19, r18
    16d8:	33 0f       	add	r19, r19
    16da:	33 0f       	add	r19, r19
    16dc:	23 0f       	add	r18, r19
    16de:	1f 96       	adiw	r26, 0x0f	; 15
    16e0:	3c 91       	ld	r19, X
    16e2:	1f 97       	sbiw	r26, 0x0f	; 15
    16e4:	30 53       	subi	r19, 0x30	; 48
    16e6:	23 0f       	add	r18, r19
    16e8:	2a 8b       	std	Y+18, r18	; 0x12
    16ea:	51 96       	adiw	r26, 0x11	; 17
    16ec:	2c 91       	ld	r18, X
    16ee:	51 97       	sbiw	r26, 0x11	; 17
    16f0:	22 0f       	add	r18, r18
    16f2:	20 56       	subi	r18, 0x60	; 96
    16f4:	32 2f       	mov	r19, r18
    16f6:	33 0f       	add	r19, r19
    16f8:	33 0f       	add	r19, r19
    16fa:	23 0f       	add	r18, r19
    16fc:	52 96       	adiw	r26, 0x12	; 18
    16fe:	8c 91       	ld	r24, X
    1700:	80 53       	subi	r24, 0x30	; 48
    1702:	28 0f       	add	r18, r24
    1704:	2b 8b       	std	Y+19, r18	; 0x13
    1706:	ca 01       	movw	r24, r20
    1708:	0e 94 b3 0a 	call	0x1566	; 0x1566 <is_leapyear>
    170c:	88 23       	and	r24, r24
    170e:	21 f0       	breq	.+8      	; 0x1718 <rtc_set_by_datestr+0x17e>
    1710:	5d 85       	ldd	r21, Y+13	; 0x0d
    1712:	52 30       	cpi	r21, 0x02	; 2
    1714:	08 f0       	brcs	.+2      	; 0x1718 <rtc_set_by_datestr+0x17e>
    1716:	86 01       	movw	r16, r12
    1718:	c7 01       	movw	r24, r14
    171a:	60 e9       	ldi	r22, 0x90	; 144
    171c:	71 e0       	ldi	r23, 0x01	; 1
    171e:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__udivmodhi4>
    1722:	fc 01       	movw	r30, r24
    1724:	db 01       	movw	r26, r22
    1726:	20 e8       	ldi	r18, 0x80	; 128
    1728:	39 e5       	ldi	r19, 0x59	; 89
    172a:	40 e6       	ldi	r20, 0x60	; 96
    172c:	50 ef       	ldi	r21, 0xF0	; 240
    172e:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__muluhisi3>
    1732:	2b 01       	movw	r4, r22
    1734:	3c 01       	movw	r6, r24
    1736:	cf 01       	movw	r24, r30
    1738:	64 e6       	ldi	r22, 0x64	; 100
    173a:	70 e0       	ldi	r23, 0x00	; 0
    173c:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__udivmodhi4>
    1740:	fc 01       	movw	r30, r24
    1742:	db 01       	movw	r26, r22
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	32 ec       	ldi	r19, 0xC2	; 194
    1748:	47 e1       	ldi	r20, 0x17	; 23
    174a:	5c eb       	ldi	r21, 0xBC	; 188
    174c:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__muluhisi3>
    1750:	4b 01       	movw	r8, r22
    1752:	5c 01       	movw	r10, r24
    1754:	df 01       	movw	r26, r30
    1756:	b6 95       	lsr	r27
    1758:	a7 95       	ror	r26
    175a:	b6 95       	lsr	r27
    175c:	a7 95       	ror	r26
    175e:	20 e8       	ldi	r18, 0x80	; 128
    1760:	3f e1       	ldi	r19, 0x1F	; 31
    1762:	46 e8       	ldi	r20, 0x86	; 134
    1764:	57 e0       	ldi	r21, 0x07	; 7
    1766:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__muluhisi3>
    176a:	6b 01       	movw	r12, r22
    176c:	7c 01       	movw	r14, r24
    176e:	df 01       	movw	r26, r30
    1770:	a3 70       	andi	r26, 0x03	; 3
    1772:	bb 27       	eor	r27, r27
    1774:	20 e8       	ldi	r18, 0x80	; 128
    1776:	33 e3       	ldi	r19, 0x33	; 51
    1778:	41 ee       	ldi	r20, 0xE1	; 225
    177a:	51 e0       	ldi	r21, 0x01	; 1
    177c:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__muluhisi3>
    1780:	6c 8b       	std	Y+20, r22	; 0x14
    1782:	7d 8b       	std	Y+21, r23	; 0x15
    1784:	8e 8b       	std	Y+22, r24	; 0x16
    1786:	9f 8b       	std	Y+23, r25	; 0x17
    1788:	f1 01       	movw	r30, r2
    178a:	8e 2f       	mov	r24, r30
    178c:	82 19       	sub	r24, r2
    178e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1790:	89 17       	cp	r24, r25
    1792:	20 f4       	brcc	.+8      	; 0x179c <rtc_set_by_datestr+0x202>
    1794:	81 91       	ld	r24, Z+
    1796:	08 0f       	add	r16, r24
    1798:	11 1d       	adc	r17, r1
    179a:	f7 cf       	rjmp	.-18     	; 0x178a <rtc_set_by_datestr+0x1f0>
    179c:	a9 89       	ldd	r26, Y+17	; 0x11
    179e:	2a 2f       	mov	r18, r26
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	a0 e1       	ldi	r26, 0x10	; 16
    17a4:	be e0       	ldi	r27, 0x0E	; 14
    17a6:	0e 94 4c 14 	call	0x2898	; 0x2898 <__umulhisi3>
    17aa:	6d 87       	std	Y+13, r22	; 0x0d
    17ac:	7e 87       	std	Y+14, r23	; 0x0e
    17ae:	8f 87       	std	Y+15, r24	; 0x0f
    17b0:	98 8b       	std	Y+16, r25	; 0x10
    17b2:	ba 89       	ldd	r27, Y+18	; 0x12
    17b4:	2b 2f       	mov	r18, r27
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	ac e3       	ldi	r26, 0x3C	; 60
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	0e 94 4c 14 	call	0x2898	; 0x2898 <__umulhisi3>
    17c0:	2d 85       	ldd	r18, Y+13	; 0x0d
    17c2:	3e 85       	ldd	r19, Y+14	; 0x0e
    17c4:	4f 85       	ldd	r20, Y+15	; 0x0f
    17c6:	58 89       	ldd	r21, Y+16	; 0x10
    17c8:	26 0f       	add	r18, r22
    17ca:	37 1f       	adc	r19, r23
    17cc:	48 1f       	adc	r20, r24
    17ce:	59 1f       	adc	r21, r25
    17d0:	da 01       	movw	r26, r20
    17d2:	c9 01       	movw	r24, r18
    17d4:	3b 89       	ldd	r19, Y+19	; 0x13
    17d6:	83 0f       	add	r24, r19
    17d8:	91 1d       	adc	r25, r1
    17da:	a1 1d       	adc	r26, r1
    17dc:	b1 1d       	adc	r27, r1
    17de:	48 0e       	add	r4, r24
    17e0:	59 1e       	adc	r5, r25
    17e2:	6a 1e       	adc	r6, r26
    17e4:	7b 1e       	adc	r7, r27
    17e6:	84 0c       	add	r8, r4
    17e8:	95 1c       	adc	r9, r5
    17ea:	a6 1c       	adc	r10, r6
    17ec:	b7 1c       	adc	r11, r7
    17ee:	c8 0c       	add	r12, r8
    17f0:	d9 1c       	adc	r13, r9
    17f2:	ea 1c       	adc	r14, r10
    17f4:	fb 1c       	adc	r15, r11
    17f6:	8c 89       	ldd	r24, Y+20	; 0x14
    17f8:	9d 89       	ldd	r25, Y+21	; 0x15
    17fa:	ae 89       	ldd	r26, Y+22	; 0x16
    17fc:	bf 89       	ldd	r27, Y+23	; 0x17
    17fe:	c8 0e       	add	r12, r24
    1800:	d9 1e       	adc	r13, r25
    1802:	ea 1e       	adc	r14, r26
    1804:	fb 1e       	adc	r15, r27
    1806:	d8 01       	movw	r26, r16
    1808:	20 e8       	ldi	r18, 0x80	; 128
    180a:	31 e5       	ldi	r19, 0x51	; 81
    180c:	41 e0       	ldi	r20, 0x01	; 1
    180e:	50 e0       	ldi	r21, 0x00	; 0
    1810:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__muluhisi3>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	8c 0d       	add	r24, r12
    181a:	9d 1d       	adc	r25, r13
    181c:	ae 1d       	adc	r26, r14
    181e:	bf 1d       	adc	r27, r15
    1820:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <rtc_base>
    1824:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <rtc_base+0x1>
    1828:	a0 93 0a 03 	sts	0x030A, r26	; 0x80030a <rtc_base+0x2>
    182c:	b0 93 0b 03 	sts	0x030B, r27	; 0x80030b <rtc_base+0x3>
    1830:	67 96       	adiw	r28, 0x17	; 23
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	cd bf       	out	0x3d, r28	; 61
    183c:	df 91       	pop	r29
    183e:	cf 91       	pop	r28
    1840:	1f 91       	pop	r17
    1842:	0f 91       	pop	r16
    1844:	ff 90       	pop	r15
    1846:	ef 90       	pop	r14
    1848:	df 90       	pop	r13
    184a:	cf 90       	pop	r12
    184c:	bf 90       	pop	r11
    184e:	af 90       	pop	r10
    1850:	9f 90       	pop	r9
    1852:	8f 90       	pop	r8
    1854:	7f 90       	pop	r7
    1856:	6f 90       	pop	r6
    1858:	5f 90       	pop	r5
    185a:	4f 90       	pop	r4
    185c:	3f 90       	pop	r3
    185e:	2f 90       	pop	r2
    1860:	0c 94 85 06 	jmp	0xd0a	; 0xd0a <timer1_clear>

00001864 <get_month>:
    1864:	ef 92       	push	r14
    1866:	ff 92       	push	r15
    1868:	0f 93       	push	r16
    186a:	1f 93       	push	r17
    186c:	cf 93       	push	r28
    186e:	df 93       	push	r29
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
    1874:	68 97       	sbiw	r28, 0x18	; 24
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	7b 01       	movw	r14, r22
    1882:	2c e0       	ldi	r18, 0x0C	; 12
    1884:	eb ea       	ldi	r30, 0xAB	; 171
    1886:	f1 e0       	ldi	r31, 0x01	; 1
    1888:	de 01       	movw	r26, r28
    188a:	1d 96       	adiw	r26, 0x0d	; 13
    188c:	01 90       	ld	r0, Z+
    188e:	0d 92       	st	X+, r0
    1890:	2a 95       	dec	r18
    1892:	e1 f7       	brne	.-8      	; 0x188c <get_month+0x28>
    1894:	8e 01       	movw	r16, r28
    1896:	0f 5f       	subi	r16, 0xFF	; 255
    1898:	1f 4f       	sbci	r17, 0xFF	; 255
    189a:	2c e0       	ldi	r18, 0x0C	; 12
    189c:	f8 01       	movw	r30, r16
    189e:	11 92       	st	Z+, r1
    18a0:	2a 95       	dec	r18
    18a2:	e9 f7       	brne	.-6      	; 0x189e <get_month+0x3a>
    18a4:	0e 94 b3 0a 	call	0x1566	; 0x1566 <is_leapyear>
    18a8:	8a 83       	std	Y+2, r24	; 0x02
    18aa:	de 01       	movw	r26, r28
    18ac:	1d 96       	adiw	r26, 0x0d	; 13
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	f7 01       	movw	r30, r14
    18b2:	40 81       	ld	r20, Z
    18b4:	51 81       	ldd	r21, Z+1	; 0x01
    18b6:	9d 91       	ld	r25, X+
    18b8:	f8 01       	movw	r30, r16
    18ba:	21 91       	ld	r18, Z+
    18bc:	8f 01       	movw	r16, r30
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	29 0f       	add	r18, r25
    18c2:	31 1d       	adc	r19, r1
    18c4:	42 17       	cp	r20, r18
    18c6:	53 07       	cpc	r21, r19
    18c8:	40 f0       	brcs	.+16     	; 0x18da <get_month+0x76>
    18ca:	42 1b       	sub	r20, r18
    18cc:	53 0b       	sbc	r21, r19
    18ce:	f7 01       	movw	r30, r14
    18d0:	51 83       	std	Z+1, r21	; 0x01
    18d2:	40 83       	st	Z, r20
    18d4:	8f 5f       	subi	r24, 0xFF	; 255
    18d6:	8c 30       	cpi	r24, 0x0C	; 12
    18d8:	59 f7       	brne	.-42     	; 0x18b0 <get_month+0x4c>
    18da:	68 96       	adiw	r28, 0x18	; 24
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	f8 94       	cli
    18e0:	de bf       	out	0x3e, r29	; 62
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	cd bf       	out	0x3d, r28	; 61
    18e6:	df 91       	pop	r29
    18e8:	cf 91       	pop	r28
    18ea:	1f 91       	pop	r17
    18ec:	0f 91       	pop	r16
    18ee:	ff 90       	pop	r15
    18f0:	ef 90       	pop	r14
    18f2:	08 95       	ret

000018f4 <rtc_num2datestr>:
    18f4:	4f 92       	push	r4
    18f6:	5f 92       	push	r5
    18f8:	6f 92       	push	r6
    18fa:	7f 92       	push	r7
    18fc:	8f 92       	push	r8
    18fe:	9f 92       	push	r9
    1900:	af 92       	push	r10
    1902:	bf 92       	push	r11
    1904:	cf 92       	push	r12
    1906:	df 92       	push	r13
    1908:	ef 92       	push	r14
    190a:	ff 92       	push	r15
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	00 d0       	rcall	.+0      	; 0x1912 <rtc_num2datestr+0x1e>
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    1916:	2b 01       	movw	r4, r22
    1918:	3c 01       	movw	r6, r24
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	a0 e0       	ldi	r26, 0x00	; 0
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	20 e8       	ldi	r18, 0x80	; 128
    1924:	42 16       	cp	r4, r18
    1926:	29 e5       	ldi	r18, 0x59	; 89
    1928:	52 06       	cpc	r5, r18
    192a:	20 e6       	ldi	r18, 0x60	; 96
    192c:	62 06       	cpc	r6, r18
    192e:	20 ef       	ldi	r18, 0xF0	; 240
    1930:	72 06       	cpc	r7, r18
    1932:	18 f4       	brcc	.+6      	; 0x193a <rtc_num2datestr+0x46>
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	dc 01       	movw	r26, r24
    193a:	20 e9       	ldi	r18, 0x90	; 144
    193c:	31 e0       	ldi	r19, 0x01	; 1
    193e:	82 9f       	mul	r24, r18
    1940:	50 01       	movw	r10, r0
    1942:	83 9f       	mul	r24, r19
    1944:	b0 0c       	add	r11, r0
    1946:	92 9f       	mul	r25, r18
    1948:	b0 0c       	add	r11, r0
    194a:	11 24       	eor	r1, r1
    194c:	80 e3       	ldi	r24, 0x30	; 48
    194e:	a8 1a       	sub	r10, r24
    1950:	88 ef       	ldi	r24, 0xF8	; 248
    1952:	b8 0a       	sbc	r11, r24
    1954:	c1 2c       	mov	r12, r1
    1956:	d1 2c       	mov	r13, r1
    1958:	76 01       	movw	r14, r12
    195a:	c3 94       	inc	r12
    195c:	20 e8       	ldi	r18, 0x80	; 128
    195e:	42 16       	cp	r4, r18
    1960:	29 e5       	ldi	r18, 0x59	; 89
    1962:	52 06       	cpc	r5, r18
    1964:	20 e6       	ldi	r18, 0x60	; 96
    1966:	62 06       	cpc	r6, r18
    1968:	20 ef       	ldi	r18, 0xF0	; 240
    196a:	72 06       	cpc	r7, r18
    196c:	18 f4       	brcc	.+6      	; 0x1974 <rtc_num2datestr+0x80>
    196e:	c1 2c       	mov	r12, r1
    1970:	d1 2c       	mov	r13, r1
    1972:	76 01       	movw	r14, r12
    1974:	a7 01       	movw	r20, r14
    1976:	96 01       	movw	r18, r12
    1978:	60 e8       	ldi	r22, 0x80	; 128
    197a:	79 e5       	ldi	r23, 0x59	; 89
    197c:	80 e6       	ldi	r24, 0x60	; 96
    197e:	90 ef       	ldi	r25, 0xF0	; 240
    1980:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__mulsi3>
    1984:	73 01       	movw	r14, r6
    1986:	62 01       	movw	r12, r4
    1988:	c6 1a       	sub	r12, r22
    198a:	d7 0a       	sbc	r13, r23
    198c:	e8 0a       	sbc	r14, r24
    198e:	f9 0a       	sbc	r15, r25
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	a0 e0       	ldi	r26, 0x00	; 0
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	c1 14       	cp	r12, r1
    199a:	22 ec       	ldi	r18, 0xC2	; 194
    199c:	d2 06       	cpc	r13, r18
    199e:	27 e1       	ldi	r18, 0x17	; 23
    19a0:	e2 06       	cpc	r14, r18
    19a2:	2c eb       	ldi	r18, 0xBC	; 188
    19a4:	f2 06       	cpc	r15, r18
    19a6:	18 f4       	brcc	.+6      	; 0x19ae <rtc_num2datestr+0xba>
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	dc 01       	movw	r26, r24
    19ae:	44 e6       	ldi	r20, 0x64	; 100
    19b0:	48 9f       	mul	r20, r24
    19b2:	90 01       	movw	r18, r0
    19b4:	49 9f       	mul	r20, r25
    19b6:	30 0d       	add	r19, r0
    19b8:	11 24       	eor	r1, r1
    19ba:	a2 0e       	add	r10, r18
    19bc:	b3 1e       	adc	r11, r19
    19be:	21 e0       	ldi	r18, 0x01	; 1
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	40 e0       	ldi	r20, 0x00	; 0
    19c4:	50 e0       	ldi	r21, 0x00	; 0
    19c6:	c1 14       	cp	r12, r1
    19c8:	82 ec       	ldi	r24, 0xC2	; 194
    19ca:	d8 06       	cpc	r13, r24
    19cc:	87 e1       	ldi	r24, 0x17	; 23
    19ce:	e8 06       	cpc	r14, r24
    19d0:	8c eb       	ldi	r24, 0xBC	; 188
    19d2:	f8 06       	cpc	r15, r24
    19d4:	18 f4       	brcc	.+6      	; 0x19dc <rtc_num2datestr+0xe8>
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	a9 01       	movw	r20, r18
    19dc:	60 e0       	ldi	r22, 0x00	; 0
    19de:	72 ec       	ldi	r23, 0xC2	; 194
    19e0:	87 e1       	ldi	r24, 0x17	; 23
    19e2:	9c eb       	ldi	r25, 0xBC	; 188
    19e4:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__mulsi3>
    19e8:	a7 01       	movw	r20, r14
    19ea:	96 01       	movw	r18, r12
    19ec:	26 1b       	sub	r18, r22
    19ee:	37 0b       	sbc	r19, r23
    19f0:	48 0b       	sbc	r20, r24
    19f2:	59 0b       	sbc	r21, r25
    19f4:	ca 01       	movw	r24, r20
    19f6:	b9 01       	movw	r22, r18
    19f8:	20 e8       	ldi	r18, 0x80	; 128
    19fa:	3f e1       	ldi	r19, 0x1F	; 31
    19fc:	46 e8       	ldi	r20, 0x86	; 134
    19fe:	57 e0       	ldi	r21, 0x07	; 7
    1a00:	0e 94 0b 14 	call	0x2816	; 0x2816 <__udivmodsi4>
    1a04:	22 0f       	add	r18, r18
    1a06:	33 1f       	adc	r19, r19
    1a08:	22 0f       	add	r18, r18
    1a0a:	33 1f       	adc	r19, r19
    1a0c:	a2 0e       	add	r10, r18
    1a0e:	b3 1e       	adc	r11, r19
    1a10:	20 e8       	ldi	r18, 0x80	; 128
    1a12:	33 e3       	ldi	r19, 0x33	; 51
    1a14:	41 ee       	ldi	r20, 0xE1	; 225
    1a16:	51 e0       	ldi	r21, 0x01	; 1
    1a18:	0e 94 0b 14 	call	0x2816	; 0x2816 <__udivmodsi4>
    1a1c:	75 01       	movw	r14, r10
    1a1e:	e2 0e       	add	r14, r18
    1a20:	f3 1e       	adc	r15, r19
    1a22:	20 e8       	ldi	r18, 0x80	; 128
    1a24:	31 e5       	ldi	r19, 0x51	; 81
    1a26:	41 e0       	ldi	r20, 0x01	; 1
    1a28:	50 e0       	ldi	r21, 0x00	; 0
    1a2a:	0e 94 0b 14 	call	0x2816	; 0x2816 <__udivmodsi4>
    1a2e:	4b 01       	movw	r8, r22
    1a30:	5c 01       	movw	r10, r24
    1a32:	3a 83       	std	Y+2, r19	; 0x02
    1a34:	29 83       	std	Y+1, r18	; 0x01
    1a36:	be 01       	movw	r22, r28
    1a38:	6f 5f       	subi	r22, 0xFF	; 255
    1a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3c:	c7 01       	movw	r24, r14
    1a3e:	0e 94 32 0c 	call	0x1864	; 0x1864 <get_month>
    1a42:	d8 2e       	mov	r13, r24
    1a44:	c5 01       	movw	r24, r10
    1a46:	b4 01       	movw	r22, r8
    1a48:	20 e1       	ldi	r18, 0x10	; 16
    1a4a:	3e e0       	ldi	r19, 0x0E	; 14
    1a4c:	40 e0       	ldi	r20, 0x00	; 0
    1a4e:	50 e0       	ldi	r21, 0x00	; 0
    1a50:	0e 94 0b 14 	call	0x2816	; 0x2816 <__udivmodsi4>
    1a54:	29 01       	movw	r4, r18
    1a56:	3a 01       	movw	r6, r20
    1a58:	4b 01       	movw	r8, r22
    1a5a:	5c 01       	movw	r10, r24
    1a5c:	67 eb       	ldi	r22, 0xB7	; 183
    1a5e:	71 e0       	ldi	r23, 0x01	; 1
    1a60:	89 e4       	ldi	r24, 0x49	; 73
    1a62:	91 e0       	ldi	r25, 0x01	; 1
    1a64:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <str_cpy>
    1a68:	6d 2d       	mov	r22, r13
    1a6a:	70 e0       	ldi	r23, 0x00	; 0
    1a6c:	6f 5f       	subi	r22, 0xFF	; 255
    1a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a70:	42 e0       	ldi	r20, 0x02	; 2
    1a72:	89 e4       	ldi	r24, 0x49	; 73
    1a74:	91 e0       	ldi	r25, 0x01	; 1
    1a76:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <str_writeudec16>
    1a7a:	69 81       	ldd	r22, Y+1	; 0x01
    1a7c:	7a 81       	ldd	r23, Y+2	; 0x02
    1a7e:	6f 5f       	subi	r22, 0xFF	; 255
    1a80:	7f 4f       	sbci	r23, 0xFF	; 255
    1a82:	42 e0       	ldi	r20, 0x02	; 2
    1a84:	8c e4       	ldi	r24, 0x4C	; 76
    1a86:	91 e0       	ldi	r25, 0x01	; 1
    1a88:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <str_writeudec16>
    1a8c:	44 e0       	ldi	r20, 0x04	; 4
    1a8e:	b7 01       	movw	r22, r14
    1a90:	8f e4       	ldi	r24, 0x4F	; 79
    1a92:	91 e0       	ldi	r25, 0x01	; 1
    1a94:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <str_writeudec16>
    1a98:	42 e0       	ldi	r20, 0x02	; 2
    1a9a:	b2 01       	movw	r22, r4
    1a9c:	84 e5       	ldi	r24, 0x54	; 84
    1a9e:	91 e0       	ldi	r25, 0x01	; 1
    1aa0:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <str_writeudec16>
    1aa4:	c5 01       	movw	r24, r10
    1aa6:	b4 01       	movw	r22, r8
    1aa8:	2c e3       	ldi	r18, 0x3C	; 60
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	40 e0       	ldi	r20, 0x00	; 0
    1aae:	50 e0       	ldi	r21, 0x00	; 0
    1ab0:	0e 94 0b 14 	call	0x2816	; 0x2816 <__udivmodsi4>
    1ab4:	49 01       	movw	r8, r18
    1ab6:	5a 01       	movw	r10, r20
    1ab8:	6b 01       	movw	r12, r22
    1aba:	7c 01       	movw	r14, r24
    1abc:	42 e0       	ldi	r20, 0x02	; 2
    1abe:	b4 01       	movw	r22, r8
    1ac0:	87 e5       	ldi	r24, 0x57	; 87
    1ac2:	91 e0       	ldi	r25, 0x01	; 1
    1ac4:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <str_writeudec16>
    1ac8:	42 e0       	ldi	r20, 0x02	; 2
    1aca:	b6 01       	movw	r22, r12
    1acc:	8a e5       	ldi	r24, 0x5A	; 90
    1ace:	91 e0       	ldi	r25, 0x01	; 1
    1ad0:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <str_writeudec16>
    1ad4:	89 e4       	ldi	r24, 0x49	; 73
    1ad6:	91 e0       	ldi	r25, 0x01	; 1
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	df 91       	pop	r29
    1ade:	cf 91       	pop	r28
    1ae0:	ff 90       	pop	r15
    1ae2:	ef 90       	pop	r14
    1ae4:	df 90       	pop	r13
    1ae6:	cf 90       	pop	r12
    1ae8:	bf 90       	pop	r11
    1aea:	af 90       	pop	r10
    1aec:	9f 90       	pop	r9
    1aee:	8f 90       	pop	r8
    1af0:	7f 90       	pop	r7
    1af2:	6f 90       	pop	r6
    1af4:	5f 90       	pop	r5
    1af6:	4f 90       	pop	r4
    1af8:	08 95       	ret

00001afa <rtc_get_date_string>:
    1afa:	0f 93       	push	r16
    1afc:	1f 93       	push	r17
    1afe:	0e 94 43 06 	call	0xc86	; 0xc86 <timer1_get>
    1b02:	00 91 08 03 	lds	r16, 0x0308	; 0x800308 <rtc_base>
    1b06:	10 91 09 03 	lds	r17, 0x0309	; 0x800309 <rtc_base+0x1>
    1b0a:	20 91 0a 03 	lds	r18, 0x030A	; 0x80030a <rtc_base+0x2>
    1b0e:	30 91 0b 03 	lds	r19, 0x030B	; 0x80030b <rtc_base+0x3>
    1b12:	60 0f       	add	r22, r16
    1b14:	71 1f       	adc	r23, r17
    1b16:	82 1f       	adc	r24, r18
    1b18:	93 1f       	adc	r25, r19
    1b1a:	1f 91       	pop	r17
    1b1c:	0f 91       	pop	r16
    1b1e:	0c 94 7a 0c 	jmp	0x18f4	; 0x18f4 <rtc_num2datestr>

00001b22 <str_cpy>:
    1b22:	fc 01       	movw	r30, r24
    1b24:	db 01       	movw	r26, r22
    1b26:	8d 91       	ld	r24, X+
    1b28:	bd 01       	movw	r22, r26
    1b2a:	88 23       	and	r24, r24
    1b2c:	11 f0       	breq	.+4      	; 0x1b32 <str_cpy+0x10>
    1b2e:	81 93       	st	Z+, r24
    1b30:	f9 cf       	rjmp	.-14     	; 0x1b24 <str_cpy+0x2>
    1b32:	10 82       	st	Z, r1
    1b34:	08 95       	ret

00001b36 <str_writeudec16>:
    1b36:	9f 92       	push	r9
    1b38:	af 92       	push	r10
    1b3a:	bf 92       	push	r11
    1b3c:	cf 92       	push	r12
    1b3e:	df 92       	push	r13
    1b40:	ef 92       	push	r14
    1b42:	ff 92       	push	r15
    1b44:	0f 93       	push	r16
    1b46:	1f 93       	push	r17
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <str_writeudec16+0x18>
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <str_writeudec16+0x1a>
    1b50:	1f 92       	push	r1
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	fc 01       	movw	r30, r24
    1b58:	6b 01       	movw	r12, r22
    1b5a:	9e 01       	movw	r18, r28
    1b5c:	2f 5f       	subi	r18, 0xFF	; 255
    1b5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b60:	8e 01       	movw	r16, r28
    1b62:	0a 5f       	subi	r16, 0xFA	; 250
    1b64:	1f 4f       	sbci	r17, 0xFF	; 255
    1b66:	ee 24       	eor	r14, r14
    1b68:	e3 94       	inc	r14
    1b6a:	f1 2c       	mov	r15, r1
    1b6c:	9a e0       	ldi	r25, 0x0A	; 10
    1b6e:	99 2e       	mov	r9, r25
    1b70:	9e 9c       	mul	r9, r14
    1b72:	50 01       	movw	r10, r0
    1b74:	9f 9c       	mul	r9, r15
    1b76:	b0 0c       	add	r11, r0
    1b78:	11 24       	eor	r1, r1
    1b7a:	c6 01       	movw	r24, r12
    1b7c:	b5 01       	movw	r22, r10
    1b7e:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__udivmodhi4>
    1b82:	b7 01       	movw	r22, r14
    1b84:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__udivmodhi4>
    1b88:	d9 01       	movw	r26, r18
    1b8a:	6d 93       	st	X+, r22
    1b8c:	9d 01       	movw	r18, r26
    1b8e:	c6 1a       	sub	r12, r22
    1b90:	d1 08       	sbc	r13, r1
    1b92:	67 fd       	sbrc	r22, 7
    1b94:	d3 94       	inc	r13
    1b96:	75 01       	movw	r14, r10
    1b98:	a0 17       	cp	r26, r16
    1b9a:	b1 07       	cpc	r27, r17
    1b9c:	49 f7       	brne	.-46     	; 0x1b70 <str_writeudec16+0x3a>
    1b9e:	60 e0       	ldi	r22, 0x00	; 0
    1ba0:	70 e0       	ldi	r23, 0x00	; 0
    1ba2:	84 e0       	ldi	r24, 0x04	; 4
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	50 e0       	ldi	r21, 0x00	; 0
    1ba8:	d8 01       	movw	r26, r16
    1baa:	2e 91       	ld	r18, -X
    1bac:	8d 01       	movw	r16, r26
    1bae:	21 11       	cpse	r18, r1
    1bb0:	05 c0       	rjmp	.+10     	; 0x1bbc <str_writeudec16+0x86>
    1bb2:	61 15       	cp	r22, r1
    1bb4:	71 05       	cpc	r23, r1
    1bb6:	11 f4       	brne	.+4      	; 0x1bbc <str_writeudec16+0x86>
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	41 f4       	brne	.+16     	; 0x1bcc <str_writeudec16+0x96>
    1bbc:	84 17       	cp	r24, r20
    1bbe:	95 07       	cpc	r25, r21
    1bc0:	2c f4       	brge	.+10     	; 0x1bcc <str_writeudec16+0x96>
    1bc2:	20 5d       	subi	r18, 0xD0	; 208
    1bc4:	21 93       	st	Z+, r18
    1bc6:	61 e0       	ldi	r22, 0x01	; 1
    1bc8:	70 e0       	ldi	r23, 0x00	; 0
    1bca:	04 c0       	rjmp	.+8      	; 0x1bd4 <str_writeudec16+0x9e>
    1bcc:	84 17       	cp	r24, r20
    1bce:	95 07       	cpc	r25, r21
    1bd0:	0c f4       	brge	.+2      	; 0x1bd4 <str_writeudec16+0x9e>
    1bd2:	31 96       	adiw	r30, 0x01	; 1
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	40 f7       	brcc	.-48     	; 0x1ba8 <str_writeudec16+0x72>
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	df 91       	pop	r29
    1be4:	cf 91       	pop	r28
    1be6:	1f 91       	pop	r17
    1be8:	0f 91       	pop	r16
    1bea:	ff 90       	pop	r15
    1bec:	ef 90       	pop	r14
    1bee:	df 90       	pop	r13
    1bf0:	cf 90       	pop	r12
    1bf2:	bf 90       	pop	r11
    1bf4:	af 90       	pop	r10
    1bf6:	9f 90       	pop	r9
    1bf8:	08 95       	ret

00001bfa <uart_init>:
    1bfa:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <serial_init>
    1bfe:	78 94       	sei
    1c00:	08 95       	ret

00001c02 <uart_writechar>:
    1c02:	0c 94 29 10 	jmp	0x2052	; 0x2052 <serial_writechar>

00001c06 <uart_writestr>:
    1c06:	cf 93       	push	r28
    1c08:	df 93       	push	r29
    1c0a:	ec 01       	movw	r28, r24
    1c0c:	89 91       	ld	r24, Y+
    1c0e:	88 23       	and	r24, r24
    1c10:	19 f0       	breq	.+6      	; 0x1c18 <uart_writestr+0x12>
    1c12:	0e 94 29 10 	call	0x2052	; 0x2052 <serial_writechar>
    1c16:	fa cf       	rjmp	.-12     	; 0x1c0c <uart_writestr+0x6>
    1c18:	df 91       	pop	r29
    1c1a:	cf 91       	pop	r28
    1c1c:	08 95       	ret

00001c1e <uart_writehex8>:
    1c1e:	cf 93       	push	r28
    1c20:	c8 2f       	mov	r28, r24
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	24 e0       	ldi	r18, 0x04	; 4
    1c26:	95 95       	asr	r25
    1c28:	87 95       	ror	r24
    1c2a:	2a 95       	dec	r18
    1c2c:	e1 f7       	brne	.-8      	; 0x1c26 <uart_writehex8+0x8>
    1c2e:	8a 30       	cpi	r24, 0x0A	; 10
    1c30:	10 f4       	brcc	.+4      	; 0x1c36 <uart_writehex8+0x18>
    1c32:	80 5d       	subi	r24, 0xD0	; 208
    1c34:	01 c0       	rjmp	.+2      	; 0x1c38 <uart_writehex8+0x1a>
    1c36:	89 5c       	subi	r24, 0xC9	; 201
    1c38:	0e 94 29 10 	call	0x2052	; 0x2052 <serial_writechar>
    1c3c:	8c 2f       	mov	r24, r28
    1c3e:	8f 70       	andi	r24, 0x0F	; 15
    1c40:	8a 30       	cpi	r24, 0x0A	; 10
    1c42:	10 f0       	brcs	.+4      	; 0x1c48 <uart_writehex8+0x2a>
    1c44:	89 5c       	subi	r24, 0xC9	; 201
    1c46:	01 c0       	rjmp	.+2      	; 0x1c4a <uart_writehex8+0x2c>
    1c48:	80 5d       	subi	r24, 0xD0	; 208
    1c4a:	cf 91       	pop	r28
    1c4c:	0c 94 29 10 	jmp	0x2052	; 0x2052 <serial_writechar>

00001c50 <uart_writehex16>:
    1c50:	cf 93       	push	r28
    1c52:	c8 2f       	mov	r28, r24
    1c54:	89 2f       	mov	r24, r25
    1c56:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <uart_writehex8>
    1c5a:	8c 2f       	mov	r24, r28
    1c5c:	cf 91       	pop	r28
    1c5e:	0c 94 0f 0e 	jmp	0x1c1e	; 0x1c1e <uart_writehex8>

00001c62 <uart_writedec32>:
    1c62:	2f 92       	push	r2
    1c64:	3f 92       	push	r3
    1c66:	4f 92       	push	r4
    1c68:	5f 92       	push	r5
    1c6a:	6f 92       	push	r6
    1c6c:	7f 92       	push	r7
    1c6e:	8f 92       	push	r8
    1c70:	9f 92       	push	r9
    1c72:	af 92       	push	r10
    1c74:	bf 92       	push	r11
    1c76:	cf 92       	push	r12
    1c78:	df 92       	push	r13
    1c7a:	ef 92       	push	r14
    1c7c:	ff 92       	push	r15
    1c7e:	0f 93       	push	r16
    1c80:	1f 93       	push	r17
    1c82:	cf 93       	push	r28
    1c84:	df 93       	push	r29
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
    1c8a:	63 97       	sbiw	r28, 0x13	; 19
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	f8 94       	cli
    1c90:	de bf       	out	0x3e, r29	; 62
    1c92:	0f be       	out	0x3f, r0	; 63
    1c94:	cd bf       	out	0x3d, r28	; 61
    1c96:	6b 01       	movw	r12, r22
    1c98:	7c 01       	movw	r14, r24
    1c9a:	97 ff       	sbrs	r25, 7
    1c9c:	0d c0       	rjmp	.+26     	; 0x1cb8 <uart_writedec32+0x56>
    1c9e:	f0 94       	com	r15
    1ca0:	e0 94       	com	r14
    1ca2:	d0 94       	com	r13
    1ca4:	c0 94       	com	r12
    1ca6:	c1 1c       	adc	r12, r1
    1ca8:	d1 1c       	adc	r13, r1
    1caa:	e1 1c       	adc	r14, r1
    1cac:	f1 1c       	adc	r15, r1
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	9b 8b       	std	Y+19, r25	; 0x13
    1cb4:	8a 8b       	std	Y+18, r24	; 0x12
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <uart_writedec32+0x5a>
    1cb8:	1b 8a       	std	Y+19, r1	; 0x13
    1cba:	1a 8a       	std	Y+18, r1	; 0x12
    1cbc:	fe 01       	movw	r30, r28
    1cbe:	31 96       	adiw	r30, 0x01	; 1
    1cc0:	5f 01       	movw	r10, r30
    1cc2:	8e 01       	movw	r16, r28
    1cc4:	05 5f       	subi	r16, 0xF5	; 245
    1cc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc8:	f9 8b       	std	Y+17, r31	; 0x11
    1cca:	e8 8b       	std	Y+16, r30	; 0x10
    1ccc:	66 24       	eor	r6, r6
    1cce:	63 94       	inc	r6
    1cd0:	71 2c       	mov	r7, r1
    1cd2:	81 2c       	mov	r8, r1
    1cd4:	91 2c       	mov	r9, r1
    1cd6:	aa e0       	ldi	r26, 0x0A	; 10
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	93 01       	movw	r18, r6
    1cdc:	a4 01       	movw	r20, r8
    1cde:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__muluhisi3>
    1ce2:	1b 01       	movw	r2, r22
    1ce4:	2c 01       	movw	r4, r24
    1ce6:	c7 01       	movw	r24, r14
    1ce8:	b6 01       	movw	r22, r12
    1cea:	91 01       	movw	r18, r2
    1cec:	a2 01       	movw	r20, r4
    1cee:	0e 94 2d 14 	call	0x285a	; 0x285a <__divmodsi4>
    1cf2:	93 01       	movw	r18, r6
    1cf4:	a4 01       	movw	r20, r8
    1cf6:	0e 94 2d 14 	call	0x285a	; 0x285a <__divmodsi4>
    1cfa:	e8 89       	ldd	r30, Y+16	; 0x10
    1cfc:	f9 89       	ldd	r31, Y+17	; 0x11
    1cfe:	21 93       	st	Z+, r18
    1d00:	f9 8b       	std	Y+17, r31	; 0x11
    1d02:	e8 8b       	std	Y+16, r30	; 0x10
    1d04:	82 2f       	mov	r24, r18
    1d06:	22 0f       	add	r18, r18
    1d08:	99 0b       	sbc	r25, r25
    1d0a:	aa 0b       	sbc	r26, r26
    1d0c:	bb 0b       	sbc	r27, r27
    1d0e:	c8 1a       	sub	r12, r24
    1d10:	d9 0a       	sbc	r13, r25
    1d12:	ea 0a       	sbc	r14, r26
    1d14:	fb 0a       	sbc	r15, r27
    1d16:	31 01       	movw	r6, r2
    1d18:	42 01       	movw	r8, r4
    1d1a:	0e 17       	cp	r16, r30
    1d1c:	1f 07       	cpc	r17, r31
    1d1e:	d9 f6       	brne	.-74     	; 0x1cd6 <uart_writedec32+0x74>
    1d20:	8a 89       	ldd	r24, Y+18	; 0x12
    1d22:	9b 89       	ldd	r25, Y+19	; 0x13
    1d24:	89 2b       	or	r24, r25
    1d26:	11 f0       	breq	.+4      	; 0x1d2c <uart_writedec32+0xca>
    1d28:	8d e2       	ldi	r24, 0x2D	; 45
    1d2a:	01 c0       	rjmp	.+2      	; 0x1d2e <uart_writedec32+0xcc>
    1d2c:	80 e2       	ldi	r24, 0x20	; 32
    1d2e:	0e 94 29 10 	call	0x2052	; 0x2052 <serial_writechar>
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	f8 01       	movw	r30, r16
    1d38:	82 91       	ld	r24, -Z
    1d3a:	8f 01       	movw	r16, r30
    1d3c:	81 11       	cpse	r24, r1
    1d3e:	06 c0       	rjmp	.+12     	; 0x1d4c <uart_writedec32+0xea>
    1d40:	21 15       	cp	r18, r1
    1d42:	31 05       	cpc	r19, r1
    1d44:	19 f4       	brne	.+6      	; 0x1d4c <uart_writedec32+0xea>
    1d46:	ea 15       	cp	r30, r10
    1d48:	fb 05       	cpc	r31, r11
    1d4a:	29 f4       	brne	.+10     	; 0x1d56 <uart_writedec32+0xf4>
    1d4c:	80 5d       	subi	r24, 0xD0	; 208
    1d4e:	0e 94 29 10 	call	0x2052	; 0x2052 <serial_writechar>
    1d52:	21 e0       	ldi	r18, 0x01	; 1
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	0a 15       	cp	r16, r10
    1d58:	1b 05       	cpc	r17, r11
    1d5a:	69 f7       	brne	.-38     	; 0x1d36 <uart_writedec32+0xd4>
    1d5c:	63 96       	adiw	r28, 0x13	; 19
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	f8 94       	cli
    1d62:	de bf       	out	0x3e, r29	; 62
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	cd bf       	out	0x3d, r28	; 61
    1d68:	df 91       	pop	r29
    1d6a:	cf 91       	pop	r28
    1d6c:	1f 91       	pop	r17
    1d6e:	0f 91       	pop	r16
    1d70:	ff 90       	pop	r15
    1d72:	ef 90       	pop	r14
    1d74:	df 90       	pop	r13
    1d76:	cf 90       	pop	r12
    1d78:	bf 90       	pop	r11
    1d7a:	af 90       	pop	r10
    1d7c:	9f 90       	pop	r9
    1d7e:	8f 90       	pop	r8
    1d80:	7f 90       	pop	r7
    1d82:	6f 90       	pop	r6
    1d84:	5f 90       	pop	r5
    1d86:	4f 90       	pop	r4
    1d88:	3f 90       	pop	r3
    1d8a:	2f 90       	pop	r2
    1d8c:	08 95       	ret

00001d8e <dump_eeprom>:
    1d8e:	2f 92       	push	r2
    1d90:	3f 92       	push	r3
    1d92:	4f 92       	push	r4
    1d94:	5f 92       	push	r5
    1d96:	6f 92       	push	r6
    1d98:	7f 92       	push	r7
    1d9a:	8f 92       	push	r8
    1d9c:	9f 92       	push	r9
    1d9e:	af 92       	push	r10
    1da0:	bf 92       	push	r11
    1da2:	cf 92       	push	r12
    1da4:	df 92       	push	r13
    1da6:	ef 92       	push	r14
    1da8:	ff 92       	push	r15
    1daa:	0f 93       	push	r16
    1dac:	1f 93       	push	r17
    1dae:	cf 93       	push	r28
    1db0:	df 93       	push	r29
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
    1db6:	64 97       	sbiw	r28, 0x14	; 20
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	de bf       	out	0x3e, r29	; 62
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	cd bf       	out	0x3d, r28	; 61
    1dc2:	8c 01       	movw	r16, r24
    1dc4:	61 15       	cp	r22, r1
    1dc6:	71 05       	cpc	r23, r1
    1dc8:	09 f4       	brne	.+2      	; 0x1dcc <dump_eeprom+0x3e>
    1dca:	92 c0       	rjmp	.+292    	; 0x1ef0 <dump_eeprom+0x162>
    1dcc:	81 2c       	mov	r8, r1
    1dce:	91 2c       	mov	r9, r1
    1dd0:	54 01       	movw	r10, r8
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	a0 e0       	ldi	r26, 0x00	; 0
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	89 8b       	std	Y+17, r24	; 0x11
    1dda:	9a 8b       	std	Y+18, r25	; 0x12
    1ddc:	ab 8b       	std	Y+19, r26	; 0x13
    1dde:	bc 8b       	std	Y+20, r27	; 0x14
    1de0:	de 01       	movw	r26, r28
    1de2:	11 96       	adiw	r26, 0x01	; 1
    1de4:	1d 01       	movw	r2, r26
    1de6:	89 89       	ldd	r24, Y+17	; 0x11
    1de8:	9a 89       	ldd	r25, Y+18	; 0x12
    1dea:	ab 89       	ldd	r26, Y+19	; 0x13
    1dec:	bc 89       	ldd	r27, Y+20	; 0x14
    1dee:	88 16       	cp	r8, r24
    1df0:	99 06       	cpc	r9, r25
    1df2:	aa 06       	cpc	r10, r26
    1df4:	bb 06       	cpc	r11, r27
    1df6:	08 f0       	brcs	.+2      	; 0x1dfa <dump_eeprom+0x6c>
    1df8:	7b c0       	rjmp	.+246    	; 0x1ef0 <dump_eeprom+0x162>
    1dfa:	81 2f       	mov	r24, r17
    1dfc:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <uart_writehex8>
    1e00:	80 2f       	mov	r24, r16
    1e02:	80 7f       	andi	r24, 0xF0	; 240
    1e04:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <uart_writehex8>
    1e08:	80 e2       	ldi	r24, 0x20	; 32
    1e0a:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <uart_writechar>
    1e0e:	61 01       	movw	r12, r2
    1e10:	78 01       	movw	r14, r16
    1e12:	41 2c       	mov	r4, r1
    1e14:	51 2c       	mov	r5, r1
    1e16:	32 01       	movw	r6, r4
    1e18:	41 e0       	ldi	r20, 0x01	; 1
    1e1a:	b6 01       	movw	r22, r12
    1e1c:	c7 01       	movw	r24, r14
    1e1e:	0e 94 ad 03 	call	0x75a	; 0x75a <eeprom_readbuf>
    1e22:	bf ef       	ldi	r27, 0xFF	; 255
    1e24:	eb 1a       	sub	r14, r27
    1e26:	fb 0a       	sbc	r15, r27
    1e28:	ef ef       	ldi	r30, 0xFF	; 255
    1e2a:	4e 1a       	sub	r4, r30
    1e2c:	5e 0a       	sbc	r5, r30
    1e2e:	6e 0a       	sbc	r6, r30
    1e30:	7e 0a       	sbc	r7, r30
    1e32:	ff ef       	ldi	r31, 0xFF	; 255
    1e34:	8f 1a       	sub	r8, r31
    1e36:	9f 0a       	sbc	r9, r31
    1e38:	af 0a       	sbc	r10, r31
    1e3a:	bf 0a       	sbc	r11, r31
    1e3c:	89 89       	ldd	r24, Y+17	; 0x11
    1e3e:	9a 89       	ldd	r25, Y+18	; 0x12
    1e40:	ab 89       	ldd	r26, Y+19	; 0x13
    1e42:	bc 89       	ldd	r27, Y+20	; 0x14
    1e44:	88 16       	cp	r8, r24
    1e46:	99 06       	cpc	r9, r25
    1e48:	aa 06       	cpc	r10, r26
    1e4a:	bb 06       	cpc	r11, r27
    1e4c:	50 f0       	brcs	.+20     	; 0x1e62 <dump_eeprom+0xd4>
    1e4e:	68 01       	movw	r12, r16
    1e50:	9f e0       	ldi	r25, 0x0F	; 15
    1e52:	c9 22       	and	r12, r25
    1e54:	dd 24       	eor	r13, r13
    1e56:	00 e0       	ldi	r16, 0x00	; 0
    1e58:	10 e0       	ldi	r17, 0x00	; 0
    1e5a:	32 01       	movw	r6, r4
    1e5c:	6c 0c       	add	r6, r12
    1e5e:	7d 1c       	adc	r7, r13
    1e60:	09 c0       	rjmp	.+18     	; 0x1e74 <dump_eeprom+0xe6>
    1e62:	af ef       	ldi	r26, 0xFF	; 255
    1e64:	ca 1a       	sub	r12, r26
    1e66:	da 0a       	sbc	r13, r26
    1e68:	c7 01       	movw	r24, r14
    1e6a:	8f 70       	andi	r24, 0x0F	; 15
    1e6c:	99 27       	eor	r25, r25
    1e6e:	89 2b       	or	r24, r25
    1e70:	99 f6       	brne	.-90     	; 0x1e18 <dump_eeprom+0x8a>
    1e72:	ed cf       	rjmp	.-38     	; 0x1e4e <dump_eeprom+0xc0>
    1e74:	0c 15       	cp	r16, r12
    1e76:	1d 05       	cpc	r17, r13
    1e78:	18 f0       	brcs	.+6      	; 0x1e80 <dump_eeprom+0xf2>
    1e7a:	06 15       	cp	r16, r6
    1e7c:	17 05       	cpc	r17, r7
    1e7e:	28 f0       	brcs	.+10     	; 0x1e8a <dump_eeprom+0xfc>
    1e80:	8b ec       	ldi	r24, 0xCB	; 203
    1e82:	91 e0       	ldi	r25, 0x01	; 1
    1e84:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <uart_writestr>
    1e88:	0b c0       	rjmp	.+22     	; 0x1ea0 <dump_eeprom+0x112>
    1e8a:	f8 01       	movw	r30, r16
    1e8c:	ec 19       	sub	r30, r12
    1e8e:	fd 09       	sbc	r31, r13
    1e90:	e2 0d       	add	r30, r2
    1e92:	f3 1d       	adc	r31, r3
    1e94:	80 81       	ld	r24, Z
    1e96:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <uart_writehex8>
    1e9a:	80 e2       	ldi	r24, 0x20	; 32
    1e9c:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <uart_writechar>
    1ea0:	0f 5f       	subi	r16, 0xFF	; 255
    1ea2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea4:	00 31       	cpi	r16, 0x10	; 16
    1ea6:	11 05       	cpc	r17, r1
    1ea8:	29 f7       	brne	.-54     	; 0x1e74 <dump_eeprom+0xe6>
    1eaa:	00 e0       	ldi	r16, 0x00	; 0
    1eac:	10 e0       	ldi	r17, 0x00	; 0
    1eae:	c0 16       	cp	r12, r16
    1eb0:	d1 06       	cpc	r13, r17
    1eb2:	31 f0       	breq	.+12     	; 0x1ec0 <dump_eeprom+0x132>
    1eb4:	80 e2       	ldi	r24, 0x20	; 32
    1eb6:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <uart_writechar>
    1eba:	0f 5f       	subi	r16, 0xFF	; 255
    1ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebe:	f7 cf       	rjmp	.-18     	; 0x1eae <dump_eeprom+0x120>
    1ec0:	81 01       	movw	r16, r2
    1ec2:	c8 01       	movw	r24, r16
    1ec4:	82 19       	sub	r24, r2
    1ec6:	93 09       	sbc	r25, r3
    1ec8:	84 15       	cp	r24, r4
    1eca:	95 05       	cpc	r25, r5
    1ecc:	58 f4       	brcc	.+22     	; 0x1ee4 <dump_eeprom+0x156>
    1ece:	f8 01       	movw	r30, r16
    1ed0:	81 91       	ld	r24, Z+
    1ed2:	8f 01       	movw	r16, r30
    1ed4:	90 ee       	ldi	r25, 0xE0	; 224
    1ed6:	98 0f       	add	r25, r24
    1ed8:	90 36       	cpi	r25, 0x60	; 96
    1eda:	08 f0       	brcs	.+2      	; 0x1ede <dump_eeprom+0x150>
    1edc:	8e e2       	ldi	r24, 0x2E	; 46
    1ede:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <uart_writechar>
    1ee2:	ef cf       	rjmp	.-34     	; 0x1ec2 <dump_eeprom+0x134>
    1ee4:	8f ec       	ldi	r24, 0xCF	; 207
    1ee6:	91 e0       	ldi	r25, 0x01	; 1
    1ee8:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <uart_writestr>
    1eec:	87 01       	movw	r16, r14
    1eee:	7b cf       	rjmp	.-266    	; 0x1de6 <dump_eeprom+0x58>
    1ef0:	64 96       	adiw	r28, 0x14	; 20
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	de bf       	out	0x3e, r29	; 62
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	cd bf       	out	0x3d, r28	; 61
    1efc:	df 91       	pop	r29
    1efe:	cf 91       	pop	r28
    1f00:	1f 91       	pop	r17
    1f02:	0f 91       	pop	r16
    1f04:	ff 90       	pop	r15
    1f06:	ef 90       	pop	r14
    1f08:	df 90       	pop	r13
    1f0a:	cf 90       	pop	r12
    1f0c:	bf 90       	pop	r11
    1f0e:	af 90       	pop	r10
    1f10:	9f 90       	pop	r9
    1f12:	8f 90       	pop	r8
    1f14:	7f 90       	pop	r7
    1f16:	6f 90       	pop	r6
    1f18:	5f 90       	pop	r5
    1f1a:	4f 90       	pop	r4
    1f1c:	3f 90       	pop	r3
    1f1e:	2f 90       	pop	r2
    1f20:	08 95       	ret

00001f22 <serial_init>:
    1f22:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1f26:	87 e6       	ldi	r24, 0x67	; 103
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1f2e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1f32:	e1 ec       	ldi	r30, 0xC1	; 193
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	88 e1       	ldi	r24, 0x18	; 24
    1f38:	80 83       	st	Z, r24
    1f3a:	86 e0       	ldi	r24, 0x06	; 6
    1f3c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    1f40:	80 81       	ld	r24, Z
    1f42:	80 6a       	ori	r24, 0xA0	; 160
    1f44:	80 83       	st	Z, r24
    1f46:	08 95       	ret

00001f48 <__vector_18>:
    1f48:	1f 92       	push	r1
    1f4a:	0f 92       	push	r0
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	0f 92       	push	r0
    1f50:	11 24       	eor	r1, r1
    1f52:	2f 93       	push	r18
    1f54:	8f 93       	push	r24
    1f56:	9f 93       	push	r25
    1f58:	ef 93       	push	r30
    1f5a:	ff 93       	push	r31
    1f5c:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <rxtail>
    1f60:	20 91 66 02 	lds	r18, 0x0266	; 0x800266 <rxhead>
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	82 1b       	sub	r24, r18
    1f68:	91 09       	sbc	r25, r1
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	8f 73       	andi	r24, 0x3F	; 63
    1f6e:	99 27       	eor	r25, r25
    1f70:	89 2b       	or	r24, r25
    1f72:	79 f0       	breq	.+30     	; 0x1f92 <__vector_18+0x4a>
    1f74:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <rxhead>
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1f7e:	e4 5f       	subi	r30, 0xF4	; 244
    1f80:	fc 4f       	sbci	r31, 0xFC	; 252
    1f82:	80 83       	st	Z, r24
    1f84:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <rxhead>
    1f88:	8f 5f       	subi	r24, 0xFF	; 255
    1f8a:	8f 73       	andi	r24, 0x3F	; 63
    1f8c:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <rxhead>
    1f90:	02 c0       	rjmp	.+4      	; 0x1f96 <__vector_18+0x4e>
    1f92:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1f96:	ff 91       	pop	r31
    1f98:	ef 91       	pop	r30
    1f9a:	9f 91       	pop	r25
    1f9c:	8f 91       	pop	r24
    1f9e:	2f 91       	pop	r18
    1fa0:	0f 90       	pop	r0
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	0f 90       	pop	r0
    1fa6:	1f 90       	pop	r1
    1fa8:	18 95       	reti

00001faa <__vector_19>:
    1faa:	1f 92       	push	r1
    1fac:	0f 92       	push	r0
    1fae:	0f b6       	in	r0, 0x3f	; 63
    1fb0:	0f 92       	push	r0
    1fb2:	11 24       	eor	r1, r1
    1fb4:	2f 93       	push	r18
    1fb6:	8f 93       	push	r24
    1fb8:	9f 93       	push	r25
    1fba:	ef 93       	push	r30
    1fbc:	ff 93       	push	r31
    1fbe:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <txhead>
    1fc2:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <txtail>
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	82 1b       	sub	r24, r18
    1fca:	91 09       	sbc	r25, r1
    1fcc:	8f 73       	andi	r24, 0x3F	; 63
    1fce:	99 27       	eor	r25, r25
    1fd0:	89 2b       	or	r24, r25
    1fd2:	79 f0       	breq	.+30     	; 0x1ff2 <__vector_19+0x48>
    1fd4:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <txtail>
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	e4 5b       	subi	r30, 0xB4	; 180
    1fdc:	fc 4f       	sbci	r31, 0xFC	; 252
    1fde:	80 81       	ld	r24, Z
    1fe0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1fe4:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <txtail>
    1fe8:	8f 5f       	subi	r24, 0xFF	; 255
    1fea:	8f 73       	andi	r24, 0x3F	; 63
    1fec:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <txtail>
    1ff0:	05 c0       	rjmp	.+10     	; 0x1ffc <__vector_19+0x52>
    1ff2:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1ff6:	8f 7d       	andi	r24, 0xDF	; 223
    1ff8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1ffc:	ff 91       	pop	r31
    1ffe:	ef 91       	pop	r30
    2000:	9f 91       	pop	r25
    2002:	8f 91       	pop	r24
    2004:	2f 91       	pop	r18
    2006:	0f 90       	pop	r0
    2008:	0f be       	out	0x3f, r0	; 63
    200a:	0f 90       	pop	r0
    200c:	1f 90       	pop	r1
    200e:	18 95       	reti

00002010 <serial_rxchars>:
    2010:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <rxhead>
    2014:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <rxtail>
    2018:	89 1b       	sub	r24, r25
    201a:	8f 73       	andi	r24, 0x3F	; 63
    201c:	08 95       	ret

0000201e <serial_popchar>:
    201e:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <rxhead>
    2022:	20 91 65 02 	lds	r18, 0x0265	; 0x800265 <rxtail>
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	82 1b       	sub	r24, r18
    202a:	91 09       	sbc	r25, r1
    202c:	8f 73       	andi	r24, 0x3F	; 63
    202e:	99 27       	eor	r25, r25
    2030:	89 2b       	or	r24, r25
    2032:	69 f0       	breq	.+26     	; 0x204e <serial_popchar+0x30>
    2034:	e0 91 65 02 	lds	r30, 0x0265	; 0x800265 <rxtail>
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	e4 5f       	subi	r30, 0xF4	; 244
    203c:	fc 4f       	sbci	r31, 0xFC	; 252
    203e:	80 81       	ld	r24, Z
    2040:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <rxtail>
    2044:	9f 5f       	subi	r25, 0xFF	; 255
    2046:	9f 73       	andi	r25, 0x3F	; 63
    2048:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <rxtail>
    204c:	08 95       	ret
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	08 95       	ret

00002052 <serial_writechar>:
    2052:	0f b6       	in	r0, 0x3f	; 63
    2054:	07 fe       	sbrs	r0, 7
    2056:	0e c0       	rjmp	.+28     	; 0x2074 <serial_writechar+0x22>
    2058:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <txtail>
    205c:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <txhead>
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	29 1b       	sub	r18, r25
    2064:	31 09       	sbc	r19, r1
    2066:	21 50       	subi	r18, 0x01	; 1
    2068:	31 09       	sbc	r19, r1
    206a:	2f 73       	andi	r18, 0x3F	; 63
    206c:	33 27       	eor	r19, r19
    206e:	23 2b       	or	r18, r19
    2070:	99 f3       	breq	.-26     	; 0x2058 <serial_writechar+0x6>
    2072:	0d c0       	rjmp	.+26     	; 0x208e <serial_writechar+0x3c>
    2074:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <txtail>
    2078:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <txhead>
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	29 1b       	sub	r18, r25
    2080:	31 09       	sbc	r19, r1
    2082:	21 50       	subi	r18, 0x01	; 1
    2084:	31 09       	sbc	r19, r1
    2086:	2f 73       	andi	r18, 0x3F	; 63
    2088:	33 27       	eor	r19, r19
    208a:	23 2b       	or	r18, r19
    208c:	61 f0       	breq	.+24     	; 0x20a6 <serial_writechar+0x54>
    208e:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <txhead>
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	e4 5b       	subi	r30, 0xB4	; 180
    2096:	fc 4f       	sbci	r31, 0xFC	; 252
    2098:	80 83       	st	Z, r24
    209a:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <txhead>
    209e:	8f 5f       	subi	r24, 0xFF	; 255
    20a0:	8f 73       	andi	r24, 0x3F	; 63
    20a2:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <txhead>
    20a6:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    20aa:	80 62       	ori	r24, 0x20	; 32
    20ac:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    20b0:	08 95       	ret

000020b2 <serial_writestr>:
    20b2:	1f 93       	push	r17
    20b4:	cf 93       	push	r28
    20b6:	df 93       	push	r29
    20b8:	ec 01       	movw	r28, r24
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	11 e0       	ldi	r17, 0x01	; 1
    20be:	18 0f       	add	r17, r24
    20c0:	fe 01       	movw	r30, r28
    20c2:	e8 0f       	add	r30, r24
    20c4:	f1 1d       	adc	r31, r1
    20c6:	80 81       	ld	r24, Z
    20c8:	88 23       	and	r24, r24
    20ca:	21 f0       	breq	.+8      	; 0x20d4 <serial_writestr+0x22>
    20cc:	0e 94 29 10 	call	0x2052	; 0x2052 <serial_writechar>
    20d0:	81 2f       	mov	r24, r17
    20d2:	f4 cf       	rjmp	.-24     	; 0x20bc <serial_writestr+0xa>
    20d4:	df 91       	pop	r29
    20d6:	cf 91       	pop	r28
    20d8:	1f 91       	pop	r17
    20da:	08 95       	ret

000020dc <serial_writestr_P>:
    20dc:	1f 93       	push	r17
    20de:	cf 93       	push	r28
    20e0:	df 93       	push	r29
    20e2:	ec 01       	movw	r28, r24
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	11 e0       	ldi	r17, 0x01	; 1
    20e8:	18 0f       	add	r17, r24
    20ea:	fe 01       	movw	r30, r28
    20ec:	e8 0f       	add	r30, r24
    20ee:	f1 1d       	adc	r31, r1
    20f0:	84 91       	lpm	r24, Z
    20f2:	88 23       	and	r24, r24
    20f4:	21 f0       	breq	.+8      	; 0x20fe <serial_writestr_P+0x22>
    20f6:	0e 94 29 10 	call	0x2052	; 0x2052 <serial_writechar>
    20fa:	81 2f       	mov	r24, r17
    20fc:	f4 cf       	rjmp	.-24     	; 0x20e6 <serial_writestr_P+0xa>
    20fe:	df 91       	pop	r29
    2100:	cf 91       	pop	r28
    2102:	1f 91       	pop	r17
    2104:	08 95       	ret

00002106 <_Z10delay_initv>:
    2106:	cf 93       	push	r28
    2108:	df 93       	push	r29
    210a:	00 d0       	rcall	.+0      	; 0x210c <_Z10delay_initv+0x6>
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62
    2110:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <_ZL11initialized>
    2114:	88 23       	and	r24, r24
    2116:	89 f5       	brne	.+98     	; 0x217a <_Z10delay_initv+0x74>
    2118:	8a ef       	ldi	r24, 0xFA	; 250
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	9a 83       	std	Y+2, r25	; 0x02
    211e:	89 83       	std	Y+1, r24	; 0x01
    2120:	87 e4       	ldi	r24, 0x47	; 71
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	29 81       	ldd	r18, Y+1	; 0x01
    2126:	21 50       	subi	r18, 0x01	; 1
    2128:	fc 01       	movw	r30, r24
    212a:	20 83       	st	Z, r18
    212c:	84 e4       	ldi	r24, 0x44	; 68
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	24 e4       	ldi	r18, 0x44	; 68
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	f9 01       	movw	r30, r18
    2136:	20 81       	ld	r18, Z
    2138:	22 60       	ori	r18, 0x02	; 2
    213a:	fc 01       	movw	r30, r24
    213c:	20 83       	st	Z, r18
    213e:	85 e4       	ldi	r24, 0x45	; 69
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	25 e4       	ldi	r18, 0x45	; 69
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	f9 01       	movw	r30, r18
    2148:	20 81       	ld	r18, Z
    214a:	23 60       	ori	r18, 0x03	; 3
    214c:	fc 01       	movw	r30, r24
    214e:	20 83       	st	Z, r18
    2150:	8f e5       	ldi	r24, 0x5F	; 95
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	2f e5       	ldi	r18, 0x5F	; 95
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	f9 01       	movw	r30, r18
    215a:	20 81       	ld	r18, Z
    215c:	20 68       	ori	r18, 0x80	; 128
    215e:	fc 01       	movw	r30, r24
    2160:	20 83       	st	Z, r18
    2162:	8e e6       	ldi	r24, 0x6E	; 110
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	2e e6       	ldi	r18, 0x6E	; 110
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	f9 01       	movw	r30, r18
    216c:	20 81       	ld	r18, Z
    216e:	22 60       	ori	r18, 0x02	; 2
    2170:	fc 01       	movw	r30, r24
    2172:	20 83       	st	Z, r18
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <_ZL11initialized>
    217a:	00 00       	nop
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	df 91       	pop	r29
    2182:	cf 91       	pop	r28
    2184:	08 95       	ret

00002186 <_Z9delay_getj>:
    2186:	cf 93       	push	r28
    2188:	df 93       	push	r29
    218a:	00 d0       	rcall	.+0      	; 0x218c <_Z9delay_getj+0x6>
    218c:	00 d0       	rcall	.+0      	; 0x218e <_Z9delay_getj+0x8>
    218e:	00 d0       	rcall	.+0      	; 0x2190 <_Z9delay_getj+0xa>
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	9e 83       	std	Y+6, r25	; 0x06
    2196:	8d 83       	std	Y+5, r24	; 0x05
    2198:	8f e5       	ldi	r24, 0x5F	; 95
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	fc 01       	movw	r30, r24
    219e:	80 81       	ld	r24, Z
    21a0:	08 2e       	mov	r0, r24
    21a2:	00 0c       	add	r0, r0
    21a4:	99 0b       	sbc	r25, r25
    21a6:	80 78       	andi	r24, 0x80	; 128
    21a8:	99 27       	eor	r25, r25
    21aa:	9a 83       	std	Y+2, r25	; 0x02
    21ac:	89 83       	std	Y+1, r24	; 0x01
    21ae:	8f e5       	ldi	r24, 0x5F	; 95
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	2f e5       	ldi	r18, 0x5F	; 95
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	f9 01       	movw	r30, r18
    21b8:	20 81       	ld	r18, Z
    21ba:	2f 77       	andi	r18, 0x7F	; 127
    21bc:	fc 01       	movw	r30, r24
    21be:	20 83       	st	Z, r18
    21c0:	8d 81       	ldd	r24, Y+5	; 0x05
    21c2:	9e 81       	ldd	r25, Y+6	; 0x06
    21c4:	88 0f       	add	r24, r24
    21c6:	99 1f       	adc	r25, r25
    21c8:	89 59       	subi	r24, 0x99	; 153
    21ca:	9d 4f       	sbci	r25, 0xFD	; 253
    21cc:	fc 01       	movw	r30, r24
    21ce:	80 81       	ld	r24, Z
    21d0:	91 81       	ldd	r25, Z+1	; 0x01
    21d2:	9c 83       	std	Y+4, r25	; 0x04
    21d4:	8b 83       	std	Y+3, r24	; 0x03
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	9a 81       	ldd	r25, Y+2	; 0x02
    21da:	89 2b       	or	r24, r25
    21dc:	49 f0       	breq	.+18     	; 0x21f0 <_Z9delay_getj+0x6a>
    21de:	8f e5       	ldi	r24, 0x5F	; 95
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	2f e5       	ldi	r18, 0x5F	; 95
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	f9 01       	movw	r30, r18
    21e8:	20 81       	ld	r18, Z
    21ea:	20 68       	ori	r18, 0x80	; 128
    21ec:	fc 01       	movw	r30, r24
    21ee:	20 83       	st	Z, r18
    21f0:	8b 81       	ldd	r24, Y+3	; 0x03
    21f2:	9c 81       	ldd	r25, Y+4	; 0x04
    21f4:	26 96       	adiw	r28, 0x06	; 6
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	de bf       	out	0x3e, r29	; 62
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	cd bf       	out	0x3d, r28	; 61
    2200:	df 91       	pop	r29
    2202:	cf 91       	pop	r28
    2204:	08 95       	ret

00002206 <_Z9delay_setjj>:
    2206:	cf 93       	push	r28
    2208:	df 93       	push	r29
    220a:	00 d0       	rcall	.+0      	; 0x220c <_Z9delay_setjj+0x6>
    220c:	00 d0       	rcall	.+0      	; 0x220e <_Z9delay_setjj+0x8>
    220e:	00 d0       	rcall	.+0      	; 0x2210 <_Z9delay_setjj+0xa>
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
    2214:	9c 83       	std	Y+4, r25	; 0x04
    2216:	8b 83       	std	Y+3, r24	; 0x03
    2218:	7e 83       	std	Y+6, r23	; 0x06
    221a:	6d 83       	std	Y+5, r22	; 0x05
    221c:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <_ZL11initialized>
    2220:	88 23       	and	r24, r24
    2222:	11 f4       	brne	.+4      	; 0x2228 <_Z9delay_setjj+0x22>
    2224:	0e 94 83 10 	call	0x2106	; 0x2106 <_Z10delay_initv>
    2228:	8f e5       	ldi	r24, 0x5F	; 95
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	fc 01       	movw	r30, r24
    222e:	80 81       	ld	r24, Z
    2230:	08 2e       	mov	r0, r24
    2232:	00 0c       	add	r0, r0
    2234:	99 0b       	sbc	r25, r25
    2236:	80 78       	andi	r24, 0x80	; 128
    2238:	99 27       	eor	r25, r25
    223a:	9a 83       	std	Y+2, r25	; 0x02
    223c:	89 83       	std	Y+1, r24	; 0x01
    223e:	8f e5       	ldi	r24, 0x5F	; 95
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	2f e5       	ldi	r18, 0x5F	; 95
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	f9 01       	movw	r30, r18
    2248:	20 81       	ld	r18, Z
    224a:	2f 77       	andi	r18, 0x7F	; 127
    224c:	fc 01       	movw	r30, r24
    224e:	20 83       	st	Z, r18
    2250:	8b 81       	ldd	r24, Y+3	; 0x03
    2252:	9c 81       	ldd	r25, Y+4	; 0x04
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	85 59       	subi	r24, 0x95	; 149
    225a:	9d 4f       	sbci	r25, 0xFD	; 253
    225c:	2d 81       	ldd	r18, Y+5	; 0x05
    225e:	3e 81       	ldd	r19, Y+6	; 0x06
    2260:	fc 01       	movw	r30, r24
    2262:	31 83       	std	Z+1, r19	; 0x01
    2264:	20 83       	st	Z, r18
    2266:	8b 81       	ldd	r24, Y+3	; 0x03
    2268:	9c 81       	ldd	r25, Y+4	; 0x04
    226a:	88 0f       	add	r24, r24
    226c:	99 1f       	adc	r25, r25
    226e:	89 59       	subi	r24, 0x99	; 153
    2270:	9d 4f       	sbci	r25, 0xFD	; 253
    2272:	fc 01       	movw	r30, r24
    2274:	11 82       	std	Z+1, r1	; 0x01
    2276:	10 82       	st	Z, r1
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	9a 81       	ldd	r25, Y+2	; 0x02
    227c:	89 2b       	or	r24, r25
    227e:	49 f0       	breq	.+18     	; 0x2292 <_Z9delay_setjj+0x8c>
    2280:	8f e5       	ldi	r24, 0x5F	; 95
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	2f e5       	ldi	r18, 0x5F	; 95
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	f9 01       	movw	r30, r18
    228a:	20 81       	ld	r18, Z
    228c:	20 68       	ori	r18, 0x80	; 128
    228e:	fc 01       	movw	r30, r24
    2290:	20 83       	st	Z, r18
    2292:	00 00       	nop
    2294:	26 96       	adiw	r28, 0x06	; 6
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	0f be       	out	0x3f, r0	; 63
    229e:	cd bf       	out	0x3d, r28	; 61
    22a0:	df 91       	pop	r29
    22a2:	cf 91       	pop	r28
    22a4:	08 95       	ret

000022a6 <_Z12delay_isdonej>:
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
    22aa:	00 d0       	rcall	.+0      	; 0x22ac <_Z12delay_isdonej+0x6>
    22ac:	00 d0       	rcall	.+0      	; 0x22ae <_Z12delay_isdonej+0x8>
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    22b2:	9c 83       	std	Y+4, r25	; 0x04
    22b4:	8b 83       	std	Y+3, r24	; 0x03
    22b6:	1a 82       	std	Y+2, r1	; 0x02
    22b8:	19 82       	std	Y+1, r1	; 0x01
    22ba:	8b 81       	ldd	r24, Y+3	; 0x03
    22bc:	9c 81       	ldd	r25, Y+4	; 0x04
    22be:	88 0f       	add	r24, r24
    22c0:	99 1f       	adc	r25, r25
    22c2:	89 59       	subi	r24, 0x99	; 153
    22c4:	9d 4f       	sbci	r25, 0xFD	; 253
    22c6:	fc 01       	movw	r30, r24
    22c8:	20 81       	ld	r18, Z
    22ca:	31 81       	ldd	r19, Z+1	; 0x01
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	9c 81       	ldd	r25, Y+4	; 0x04
    22d0:	88 0f       	add	r24, r24
    22d2:	99 1f       	adc	r25, r25
    22d4:	85 59       	subi	r24, 0x95	; 149
    22d6:	9d 4f       	sbci	r25, 0xFD	; 253
    22d8:	fc 01       	movw	r30, r24
    22da:	80 81       	ld	r24, Z
    22dc:	91 81       	ldd	r25, Z+1	; 0x01
    22de:	41 e0       	ldi	r20, 0x01	; 1
    22e0:	28 17       	cp	r18, r24
    22e2:	39 07       	cpc	r19, r25
    22e4:	09 f0       	breq	.+2      	; 0x22e8 <_Z12delay_isdonej+0x42>
    22e6:	40 e0       	ldi	r20, 0x00	; 0
    22e8:	44 23       	and	r20, r20
    22ea:	21 f0       	breq	.+8      	; 0x22f4 <_Z12delay_isdonej+0x4e>
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	9a 83       	std	Y+2, r25	; 0x02
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	9a 81       	ldd	r25, Y+2	; 0x02
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	df 91       	pop	r29
    2302:	cf 91       	pop	r28
    2304:	08 95       	ret

00002306 <_Z11__vector_14v>:
    2306:	1f 92       	push	r1
    2308:	0f 92       	push	r0
    230a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    230e:	0f 92       	push	r0
    2310:	11 24       	eor	r1, r1
    2312:	2f 93       	push	r18
    2314:	3f 93       	push	r19
    2316:	4f 93       	push	r20
    2318:	8f 93       	push	r24
    231a:	9f 93       	push	r25
    231c:	ef 93       	push	r30
    231e:	ff 93       	push	r31
    2320:	cf 93       	push	r28
    2322:	df 93       	push	r29
    2324:	00 d0       	rcall	.+0      	; 0x2326 <_Z11__vector_14v+0x20>
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	1a 82       	std	Y+2, r1	; 0x02
    232c:	19 82       	std	Y+1, r1	; 0x01
    232e:	22 e0       	ldi	r18, 0x02	; 2
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	9a 81       	ldd	r25, Y+2	; 0x02
    2336:	82 17       	cp	r24, r18
    2338:	93 07       	cpc	r25, r19
    233a:	a0 f5       	brcc	.+104    	; 0x23a4 <_Z11__vector_14v+0x9e>
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	9a 81       	ldd	r25, Y+2	; 0x02
    2340:	88 0f       	add	r24, r24
    2342:	99 1f       	adc	r25, r25
    2344:	89 59       	subi	r24, 0x99	; 153
    2346:	9d 4f       	sbci	r25, 0xFD	; 253
    2348:	fc 01       	movw	r30, r24
    234a:	20 81       	ld	r18, Z
    234c:	31 81       	ldd	r19, Z+1	; 0x01
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	9a 81       	ldd	r25, Y+2	; 0x02
    2352:	88 0f       	add	r24, r24
    2354:	99 1f       	adc	r25, r25
    2356:	85 59       	subi	r24, 0x95	; 149
    2358:	9d 4f       	sbci	r25, 0xFD	; 253
    235a:	fc 01       	movw	r30, r24
    235c:	80 81       	ld	r24, Z
    235e:	91 81       	ldd	r25, Z+1	; 0x01
    2360:	41 e0       	ldi	r20, 0x01	; 1
    2362:	28 17       	cp	r18, r24
    2364:	39 07       	cpc	r19, r25
    2366:	08 f0       	brcs	.+2      	; 0x236a <_Z11__vector_14v+0x64>
    2368:	40 e0       	ldi	r20, 0x00	; 0
    236a:	44 23       	and	r20, r20
    236c:	a9 f0       	breq	.+42     	; 0x2398 <_Z11__vector_14v+0x92>
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	9a 81       	ldd	r25, Y+2	; 0x02
    2372:	88 0f       	add	r24, r24
    2374:	99 1f       	adc	r25, r25
    2376:	89 59       	subi	r24, 0x99	; 153
    2378:	9d 4f       	sbci	r25, 0xFD	; 253
    237a:	fc 01       	movw	r30, r24
    237c:	80 81       	ld	r24, Z
    237e:	91 81       	ldd	r25, Z+1	; 0x01
    2380:	9c 01       	movw	r18, r24
    2382:	2f 5f       	subi	r18, 0xFF	; 255
    2384:	3f 4f       	sbci	r19, 0xFF	; 255
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	9a 81       	ldd	r25, Y+2	; 0x02
    238a:	88 0f       	add	r24, r24
    238c:	99 1f       	adc	r25, r25
    238e:	89 59       	subi	r24, 0x99	; 153
    2390:	9d 4f       	sbci	r25, 0xFD	; 253
    2392:	fc 01       	movw	r30, r24
    2394:	31 83       	std	Z+1, r19	; 0x01
    2396:	20 83       	st	Z, r18
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	9a 81       	ldd	r25, Y+2	; 0x02
    239c:	01 96       	adiw	r24, 0x01	; 1
    239e:	9a 83       	std	Y+2, r25	; 0x02
    23a0:	89 83       	std	Y+1, r24	; 0x01
    23a2:	c5 cf       	rjmp	.-118    	; 0x232e <_Z11__vector_14v+0x28>
    23a4:	00 00       	nop
    23a6:	0f 90       	pop	r0
    23a8:	0f 90       	pop	r0
    23aa:	df 91       	pop	r29
    23ac:	cf 91       	pop	r28
    23ae:	ff 91       	pop	r31
    23b0:	ef 91       	pop	r30
    23b2:	9f 91       	pop	r25
    23b4:	8f 91       	pop	r24
    23b6:	4f 91       	pop	r20
    23b8:	3f 91       	pop	r19
    23ba:	2f 91       	pop	r18
    23bc:	0f 90       	pop	r0
    23be:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    23c2:	0f 90       	pop	r0
    23c4:	1f 90       	pop	r1
    23c6:	18 95       	reti

000023c8 <_Z8led_initv>:
    23c8:	cf 93       	push	r28
    23ca:	df 93       	push	r29
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	84 e2       	ldi	r24, 0x24	; 36
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	24 e2       	ldi	r18, 0x24	; 36
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	f9 01       	movw	r30, r18
    23da:	20 81       	ld	r18, Z
    23dc:	22 60       	ori	r18, 0x02	; 2
    23de:	fc 01       	movw	r30, r24
    23e0:	20 83       	st	Z, r18
    23e2:	85 e2       	ldi	r24, 0x25	; 37
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	25 e2       	ldi	r18, 0x25	; 37
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	f9 01       	movw	r30, r18
    23ec:	20 81       	ld	r18, Z
    23ee:	2d 7f       	andi	r18, 0xFD	; 253
    23f0:	fc 01       	movw	r30, r24
    23f2:	20 83       	st	Z, r18
    23f4:	00 00       	nop
    23f6:	df 91       	pop	r29
    23f8:	cf 91       	pop	r28
    23fa:	08 95       	ret

000023fc <_Z6led_onv>:
    23fc:	cf 93       	push	r28
    23fe:	df 93       	push	r29
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
    2404:	85 e2       	ldi	r24, 0x25	; 37
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	25 e2       	ldi	r18, 0x25	; 37
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	f9 01       	movw	r30, r18
    240e:	20 81       	ld	r18, Z
    2410:	22 60       	ori	r18, 0x02	; 2
    2412:	fc 01       	movw	r30, r24
    2414:	20 83       	st	Z, r18
    2416:	00 00       	nop
    2418:	df 91       	pop	r29
    241a:	cf 91       	pop	r28
    241c:	08 95       	ret

0000241e <_Z7led_offv>:
    241e:	cf 93       	push	r28
    2420:	df 93       	push	r29
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
    2426:	85 e2       	ldi	r24, 0x25	; 37
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	25 e2       	ldi	r18, 0x25	; 37
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	f9 01       	movw	r30, r18
    2430:	20 81       	ld	r18, Z
    2432:	2d 7f       	andi	r18, 0xFD	; 253
    2434:	fc 01       	movw	r30, r24
    2436:	20 83       	st	Z, r18
    2438:	00 00       	nop
    243a:	df 91       	pop	r29
    243c:	cf 91       	pop	r28
    243e:	08 95       	ret

00002440 <_Z9led_is_onv>:
    2440:	cf 93       	push	r28
    2442:	df 93       	push	r29
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    2448:	85 e2       	ldi	r24, 0x25	; 37
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	fc 01       	movw	r30, r24
    244e:	80 81       	ld	r24, Z
    2450:	88 2f       	mov	r24, r24
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	82 70       	andi	r24, 0x02	; 2
    2456:	99 27       	eor	r25, r25
    2458:	89 2b       	or	r24, r25
    245a:	19 f0       	breq	.+6      	; 0x2462 <_Z9led_is_onv+0x22>
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	02 c0       	rjmp	.+4      	; 0x2466 <_Z9led_is_onv+0x26>
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	df 91       	pop	r29
    2468:	cf 91       	pop	r28
    246a:	08 95       	ret

0000246c <_Z13led_set_blinkPc>:
    246c:	cf 93       	push	r28
    246e:	df 93       	push	r29
    2470:	00 d0       	rcall	.+0      	; 0x2472 <_Z13led_set_blinkPc+0x6>
    2472:	cd b7       	in	r28, 0x3d	; 61
    2474:	de b7       	in	r29, 0x3e	; 62
    2476:	9a 83       	std	Y+2, r25	; 0x02
    2478:	89 83       	std	Y+1, r24	; 0x01
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	9a 81       	ldd	r25, Y+2	; 0x02
    247e:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <Blink_msg+0x1>
    2482:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <Blink_msg>
    2486:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <Blink_pos+0x1>
    248a:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <Blink_pos>
    248e:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <blink_state+0x1>
    2492:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <blink_state>
    2496:	60 e0       	ldi	r22, 0x00	; 0
    2498:	70 e0       	ldi	r23, 0x00	; 0
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	0e 94 03 11 	call	0x2206	; 0x2206 <_Z9delay_setjj>
    24a2:	0e 94 0f 12 	call	0x241e	; 0x241e <_Z7led_offv>
    24a6:	00 00       	nop
    24a8:	0f 90       	pop	r0
    24aa:	0f 90       	pop	r0
    24ac:	df 91       	pop	r29
    24ae:	cf 91       	pop	r28
    24b0:	08 95       	ret

000024b2 <_Z10led_updatev>:
    24b2:	cf 93       	push	r28
    24b4:	df 93       	push	r29
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <blink_state>
    24be:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <blink_state+0x1>
    24c2:	00 97       	sbiw	r24, 0x00	; 0
    24c4:	21 f0       	breq	.+8      	; 0x24ce <_Z10led_updatev+0x1c>
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	09 f4       	brne	.+2      	; 0x24cc <_Z10led_updatev+0x1a>
    24ca:	55 c0       	rjmp	.+170    	; 0x2576 <_Z10led_updatev+0xc4>
    24cc:	89 c0       	rjmp	.+274    	; 0x25e0 <_Z10led_updatev+0x12e>
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	0e 94 53 11 	call	0x22a6	; 0x22a6 <_Z12delay_isdonej>
    24d6:	21 e0       	ldi	r18, 0x01	; 1
    24d8:	89 2b       	or	r24, r25
    24da:	09 f4       	brne	.+2      	; 0x24de <_Z10led_updatev+0x2c>
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	22 23       	and	r18, r18
    24e0:	09 f4       	brne	.+2      	; 0x24e4 <_Z10led_updatev+0x32>
    24e2:	7b c0       	rjmp	.+246    	; 0x25da <_Z10led_updatev+0x128>
    24e4:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <Blink_msg>
    24e8:	30 91 71 02 	lds	r19, 0x0271	; 0x800271 <Blink_msg+0x1>
    24ec:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <Blink_pos>
    24f0:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <Blink_pos+0x1>
    24f4:	82 0f       	add	r24, r18
    24f6:	93 1f       	adc	r25, r19
    24f8:	fc 01       	movw	r30, r24
    24fa:	80 81       	ld	r24, Z
    24fc:	08 2e       	mov	r0, r24
    24fe:	00 0c       	add	r0, r0
    2500:	99 0b       	sbc	r25, r25
    2502:	8d 32       	cpi	r24, 0x2D	; 45
    2504:	91 05       	cpc	r25, r1
    2506:	31 f0       	breq	.+12     	; 0x2514 <_Z10led_updatev+0x62>
    2508:	8e 32       	cpi	r24, 0x2E	; 46
    250a:	91 05       	cpc	r25, r1
    250c:	91 f0       	breq	.+36     	; 0x2532 <_Z10led_updatev+0x80>
    250e:	80 97       	sbiw	r24, 0x20	; 32
    2510:	f9 f0       	breq	.+62     	; 0x2550 <_Z10led_updatev+0x9e>
    2512:	27 c0       	rjmp	.+78     	; 0x2562 <_Z10led_updatev+0xb0>
    2514:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_Z6led_onv>
    2518:	6e ee       	ldi	r22, 0xEE	; 238
    251a:	72 e0       	ldi	r23, 0x02	; 2
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	0e 94 03 11 	call	0x2206	; 0x2206 <_Z9delay_setjj>
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <blink_state+0x1>
    252c:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <blink_state>
    2530:	21 c0       	rjmp	.+66     	; 0x2574 <_Z10led_updatev+0xc2>
    2532:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_Z6led_onv>
    2536:	6a ef       	ldi	r22, 0xFA	; 250
    2538:	70 e0       	ldi	r23, 0x00	; 0
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	0e 94 03 11 	call	0x2206	; 0x2206 <_Z9delay_setjj>
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <blink_state+0x1>
    254a:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <blink_state>
    254e:	12 c0       	rjmp	.+36     	; 0x2574 <_Z10led_updatev+0xc2>
    2550:	0e 94 0f 12 	call	0x241e	; 0x241e <_Z7led_offv>
    2554:	68 ee       	ldi	r22, 0xE8	; 232
    2556:	73 e0       	ldi	r23, 0x03	; 3
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	0e 94 03 11 	call	0x2206	; 0x2206 <_Z9delay_setjj>
    2560:	09 c0       	rjmp	.+18     	; 0x2574 <_Z10led_updatev+0xc2>
    2562:	0e 94 0f 12 	call	0x241e	; 0x241e <_Z7led_offv>
    2566:	60 e0       	ldi	r22, 0x00	; 0
    2568:	70 e0       	ldi	r23, 0x00	; 0
    256a:	80 e0       	ldi	r24, 0x00	; 0
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	0e 94 03 11 	call	0x2206	; 0x2206 <_Z9delay_setjj>
    2572:	00 00       	nop
    2574:	32 c0       	rjmp	.+100    	; 0x25da <_Z10led_updatev+0x128>
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	0e 94 53 11 	call	0x22a6	; 0x22a6 <_Z12delay_isdonej>
    257e:	21 e0       	ldi	r18, 0x01	; 1
    2580:	89 2b       	or	r24, r25
    2582:	09 f4       	brne	.+2      	; 0x2586 <_Z10led_updatev+0xd4>
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	22 23       	and	r18, r18
    2588:	51 f1       	breq	.+84     	; 0x25de <_Z10led_updatev+0x12c>
    258a:	0e 94 0f 12 	call	0x241e	; 0x241e <_Z7led_offv>
    258e:	64 e6       	ldi	r22, 0x64	; 100
    2590:	70 e0       	ldi	r23, 0x00	; 0
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	0e 94 03 11 	call	0x2206	; 0x2206 <_Z9delay_setjj>
    259a:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <Blink_pos>
    259e:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <Blink_pos+0x1>
    25a2:	01 96       	adiw	r24, 0x01	; 1
    25a4:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <Blink_pos+0x1>
    25a8:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <Blink_pos>
    25ac:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <Blink_msg>
    25b0:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <Blink_msg+0x1>
    25b4:	0e 94 66 14 	call	0x28cc	; 0x28cc <strlen>
    25b8:	9c 01       	movw	r18, r24
    25ba:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <Blink_pos>
    25be:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <Blink_pos+0x1>
    25c2:	82 17       	cp	r24, r18
    25c4:	93 07       	cpc	r25, r19
    25c6:	20 f0       	brcs	.+8      	; 0x25d0 <_Z10led_updatev+0x11e>
    25c8:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <Blink_pos+0x1>
    25cc:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <Blink_pos>
    25d0:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <blink_state+0x1>
    25d4:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <blink_state>
    25d8:	02 c0       	rjmp	.+4      	; 0x25de <_Z10led_updatev+0x12c>
    25da:	00 00       	nop
    25dc:	01 c0       	rjmp	.+2      	; 0x25e0 <_Z10led_updatev+0x12e>
    25de:	00 00       	nop
    25e0:	00 00       	nop
    25e2:	df 91       	pop	r29
    25e4:	cf 91       	pop	r28
    25e6:	08 95       	ret

000025e8 <_Z11timer1_initv>:
    25e8:	cf 93       	push	r28
    25ea:	df 93       	push	r29
    25ec:	00 d0       	rcall	.+0      	; 0x25ee <_Z11timer1_initv+0x6>
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
    25f2:	89 e0       	ldi	r24, 0x09	; 9
    25f4:	9d e3       	ldi	r25, 0x3D	; 61
    25f6:	9a 83       	std	Y+2, r25	; 0x02
    25f8:	89 83       	std	Y+1, r24	; 0x01
    25fa:	81 e8       	ldi	r24, 0x81	; 129
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	21 e8       	ldi	r18, 0x81	; 129
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	f9 01       	movw	r30, r18
    2604:	20 81       	ld	r18, Z
    2606:	28 60       	ori	r18, 0x08	; 8
    2608:	fc 01       	movw	r30, r24
    260a:	20 83       	st	Z, r18
    260c:	81 e8       	ldi	r24, 0x81	; 129
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	21 e8       	ldi	r18, 0x81	; 129
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	f9 01       	movw	r30, r18
    2616:	20 81       	ld	r18, Z
    2618:	25 60       	ori	r18, 0x05	; 5
    261a:	fc 01       	movw	r30, r24
    261c:	20 83       	st	Z, r18
    261e:	88 e8       	ldi	r24, 0x88	; 136
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	29 81       	ldd	r18, Y+1	; 0x01
    2624:	3a 81       	ldd	r19, Y+2	; 0x02
    2626:	21 50       	subi	r18, 0x01	; 1
    2628:	31 09       	sbc	r19, r1
    262a:	fc 01       	movw	r30, r24
    262c:	31 83       	std	Z+1, r19	; 0x01
    262e:	20 83       	st	Z, r18
    2630:	8f e6       	ldi	r24, 0x6F	; 111
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	2f e6       	ldi	r18, 0x6F	; 111
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	f9 01       	movw	r30, r18
    263a:	20 81       	ld	r18, Z
    263c:	22 60       	ori	r18, 0x02	; 2
    263e:	fc 01       	movw	r30, r24
    2640:	20 83       	st	Z, r18
    2642:	8f e5       	ldi	r24, 0x5F	; 95
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	2f e5       	ldi	r18, 0x5F	; 95
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	f9 01       	movw	r30, r18
    264c:	20 81       	ld	r18, Z
    264e:	20 68       	ori	r18, 0x80	; 128
    2650:	fc 01       	movw	r30, r24
    2652:	20 83       	st	Z, r18
    2654:	00 00       	nop
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	df 91       	pop	r29
    265c:	cf 91       	pop	r28
    265e:	08 95       	ret

00002660 <_Z10timer1_getv>:
    2660:	cf 93       	push	r28
    2662:	df 93       	push	r29
    2664:	00 d0       	rcall	.+0      	; 0x2666 <_Z10timer1_getv+0x6>
    2666:	00 d0       	rcall	.+0      	; 0x2668 <_Z10timer1_getv+0x8>
    2668:	00 d0       	rcall	.+0      	; 0x266a <_Z10timer1_getv+0xa>
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
    266e:	8f e5       	ldi	r24, 0x5F	; 95
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	fc 01       	movw	r30, r24
    2674:	80 81       	ld	r24, Z
    2676:	88 2f       	mov	r24, r24
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	80 78       	andi	r24, 0x80	; 128
    267c:	99 27       	eor	r25, r25
    267e:	9a 83       	std	Y+2, r25	; 0x02
    2680:	89 83       	std	Y+1, r24	; 0x01
    2682:	8f e5       	ldi	r24, 0x5F	; 95
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	2f e5       	ldi	r18, 0x5F	; 95
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	f9 01       	movw	r30, r18
    268c:	20 81       	ld	r18, Z
    268e:	2f 77       	andi	r18, 0x7F	; 127
    2690:	fc 01       	movw	r30, r24
    2692:	20 83       	st	Z, r18
    2694:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <_ZL5count>
    2698:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <_ZL5count+0x1>
    269c:	a0 91 78 02 	lds	r26, 0x0278	; 0x800278 <_ZL5count+0x2>
    26a0:	b0 91 79 02 	lds	r27, 0x0279	; 0x800279 <_ZL5count+0x3>
    26a4:	8b 83       	std	Y+3, r24	; 0x03
    26a6:	9c 83       	std	Y+4, r25	; 0x04
    26a8:	ad 83       	std	Y+5, r26	; 0x05
    26aa:	be 83       	std	Y+6, r27	; 0x06
    26ac:	89 81       	ldd	r24, Y+1	; 0x01
    26ae:	9a 81       	ldd	r25, Y+2	; 0x02
    26b0:	89 2b       	or	r24, r25
    26b2:	49 f0       	breq	.+18     	; 0x26c6 <_Z10timer1_getv+0x66>
    26b4:	8f e5       	ldi	r24, 0x5F	; 95
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	2f e5       	ldi	r18, 0x5F	; 95
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	f9 01       	movw	r30, r18
    26be:	20 81       	ld	r18, Z
    26c0:	20 68       	ori	r18, 0x80	; 128
    26c2:	fc 01       	movw	r30, r24
    26c4:	20 83       	st	Z, r18
    26c6:	8b 81       	ldd	r24, Y+3	; 0x03
    26c8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ca:	ad 81       	ldd	r26, Y+5	; 0x05
    26cc:	be 81       	ldd	r27, Y+6	; 0x06
    26ce:	bc 01       	movw	r22, r24
    26d0:	cd 01       	movw	r24, r26
    26d2:	26 96       	adiw	r28, 0x06	; 6
    26d4:	0f b6       	in	r0, 0x3f	; 63
    26d6:	f8 94       	cli
    26d8:	de bf       	out	0x3e, r29	; 62
    26da:	0f be       	out	0x3f, r0	; 63
    26dc:	cd bf       	out	0x3d, r28	; 61
    26de:	df 91       	pop	r29
    26e0:	cf 91       	pop	r28
    26e2:	08 95       	ret

000026e4 <_Z12timer1_clearv>:
    26e4:	cf 93       	push	r28
    26e6:	df 93       	push	r29
    26e8:	00 d0       	rcall	.+0      	; 0x26ea <_Z12timer1_clearv+0x6>
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
    26ee:	8f e5       	ldi	r24, 0x5F	; 95
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	fc 01       	movw	r30, r24
    26f4:	80 81       	ld	r24, Z
    26f6:	88 2f       	mov	r24, r24
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	80 78       	andi	r24, 0x80	; 128
    26fc:	99 27       	eor	r25, r25
    26fe:	9a 83       	std	Y+2, r25	; 0x02
    2700:	89 83       	std	Y+1, r24	; 0x01
    2702:	8f e5       	ldi	r24, 0x5F	; 95
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	2f e5       	ldi	r18, 0x5F	; 95
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	f9 01       	movw	r30, r18
    270c:	20 81       	ld	r18, Z
    270e:	2f 77       	andi	r18, 0x7F	; 127
    2710:	fc 01       	movw	r30, r24
    2712:	20 83       	st	Z, r18
    2714:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <_ZL5count>
    2718:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <_ZL5count+0x1>
    271c:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <_ZL5count+0x2>
    2720:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <_ZL5count+0x3>
    2724:	89 81       	ldd	r24, Y+1	; 0x01
    2726:	9a 81       	ldd	r25, Y+2	; 0x02
    2728:	89 2b       	or	r24, r25
    272a:	49 f0       	breq	.+18     	; 0x273e <_Z12timer1_clearv+0x5a>
    272c:	8f e5       	ldi	r24, 0x5F	; 95
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	2f e5       	ldi	r18, 0x5F	; 95
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	f9 01       	movw	r30, r18
    2736:	20 81       	ld	r18, Z
    2738:	20 68       	ori	r18, 0x80	; 128
    273a:	fc 01       	movw	r30, r24
    273c:	20 83       	st	Z, r18
    273e:	00 00       	nop
    2740:	0f 90       	pop	r0
    2742:	0f 90       	pop	r0
    2744:	df 91       	pop	r29
    2746:	cf 91       	pop	r28
    2748:	08 95       	ret

0000274a <_Z11__vector_11v>:
    274a:	1f 92       	push	r1
    274c:	0f 92       	push	r0
    274e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2752:	0f 92       	push	r0
    2754:	11 24       	eor	r1, r1
    2756:	8f 93       	push	r24
    2758:	9f 93       	push	r25
    275a:	af 93       	push	r26
    275c:	bf 93       	push	r27
    275e:	cf 93       	push	r28
    2760:	df 93       	push	r29
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
    2766:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <_ZL5count>
    276a:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <_ZL5count+0x1>
    276e:	a0 91 78 02 	lds	r26, 0x0278	; 0x800278 <_ZL5count+0x2>
    2772:	b0 91 79 02 	lds	r27, 0x0279	; 0x800279 <_ZL5count+0x3>
    2776:	01 96       	adiw	r24, 0x01	; 1
    2778:	a1 1d       	adc	r26, r1
    277a:	b1 1d       	adc	r27, r1
    277c:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <_ZL5count>
    2780:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <_ZL5count+0x1>
    2784:	a0 93 78 02 	sts	0x0278, r26	; 0x800278 <_ZL5count+0x2>
    2788:	b0 93 79 02 	sts	0x0279, r27	; 0x800279 <_ZL5count+0x3>
    278c:	00 00       	nop
    278e:	df 91       	pop	r29
    2790:	cf 91       	pop	r28
    2792:	bf 91       	pop	r27
    2794:	af 91       	pop	r26
    2796:	9f 91       	pop	r25
    2798:	8f 91       	pop	r24
    279a:	0f 90       	pop	r0
    279c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    27a0:	0f 90       	pop	r0
    27a2:	1f 90       	pop	r1
    27a4:	18 95       	reti

000027a6 <__mulsi3>:
    27a6:	db 01       	movw	r26, r22
    27a8:	8f 93       	push	r24
    27aa:	9f 93       	push	r25
    27ac:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__muluhisi3>
    27b0:	bf 91       	pop	r27
    27b2:	af 91       	pop	r26
    27b4:	a2 9f       	mul	r26, r18
    27b6:	80 0d       	add	r24, r0
    27b8:	91 1d       	adc	r25, r1
    27ba:	a3 9f       	mul	r26, r19
    27bc:	90 0d       	add	r25, r0
    27be:	b2 9f       	mul	r27, r18
    27c0:	90 0d       	add	r25, r0
    27c2:	11 24       	eor	r1, r1
    27c4:	08 95       	ret

000027c6 <__udivmodhi4>:
    27c6:	aa 1b       	sub	r26, r26
    27c8:	bb 1b       	sub	r27, r27
    27ca:	51 e1       	ldi	r21, 0x11	; 17
    27cc:	07 c0       	rjmp	.+14     	; 0x27dc <__udivmodhi4_ep>

000027ce <__udivmodhi4_loop>:
    27ce:	aa 1f       	adc	r26, r26
    27d0:	bb 1f       	adc	r27, r27
    27d2:	a6 17       	cp	r26, r22
    27d4:	b7 07       	cpc	r27, r23
    27d6:	10 f0       	brcs	.+4      	; 0x27dc <__udivmodhi4_ep>
    27d8:	a6 1b       	sub	r26, r22
    27da:	b7 0b       	sbc	r27, r23

000027dc <__udivmodhi4_ep>:
    27dc:	88 1f       	adc	r24, r24
    27de:	99 1f       	adc	r25, r25
    27e0:	5a 95       	dec	r21
    27e2:	a9 f7       	brne	.-22     	; 0x27ce <__udivmodhi4_loop>
    27e4:	80 95       	com	r24
    27e6:	90 95       	com	r25
    27e8:	bc 01       	movw	r22, r24
    27ea:	cd 01       	movw	r24, r26
    27ec:	08 95       	ret

000027ee <__divmodhi4>:
    27ee:	97 fb       	bst	r25, 7
    27f0:	07 2e       	mov	r0, r23
    27f2:	16 f4       	brtc	.+4      	; 0x27f8 <__divmodhi4+0xa>
    27f4:	00 94       	com	r0
    27f6:	07 d0       	rcall	.+14     	; 0x2806 <__divmodhi4_neg1>
    27f8:	77 fd       	sbrc	r23, 7
    27fa:	09 d0       	rcall	.+18     	; 0x280e <__divmodhi4_neg2>
    27fc:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__udivmodhi4>
    2800:	07 fc       	sbrc	r0, 7
    2802:	05 d0       	rcall	.+10     	; 0x280e <__divmodhi4_neg2>
    2804:	3e f4       	brtc	.+14     	; 0x2814 <__divmodhi4_exit>

00002806 <__divmodhi4_neg1>:
    2806:	90 95       	com	r25
    2808:	81 95       	neg	r24
    280a:	9f 4f       	sbci	r25, 0xFF	; 255
    280c:	08 95       	ret

0000280e <__divmodhi4_neg2>:
    280e:	70 95       	com	r23
    2810:	61 95       	neg	r22
    2812:	7f 4f       	sbci	r23, 0xFF	; 255

00002814 <__divmodhi4_exit>:
    2814:	08 95       	ret

00002816 <__udivmodsi4>:
    2816:	a1 e2       	ldi	r26, 0x21	; 33
    2818:	1a 2e       	mov	r1, r26
    281a:	aa 1b       	sub	r26, r26
    281c:	bb 1b       	sub	r27, r27
    281e:	fd 01       	movw	r30, r26
    2820:	0d c0       	rjmp	.+26     	; 0x283c <__udivmodsi4_ep>

00002822 <__udivmodsi4_loop>:
    2822:	aa 1f       	adc	r26, r26
    2824:	bb 1f       	adc	r27, r27
    2826:	ee 1f       	adc	r30, r30
    2828:	ff 1f       	adc	r31, r31
    282a:	a2 17       	cp	r26, r18
    282c:	b3 07       	cpc	r27, r19
    282e:	e4 07       	cpc	r30, r20
    2830:	f5 07       	cpc	r31, r21
    2832:	20 f0       	brcs	.+8      	; 0x283c <__udivmodsi4_ep>
    2834:	a2 1b       	sub	r26, r18
    2836:	b3 0b       	sbc	r27, r19
    2838:	e4 0b       	sbc	r30, r20
    283a:	f5 0b       	sbc	r31, r21

0000283c <__udivmodsi4_ep>:
    283c:	66 1f       	adc	r22, r22
    283e:	77 1f       	adc	r23, r23
    2840:	88 1f       	adc	r24, r24
    2842:	99 1f       	adc	r25, r25
    2844:	1a 94       	dec	r1
    2846:	69 f7       	brne	.-38     	; 0x2822 <__udivmodsi4_loop>
    2848:	60 95       	com	r22
    284a:	70 95       	com	r23
    284c:	80 95       	com	r24
    284e:	90 95       	com	r25
    2850:	9b 01       	movw	r18, r22
    2852:	ac 01       	movw	r20, r24
    2854:	bd 01       	movw	r22, r26
    2856:	cf 01       	movw	r24, r30
    2858:	08 95       	ret

0000285a <__divmodsi4>:
    285a:	05 2e       	mov	r0, r21
    285c:	97 fb       	bst	r25, 7
    285e:	1e f4       	brtc	.+6      	; 0x2866 <__divmodsi4+0xc>
    2860:	00 94       	com	r0
    2862:	0e 94 44 14 	call	0x2888	; 0x2888 <__negsi2>
    2866:	57 fd       	sbrc	r21, 7
    2868:	07 d0       	rcall	.+14     	; 0x2878 <__divmodsi4_neg2>
    286a:	0e 94 0b 14 	call	0x2816	; 0x2816 <__udivmodsi4>
    286e:	07 fc       	sbrc	r0, 7
    2870:	03 d0       	rcall	.+6      	; 0x2878 <__divmodsi4_neg2>
    2872:	4e f4       	brtc	.+18     	; 0x2886 <__divmodsi4_exit>
    2874:	0c 94 44 14 	jmp	0x2888	; 0x2888 <__negsi2>

00002878 <__divmodsi4_neg2>:
    2878:	50 95       	com	r21
    287a:	40 95       	com	r20
    287c:	30 95       	com	r19
    287e:	21 95       	neg	r18
    2880:	3f 4f       	sbci	r19, 0xFF	; 255
    2882:	4f 4f       	sbci	r20, 0xFF	; 255
    2884:	5f 4f       	sbci	r21, 0xFF	; 255

00002886 <__divmodsi4_exit>:
    2886:	08 95       	ret

00002888 <__negsi2>:
    2888:	90 95       	com	r25
    288a:	80 95       	com	r24
    288c:	70 95       	com	r23
    288e:	61 95       	neg	r22
    2890:	7f 4f       	sbci	r23, 0xFF	; 255
    2892:	8f 4f       	sbci	r24, 0xFF	; 255
    2894:	9f 4f       	sbci	r25, 0xFF	; 255
    2896:	08 95       	ret

00002898 <__umulhisi3>:
    2898:	a2 9f       	mul	r26, r18
    289a:	b0 01       	movw	r22, r0
    289c:	b3 9f       	mul	r27, r19
    289e:	c0 01       	movw	r24, r0
    28a0:	a3 9f       	mul	r26, r19
    28a2:	70 0d       	add	r23, r0
    28a4:	81 1d       	adc	r24, r1
    28a6:	11 24       	eor	r1, r1
    28a8:	91 1d       	adc	r25, r1
    28aa:	b2 9f       	mul	r27, r18
    28ac:	70 0d       	add	r23, r0
    28ae:	81 1d       	adc	r24, r1
    28b0:	11 24       	eor	r1, r1
    28b2:	91 1d       	adc	r25, r1
    28b4:	08 95       	ret

000028b6 <__muluhisi3>:
    28b6:	0e 94 4c 14 	call	0x2898	; 0x2898 <__umulhisi3>
    28ba:	a5 9f       	mul	r26, r21
    28bc:	90 0d       	add	r25, r0
    28be:	b4 9f       	mul	r27, r20
    28c0:	90 0d       	add	r25, r0
    28c2:	a4 9f       	mul	r26, r20
    28c4:	80 0d       	add	r24, r0
    28c6:	91 1d       	adc	r25, r1
    28c8:	11 24       	eor	r1, r1
    28ca:	08 95       	ret

000028cc <strlen>:
    28cc:	fc 01       	movw	r30, r24
    28ce:	01 90       	ld	r0, Z+
    28d0:	00 20       	and	r0, r0
    28d2:	e9 f7       	brne	.-6      	; 0x28ce <strlen+0x2>
    28d4:	80 95       	com	r24
    28d6:	90 95       	com	r25
    28d8:	8e 0f       	add	r24, r30
    28da:	9f 1f       	adc	r25, r31
    28dc:	08 95       	ret

000028de <_exit>:
    28de:	f8 94       	cli

000028e0 <__stop_program>:
    28e0:	ff cf       	rjmp	.-2      	; 0x28e0 <__stop_program>
