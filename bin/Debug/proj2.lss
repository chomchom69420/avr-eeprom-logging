
bin/Debug/proj2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d2  00800100  00002946  000029da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000291e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .siminfo      00000028  0000291e  0000291e  000029b2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000001ba  008001d2  008001d2  00002aac  2**0
                  ALLOC
  4 .stab         00003684  00000000  00000000  00002aac  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00001d50  00000000  00000000  00006130  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00007e80  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007e94  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  00007ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  000084c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  00008a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  00008a84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 d6 06 	jmp	0xdac	; 0xdac <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 c2 0f 	jmp	0x1f84	; 0x1f84 <__vector_18>
      4c:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__vector_22>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e4       	ldi	r30, 0x46	; 70
      7c:	f9 e2       	ldi	r31, 0x29	; 41
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 3d       	cpi	r26, 0xD2	; 210
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a2 ed       	ldi	r26, 0xD2	; 210
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 38       	cpi	r26, 0x8C	; 140
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 c3 05 	call	0xb86	; 0xb86 <main>
      9e:	0c 94 8d 14 	jmp	0x291a	; 0x291a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <str_compare>:
    .use_static_ip=0,
    .static_ip={192, 168, 1, 100},
    .checksum=0};

int str_compare(char a[],char b[])
{
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
      ae:	28 97       	sbiw	r28, 0x08	; 8
      b0:	0f b6       	in	r0, 0x3f	; 63
      b2:	f8 94       	cli
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	0f be       	out	0x3f, r0	; 63
      b8:	cd bf       	out	0x3d, r28	; 61
      ba:	9e 83       	std	Y+6, r25	; 0x06
      bc:	8d 83       	std	Y+5, r24	; 0x05
      be:	78 87       	std	Y+8, r23	; 0x08
      c0:	6f 83       	std	Y+7, r22	; 0x07
    int flag=0,i=0;  // integer variables declaration
      c2:	1a 82       	std	Y+2, r1	; 0x02
      c4:	19 82       	std	Y+1, r1	; 0x01
      c6:	1c 82       	std	Y+4, r1	; 0x04
      c8:	1b 82       	std	Y+3, r1	; 0x03
    while(a[i]!='\0' &&b[i]!='\0')  // while loop
      ca:	1c c0       	rjmp	.+56     	; 0x104 <str_compare+0x5e>
    {
       if(a[i]!=b[i])
      cc:	8b 81       	ldd	r24, Y+3	; 0x03
      ce:	9c 81       	ldd	r25, Y+4	; 0x04
      d0:	2d 81       	ldd	r18, Y+5	; 0x05
      d2:	3e 81       	ldd	r19, Y+6	; 0x06
      d4:	82 0f       	add	r24, r18
      d6:	93 1f       	adc	r25, r19
      d8:	fc 01       	movw	r30, r24
      da:	40 81       	ld	r20, Z
      dc:	8b 81       	ldd	r24, Y+3	; 0x03
      de:	9c 81       	ldd	r25, Y+4	; 0x04
      e0:	2f 81       	ldd	r18, Y+7	; 0x07
      e2:	38 85       	ldd	r19, Y+8	; 0x08
      e4:	82 0f       	add	r24, r18
      e6:	93 1f       	adc	r25, r19
      e8:	fc 01       	movw	r30, r24
      ea:	80 81       	ld	r24, Z
      ec:	48 17       	cp	r20, r24
      ee:	29 f0       	breq	.+10     	; 0xfa <str_compare+0x54>
       {
           flag=1;
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	9a 83       	std	Y+2, r25	; 0x02
      f6:	89 83       	std	Y+1, r24	; 0x01
           break;
      f8:	19 c0       	rjmp	.+50     	; 0x12c <str_compare+0x86>
       }
       i++;
      fa:	8b 81       	ldd	r24, Y+3	; 0x03
      fc:	9c 81       	ldd	r25, Y+4	; 0x04
      fe:	01 96       	adiw	r24, 0x01	; 1
     100:	9c 83       	std	Y+4, r25	; 0x04
     102:	8b 83       	std	Y+3, r24	; 0x03
    .checksum=0};

int str_compare(char a[],char b[])
{
    int flag=0,i=0;  // integer variables declaration
    while(a[i]!='\0' &&b[i]!='\0')  // while loop
     104:	8b 81       	ldd	r24, Y+3	; 0x03
     106:	9c 81       	ldd	r25, Y+4	; 0x04
     108:	2d 81       	ldd	r18, Y+5	; 0x05
     10a:	3e 81       	ldd	r19, Y+6	; 0x06
     10c:	82 0f       	add	r24, r18
     10e:	93 1f       	adc	r25, r19
     110:	fc 01       	movw	r30, r24
     112:	80 81       	ld	r24, Z
     114:	88 23       	and	r24, r24
     116:	51 f0       	breq	.+20     	; 0x12c <str_compare+0x86>
     118:	8b 81       	ldd	r24, Y+3	; 0x03
     11a:	9c 81       	ldd	r25, Y+4	; 0x04
     11c:	2f 81       	ldd	r18, Y+7	; 0x07
     11e:	38 85       	ldd	r19, Y+8	; 0x08
     120:	82 0f       	add	r24, r18
     122:	93 1f       	adc	r25, r19
     124:	fc 01       	movw	r30, r24
     126:	80 81       	ld	r24, Z
     128:	88 23       	and	r24, r24
     12a:	81 f6       	brne	.-96     	; 0xcc <str_compare+0x26>
           flag=1;
           break;
       }
       i++;
    }
    if(flag==0)
     12c:	89 81       	ldd	r24, Y+1	; 0x01
     12e:	9a 81       	ldd	r25, Y+2	; 0x02
     130:	89 2b       	or	r24, r25
     132:	19 f4       	brne	.+6      	; 0x13a <str_compare+0x94>
    return 0;
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	02 c0       	rjmp	.+4      	; 0x13e <str_compare+0x98>
    else
    return 1;
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	90 e0       	ldi	r25, 0x00	; 0
}
     13e:	28 96       	adiw	r28, 0x08	; 8
     140:	0f b6       	in	r0, 0x3f	; 63
     142:	f8 94       	cli
     144:	de bf       	out	0x3e, r29	; 62
     146:	0f be       	out	0x3f, r0	; 63
     148:	cd bf       	out	0x3d, r28	; 61
     14a:	df 91       	pop	r29
     14c:	cf 91       	pop	r28
     14e:	08 95       	ret

00000150 <config_init>:

void config_init()
{
     150:	ef 92       	push	r14
     152:	ff 92       	push	r15
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	2e 97       	sbiw	r28, 0x0e	; 14
     162:	0f b6       	in	r0, 0x3f	; 63
     164:	f8 94       	cli
     166:	de bf       	out	0x3e, r29	; 62
     168:	0f be       	out	0x3f, r0	; 63
     16a:	cd bf       	out	0x3d, r28	; 61

    }

    //uart_writedec32(write_busy);
    //get_writebusy();
}
     16c:	0d b7       	in	r16, 0x3d	; 61
     16e:	1e b7       	in	r17, 0x3e	; 62
    return 1;
}

void config_init()
{
    while(eeprom_isbusy());  //waits for EEPROM to get out of busy state
     170:	00 00       	nop
     172:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <eeprom_isbusy>
     176:	89 2b       	or	r24, r25
     178:	e1 f7       	brne	.-8      	; 0x172 <config_init+0x22>

    //initialize config
    unsigned int base_addr=0x040;
     17a:	80 e4       	ldi	r24, 0x40	; 64
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	9e 83       	std	Y+6, r25	; 0x06
     180:	8d 83       	std	Y+5, r24	; 0x05
    int size = sizeof(config_struct)+1;
     182:	83 e1       	ldi	r24, 0x13	; 19
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	98 87       	std	Y+8, r25	; 0x08
     188:	8f 83       	std	Y+7, r24	; 0x07
    unsigned char buf[size+10];
     18a:	8f 81       	ldd	r24, Y+7	; 0x07
     18c:	98 85       	ldd	r25, Y+8	; 0x08
     18e:	0a 96       	adiw	r24, 0x0a	; 10
     190:	2d b7       	in	r18, 0x3d	; 61
     192:	3e b7       	in	r19, 0x3e	; 62
     194:	79 01       	movw	r14, r18
     196:	9c 01       	movw	r18, r24
     198:	21 50       	subi	r18, 0x01	; 1
     19a:	31 09       	sbc	r19, r1
     19c:	3a 87       	std	Y+10, r19	; 0x0a
     19e:	29 87       	std	Y+9, r18	; 0x09
     1a0:	2d b7       	in	r18, 0x3d	; 61
     1a2:	3e b7       	in	r19, 0x3e	; 62
     1a4:	28 1b       	sub	r18, r24
     1a6:	39 0b       	sbc	r19, r25
     1a8:	0f b6       	in	r0, 0x3f	; 63
     1aa:	f8 94       	cli
     1ac:	3e bf       	out	0x3e, r19	; 62
     1ae:	0f be       	out	0x3f, r0	; 63
     1b0:	2d bf       	out	0x3d, r18	; 61
     1b2:	8d b7       	in	r24, 0x3d	; 61
     1b4:	9e b7       	in	r25, 0x3e	; 62
     1b6:	01 96       	adiw	r24, 0x01	; 1
     1b8:	9c 87       	std	Y+12, r25	; 0x0c
     1ba:	8b 87       	std	Y+11, r24	; 0x0b
    unsigned char* p = (unsigned char*)&config;
     1bc:	8b e7       	ldi	r24, 0x7B	; 123
     1be:	92 e0       	ldi	r25, 0x02	; 2
     1c0:	9e 87       	std	Y+14, r25	; 0x0e
     1c2:	8d 87       	std	Y+13, r24	; 0x0d

    eeprom_readbuf(base_addr, buf, size);
     1c4:	4f 81       	ldd	r20, Y+7	; 0x07
     1c6:	2b 85       	ldd	r18, Y+11	; 0x0b
     1c8:	3c 85       	ldd	r19, Y+12	; 0x0c
     1ca:	8d 81       	ldd	r24, Y+5	; 0x05
     1cc:	9e 81       	ldd	r25, Y+6	; 0x06
     1ce:	b9 01       	movw	r22, r18
     1d0:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <eeprom_readbuf>

    //memcpy((unsigned char*)&config, (unsigned char*)buf, size);

    for(int i=0;i<size;i++)
     1d4:	1a 82       	std	Y+2, r1	; 0x02
     1d6:	19 82       	std	Y+1, r1	; 0x01
     1d8:	15 c0       	rjmp	.+42     	; 0x204 <config_init+0xb4>
    {
        p[i]=buf[i];
     1da:	89 81       	ldd	r24, Y+1	; 0x01
     1dc:	9a 81       	ldd	r25, Y+2	; 0x02
     1de:	2d 85       	ldd	r18, Y+13	; 0x0d
     1e0:	3e 85       	ldd	r19, Y+14	; 0x0e
     1e2:	82 0f       	add	r24, r18
     1e4:	93 1f       	adc	r25, r19
     1e6:	4b 85       	ldd	r20, Y+11	; 0x0b
     1e8:	5c 85       	ldd	r21, Y+12	; 0x0c
     1ea:	29 81       	ldd	r18, Y+1	; 0x01
     1ec:	3a 81       	ldd	r19, Y+2	; 0x02
     1ee:	24 0f       	add	r18, r20
     1f0:	35 1f       	adc	r19, r21
     1f2:	f9 01       	movw	r30, r18
     1f4:	20 81       	ld	r18, Z
     1f6:	fc 01       	movw	r30, r24
     1f8:	20 83       	st	Z, r18

    eeprom_readbuf(base_addr, buf, size);

    //memcpy((unsigned char*)&config, (unsigned char*)buf, size);

    for(int i=0;i<size;i++)
     1fa:	89 81       	ldd	r24, Y+1	; 0x01
     1fc:	9a 81       	ldd	r25, Y+2	; 0x02
     1fe:	01 96       	adiw	r24, 0x01	; 1
     200:	9a 83       	std	Y+2, r25	; 0x02
     202:	89 83       	std	Y+1, r24	; 0x01
     204:	29 81       	ldd	r18, Y+1	; 0x01
     206:	3a 81       	ldd	r19, Y+2	; 0x02
     208:	8f 81       	ldd	r24, Y+7	; 0x07
     20a:	98 85       	ldd	r25, Y+8	; 0x08
     20c:	28 17       	cp	r18, r24
     20e:	39 07       	cpc	r19, r25
     210:	24 f3       	brlt	.-56     	; 0x1da <config_init+0x8a>
    {
        p[i]=buf[i];
    }

    if(!config_is_data_valid())
     212:	0e 94 50 01 	call	0x2a0	; 0x2a0 <config_is_data_valid>
     216:	89 2b       	or	r24, r25
     218:	59 f5       	brne	.+86     	; 0x270 <config_init+0x120>
    {

        //Write default values to EEPROM location 0x040
        config_write_defaults();
     21a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <config_write_defaults>

        //Initialize config by reading location 0x040
        eeprom_readbuf(base_addr, (unsigned char*)buf, size);
     21e:	4f 81       	ldd	r20, Y+7	; 0x07
     220:	2b 85       	ldd	r18, Y+11	; 0x0b
     222:	3c 85       	ldd	r19, Y+12	; 0x0c
     224:	8d 81       	ldd	r24, Y+5	; 0x05
     226:	9e 81       	ldd	r25, Y+6	; 0x06
     228:	b9 01       	movw	r22, r18
     22a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <eeprom_readbuf>
        //memcpy((unsigned char*)&config, (unsigned char*)buf, size);

        for(int i=0;i<size;i++)
     22e:	1c 82       	std	Y+4, r1	; 0x04
     230:	1b 82       	std	Y+3, r1	; 0x03
     232:	15 c0       	rjmp	.+42     	; 0x25e <config_init+0x10e>
        {
            p[i]=buf[i];
     234:	8b 81       	ldd	r24, Y+3	; 0x03
     236:	9c 81       	ldd	r25, Y+4	; 0x04
     238:	2d 85       	ldd	r18, Y+13	; 0x0d
     23a:	3e 85       	ldd	r19, Y+14	; 0x0e
     23c:	82 0f       	add	r24, r18
     23e:	93 1f       	adc	r25, r19
     240:	4b 85       	ldd	r20, Y+11	; 0x0b
     242:	5c 85       	ldd	r21, Y+12	; 0x0c
     244:	2b 81       	ldd	r18, Y+3	; 0x03
     246:	3c 81       	ldd	r19, Y+4	; 0x04
     248:	24 0f       	add	r18, r20
     24a:	35 1f       	adc	r19, r21
     24c:	f9 01       	movw	r30, r18
     24e:	20 81       	ld	r18, Z
     250:	fc 01       	movw	r30, r24
     252:	20 83       	st	Z, r18

        //Initialize config by reading location 0x040
        eeprom_readbuf(base_addr, (unsigned char*)buf, size);
        //memcpy((unsigned char*)&config, (unsigned char*)buf, size);

        for(int i=0;i<size;i++)
     254:	8b 81       	ldd	r24, Y+3	; 0x03
     256:	9c 81       	ldd	r25, Y+4	; 0x04
     258:	01 96       	adiw	r24, 0x01	; 1
     25a:	9c 83       	std	Y+4, r25	; 0x04
     25c:	8b 83       	std	Y+3, r24	; 0x03
     25e:	2b 81       	ldd	r18, Y+3	; 0x03
     260:	3c 81       	ldd	r19, Y+4	; 0x04
     262:	8f 81       	ldd	r24, Y+7	; 0x07
     264:	98 85       	ldd	r25, Y+8	; 0x08
     266:	28 17       	cp	r18, r24
     268:	39 07       	cpc	r19, r25
     26a:	24 f3       	brlt	.-56     	; 0x234 <config_init+0xe4>
        {
            p[i]=buf[i];
        }

        //Clearing modified flag
        modified=0;
     26c:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <modified>
     270:	0f b6       	in	r0, 0x3f	; 63
     272:	f8 94       	cli
     274:	fe be       	out	0x3e, r15	; 62
     276:	0f be       	out	0x3f, r0	; 63
     278:	ed be       	out	0x3d, r14	; 61

    }

    //uart_writedec32(write_busy);
    //get_writebusy();
}
     27a:	00 00       	nop
     27c:	0f b6       	in	r0, 0x3f	; 63
     27e:	f8 94       	cli
     280:	1e bf       	out	0x3e, r17	; 62
     282:	0f be       	out	0x3f, r0	; 63
     284:	0d bf       	out	0x3d, r16	; 61
     286:	2e 96       	adiw	r28, 0x0e	; 14
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	f8 94       	cli
     28c:	de bf       	out	0x3e, r29	; 62
     28e:	0f be       	out	0x3f, r0	; 63
     290:	cd bf       	out	0x3d, r28	; 61
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	1f 91       	pop	r17
     298:	0f 91       	pop	r16
     29a:	ff 90       	pop	r15
     29c:	ef 90       	pop	r14
     29e:	08 95       	ret

000002a0 <config_is_data_valid>:

int config_is_data_valid()
{
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	cd b7       	in	r28, 0x3d	; 61
     2a6:	de b7       	in	r29, 0x3e	; 62
    return str_compare(config.token, config_defaults.token) && is_checksum_valid((unsigned char*)&config, sizeof(config_struct));
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	71 e0       	ldi	r23, 0x01	; 1
     2ac:	8b e7       	ldi	r24, 0x7B	; 123
     2ae:	92 e0       	ldi	r25, 0x02	; 2
     2b0:	0e 94 53 00 	call	0xa6	; 0xa6 <str_compare>
     2b4:	89 2b       	or	r24, r25
     2b6:	59 f0       	breq	.+22     	; 0x2ce <config_is_data_valid+0x2e>
     2b8:	62 e1       	ldi	r22, 0x12	; 18
     2ba:	70 e0       	ldi	r23, 0x00	; 0
     2bc:	8b e7       	ldi	r24, 0x7B	; 123
     2be:	92 e0       	ldi	r25, 0x02	; 2
     2c0:	0e 94 6f 07 	call	0xede	; 0xede <is_checksum_valid>
     2c4:	89 2b       	or	r24, r25
     2c6:	19 f0       	breq	.+6      	; 0x2ce <config_is_data_valid+0x2e>
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <config_is_data_valid+0x32>
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	90 e0       	ldi	r25, 0x00	; 0
}
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	08 95       	ret

000002d8 <config_set_modified>:

void config_set_modified()
{
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	cd b7       	in	r28, 0x3d	; 61
     2de:	de b7       	in	r29, 0x3e	; 62
    modified=1;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <modified>
}
     2e6:	00 00       	nop
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	08 95       	ret

000002ee <config_update>:

void config_update()
{
     2ee:	ef 92       	push	r14
     2f0:	ff 92       	push	r15
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
     2fe:	28 97       	sbiw	r28, 0x08	; 8
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	f8 94       	cli
     304:	de bf       	out	0x3e, r29	; 62
     306:	0f be       	out	0x3f, r0	; 63
     308:	cd bf       	out	0x3d, r28	; 61
        //Clearing modified flag
        modified=0;

    }

}
     30a:	0d b7       	in	r16, 0x3d	; 61
     30c:	1e b7       	in	r17, 0x3e	; 62
    modified=1;
}

void config_update()
{
    if(!eeprom_isbusy() && modified)
     30e:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <eeprom_isbusy>
     312:	89 2b       	or	r24, r25
     314:	d1 f5       	brne	.+116    	; 0x38a <config_update+0x9c>
     316:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <modified>
     31a:	88 23       	and	r24, r24
     31c:	b1 f1       	breq	.+108    	; 0x38a <config_update+0x9c>
    {
     31e:	8d b7       	in	r24, 0x3d	; 61
     320:	9e b7       	in	r25, 0x3e	; 62
     322:	7c 01       	movw	r14, r24
        //Update the checksum
        update_checksum((unsigned char*)&config, sizeof(config));
     324:	62 e1       	ldi	r22, 0x12	; 18
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	8b e7       	ldi	r24, 0x7B	; 123
     32a:	92 e0       	ldi	r25, 0x02	; 2
     32c:	0e 94 45 07 	call	0xe8a	; 0xe8a <update_checksum>

        //Write config to eeprom
        unsigned int base_addr = 0x040;
     330:	80 e4       	ldi	r24, 0x40	; 64
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	9a 83       	std	Y+2, r25	; 0x02
     336:	89 83       	std	Y+1, r24	; 0x01
        int size = sizeof(config_struct)+1;
     338:	83 e1       	ldi	r24, 0x13	; 19
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	9c 83       	std	Y+4, r25	; 0x04
     33e:	8b 83       	std	Y+3, r24	; 0x03
        unsigned char buf[size+10];
     340:	8b 81       	ldd	r24, Y+3	; 0x03
     342:	9c 81       	ldd	r25, Y+4	; 0x04
     344:	0a 96       	adiw	r24, 0x0a	; 10
     346:	9c 01       	movw	r18, r24
     348:	21 50       	subi	r18, 0x01	; 1
     34a:	31 09       	sbc	r19, r1
     34c:	3e 83       	std	Y+6, r19	; 0x06
     34e:	2d 83       	std	Y+5, r18	; 0x05
     350:	2d b7       	in	r18, 0x3d	; 61
     352:	3e b7       	in	r19, 0x3e	; 62
     354:	28 1b       	sub	r18, r24
     356:	39 0b       	sbc	r19, r25
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	3e bf       	out	0x3e, r19	; 62
     35e:	0f be       	out	0x3f, r0	; 63
     360:	2d bf       	out	0x3d, r18	; 61
     362:	8d b7       	in	r24, 0x3d	; 61
     364:	9e b7       	in	r25, 0x3e	; 62
     366:	01 96       	adiw	r24, 0x01	; 1
     368:	98 87       	std	Y+8, r25	; 0x08
     36a:	8f 83       	std	Y+7, r24	; 0x07
        eeprom_writebuf(base_addr, (unsigned char*)buf, size);
     36c:	4b 81       	ldd	r20, Y+3	; 0x03
     36e:	2f 81       	ldd	r18, Y+7	; 0x07
     370:	38 85       	ldd	r19, Y+8	; 0x08
     372:	89 81       	ldd	r24, Y+1	; 0x01
     374:	9a 81       	ldd	r25, Y+2	; 0x02
     376:	b9 01       	movw	r22, r18
     378:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <eeprom_writebuf>

        //Clearing modified flag
        modified=0;
     37c:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <modified>
     380:	0f b6       	in	r0, 0x3f	; 63
     382:	f8 94       	cli
     384:	fe be       	out	0x3e, r15	; 62
     386:	0f be       	out	0x3f, r0	; 63
     388:	ed be       	out	0x3d, r14	; 61

    }

}
     38a:	00 00       	nop
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	f8 94       	cli
     390:	1e bf       	out	0x3e, r17	; 62
     392:	0f be       	out	0x3f, r0	; 63
     394:	0d bf       	out	0x3d, r16	; 61
     396:	28 96       	adiw	r28, 0x08	; 8
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	f8 94       	cli
     39c:	de bf       	out	0x3e, r29	; 62
     39e:	0f be       	out	0x3f, r0	; 63
     3a0:	cd bf       	out	0x3d, r28	; 61
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	1f 91       	pop	r17
     3a8:	0f 91       	pop	r16
     3aa:	ff 90       	pop	r15
     3ac:	ef 90       	pop	r14
     3ae:	08 95       	ret

000003b0 <config_write_defaults>:

void config_write_defaults()
{
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	00 d0       	rcall	.+0      	; 0x3b6 <config_write_defaults+0x6>
     3b6:	00 d0       	rcall	.+0      	; 0x3b8 <config_write_defaults+0x8>
     3b8:	00 d0       	rcall	.+0      	; 0x3ba <config_write_defaults+0xa>
     3ba:	cd b7       	in	r28, 0x3d	; 61
     3bc:	de b7       	in	r29, 0x3e	; 62
    update_checksum((unsigned char*)&config, sizeof(config));
     3be:	62 e1       	ldi	r22, 0x12	; 18
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	8b e7       	ldi	r24, 0x7B	; 123
     3c4:	92 e0       	ldi	r25, 0x02	; 2
     3c6:	0e 94 45 07 	call	0xe8a	; 0xe8a <update_checksum>

    //Writing defaults to eeprom
    unsigned int base_addr = 0x040;
     3ca:	80 e4       	ldi	r24, 0x40	; 64
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	9a 83       	std	Y+2, r25	; 0x02
     3d0:	89 83       	std	Y+1, r24	; 0x01
    int size = sizeof(config_struct);
     3d2:	82 e1       	ldi	r24, 0x12	; 18
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	9c 83       	std	Y+4, r25	; 0x04
     3d8:	8b 83       	std	Y+3, r24	; 0x03
    //unsigned char buf[size];
    unsigned char* p = (unsigned char*)&config_defaults;
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	91 e0       	ldi	r25, 0x01	; 1
     3de:	9e 83       	std	Y+6, r25	; 0x06
     3e0:	8d 83       	std	Y+5, r24	; 0x05
    //memcpy((unsigned char*)buf, (unsigned char*)&config_defaults, size);

    eeprom_writebuf(base_addr, p, size);
     3e2:	4b 81       	ldd	r20, Y+3	; 0x03
     3e4:	2d 81       	ldd	r18, Y+5	; 0x05
     3e6:	3e 81       	ldd	r19, Y+6	; 0x06
     3e8:	89 81       	ldd	r24, Y+1	; 0x01
     3ea:	9a 81       	ldd	r25, Y+2	; 0x02
     3ec:	b9 01       	movw	r22, r18
     3ee:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <eeprom_writebuf>
}
     3f2:	00 00       	nop
     3f4:	26 96       	adiw	r28, 0x06	; 6
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	de bf       	out	0x3e, r29	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	cd bf       	out	0x3d, r28	; 61
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	08 95       	ret

00000406 <delay_init>:
static unsigned int limit[2] = {0, 0};
static unsigned char initialized = 0;

//typedef void (*func_t)(void);

void delay_init() {
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	00 d0       	rcall	.+0      	; 0x40c <delay_init+0x6>
     40c:	cd b7       	in	r28, 0x3d	; 61
     40e:	de b7       	in	r29, 0x3e	; 62
    if (!initialized) {
     410:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <initialized>
     414:	88 23       	and	r24, r24
     416:	89 f5       	brne	.+98     	; 0x47a <delay_init+0x74>
        /*

        unsigned int PRESCALER_VALUE = 64;
        */

        unsigned int COMPARE_VALUE = 250;
     418:	8a ef       	ldi	r24, 0xFA	; 250
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	9a 83       	std	Y+2, r25	; 0x02
     41e:	89 83       	std	Y+1, r24	; 0x01



        OCR0A = COMPARE_VALUE-1; // Set timer0 compare value to 250-1 = 249
     420:	87 e4       	ldi	r24, 0x47	; 71
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	29 81       	ldd	r18, Y+1	; 0x01
     426:	21 50       	subi	r18, 0x01	; 1
     428:	fc 01       	movw	r30, r24
     42a:	20 83       	st	Z, r18

        // Set CTC mode and correct clock divisor
        TCCR0A |= (1 << WGM01); // Set CTC mode //WGM01
     42c:	84 e4       	ldi	r24, 0x44	; 68
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	24 e4       	ldi	r18, 0x44	; 68
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	f9 01       	movw	r30, r18
     436:	20 81       	ld	r18, Z
     438:	22 60       	ori	r18, 0x02	; 2
     43a:	fc 01       	movw	r30, r24
     43c:	20 83       	st	Z, r18
        TCCR0B |= (1 << CS01) | (1 << CS00); // Set clock divisor (prescaler value = 64)  CS00/CS01
     43e:	85 e4       	ldi	r24, 0x45	; 69
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	25 e4       	ldi	r18, 0x45	; 69
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	f9 01       	movw	r30, r18
     448:	20 81       	ld	r18, Z
     44a:	23 60       	ori	r18, 0x03	; 3
     44c:	fc 01       	movw	r30, r24
     44e:	20 83       	st	Z, r18

        // Enable global interrupts
        // __builtin_avr_sei();
        SREG |= (1<<I_SREG);
     450:	8f e5       	ldi	r24, 0x5F	; 95
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	2f e5       	ldi	r18, 0x5F	; 95
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	f9 01       	movw	r30, r18
     45a:	20 81       	ld	r18, Z
     45c:	20 68       	ori	r18, 0x80	; 128
     45e:	fc 01       	movw	r30, r24
     460:	20 83       	st	Z, r18

        // Enable interrupts on output compare A
        TIMSK0 |= (1 << OCIE0A);  //OCIE0A
     462:	8e e6       	ldi	r24, 0x6E	; 110
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	2e e6       	ldi	r18, 0x6E	; 110
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	f9 01       	movw	r30, r18
     46c:	20 81       	ld	r18, Z
     46e:	22 60       	ori	r18, 0x02	; 2
     470:	fc 01       	movw	r30, r24
     472:	20 83       	st	Z, r18

        // Stop further initialization by setting initialized to 1
        initialized = 1;
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <initialized>
    }
}
     47a:	00 00       	nop
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <delay_get>:


unsigned int delay_get(unsigned int num) {
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	00 d0       	rcall	.+0      	; 0x48c <delay_get+0x6>
     48c:	00 d0       	rcall	.+0      	; 0x48e <delay_get+0x8>
     48e:	00 d0       	rcall	.+0      	; 0x490 <delay_get+0xa>
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
     494:	9e 83       	std	Y+6, r25	; 0x06
     496:	8d 83       	std	Y+5, r24	; 0x05

    unsigned int count_value;

    // Get global interrupt enable bit state
    unsigned int sreg_state = SREG & (1 << I_SREG);
     498:	8f e5       	ldi	r24, 0x5F	; 95
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	fc 01       	movw	r30, r24
     49e:	80 81       	ld	r24, Z
     4a0:	08 2e       	mov	r0, r24
     4a2:	00 0c       	add	r0, r0
     4a4:	99 0b       	sbc	r25, r25
     4a6:	80 78       	andi	r24, 0x80	; 128
     4a8:	99 27       	eor	r25, r25
     4aa:	9a 83       	std	Y+2, r25	; 0x02
     4ac:	89 83       	std	Y+1, r24	; 0x01

    // Disable interrupts
    // __builtin_avr_cli(); //
    SREG &= ~(1<<I_SREG);
     4ae:	8f e5       	ldi	r24, 0x5F	; 95
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	2f e5       	ldi	r18, 0x5F	; 95
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	f9 01       	movw	r30, r18
     4b8:	20 81       	ld	r18, Z
     4ba:	2f 77       	andi	r18, 0x7F	; 127
     4bc:	fc 01       	movw	r30, r24
     4be:	20 83       	st	Z, r18

    // Get the delay_count[num] value
    count_value = delay_count[num];
     4c0:	8d 81       	ldd	r24, Y+5	; 0x05
     4c2:	9e 81       	ldd	r25, Y+6	; 0x06
     4c4:	88 0f       	add	r24, r24
     4c6:	99 1f       	adc	r25, r25
     4c8:	8e 52       	subi	r24, 0x2E	; 46
     4ca:	9e 4f       	sbci	r25, 0xFE	; 254
     4cc:	fc 01       	movw	r30, r24
     4ce:	80 81       	ld	r24, Z
     4d0:	91 81       	ldd	r25, Z+1	; 0x01
     4d2:	9c 83       	std	Y+4, r25	; 0x04
     4d4:	8b 83       	std	Y+3, r24	; 0x03

    // Restore global interrupt state
    if (sreg_state) {
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	9a 81       	ldd	r25, Y+2	; 0x02
     4da:	89 2b       	or	r24, r25
     4dc:	49 f0       	breq	.+18     	; 0x4f0 <delay_get+0x6a>
        SREG |= (1<<I_SREG); //Enable interrupts
     4de:	8f e5       	ldi	r24, 0x5F	; 95
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	2f e5       	ldi	r18, 0x5F	; 95
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	f9 01       	movw	r30, r18
     4e8:	20 81       	ld	r18, Z
     4ea:	20 68       	ori	r18, 0x80	; 128
     4ec:	fc 01       	movw	r30, r24
     4ee:	20 83       	st	Z, r18
    }

    // Return the count value
    return count_value;
     4f0:	8b 81       	ldd	r24, Y+3	; 0x03
     4f2:	9c 81       	ldd	r25, Y+4	; 0x04
}
     4f4:	26 96       	adiw	r28, 0x06	; 6
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	cd bf       	out	0x3d, r28	; 61
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	08 95       	ret

00000506 <delay_set>:


void delay_set(unsigned int num, unsigned int time) {
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	00 d0       	rcall	.+0      	; 0x50c <delay_set+0x6>
     50c:	00 d0       	rcall	.+0      	; 0x50e <delay_set+0x8>
     50e:	00 d0       	rcall	.+0      	; 0x510 <delay_set+0xa>
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
     514:	9c 83       	std	Y+4, r25	; 0x04
     516:	8b 83       	std	Y+3, r24	; 0x03
     518:	7e 83       	std	Y+6, r23	; 0x06
     51a:	6d 83       	std	Y+5, r22	; 0x05

    // If not initialized, initialize the delay counter
    if (!initialized) {
     51c:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <initialized>
     520:	88 23       	and	r24, r24
     522:	11 f4       	brne	.+4      	; 0x528 <delay_set+0x22>
        delay_init();
     524:	0e 94 03 02 	call	0x406	; 0x406 <delay_init>
    }
    // Get global interrupt enable bit state
    unsigned int sreg_state = SREG & (1 << 7);
     528:	8f e5       	ldi	r24, 0x5F	; 95
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	fc 01       	movw	r30, r24
     52e:	80 81       	ld	r24, Z
     530:	08 2e       	mov	r0, r24
     532:	00 0c       	add	r0, r0
     534:	99 0b       	sbc	r25, r25
     536:	80 78       	andi	r24, 0x80	; 128
     538:	99 27       	eor	r25, r25
     53a:	9a 83       	std	Y+2, r25	; 0x02
     53c:	89 83       	std	Y+1, r24	; 0x01

    // Disable Interrupts
    SREG &= ~(1<<I_SREG); //cli()
     53e:	8f e5       	ldi	r24, 0x5F	; 95
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	2f e5       	ldi	r18, 0x5F	; 95
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	f9 01       	movw	r30, r18
     548:	20 81       	ld	r18, Z
     54a:	2f 77       	andi	r18, 0x7F	; 127
     54c:	fc 01       	movw	r30, r24
     54e:	20 83       	st	Z, r18

    // Set the limit for delay[num] and clear the count for delay[num]
    limit[num] = time;
     550:	8b 81       	ldd	r24, Y+3	; 0x03
     552:	9c 81       	ldd	r25, Y+4	; 0x04
     554:	88 0f       	add	r24, r24
     556:	99 1f       	adc	r25, r25
     558:	8a 52       	subi	r24, 0x2A	; 42
     55a:	9e 4f       	sbci	r25, 0xFE	; 254
     55c:	2d 81       	ldd	r18, Y+5	; 0x05
     55e:	3e 81       	ldd	r19, Y+6	; 0x06
     560:	fc 01       	movw	r30, r24
     562:	31 83       	std	Z+1, r19	; 0x01
     564:	20 83       	st	Z, r18
    delay_count[num] = 0;
     566:	8b 81       	ldd	r24, Y+3	; 0x03
     568:	9c 81       	ldd	r25, Y+4	; 0x04
     56a:	88 0f       	add	r24, r24
     56c:	99 1f       	adc	r25, r25
     56e:	8e 52       	subi	r24, 0x2E	; 46
     570:	9e 4f       	sbci	r25, 0xFE	; 254
     572:	fc 01       	movw	r30, r24
     574:	11 82       	std	Z+1, r1	; 0x01
     576:	10 82       	st	Z, r1

    // Restore global interrupt state
    if (sreg_state) {
     578:	89 81       	ldd	r24, Y+1	; 0x01
     57a:	9a 81       	ldd	r25, Y+2	; 0x02
     57c:	89 2b       	or	r24, r25
     57e:	49 f0       	breq	.+18     	; 0x592 <delay_set+0x8c>
        SREG |= (1<<I_SREG);   //sei()
     580:	8f e5       	ldi	r24, 0x5F	; 95
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	2f e5       	ldi	r18, 0x5F	; 95
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	f9 01       	movw	r30, r18
     58a:	20 81       	ld	r18, Z
     58c:	20 68       	ori	r18, 0x80	; 128
     58e:	fc 01       	movw	r30, r24
     590:	20 83       	st	Z, r18
    }
}
     592:	00 00       	nop
     594:	26 96       	adiw	r28, 0x06	; 6
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	de bf       	out	0x3e, r29	; 62
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	cd bf       	out	0x3d, r28	; 61
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	08 95       	ret

000005a6 <delay_isdone>:


unsigned int delay_isdone(unsigned int num) {
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	00 d0       	rcall	.+0      	; 0x5ac <delay_isdone+0x6>
     5ac:	00 d0       	rcall	.+0      	; 0x5ae <delay_isdone+0x8>
     5ae:	cd b7       	in	r28, 0x3d	; 61
     5b0:	de b7       	in	r29, 0x3e	; 62
     5b2:	9c 83       	std	Y+4, r25	; 0x04
     5b4:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int result = 0;
     5b6:	1a 82       	std	Y+2, r1	; 0x02
     5b8:	19 82       	std	Y+1, r1	; 0x01

    // If delay_count[num] equals limit[num], set result to 1
    if (delay_count[num] == limit[num]) {
     5ba:	8b 81       	ldd	r24, Y+3	; 0x03
     5bc:	9c 81       	ldd	r25, Y+4	; 0x04
     5be:	88 0f       	add	r24, r24
     5c0:	99 1f       	adc	r25, r25
     5c2:	8e 52       	subi	r24, 0x2E	; 46
     5c4:	9e 4f       	sbci	r25, 0xFE	; 254
     5c6:	fc 01       	movw	r30, r24
     5c8:	20 81       	ld	r18, Z
     5ca:	31 81       	ldd	r19, Z+1	; 0x01
     5cc:	8b 81       	ldd	r24, Y+3	; 0x03
     5ce:	9c 81       	ldd	r25, Y+4	; 0x04
     5d0:	88 0f       	add	r24, r24
     5d2:	99 1f       	adc	r25, r25
     5d4:	8a 52       	subi	r24, 0x2A	; 42
     5d6:	9e 4f       	sbci	r25, 0xFE	; 254
     5d8:	fc 01       	movw	r30, r24
     5da:	80 81       	ld	r24, Z
     5dc:	91 81       	ldd	r25, Z+1	; 0x01
     5de:	28 17       	cp	r18, r24
     5e0:	39 07       	cpc	r19, r25
     5e2:	21 f4       	brne	.+8      	; 0x5ec <delay_isdone+0x46>
        result = 1;
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	9a 83       	std	Y+2, r25	; 0x02
     5ea:	89 83       	std	Y+1, r24	; 0x01
    }

    // Return the result
    return result;
     5ec:	89 81       	ldd	r24, Y+1	; 0x01
     5ee:	9a 81       	ldd	r25, Y+2	; 0x02
}
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	08 95       	ret

000005fe <__vector_14>:

//map to ivt

void __vector_14(void) __attribute__ ((signal, used, externally_visible));

void __vector_14(void) {
     5fe:	1f 92       	push	r1
     600:	0f 92       	push	r0
     602:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     606:	0f 92       	push	r0
     608:	11 24       	eor	r1, r1
     60a:	2f 93       	push	r18
     60c:	3f 93       	push	r19
     60e:	8f 93       	push	r24
     610:	9f 93       	push	r25
     612:	ef 93       	push	r30
     614:	ff 93       	push	r31
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	00 d0       	rcall	.+0      	; 0x61c <__vector_14+0x1e>
     61c:	cd b7       	in	r28, 0x3d	; 61
     61e:	de b7       	in	r29, 0x3e	; 62
    for (unsigned int i = 0; i < sizeof(delay_count) / sizeof(delay_count[0]); i++) {
     620:	1a 82       	std	Y+2, r1	; 0x02
     622:	19 82       	std	Y+1, r1	; 0x01
     624:	2f c0       	rjmp	.+94     	; 0x684 <__vector_14+0x86>
        if (delay_count[i] < limit[i]) {
     626:	89 81       	ldd	r24, Y+1	; 0x01
     628:	9a 81       	ldd	r25, Y+2	; 0x02
     62a:	88 0f       	add	r24, r24
     62c:	99 1f       	adc	r25, r25
     62e:	8e 52       	subi	r24, 0x2E	; 46
     630:	9e 4f       	sbci	r25, 0xFE	; 254
     632:	fc 01       	movw	r30, r24
     634:	20 81       	ld	r18, Z
     636:	31 81       	ldd	r19, Z+1	; 0x01
     638:	89 81       	ldd	r24, Y+1	; 0x01
     63a:	9a 81       	ldd	r25, Y+2	; 0x02
     63c:	88 0f       	add	r24, r24
     63e:	99 1f       	adc	r25, r25
     640:	8a 52       	subi	r24, 0x2A	; 42
     642:	9e 4f       	sbci	r25, 0xFE	; 254
     644:	fc 01       	movw	r30, r24
     646:	80 81       	ld	r24, Z
     648:	91 81       	ldd	r25, Z+1	; 0x01
     64a:	28 17       	cp	r18, r24
     64c:	39 07       	cpc	r19, r25
     64e:	a8 f4       	brcc	.+42     	; 0x67a <__vector_14+0x7c>
            delay_count[i]++;
     650:	89 81       	ldd	r24, Y+1	; 0x01
     652:	9a 81       	ldd	r25, Y+2	; 0x02
     654:	88 0f       	add	r24, r24
     656:	99 1f       	adc	r25, r25
     658:	8e 52       	subi	r24, 0x2E	; 46
     65a:	9e 4f       	sbci	r25, 0xFE	; 254
     65c:	fc 01       	movw	r30, r24
     65e:	80 81       	ld	r24, Z
     660:	91 81       	ldd	r25, Z+1	; 0x01
     662:	9c 01       	movw	r18, r24
     664:	2f 5f       	subi	r18, 0xFF	; 255
     666:	3f 4f       	sbci	r19, 0xFF	; 255
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	9a 81       	ldd	r25, Y+2	; 0x02
     66c:	88 0f       	add	r24, r24
     66e:	99 1f       	adc	r25, r25
     670:	8e 52       	subi	r24, 0x2E	; 46
     672:	9e 4f       	sbci	r25, 0xFE	; 254
     674:	fc 01       	movw	r30, r24
     676:	31 83       	std	Z+1, r19	; 0x01
     678:	20 83       	st	Z, r18
//map to ivt

void __vector_14(void) __attribute__ ((signal, used, externally_visible));

void __vector_14(void) {
    for (unsigned int i = 0; i < sizeof(delay_count) / sizeof(delay_count[0]); i++) {
     67a:	89 81       	ldd	r24, Y+1	; 0x01
     67c:	9a 81       	ldd	r25, Y+2	; 0x02
     67e:	01 96       	adiw	r24, 0x01	; 1
     680:	9a 83       	std	Y+2, r25	; 0x02
     682:	89 83       	std	Y+1, r24	; 0x01
     684:	89 81       	ldd	r24, Y+1	; 0x01
     686:	9a 81       	ldd	r25, Y+2	; 0x02
     688:	02 97       	sbiw	r24, 0x02	; 2
     68a:	68 f2       	brcs	.-102    	; 0x626 <__vector_14+0x28>
        if (delay_count[i] < limit[i]) {
            delay_count[i]++;
        }
    }
}
     68c:	00 00       	nop
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	ff 91       	pop	r31
     698:	ef 91       	pop	r30
     69a:	9f 91       	pop	r25
     69c:	8f 91       	pop	r24
     69e:	3f 91       	pop	r19
     6a0:	2f 91       	pop	r18
     6a2:	0f 90       	pop	r0
     6a4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     6a8:	0f 90       	pop	r0
     6aa:	1f 90       	pop	r1
     6ac:	18 95       	reti

000006ae <eeprom_unlock>:
#pragma GCC push_options
#pragma GCC optimize ("Os")
void eeprom_unlock()
{
    //EECR &= ~(1<<EEPE);
    EECR |= (1<<EEMPE);                     //enable master write
     6ae:	fa 9a       	sbi	0x1f, 2	; 31
    EECR |= (1<<EEPE);                      //enable write
     6b0:	f9 9a       	sbi	0x1f, 1	; 31
     6b2:	08 95       	ret

000006b4 <eeprom_readenable>:

#pragma GCC push_options
#pragma GCC optimize ("Os")
void eeprom_readenable()
{
    EECR |= (1<<EERE);
     6b4:	f8 9a       	sbi	0x1f, 0	; 31
     6b6:	08 95       	ret

000006b8 <eeprom_isbusy>:
}
#pragma GCC pop_options

int eeprom_isbusy(){
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	cd b7       	in	r28, 0x3d	; 61
     6be:	de b7       	in	r29, 0x3e	; 62
    //if(write_busy==1)
    //{
    //    int i=0;
    //}
    return write_busy==1;
     6c0:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <write_busy>
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	91 30       	cpi	r25, 0x01	; 1
     6c8:	09 f0       	breq	.+2      	; 0x6cc <eeprom_isbusy+0x14>
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	88 2f       	mov	r24, r24
     6ce:	90 e0       	ldi	r25, 0x00	; 0
    //return 0;
}
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <eeprom_writebuf>:

void eeprom_writebuf(unsigned int addr, unsigned char* buf, unsigned char size){
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
     6de:	27 97       	sbiw	r28, 0x07	; 7
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	f8 94       	cli
     6e4:	de bf       	out	0x3e, r29	; 62
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	cd bf       	out	0x3d, r28	; 61
     6ea:	9c 83       	std	Y+4, r25	; 0x04
     6ec:	8b 83       	std	Y+3, r24	; 0x03
     6ee:	7e 83       	std	Y+6, r23	; 0x06
     6f0:	6d 83       	std	Y+5, r22	; 0x05
     6f2:	4f 83       	std	Y+7, r20	; 0x07
    writeaddr = addr;
     6f4:	8b 81       	ldd	r24, Y+3	; 0x03
     6f6:	9c 81       	ldd	r25, Y+4	; 0x04
     6f8:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <writeaddr+0x1>
     6fc:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <writeaddr>
    write_busy = 1;
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <write_busy>
    bufidx = 0;
     706:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <bufidx>

    //Copying
    for (int i=0;i<size;i++)
     70a:	1a 82       	std	Y+2, r1	; 0x02
     70c:	19 82       	std	Y+1, r1	; 0x01
     70e:	13 c0       	rjmp	.+38     	; 0x736 <eeprom_writebuf+0x60>
    {
        writebuf[i] = buf[i];
     710:	89 81       	ldd	r24, Y+1	; 0x01
     712:	9a 81       	ldd	r25, Y+2	; 0x02
     714:	2d 81       	ldd	r18, Y+5	; 0x05
     716:	3e 81       	ldd	r19, Y+6	; 0x06
     718:	82 0f       	add	r24, r18
     71a:	93 1f       	adc	r25, r19
     71c:	fc 01       	movw	r30, r24
     71e:	20 81       	ld	r18, Z
     720:	89 81       	ldd	r24, Y+1	; 0x01
     722:	9a 81       	ldd	r25, Y+2	; 0x02
     724:	80 57       	subi	r24, 0x70	; 112
     726:	9d 4f       	sbci	r25, 0xFD	; 253
     728:	fc 01       	movw	r30, r24
     72a:	20 83       	st	Z, r18
    writeaddr = addr;
    write_busy = 1;
    bufidx = 0;

    //Copying
    for (int i=0;i<size;i++)
     72c:	89 81       	ldd	r24, Y+1	; 0x01
     72e:	9a 81       	ldd	r25, Y+2	; 0x02
     730:	01 96       	adiw	r24, 0x01	; 1
     732:	9a 83       	std	Y+2, r25	; 0x02
     734:	89 83       	std	Y+1, r24	; 0x01
     736:	8f 81       	ldd	r24, Y+7	; 0x07
     738:	28 2f       	mov	r18, r24
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	89 81       	ldd	r24, Y+1	; 0x01
     73e:	9a 81       	ldd	r25, Y+2	; 0x02
     740:	82 17       	cp	r24, r18
     742:	93 07       	cpc	r25, r19
     744:	2c f3       	brlt	.-54     	; 0x710 <eeprom_writebuf+0x3a>
    }

    //uart_writestr(writebuf);


    writesize = size;
     746:	8f 81       	ldd	r24, Y+7	; 0x07
     748:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <writesize>

    //init EEPROM
    EECR |= (1<<EEPM1);
     74c:	8f e3       	ldi	r24, 0x3F	; 63
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	2f e3       	ldi	r18, 0x3F	; 63
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	f9 01       	movw	r30, r18
     756:	20 81       	ld	r18, Z
     758:	20 62       	ori	r18, 0x20	; 32
     75a:	fc 01       	movw	r30, r24
     75c:	20 83       	st	Z, r18
    EECR &= ~(1<<EEPM0);
     75e:	8f e3       	ldi	r24, 0x3F	; 63
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	2f e3       	ldi	r18, 0x3F	; 63
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	f9 01       	movw	r30, r18
     768:	20 81       	ld	r18, Z
     76a:	2f 7e       	andi	r18, 0xEF	; 239
     76c:	fc 01       	movw	r30, r24
     76e:	20 83       	st	Z, r18

    //EEARH &= ~(1<<EEAR8);

    SREG |= (1<<I_SREG);        //Global interrupt enable
     770:	8f e5       	ldi	r24, 0x5F	; 95
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	2f e5       	ldi	r18, 0x5F	; 95
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	f9 01       	movw	r30, r18
     77a:	20 81       	ld	r18, Z
     77c:	20 68       	ori	r18, 0x80	; 128
     77e:	fc 01       	movw	r30, r24
     780:	20 83       	st	Z, r18
    EECR |= (1<<EERIE);         //Enabling EEPROM ready interrupt
     782:	8f e3       	ldi	r24, 0x3F	; 63
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	2f e3       	ldi	r18, 0x3F	; 63
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	f9 01       	movw	r30, r18
     78c:	20 81       	ld	r18, Z
     78e:	28 60       	ori	r18, 0x08	; 8
     790:	fc 01       	movw	r30, r24
     792:	20 83       	st	Z, r18

    while(write_busy);
     794:	00 00       	nop
     796:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <write_busy>
     79a:	88 23       	and	r24, r24
     79c:	e1 f7       	brne	.-8      	; 0x796 <eeprom_writebuf+0xc0>
}
     79e:	00 00       	nop
     7a0:	27 96       	adiw	r28, 0x07	; 7
     7a2:	0f b6       	in	r0, 0x3f	; 63
     7a4:	f8 94       	cli
     7a6:	de bf       	out	0x3e, r29	; 62
     7a8:	0f be       	out	0x3f, r0	; 63
     7aa:	cd bf       	out	0x3d, r28	; 61
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	08 95       	ret

000007b2 <eeprom_readbuf>:

void eeprom_readbuf(unsigned int addr, unsigned char* buf, unsigned char size)
{
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	29 97       	sbiw	r28, 0x09	; 9
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	9e 83       	std	Y+6, r25	; 0x06
     7c8:	8d 83       	std	Y+5, r24	; 0x05
     7ca:	78 87       	std	Y+8, r23	; 0x08
     7cc:	6f 83       	std	Y+7, r22	; 0x07
     7ce:	49 87       	std	Y+9, r20	; 0x09
    unsigned int read_addr=addr;
     7d0:	8d 81       	ldd	r24, Y+5	; 0x05
     7d2:	9e 81       	ldd	r25, Y+6	; 0x06
     7d4:	9a 83       	std	Y+2, r25	; 0x02
     7d6:	89 83       	std	Y+1, r24	; 0x01
    for(int i=0;i<size;i++)
     7d8:	1c 82       	std	Y+4, r1	; 0x04
     7da:	1b 82       	std	Y+3, r1	; 0x03
     7dc:	2d c0       	rjmp	.+90     	; 0x838 <eeprom_readbuf+0x86>
    {
        //Read from EEPROM and store in buf[0:size-1]
        while(EECR & (1<<EEPE));     //waiting until EEPE becomes 0
     7de:	00 00       	nop
     7e0:	8f e3       	ldi	r24, 0x3F	; 63
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	fc 01       	movw	r30, r24
     7e6:	80 81       	ld	r24, Z
     7e8:	08 2e       	mov	r0, r24
     7ea:	00 0c       	add	r0, r0
     7ec:	99 0b       	sbc	r25, r25
     7ee:	82 70       	andi	r24, 0x02	; 2
     7f0:	99 27       	eor	r25, r25
     7f2:	89 2b       	or	r24, r25
     7f4:	a9 f7       	brne	.-22     	; 0x7e0 <eeprom_readbuf+0x2e>

        EEAR = read_addr;
     7f6:	81 e4       	ldi	r24, 0x41	; 65
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	29 81       	ldd	r18, Y+1	; 0x01
     7fc:	3a 81       	ldd	r19, Y+2	; 0x02
     7fe:	fc 01       	movw	r30, r24
     800:	31 83       	std	Z+1, r19	; 0x01
     802:	20 83       	st	Z, r18

        eeprom_readenable();
     804:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <eeprom_readenable>

        //Wait for 4 cycles
        __builtin_avr_delay_cycles(4);
     808:	00 c0       	rjmp	.+0      	; 0x80a <eeprom_readbuf+0x58>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <eeprom_readbuf+0x5a>

        buf[i] = EEDR;
     80c:	8b 81       	ldd	r24, Y+3	; 0x03
     80e:	9c 81       	ldd	r25, Y+4	; 0x04
     810:	2f 81       	ldd	r18, Y+7	; 0x07
     812:	38 85       	ldd	r19, Y+8	; 0x08
     814:	82 0f       	add	r24, r18
     816:	93 1f       	adc	r25, r19
     818:	20 e4       	ldi	r18, 0x40	; 64
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	f9 01       	movw	r30, r18
     81e:	20 81       	ld	r18, Z
     820:	fc 01       	movw	r30, r24
     822:	20 83       	st	Z, r18
        read_addr++;
     824:	89 81       	ldd	r24, Y+1	; 0x01
     826:	9a 81       	ldd	r25, Y+2	; 0x02
     828:	01 96       	adiw	r24, 0x01	; 1
     82a:	9a 83       	std	Y+2, r25	; 0x02
     82c:	89 83       	std	Y+1, r24	; 0x01
}

void eeprom_readbuf(unsigned int addr, unsigned char* buf, unsigned char size)
{
    unsigned int read_addr=addr;
    for(int i=0;i<size;i++)
     82e:	8b 81       	ldd	r24, Y+3	; 0x03
     830:	9c 81       	ldd	r25, Y+4	; 0x04
     832:	01 96       	adiw	r24, 0x01	; 1
     834:	9c 83       	std	Y+4, r25	; 0x04
     836:	8b 83       	std	Y+3, r24	; 0x03
     838:	89 85       	ldd	r24, Y+9	; 0x09
     83a:	28 2f       	mov	r18, r24
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	8b 81       	ldd	r24, Y+3	; 0x03
     840:	9c 81       	ldd	r25, Y+4	; 0x04
     842:	82 17       	cp	r24, r18
     844:	93 07       	cpc	r25, r19
     846:	5c f2       	brlt	.-106    	; 0x7de <eeprom_readbuf+0x2c>
        __builtin_avr_delay_cycles(4);

        buf[i] = EEDR;
        read_addr++;
    }
}
     848:	00 00       	nop
     84a:	29 96       	adiw	r28, 0x09	; 9
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	f8 94       	cli
     850:	de bf       	out	0x3e, r29	; 62
     852:	0f be       	out	0x3f, r0	; 63
     854:	cd bf       	out	0x3d, r28	; 61
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	08 95       	ret

0000085c <__vector_22>:

void __vector_22(void) __attribute__ ((signal, used, externally_visible));

void __vector_22(){
     85c:	1f 92       	push	r1
     85e:	0f 92       	push	r0
     860:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     864:	0f 92       	push	r0
     866:	11 24       	eor	r1, r1
     868:	2f 93       	push	r18
     86a:	3f 93       	push	r19
     86c:	4f 93       	push	r20
     86e:	5f 93       	push	r21
     870:	6f 93       	push	r22
     872:	7f 93       	push	r23
     874:	8f 93       	push	r24
     876:	9f 93       	push	r25
     878:	af 93       	push	r26
     87a:	bf 93       	push	r27
     87c:	ef 93       	push	r30
     87e:	ff 93       	push	r31
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
    //EEPROM ready
    if(bufidx<writesize)
     888:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <bufidx>
     88c:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <writesize>
     890:	98 17       	cp	r25, r24
     892:	d8 f5       	brcc	.+118    	; 0x90a <__stack+0xb>
    {
        //Clear the global interrupt flag
        SREG &= ~(1<<I_SREG);
     894:	8f e5       	ldi	r24, 0x5F	; 95
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	2f e5       	ldi	r18, 0x5F	; 95
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	f9 01       	movw	r30, r18
     89e:	20 81       	ld	r18, Z
     8a0:	2f 77       	andi	r18, 0x7F	; 127
     8a2:	fc 01       	movw	r30, r24
     8a4:	20 83       	st	Z, r18

        //Write writebuf[bufidx] to EEPROM writeaddr

        while (EECR & (1<<EEPE));     //waiting until EEPE becomes 0
     8a6:	00 00       	nop
     8a8:	8f e3       	ldi	r24, 0x3F	; 63
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	fc 01       	movw	r30, r24
     8ae:	80 81       	ld	r24, Z
     8b0:	08 2e       	mov	r0, r24
     8b2:	00 0c       	add	r0, r0
     8b4:	99 0b       	sbc	r25, r25
     8b6:	82 70       	andi	r24, 0x02	; 2
     8b8:	99 27       	eor	r25, r25
     8ba:	89 2b       	or	r24, r25
     8bc:	a9 f7       	brne	.-22     	; 0x8a8 <__vector_22+0x4c>

        //while (SPMCSR & (1<<SELFPRGEN));     //waiting until SELFPRGEN becomes 0

        EEAR = writeaddr;                      //Writes address to EEARL register
     8be:	81 e4       	ldi	r24, 0x41	; 65
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	20 91 8d 02 	lds	r18, 0x028D	; 0x80028d <writeaddr>
     8c6:	30 91 8e 02 	lds	r19, 0x028E	; 0x80028e <writeaddr+0x1>
     8ca:	fc 01       	movw	r30, r24
     8cc:	31 83       	std	Z+1, r19	; 0x01
     8ce:	20 83       	st	Z, r18
        EEDR = writebuf[bufidx];                //Writes data to EEDR register
     8d0:	80 e4       	ldi	r24, 0x40	; 64
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	20 91 d0 02 	lds	r18, 0x02D0	; 0x8002d0 <bufidx>
     8d8:	22 2f       	mov	r18, r18
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	20 57       	subi	r18, 0x70	; 112
     8de:	3d 4f       	sbci	r19, 0xFD	; 253
     8e0:	f9 01       	movw	r30, r18
     8e2:	20 81       	ld	r18, Z
     8e4:	fc 01       	movw	r30, r24
     8e6:	20 83       	st	Z, r18

        eeprom_unlock();
     8e8:	0e 94 57 03 	call	0x6ae	; 0x6ae <eeprom_unlock>

        writeaddr++;
     8ec:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <writeaddr>
     8f0:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <writeaddr+0x1>
     8f4:	01 96       	adiw	r24, 0x01	; 1
     8f6:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <writeaddr+0x1>
     8fa:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <writeaddr>
        bufidx++;
     8fe:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <bufidx>
     902:	8f 5f       	subi	r24, 0xFF	; 255
     904:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <bufidx>
    {
        //Disable EEPROM ready interrupts
        EECR &= ~(1<<EERIE);
        write_busy=0;
    }
}
     908:	11 c0       	rjmp	.+34     	; 0x92c <__stack+0x2d>
        //Re-enable eeprom ready interrupt (just in case)
        //EECR |= (1<<EERIE);

        //while(EECR & (1<<EEPE)); //wait until EEPE becomes 0
    }
    else if (bufidx>=writesize)
     90a:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <bufidx>
     90e:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <writesize>
     912:	98 17       	cp	r25, r24
     914:	58 f0       	brcs	.+22     	; 0x92c <__stack+0x2d>
    {
        //Disable EEPROM ready interrupts
        EECR &= ~(1<<EERIE);
     916:	8f e3       	ldi	r24, 0x3F	; 63
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	2f e3       	ldi	r18, 0x3F	; 63
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	f9 01       	movw	r30, r18
     920:	20 81       	ld	r18, Z
     922:	27 7f       	andi	r18, 0xF7	; 247
     924:	fc 01       	movw	r30, r24
     926:	20 83       	st	Z, r18
        write_busy=0;
     928:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <write_busy>
    }
}
     92c:	00 00       	nop
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	ff 91       	pop	r31
     934:	ef 91       	pop	r30
     936:	bf 91       	pop	r27
     938:	af 91       	pop	r26
     93a:	9f 91       	pop	r25
     93c:	8f 91       	pop	r24
     93e:	7f 91       	pop	r23
     940:	6f 91       	pop	r22
     942:	5f 91       	pop	r21
     944:	4f 91       	pop	r20
     946:	3f 91       	pop	r19
     948:	2f 91       	pop	r18
     94a:	0f 90       	pop	r0
     94c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     950:	0f 90       	pop	r0
     952:	1f 90       	pop	r1
     954:	18 95       	reti

00000956 <EEPROM_set_write_mode>:

void EEPROM_set_write_mode(){
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
    EECR |= (1<<EEPM1);
     95e:	8f e3       	ldi	r24, 0x3F	; 63
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	2f e3       	ldi	r18, 0x3F	; 63
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	f9 01       	movw	r30, r18
     968:	20 81       	ld	r18, Z
     96a:	20 62       	ori	r18, 0x20	; 32
     96c:	fc 01       	movw	r30, r24
     96e:	20 83       	st	Z, r18
}
     970:	00 00       	nop
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	08 95       	ret

00000978 <led_init>:

const char *Blink_msg;
unsigned int Blink_pos;
enum Blink_state { phase1, phase2 } blink_state;

void led_init() {
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	cd b7       	in	r28, 0x3d	; 61
     97e:	de b7       	in	r29, 0x3e	; 62
    DDRB |= LED_PIN; // Set LED pin as output
     980:	84 e2       	ldi	r24, 0x24	; 36
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	24 e2       	ldi	r18, 0x24	; 36
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	f9 01       	movw	r30, r18
     98a:	20 81       	ld	r18, Z
     98c:	22 60       	ori	r18, 0x02	; 2
     98e:	fc 01       	movw	r30, r24
     990:	20 83       	st	Z, r18
    PORTB &= ~LED_PIN; // Turn off the LED
     992:	85 e2       	ldi	r24, 0x25	; 37
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	25 e2       	ldi	r18, 0x25	; 37
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	f9 01       	movw	r30, r18
     99c:	20 81       	ld	r18, Z
     99e:	2d 7f       	andi	r18, 0xFD	; 253
     9a0:	fc 01       	movw	r30, r24
     9a2:	20 83       	st	Z, r18
}
     9a4:	00 00       	nop
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <led_on>:

void led_on() {
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	cd b7       	in	r28, 0x3d	; 61
     9b2:	de b7       	in	r29, 0x3e	; 62
    PORTB |= LED_PIN;
     9b4:	85 e2       	ldi	r24, 0x25	; 37
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	25 e2       	ldi	r18, 0x25	; 37
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	f9 01       	movw	r30, r18
     9be:	20 81       	ld	r18, Z
     9c0:	22 60       	ori	r18, 0x02	; 2
     9c2:	fc 01       	movw	r30, r24
     9c4:	20 83       	st	Z, r18
}
     9c6:	00 00       	nop
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	08 95       	ret

000009ce <led_off>:

void led_off() {
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	cd b7       	in	r28, 0x3d	; 61
     9d4:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~LED_PIN;
     9d6:	85 e2       	ldi	r24, 0x25	; 37
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	25 e2       	ldi	r18, 0x25	; 37
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	f9 01       	movw	r30, r18
     9e0:	20 81       	ld	r18, Z
     9e2:	2d 7f       	andi	r18, 0xFD	; 253
     9e4:	fc 01       	movw	r30, r24
     9e6:	20 83       	st	Z, r18
}
     9e8:	00 00       	nop
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	08 95       	ret

000009f0 <led_is_on>:

int led_is_on() {
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
    return (PORTB & LED_PIN) ? 1 : 0;
     9f8:	85 e2       	ldi	r24, 0x25	; 37
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	fc 01       	movw	r30, r24
     9fe:	80 81       	ld	r24, Z
     a00:	88 2f       	mov	r24, r24
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	82 70       	andi	r24, 0x02	; 2
     a06:	99 27       	eor	r25, r25
     a08:	21 e0       	ldi	r18, 0x01	; 1
     a0a:	89 2b       	or	r24, r25
     a0c:	09 f4       	brne	.+2      	; 0xa10 <led_is_on+0x20>
     a0e:	20 e0       	ldi	r18, 0x00	; 0
     a10:	82 2f       	mov	r24, r18
     a12:	90 e0       	ldi	r25, 0x00	; 0
}
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	08 95       	ret

00000a1a <led_set_blink>:

void led_set_blink(char *msg) {
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	00 d0       	rcall	.+0      	; 0xa20 <led_set_blink+0x6>
     a20:	cd b7       	in	r28, 0x3d	; 61
     a22:	de b7       	in	r29, 0x3e	; 62
     a24:	9a 83       	std	Y+2, r25	; 0x02
     a26:	89 83       	std	Y+1, r24	; 0x01
    Blink_msg = msg;
     a28:	89 81       	ldd	r24, Y+1	; 0x01
     a2a:	9a 81       	ldd	r25, Y+2	; 0x02
     a2c:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <Blink_msg+0x1>
     a30:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <Blink_msg>
    Blink_pos = 0;
     a34:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <Blink_pos+0x1>
     a38:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <Blink_pos>
    blink_state = phase1;
     a3c:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <blink_state+0x1>
     a40:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <blink_state>
    delay_set(0, 0);
     a44:	60 e0       	ldi	r22, 0x00	; 0
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	0e 94 83 02 	call	0x506	; 0x506 <delay_set>
    led_off();
     a50:	0e 94 e7 04 	call	0x9ce	; 0x9ce <led_off>
}
     a54:	00 00       	nop
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	08 95       	ret

00000a60 <led_update>:

void led_update() {
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
    switch (blink_state) {
     a68:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <blink_state>
     a6c:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <blink_state+0x1>
     a70:	00 97       	sbiw	r24, 0x00	; 0
     a72:	21 f0       	breq	.+8      	; 0xa7c <led_update+0x1c>
     a74:	01 97       	sbiw	r24, 0x01	; 1
     a76:	09 f4       	brne	.+2      	; 0xa7a <led_update+0x1a>
     a78:	51 c0       	rjmp	.+162    	; 0xb1c <led_update+0xbc>
                blink_state = phase1;
            }
            break;

        default:
            break;
     a7a:	81 c0       	rjmp	.+258    	; 0xb7e <led_update+0x11e>
}

void led_update() {
    switch (blink_state) {
        case phase1:
            if (delay_isdone(0)) {
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <delay_isdone>
     a84:	89 2b       	or	r24, r25
     a86:	09 f4       	brne	.+2      	; 0xa8a <led_update+0x2a>
     a88:	77 c0       	rjmp	.+238    	; 0xb78 <led_update+0x118>
                switch (Blink_msg[Blink_pos]) {
     a8a:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <Blink_msg>
     a8e:	30 91 71 02 	lds	r19, 0x0271	; 0x800271 <Blink_msg+0x1>
     a92:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <Blink_pos>
     a96:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <Blink_pos+0x1>
     a9a:	82 0f       	add	r24, r18
     a9c:	93 1f       	adc	r25, r19
     a9e:	fc 01       	movw	r30, r24
     aa0:	80 81       	ld	r24, Z
     aa2:	08 2e       	mov	r0, r24
     aa4:	00 0c       	add	r0, r0
     aa6:	99 0b       	sbc	r25, r25
     aa8:	8d 32       	cpi	r24, 0x2D	; 45
     aaa:	91 05       	cpc	r25, r1
     aac:	31 f0       	breq	.+12     	; 0xaba <led_update+0x5a>
     aae:	8e 32       	cpi	r24, 0x2E	; 46
     ab0:	91 05       	cpc	r25, r1
     ab2:	91 f0       	breq	.+36     	; 0xad8 <led_update+0x78>
     ab4:	80 97       	sbiw	r24, 0x20	; 32
     ab6:	f9 f0       	breq	.+62     	; 0xaf6 <led_update+0x96>
     ab8:	27 c0       	rjmp	.+78     	; 0xb08 <led_update+0xa8>
                    case '-':
                        led_on();
     aba:	0e 94 d6 04 	call	0x9ac	; 0x9ac <led_on>
                        delay_set(0, 750);
     abe:	6e ee       	ldi	r22, 0xEE	; 238
     ac0:	72 e0       	ldi	r23, 0x02	; 2
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	0e 94 83 02 	call	0x506	; 0x506 <delay_set>
                        //delay_set(0,7);
                        blink_state = phase2;
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <blink_state+0x1>
     ad2:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <blink_state>
                        break;
     ad6:	21 c0       	rjmp	.+66     	; 0xb1a <led_update+0xba>
                    case '.':
                        led_on();
     ad8:	0e 94 d6 04 	call	0x9ac	; 0x9ac <led_on>
                        delay_set(0, 250);
     adc:	6a ef       	ldi	r22, 0xFA	; 250
     ade:	70 e0       	ldi	r23, 0x00	; 0
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	0e 94 83 02 	call	0x506	; 0x506 <delay_set>
                        //delay_set(0,2);
                        blink_state = phase2;
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <blink_state+0x1>
     af0:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <blink_state>
                        break;
     af4:	12 c0       	rjmp	.+36     	; 0xb1a <led_update+0xba>
                    case ' ':
                        led_off();
     af6:	0e 94 e7 04 	call	0x9ce	; 0x9ce <led_off>
                        delay_set(0, 1000);
     afa:	68 ee       	ldi	r22, 0xE8	; 232
     afc:	73 e0       	ldi	r23, 0x03	; 3
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	0e 94 83 02 	call	0x506	; 0x506 <delay_set>
                        //blink_state = phase2;
                        break;
     b06:	09 c0       	rjmp	.+18     	; 0xb1a <led_update+0xba>
                    default:
                        led_off();
     b08:	0e 94 e7 04 	call	0x9ce	; 0x9ce <led_off>
                        delay_set(0, 0);
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	0e 94 83 02 	call	0x506	; 0x506 <delay_set>
                        break;
     b18:	00 00       	nop
                }
            }
            break;
     b1a:	2e c0       	rjmp	.+92     	; 0xb78 <led_update+0x118>

        case phase2:
            if (delay_isdone(0)) {
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <delay_isdone>
     b24:	89 2b       	or	r24, r25
     b26:	51 f1       	breq	.+84     	; 0xb7c <led_update+0x11c>
                led_off();
     b28:	0e 94 e7 04 	call	0x9ce	; 0x9ce <led_off>
                delay_set(0, 100);
     b2c:	64 e6       	ldi	r22, 0x64	; 100
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	0e 94 83 02 	call	0x506	; 0x506 <delay_set>
                //delay_set(0, 1);
                Blink_pos++;
     b38:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <Blink_pos>
     b3c:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <Blink_pos+0x1>
     b40:	01 96       	adiw	r24, 0x01	; 1
     b42:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <Blink_pos+0x1>
     b46:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <Blink_pos>
                if (Blink_pos >= strlen(Blink_msg)) {
     b4a:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <Blink_msg>
     b4e:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <Blink_msg+0x1>
     b52:	0e 94 84 14 	call	0x2908	; 0x2908 <strlen>
     b56:	9c 01       	movw	r18, r24
     b58:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <Blink_pos>
     b5c:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <Blink_pos+0x1>
     b60:	82 17       	cp	r24, r18
     b62:	93 07       	cpc	r25, r19
     b64:	20 f0       	brcs	.+8      	; 0xb6e <led_update+0x10e>
                    Blink_pos = 0;
     b66:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <Blink_pos+0x1>
     b6a:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <Blink_pos>
                }
                blink_state = phase1;
     b6e:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <blink_state+0x1>
     b72:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <blink_state>
            }
            break;
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <led_update+0x11c>
                        led_off();
                        delay_set(0, 0);
                        break;
                }
            }
            break;
     b78:	00 00       	nop
     b7a:	01 c0       	rjmp	.+2      	; 0xb7e <led_update+0x11e>
                if (Blink_pos >= strlen(Blink_msg)) {
                    Blink_pos = 0;
                }
                blink_state = phase1;
            }
            break;
     b7c:	00 00       	nop

        default:
            break;
    }
}
     b7e:	00 00       	nop
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	08 95       	ret

00000b86 <main>:
 #include "vpd.h"
 #include "uart.h"
 #include "log.h"

int main(void)
{
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	00 d0       	rcall	.+0      	; 0xb8c <main+0x6>
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
    /* Initialize uart, led, and rtc hardware */
    uart_init();
     b90:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <uart_init>
    config_init();
     b94:	0e 94 a8 00 	call	0x150	; 0x150 <config_init>
    led_init();
     b98:	0e 94 bc 04 	call	0x978	; 0x978 <led_init>
    log_init();
     b9c:	0e 94 f6 08 	call	0x11ec	; 0x11ec <log_init>
    rtc_init();
     ba0:	0e 94 bc 0a 	call	0x1578	; 0x1578 <rtc_init>
    vpd_init();
     ba4:	0e 94 e7 07 	call	0xfce	; 0xfce <vpd_init>
    //timer1_init();
    delay_init();
     ba8:	0e 94 03 02 	call	0x406	; 0x406 <delay_init>

    /* Initialize led blink pattern to "--- -.-" in Morse Code */
    led_set_blink("-");
     bac:	8d e5       	ldi	r24, 0x5D	; 93
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	0e 94 0d 05 	call	0xa1a	; 0xa1a <led_set_blink>

    /* Set RTC date/time to "01/01/2019 00:00:00" */
    rtc_set_by_datestr("01/01/2019 00:00:00");
     bb4:	8f e5       	ldi	r24, 0x5F	; 95
     bb6:	91 e0       	ldi	r25, 0x01	; 1
     bb8:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <rtc_set_by_datestr>

    /* Output project information to the console */
    uart_writestr("SER 486 Project 2 - Manish Mysore Rajesh Gangadhar\n\r");
     bbc:	83 e7       	ldi	r24, 0x73	; 115
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <uart_writestr>

    //uart_writestr("SER 486 Project 2 - Venkata Kanaka Rama Meher Virinchi\n\r");

    uart_writestr(vpd.model);
     bc4:	85 ed       	ldi	r24, 0xD5	; 213
     bc6:	92 e0       	ldi	r25, 0x02	; 2
     bc8:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <uart_writestr>
    uart_writestr("\n\r");
     bcc:	88 ea       	ldi	r24, 0xA8	; 168
     bce:	91 e0       	ldi	r25, 0x01	; 1
     bd0:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <uart_writestr>
    uart_writestr(vpd.manufacturer);
     bd4:	81 ee       	ldi	r24, 0xE1	; 225
     bd6:	92 e0       	ldi	r25, 0x02	; 2
     bd8:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <uart_writestr>
    uart_writestr("\n\r");
     bdc:	88 ea       	ldi	r24, 0xA8	; 168
     bde:	91 e0       	ldi	r25, 0x01	; 1
     be0:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <uart_writestr>
    uart_writestr(vpd.token);
     be4:	81 ed       	ldi	r24, 0xD1	; 209
     be6:	92 e0       	ldi	r25, 0x02	; 2
     be8:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <uart_writestr>
    uart_writestr("\n\r");
     bec:	88 ea       	ldi	r24, 0xA8	; 168
     bee:	91 e0       	ldi	r25, 0x01	; 1
     bf0:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <uart_writestr>

    //Set the config.use_static_ip=1 and set modified
    config.use_static_ip=1;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <config+0xc>
    config_set_modified();
     bfa:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <config_set_modified>

    //Clear event log and add three records to it
    log_clear();
     bfe:	0e 94 42 0a 	call	0x1484	; 0x1484 <log_clear>
    log_add_record(0xaa);
     c02:	8a ea       	ldi	r24, 0xAA	; 170
     c04:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <log_add_record>
    log_add_record(0xbb);
     c08:	8b eb       	ldi	r24, 0xBB	; 187
     c0a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <log_add_record>
    log_add_record(0xcc);
     c0e:	8c ec       	ldi	r24, 0xCC	; 204
     c10:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <log_add_record>

    int dumped=0;
     c14:	1a 82       	std	Y+2, r1	; 0x02
     c16:	19 82       	std	Y+1, r1	; 0x01


    while(1)
    {
        led_update();
     c18:	0e 94 30 05 	call	0xa60	; 0xa60 <led_update>
        log_update();
     c1c:	0e 94 bb 09 	call	0x1376	; 0x1376 <log_update>
        config_update();
     c20:	0e 94 77 01 	call	0x2ee	; 0x2ee <config_update>

        if(!eeprom_isbusy() && (!dumped))
     c24:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <eeprom_isbusy>
     c28:	89 2b       	or	r24, r25
     c2a:	b1 f7       	brne	.-20     	; 0xc18 <main+0x92>
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	9a 81       	ldd	r25, Y+2	; 0x02
     c30:	89 2b       	or	r24, r25
     c32:	91 f7       	brne	.-28     	; 0xc18 <main+0x92>
        {
            dump_eeprom(0, 0x100);
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	71 e0       	ldi	r23, 0x01	; 1
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <dump_eeprom>
            dumped=1;
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	9a 83       	std	Y+2, r25	; 0x02
     c46:	89 83       	std	Y+1, r24	; 0x01
        }
    }
     c48:	e7 cf       	rjmp	.-50     	; 0xc18 <main+0x92>

00000c4a <timer1_init>:
#define OCIE1A 1

#define I_SREG 7
static volatile unsigned long count = 0;

void timer1_init() {
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	00 d0       	rcall	.+0      	; 0xc50 <timer1_init+0x6>
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
    // Example: (16,000,000 / 1024 / 15625) = 1 Hz

    /*
    unsigned int PRESCALER_VALUE = 1024;
    */
    unsigned int COMPARE_VALUE = 15625;  //16 bit max value = 2^16 - 65535
     c54:	89 e0       	ldi	r24, 0x09	; 9
     c56:	9d e3       	ldi	r25, 0x3D	; 61
     c58:	9a 83       	std	Y+2, r25	; 0x02
     c5a:	89 83       	std	Y+1, r24	; 0x01

    // Set CTC mode
    TCCR1B |= (1 << WGM12); // WGM12
     c5c:	81 e8       	ldi	r24, 0x81	; 129
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	21 e8       	ldi	r18, 0x81	; 129
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	f9 01       	movw	r30, r18
     c66:	20 81       	ld	r18, Z
     c68:	28 60       	ori	r18, 0x08	; 8
     c6a:	fc 01       	movw	r30, r24
     c6c:	20 83       	st	Z, r18

    // Set clock divisor (prescaler value = 1024)
    TCCR1B |= (1 << CS12) | (1 << CS10); // CS12 and CS10
     c6e:	81 e8       	ldi	r24, 0x81	; 129
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	21 e8       	ldi	r18, 0x81	; 129
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	f9 01       	movw	r30, r18
     c78:	20 81       	ld	r18, Z
     c7a:	25 60       	ori	r18, 0x05	; 5
     c7c:	fc 01       	movw	r30, r24
     c7e:	20 83       	st	Z, r18

    // Set compare value
    OCR1A = COMPARE_VALUE - 1;
     c80:	88 e8       	ldi	r24, 0x88	; 136
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	29 81       	ldd	r18, Y+1	; 0x01
     c86:	3a 81       	ldd	r19, Y+2	; 0x02
     c88:	21 50       	subi	r18, 0x01	; 1
     c8a:	31 09       	sbc	r19, r1
     c8c:	fc 01       	movw	r30, r24
     c8e:	31 83       	std	Z+1, r19	; 0x01
     c90:	20 83       	st	Z, r18

    // Enable interrupts on output compare A
    TIMSK1 |= (1 << OCIE1A); // OCIE1A
     c92:	8f e6       	ldi	r24, 0x6F	; 111
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	2f e6       	ldi	r18, 0x6F	; 111
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	f9 01       	movw	r30, r18
     c9c:	20 81       	ld	r18, Z
     c9e:	22 60       	ori	r18, 0x02	; 2
     ca0:	fc 01       	movw	r30, r24
     ca2:	20 83       	st	Z, r18

    // Enable global interrupts
    // __builtin_avr_sei();
    SREG |= (1<<I_SREG);
     ca4:	8f e5       	ldi	r24, 0x5F	; 95
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	2f e5       	ldi	r18, 0x5F	; 95
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	f9 01       	movw	r30, r18
     cae:	20 81       	ld	r18, Z
     cb0:	20 68       	ori	r18, 0x80	; 128
     cb2:	fc 01       	movw	r30, r24
     cb4:	20 83       	st	Z, r18
}
     cb6:	00 00       	nop
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	08 95       	ret

00000cc2 <timer1_get>:

unsigned long timer1_get() {
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <timer1_get+0x6>
     cc8:	00 d0       	rcall	.+0      	; 0xcca <timer1_get+0x8>
     cca:	00 d0       	rcall	.+0      	; 0xccc <timer1_get+0xa>
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
    unsigned long count_value;

    // Get global interrupt enable bit state
    unsigned int sreg_state = SREG & (1 << I_SREG);
     cd0:	8f e5       	ldi	r24, 0x5F	; 95
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	fc 01       	movw	r30, r24
     cd6:	80 81       	ld	r24, Z
     cd8:	88 2f       	mov	r24, r24
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	80 78       	andi	r24, 0x80	; 128
     cde:	99 27       	eor	r25, r25
     ce0:	9a 83       	std	Y+2, r25	; 0x02
     ce2:	89 83       	std	Y+1, r24	; 0x01

    // Disable interrupts
    // __builtin_avr_cli();
    SREG &= ~(1<<I_SREG);
     ce4:	8f e5       	ldi	r24, 0x5F	; 95
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	2f e5       	ldi	r18, 0x5F	; 95
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	f9 01       	movw	r30, r18
     cee:	20 81       	ld	r18, Z
     cf0:	2f 77       	andi	r18, 0x7F	; 127
     cf2:	fc 01       	movw	r30, r24
     cf4:	20 83       	st	Z, r18

    // Get the count value
    count_value = count;
     cf6:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <count>
     cfa:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <count+0x1>
     cfe:	a0 91 de 01 	lds	r26, 0x01DE	; 0x8001de <count+0x2>
     d02:	b0 91 df 01 	lds	r27, 0x01DF	; 0x8001df <count+0x3>
     d06:	8b 83       	std	Y+3, r24	; 0x03
     d08:	9c 83       	std	Y+4, r25	; 0x04
     d0a:	ad 83       	std	Y+5, r26	; 0x05
     d0c:	be 83       	std	Y+6, r27	; 0x06

    // Restore global interrupt state
    if (sreg_state) {
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	9a 81       	ldd	r25, Y+2	; 0x02
     d12:	89 2b       	or	r24, r25
     d14:	49 f0       	breq	.+18     	; 0xd28 <timer1_get+0x66>
        // __builtin_avr_sei();
        SREG |= (1<<I_SREG);
     d16:	8f e5       	ldi	r24, 0x5F	; 95
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	2f e5       	ldi	r18, 0x5F	; 95
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	f9 01       	movw	r30, r18
     d20:	20 81       	ld	r18, Z
     d22:	20 68       	ori	r18, 0x80	; 128
     d24:	fc 01       	movw	r30, r24
     d26:	20 83       	st	Z, r18
    }

    // Return the count value
    return count_value;
     d28:	8b 81       	ldd	r24, Y+3	; 0x03
     d2a:	9c 81       	ldd	r25, Y+4	; 0x04
     d2c:	ad 81       	ldd	r26, Y+5	; 0x05
     d2e:	be 81       	ldd	r27, Y+6	; 0x06
}
     d30:	bc 01       	movw	r22, r24
     d32:	cd 01       	movw	r24, r26
     d34:	26 96       	adiw	r28, 0x06	; 6
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	08 95       	ret

00000d46 <timer1_clear>:

void timer1_clear() {
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	00 d0       	rcall	.+0      	; 0xd4c <timer1_clear+0x6>
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
    // Get global interrupt enable bit state
    unsigned int sreg_state = SREG & (1 << I_SREG);
     d50:	8f e5       	ldi	r24, 0x5F	; 95
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	fc 01       	movw	r30, r24
     d56:	80 81       	ld	r24, Z
     d58:	88 2f       	mov	r24, r24
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	80 78       	andi	r24, 0x80	; 128
     d5e:	99 27       	eor	r25, r25
     d60:	9a 83       	std	Y+2, r25	; 0x02
     d62:	89 83       	std	Y+1, r24	; 0x01

    // Disable interrupts
    // __builtin_avr_cli();
    SREG &= ~(1<<I_SREG);
     d64:	8f e5       	ldi	r24, 0x5F	; 95
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	2f e5       	ldi	r18, 0x5F	; 95
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	f9 01       	movw	r30, r18
     d6e:	20 81       	ld	r18, Z
     d70:	2f 77       	andi	r18, 0x7F	; 127
     d72:	fc 01       	movw	r30, r24
     d74:	20 83       	st	Z, r18

    // Clear count value
    count = 0;
     d76:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <count>
     d7a:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <count+0x1>
     d7e:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <count+0x2>
     d82:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <count+0x3>

    // Restore global interrupt state
    if (sreg_state) {
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02
     d8a:	89 2b       	or	r24, r25
     d8c:	49 f0       	breq	.+18     	; 0xda0 <timer1_clear+0x5a>
        // __builtin_avr_sei();
        SREG |= (1<<I_SREG);
     d8e:	8f e5       	ldi	r24, 0x5F	; 95
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	2f e5       	ldi	r18, 0x5F	; 95
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	f9 01       	movw	r30, r18
     d98:	20 81       	ld	r18, Z
     d9a:	20 68       	ori	r18, 0x80	; 128
     d9c:	fc 01       	movw	r30, r24
     d9e:	20 83       	st	Z, r18
    }
}
     da0:	00 00       	nop
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	08 95       	ret

00000dac <__vector_11>:


void __vector_11(void) __attribute__ ((signal, used, externally_visible));

void __vector_11(void)
{
     dac:	1f 92       	push	r1
     dae:	0f 92       	push	r0
     db0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     db4:	0f 92       	push	r0
     db6:	11 24       	eor	r1, r1
     db8:	8f 93       	push	r24
     dba:	9f 93       	push	r25
     dbc:	af 93       	push	r26
     dbe:	bf 93       	push	r27
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
    // Increment the count by 1
    count++;
     dc8:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <count>
     dcc:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <count+0x1>
     dd0:	a0 91 de 01 	lds	r26, 0x01DE	; 0x8001de <count+0x2>
     dd4:	b0 91 df 01 	lds	r27, 0x01DF	; 0x8001df <count+0x3>
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	a1 1d       	adc	r26, r1
     ddc:	b1 1d       	adc	r27, r1
     dde:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <count>
     de2:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <count+0x1>
     de6:	a0 93 de 01 	sts	0x01DE, r26	; 0x8001de <count+0x2>
     dea:	b0 93 df 01 	sts	0x01DF, r27	; 0x8001df <count+0x3>
}
     dee:	00 00       	nop
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	bf 91       	pop	r27
     df6:	af 91       	pop	r26
     df8:	9f 91       	pop	r25
     dfa:	8f 91       	pop	r24
     dfc:	0f 90       	pop	r0
     dfe:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e02:	0f 90       	pop	r0
     e04:	1f 90       	pop	r1
     e06:	18 95       	reti

00000e08 <calc_checksum>:
#define SREG    *((volatile char*) 0x5F)

#define C_SREG 0

unsigned char calc_checksum(unsigned char *data, unsigned int dsize)
{
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	27 97       	sbiw	r28, 0x07	; 7
     e12:	0f b6       	in	r0, 0x3f	; 63
     e14:	f8 94       	cli
     e16:	de bf       	out	0x3e, r29	; 62
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	cd bf       	out	0x3d, r28	; 61
     e1c:	9d 83       	std	Y+5, r25	; 0x05
     e1e:	8c 83       	std	Y+4, r24	; 0x04
     e20:	7f 83       	std	Y+7, r23	; 0x07
     e22:	6e 83       	std	Y+6, r22	; 0x06
    //Storing checksum result in unsigned byte
    unsigned char checksum_result;

    for(int i=0;i<dsize;i++)
     e24:	1b 82       	std	Y+3, r1	; 0x03
     e26:	1a 82       	std	Y+2, r1	; 0x02
     e28:	1e c0       	rjmp	.+60     	; 0xe66 <calc_checksum+0x5e>
    {
        checksum_result += data[i];
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	9b 81       	ldd	r25, Y+3	; 0x03
     e2e:	2c 81       	ldd	r18, Y+4	; 0x04
     e30:	3d 81       	ldd	r19, Y+5	; 0x05
     e32:	82 0f       	add	r24, r18
     e34:	93 1f       	adc	r25, r19
     e36:	fc 01       	movw	r30, r24
     e38:	80 81       	ld	r24, Z
     e3a:	99 81       	ldd	r25, Y+1	; 0x01
     e3c:	89 0f       	add	r24, r25
     e3e:	89 83       	std	Y+1, r24	; 0x01
        if(SREG & (1<<C_SREG))
     e40:	8f e5       	ldi	r24, 0x5F	; 95
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	fc 01       	movw	r30, r24
     e46:	80 81       	ld	r24, Z
     e48:	08 2e       	mov	r0, r24
     e4a:	00 0c       	add	r0, r0
     e4c:	99 0b       	sbc	r25, r25
     e4e:	81 70       	andi	r24, 0x01	; 1
     e50:	99 27       	eor	r25, r25
     e52:	89 2b       	or	r24, r25
     e54:	19 f0       	breq	.+6      	; 0xe5c <calc_checksum+0x54>
        {
            //carry wraparound
            checksum_result+=1;
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	8f 5f       	subi	r24, 0xFF	; 255
     e5a:	89 83       	std	Y+1, r24	; 0x01
unsigned char calc_checksum(unsigned char *data, unsigned int dsize)
{
    //Storing checksum result in unsigned byte
    unsigned char checksum_result;

    for(int i=0;i<dsize;i++)
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	9b 81       	ldd	r25, Y+3	; 0x03
     e60:	01 96       	adiw	r24, 0x01	; 1
     e62:	9b 83       	std	Y+3, r25	; 0x03
     e64:	8a 83       	std	Y+2, r24	; 0x02
     e66:	2a 81       	ldd	r18, Y+2	; 0x02
     e68:	3b 81       	ldd	r19, Y+3	; 0x03
     e6a:	8e 81       	ldd	r24, Y+6	; 0x06
     e6c:	9f 81       	ldd	r25, Y+7	; 0x07
     e6e:	28 17       	cp	r18, r24
     e70:	39 07       	cpc	r19, r25
     e72:	d8 f2       	brcs	.-74     	; 0xe2a <calc_checksum+0x22>
            checksum_result+=1;
        }

    }

    return ~checksum_result;
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	80 95       	com	r24

}
     e78:	27 96       	adiw	r28, 0x07	; 7
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	cd bf       	out	0x3d, r28	; 61
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	08 95       	ret

00000e8a <update_checksum>:

void update_checksum(unsigned char *data, unsigned int dsize)
{
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	00 d0       	rcall	.+0      	; 0xe90 <update_checksum+0x6>
     e90:	00 d0       	rcall	.+0      	; 0xe92 <update_checksum+0x8>
     e92:	00 d0       	rcall	.+0      	; 0xe94 <update_checksum+0xa>
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	9c 83       	std	Y+4, r25	; 0x04
     e9a:	8b 83       	std	Y+3, r24	; 0x03
     e9c:	7e 83       	std	Y+6, r23	; 0x06
     e9e:	6d 83       	std	Y+5, r22	; 0x05
    unsigned char checksum_val = calc_checksum(data, dsize);
     ea0:	2d 81       	ldd	r18, Y+5	; 0x05
     ea2:	3e 81       	ldd	r19, Y+6	; 0x06
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	9c 81       	ldd	r25, Y+4	; 0x04
     ea8:	b9 01       	movw	r22, r18
     eaa:	0e 94 04 07 	call	0xe08	; 0xe08 <calc_checksum>
     eae:	89 83       	std	Y+1, r24	; 0x01
    unsigned char last_byte = 0b11111111 + (~checksum_val + 0b00000001);
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	80 95       	com	r24
     eb4:	8a 83       	std	Y+2, r24	; 0x02
    data[dsize-1]=last_byte;
     eb6:	8d 81       	ldd	r24, Y+5	; 0x05
     eb8:	9e 81       	ldd	r25, Y+6	; 0x06
     eba:	01 97       	sbiw	r24, 0x01	; 1
     ebc:	2b 81       	ldd	r18, Y+3	; 0x03
     ebe:	3c 81       	ldd	r19, Y+4	; 0x04
     ec0:	82 0f       	add	r24, r18
     ec2:	93 1f       	adc	r25, r19
     ec4:	2a 81       	ldd	r18, Y+2	; 0x02
     ec6:	fc 01       	movw	r30, r24
     ec8:	20 83       	st	Z, r18
}
     eca:	00 00       	nop
     ecc:	26 96       	adiw	r28, 0x06	; 6
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	de bf       	out	0x3e, r29	; 62
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	cd bf       	out	0x3d, r28	; 61
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	08 95       	ret

00000ede <is_checksum_valid>:


int is_checksum_valid(unsigned char* data, unsigned int dsize)
{
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	00 d0       	rcall	.+0      	; 0xee4 <is_checksum_valid+0x6>
     ee4:	00 d0       	rcall	.+0      	; 0xee6 <is_checksum_valid+0x8>
     ee6:	1f 92       	push	r1
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	9b 83       	std	Y+3, r25	; 0x03
     eee:	8a 83       	std	Y+2, r24	; 0x02
     ef0:	7d 83       	std	Y+5, r23	; 0x05
     ef2:	6c 83       	std	Y+4, r22	; 0x04
    unsigned char checksum_val = calc_checksum(data, dsize);
     ef4:	2c 81       	ldd	r18, Y+4	; 0x04
     ef6:	3d 81       	ldd	r19, Y+5	; 0x05
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	9b 81       	ldd	r25, Y+3	; 0x03
     efc:	b9 01       	movw	r22, r18
     efe:	0e 94 04 07 	call	0xe08	; 0xe08 <calc_checksum>
     f02:	89 83       	std	Y+1, r24	; 0x01

    if(checksum_val==0)
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	88 23       	and	r24, r24
     f08:	19 f4       	brne	.+6      	; 0xf10 <is_checksum_valid+0x32>
        return 1;
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <is_checksum_valid+0x36>
    else
        return 0;
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	90 e0       	ldi	r25, 0x00	; 0
}
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	08 95       	ret

00000f24 <compare>:


//vpd_struct vpd_defaults = {"SER", "Venkata", "Kanaka", "pqrs1234", 0, {0x56,0x45, 0x4E, 0x4B, 0x41, 0x4E}, "USA", 0};

int compare(char a[],char b[])
{
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	28 97       	sbiw	r28, 0x08	; 8
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	9e 83       	std	Y+6, r25	; 0x06
     f3a:	8d 83       	std	Y+5, r24	; 0x05
     f3c:	78 87       	std	Y+8, r23	; 0x08
     f3e:	6f 83       	std	Y+7, r22	; 0x07
    int flag=0,i=0;  // integer variables declaration
     f40:	1a 82       	std	Y+2, r1	; 0x02
     f42:	19 82       	std	Y+1, r1	; 0x01
     f44:	1c 82       	std	Y+4, r1	; 0x04
     f46:	1b 82       	std	Y+3, r1	; 0x03
    while(a[i]!='\0' &&b[i]!='\0')  // while loop
     f48:	1c c0       	rjmp	.+56     	; 0xf82 <compare+0x5e>
    {
       if(a[i]!=b[i])
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	9c 81       	ldd	r25, Y+4	; 0x04
     f4e:	2d 81       	ldd	r18, Y+5	; 0x05
     f50:	3e 81       	ldd	r19, Y+6	; 0x06
     f52:	82 0f       	add	r24, r18
     f54:	93 1f       	adc	r25, r19
     f56:	fc 01       	movw	r30, r24
     f58:	40 81       	ld	r20, Z
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	9c 81       	ldd	r25, Y+4	; 0x04
     f5e:	2f 81       	ldd	r18, Y+7	; 0x07
     f60:	38 85       	ldd	r19, Y+8	; 0x08
     f62:	82 0f       	add	r24, r18
     f64:	93 1f       	adc	r25, r19
     f66:	fc 01       	movw	r30, r24
     f68:	80 81       	ld	r24, Z
     f6a:	48 17       	cp	r20, r24
     f6c:	29 f0       	breq	.+10     	; 0xf78 <compare+0x54>
       {
           flag=1;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	9a 83       	std	Y+2, r25	; 0x02
     f74:	89 83       	std	Y+1, r24	; 0x01
           break;
     f76:	19 c0       	rjmp	.+50     	; 0xfaa <compare+0x86>
       }
       i++;
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	9c 81       	ldd	r25, Y+4	; 0x04
     f7c:	01 96       	adiw	r24, 0x01	; 1
     f7e:	9c 83       	std	Y+4, r25	; 0x04
     f80:	8b 83       	std	Y+3, r24	; 0x03
//vpd_struct vpd_defaults = {"SER", "Venkata", "Kanaka", "pqrs1234", 0, {0x56,0x45, 0x4E, 0x4B, 0x41, 0x4E}, "USA", 0};

int compare(char a[],char b[])
{
    int flag=0,i=0;  // integer variables declaration
    while(a[i]!='\0' &&b[i]!='\0')  // while loop
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	9c 81       	ldd	r25, Y+4	; 0x04
     f86:	2d 81       	ldd	r18, Y+5	; 0x05
     f88:	3e 81       	ldd	r19, Y+6	; 0x06
     f8a:	82 0f       	add	r24, r18
     f8c:	93 1f       	adc	r25, r19
     f8e:	fc 01       	movw	r30, r24
     f90:	80 81       	ld	r24, Z
     f92:	88 23       	and	r24, r24
     f94:	51 f0       	breq	.+20     	; 0xfaa <compare+0x86>
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	9c 81       	ldd	r25, Y+4	; 0x04
     f9a:	2f 81       	ldd	r18, Y+7	; 0x07
     f9c:	38 85       	ldd	r19, Y+8	; 0x08
     f9e:	82 0f       	add	r24, r18
     fa0:	93 1f       	adc	r25, r19
     fa2:	fc 01       	movw	r30, r24
     fa4:	80 81       	ld	r24, Z
     fa6:	88 23       	and	r24, r24
     fa8:	81 f6       	brne	.-96     	; 0xf4a <compare+0x26>
           flag=1;
           break;
       }
       i++;
    }
    if(flag==0)
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
     fae:	89 2b       	or	r24, r25
     fb0:	19 f4       	brne	.+6      	; 0xfb8 <compare+0x94>
    return 0;
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <compare+0x98>
    else
    return 1;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
}
     fbc:	28 96       	adiw	r28, 0x08	; 8
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	08 95       	ret

00000fce <vpd_init>:

void vpd_init()
{
     fce:	ef 92       	push	r14
     fd0:	ff 92       	push	r15
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	2e 97       	sbiw	r28, 0x0e	; 14
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	f8 94       	cli
     fe4:	de bf       	out	0x3e, r29	; 62
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	cd bf       	out	0x3d, r28	; 61
        {
            p[i]=buf[i];
        }

    }
}
     fea:	0d b7       	in	r16, 0x3d	; 61
     fec:	1e b7       	in	r17, 0x3e	; 62
    return 1;
}

void vpd_init()
{
    while(eeprom_isbusy());  //waits for EEPROM to get out of busy state
     fee:	00 00       	nop
     ff0:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <eeprom_isbusy>
     ff4:	89 2b       	or	r24, r25
     ff6:	e1 f7       	brne	.-8      	; 0xff0 <vpd_init+0x22>

    //Read 43 bytes from 0x000
    unsigned int base_addr=0x000;
     ff8:	1e 82       	std	Y+6, r1	; 0x06
     ffa:	1d 82       	std	Y+5, r1	; 0x05
    int size = sizeof(vpd_struct);
     ffc:	87 e3       	ldi	r24, 0x37	; 55
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	98 87       	std	Y+8, r25	; 0x08
    1002:	8f 83       	std	Y+7, r24	; 0x07
    unsigned char buf[size+10];
    1004:	8f 81       	ldd	r24, Y+7	; 0x07
    1006:	98 85       	ldd	r25, Y+8	; 0x08
    1008:	0a 96       	adiw	r24, 0x0a	; 10
    100a:	2d b7       	in	r18, 0x3d	; 61
    100c:	3e b7       	in	r19, 0x3e	; 62
    100e:	79 01       	movw	r14, r18
    1010:	9c 01       	movw	r18, r24
    1012:	21 50       	subi	r18, 0x01	; 1
    1014:	31 09       	sbc	r19, r1
    1016:	3a 87       	std	Y+10, r19	; 0x0a
    1018:	29 87       	std	Y+9, r18	; 0x09
    101a:	2d b7       	in	r18, 0x3d	; 61
    101c:	3e b7       	in	r19, 0x3e	; 62
    101e:	28 1b       	sub	r18, r24
    1020:	39 0b       	sbc	r19, r25
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	3e bf       	out	0x3e, r19	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	2d bf       	out	0x3d, r18	; 61
    102c:	8d b7       	in	r24, 0x3d	; 61
    102e:	9e b7       	in	r25, 0x3e	; 62
    1030:	01 96       	adiw	r24, 0x01	; 1
    1032:	9c 87       	std	Y+12, r25	; 0x0c
    1034:	8b 87       	std	Y+11, r24	; 0x0b
    unsigned char* p = (unsigned char*)&vpd;
    1036:	81 ed       	ldi	r24, 0xD1	; 209
    1038:	92 e0       	ldi	r25, 0x02	; 2
    103a:	9e 87       	std	Y+14, r25	; 0x0e
    103c:	8d 87       	std	Y+13, r24	; 0x0d


    eeprom_readbuf(base_addr, (unsigned char*)buf, size);
    103e:	4f 81       	ldd	r20, Y+7	; 0x07
    1040:	2b 85       	ldd	r18, Y+11	; 0x0b
    1042:	3c 85       	ldd	r19, Y+12	; 0x0c
    1044:	8d 81       	ldd	r24, Y+5	; 0x05
    1046:	9e 81       	ldd	r25, Y+6	; 0x06
    1048:	b9 01       	movw	r22, r18
    104a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <eeprom_readbuf>
    //memcpy((unsigned char*)&vpd, (unsigned char*)buf, size);

    for(int i=0;i<size;i++)
    104e:	1a 82       	std	Y+2, r1	; 0x02
    1050:	19 82       	std	Y+1, r1	; 0x01
    1052:	15 c0       	rjmp	.+42     	; 0x107e <vpd_init+0xb0>
    {
        p[i]=buf[i];
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	9a 81       	ldd	r25, Y+2	; 0x02
    1058:	2d 85       	ldd	r18, Y+13	; 0x0d
    105a:	3e 85       	ldd	r19, Y+14	; 0x0e
    105c:	82 0f       	add	r24, r18
    105e:	93 1f       	adc	r25, r19
    1060:	4b 85       	ldd	r20, Y+11	; 0x0b
    1062:	5c 85       	ldd	r21, Y+12	; 0x0c
    1064:	29 81       	ldd	r18, Y+1	; 0x01
    1066:	3a 81       	ldd	r19, Y+2	; 0x02
    1068:	24 0f       	add	r18, r20
    106a:	35 1f       	adc	r19, r21
    106c:	f9 01       	movw	r30, r18
    106e:	20 81       	ld	r18, Z
    1070:	fc 01       	movw	r30, r24
    1072:	20 83       	st	Z, r18


    eeprom_readbuf(base_addr, (unsigned char*)buf, size);
    //memcpy((unsigned char*)&vpd, (unsigned char*)buf, size);

    for(int i=0;i<size;i++)
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	9a 81       	ldd	r25, Y+2	; 0x02
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	9a 83       	std	Y+2, r25	; 0x02
    107c:	89 83       	std	Y+1, r24	; 0x01
    107e:	29 81       	ldd	r18, Y+1	; 0x01
    1080:	3a 81       	ldd	r19, Y+2	; 0x02
    1082:	8f 81       	ldd	r24, Y+7	; 0x07
    1084:	98 85       	ldd	r25, Y+8	; 0x08
    1086:	28 17       	cp	r18, r24
    1088:	39 07       	cpc	r19, r25
    108a:	24 f3       	brlt	.-56     	; 0x1054 <vpd_init+0x86>
    }


    //eeprom_readbuf(base_addr, (unsigned char*)&vpd, size);

    if(!vpd_is_data_valid())
    108c:	0e 94 8b 08 	call	0x1116	; 0x1116 <vpd_is_data_valid>
    1090:	89 2b       	or	r24, r25
    1092:	49 f5       	brne	.+82     	; 0x10e6 <vpd_init+0x118>
    {
        vpd_write_defaults();
    1094:	0e 94 a7 08 	call	0x114e	; 0x114e <vpd_write_defaults>

        //Initialize data by reading default values
        eeprom_readbuf(base_addr, (unsigned char*)buf, size);
    1098:	4f 81       	ldd	r20, Y+7	; 0x07
    109a:	2b 85       	ldd	r18, Y+11	; 0x0b
    109c:	3c 85       	ldd	r19, Y+12	; 0x0c
    109e:	8d 81       	ldd	r24, Y+5	; 0x05
    10a0:	9e 81       	ldd	r25, Y+6	; 0x06
    10a2:	b9 01       	movw	r22, r18
    10a4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <eeprom_readbuf>
        //memcpy((unsigned char*)&vpd, buf, size);
        for(int i=0;i<size;i++)
    10a8:	1c 82       	std	Y+4, r1	; 0x04
    10aa:	1b 82       	std	Y+3, r1	; 0x03
    10ac:	15 c0       	rjmp	.+42     	; 0x10d8 <vpd_init+0x10a>
        {
            p[i]=buf[i];
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	2d 85       	ldd	r18, Y+13	; 0x0d
    10b4:	3e 85       	ldd	r19, Y+14	; 0x0e
    10b6:	82 0f       	add	r24, r18
    10b8:	93 1f       	adc	r25, r19
    10ba:	4b 85       	ldd	r20, Y+11	; 0x0b
    10bc:	5c 85       	ldd	r21, Y+12	; 0x0c
    10be:	2b 81       	ldd	r18, Y+3	; 0x03
    10c0:	3c 81       	ldd	r19, Y+4	; 0x04
    10c2:	24 0f       	add	r18, r20
    10c4:	35 1f       	adc	r19, r21
    10c6:	f9 01       	movw	r30, r18
    10c8:	20 81       	ld	r18, Z
    10ca:	fc 01       	movw	r30, r24
    10cc:	20 83       	st	Z, r18
        vpd_write_defaults();

        //Initialize data by reading default values
        eeprom_readbuf(base_addr, (unsigned char*)buf, size);
        //memcpy((unsigned char*)&vpd, buf, size);
        for(int i=0;i<size;i++)
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	9c 81       	ldd	r25, Y+4	; 0x04
    10d2:	01 96       	adiw	r24, 0x01	; 1
    10d4:	9c 83       	std	Y+4, r25	; 0x04
    10d6:	8b 83       	std	Y+3, r24	; 0x03
    10d8:	2b 81       	ldd	r18, Y+3	; 0x03
    10da:	3c 81       	ldd	r19, Y+4	; 0x04
    10dc:	8f 81       	ldd	r24, Y+7	; 0x07
    10de:	98 85       	ldd	r25, Y+8	; 0x08
    10e0:	28 17       	cp	r18, r24
    10e2:	39 07       	cpc	r19, r25
    10e4:	24 f3       	brlt	.-56     	; 0x10ae <vpd_init+0xe0>
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	fe be       	out	0x3e, r15	; 62
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	ed be       	out	0x3d, r14	; 61
        {
            p[i]=buf[i];
        }

    }
}
    10f0:	00 00       	nop
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	1e bf       	out	0x3e, r17	; 62
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	0d bf       	out	0x3d, r16	; 61
    10fc:	2e 96       	adiw	r28, 0x0e	; 14
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	1f 91       	pop	r17
    110e:	0f 91       	pop	r16
    1110:	ff 90       	pop	r15
    1112:	ef 90       	pop	r14
    1114:	08 95       	ret

00001116 <vpd_is_data_valid>:

int vpd_is_data_valid()
{
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
    return compare(vpd.token, vpd_defaults.token) && is_checksum_valid((unsigned char*)&vpd, sizeof(vpd_struct));
    111e:	62 e1       	ldi	r22, 0x12	; 18
    1120:	71 e0       	ldi	r23, 0x01	; 1
    1122:	81 ed       	ldi	r24, 0xD1	; 209
    1124:	92 e0       	ldi	r25, 0x02	; 2
    1126:	0e 94 92 07 	call	0xf24	; 0xf24 <compare>
    112a:	89 2b       	or	r24, r25
    112c:	59 f0       	breq	.+22     	; 0x1144 <vpd_is_data_valid+0x2e>
    112e:	67 e3       	ldi	r22, 0x37	; 55
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	81 ed       	ldi	r24, 0xD1	; 209
    1134:	92 e0       	ldi	r25, 0x02	; 2
    1136:	0e 94 6f 07 	call	0xede	; 0xede <is_checksum_valid>
    113a:	89 2b       	or	r24, r25
    113c:	19 f0       	breq	.+6      	; 0x1144 <vpd_is_data_valid+0x2e>
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <vpd_is_data_valid+0x32>
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
}
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	08 95       	ret

0000114e <vpd_write_defaults>:

void vpd_write_defaults()
{
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	00 d0       	rcall	.+0      	; 0x1154 <vpd_write_defaults+0x6>
    1154:	00 d0       	rcall	.+0      	; 0x1156 <vpd_write_defaults+0x8>
    1156:	00 d0       	rcall	.+0      	; 0x1158 <vpd_write_defaults+0xa>
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    update_checksum((unsigned char*)&vpd, sizeof(vpd));
    115c:	67 e3       	ldi	r22, 0x37	; 55
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	81 ed       	ldi	r24, 0xD1	; 209
    1162:	92 e0       	ldi	r25, 0x02	; 2
    1164:	0e 94 45 07 	call	0xe8a	; 0xe8a <update_checksum>

    //Writing defaults to eeprom
    unsigned int base_addr = 0x000;
    1168:	1a 82       	std	Y+2, r1	; 0x02
    116a:	19 82       	std	Y+1, r1	; 0x01
    int size = sizeof(vpd_struct);
    116c:	87 e3       	ldi	r24, 0x37	; 55
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	9c 83       	std	Y+4, r25	; 0x04
    1172:	8b 83       	std	Y+3, r24	; 0x03
    //unsigned char buf[size+10];
    unsigned char* p = (unsigned char*)&vpd_defaults;
    1174:	82 e1       	ldi	r24, 0x12	; 18
    1176:	91 e0       	ldi	r25, 0x01	; 1
    1178:	9e 83       	std	Y+6, r25	; 0x06
    117a:	8d 83       	std	Y+5, r24	; 0x05

    //memcpy((unsigned char*)buf, (unsigned char*)&vpd_defaults, size);
    eeprom_writebuf(base_addr, p, size);
    117c:	4b 81       	ldd	r20, Y+3	; 0x03
    117e:	2d 81       	ldd	r18, Y+5	; 0x05
    1180:	3e 81       	ldd	r19, Y+6	; 0x06
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	9a 81       	ldd	r25, Y+2	; 0x02
    1186:	b9 01       	movw	r22, r18
    1188:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <eeprom_writebuf>


    //eeprom_writebuf(base_addr, (unsigned char*)&vpd, size);
}
    118c:	00 00       	nop
    118e:	26 96       	adiw	r28, 0x06	; 6
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	f8 94       	cli
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	08 95       	ret

000011a0 <log_is_data_valid>:
    11a0:	80 31       	cpi	r24, 0x10	; 16
    11a2:	91 05       	cpc	r25, r1
    11a4:	04 f5       	brge	.+64     	; 0x11e6 <log_is_data_valid+0x46>
    11a6:	27 e0       	ldi	r18, 0x07	; 7
    11a8:	28 9f       	mul	r18, r24
    11aa:	a0 01       	movw	r20, r0
    11ac:	29 9f       	mul	r18, r25
    11ae:	50 0d       	add	r21, r0
    11b0:	11 24       	eor	r1, r1
    11b2:	fa 01       	movw	r30, r20
    11b4:	ed 51       	subi	r30, 0x1D	; 29
    11b6:	fe 4f       	sbci	r31, 0xFE	; 254
    11b8:	80 81       	ld	r24, Z
    11ba:	81 32       	cpi	r24, 0x21	; 33
    11bc:	a0 f4       	brcc	.+40     	; 0x11e6 <log_is_data_valid+0x46>
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	fa 01       	movw	r30, r20
    11c6:	e8 0f       	add	r30, r24
    11c8:	f9 1f       	adc	r31, r25
    11ca:	ed 51       	subi	r30, 0x1D	; 29
    11cc:	fe 4f       	sbci	r31, 0xFE	; 254
    11ce:	30 81       	ld	r19, Z
    11d0:	23 0f       	add	r18, r19
    11d2:	01 96       	adiw	r24, 0x01	; 1
    11d4:	87 30       	cpi	r24, 0x07	; 7
    11d6:	91 05       	cpc	r25, r1
    11d8:	a9 f7       	brne	.-22     	; 0x11c4 <log_is_data_valid+0x24>
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	22 23       	and	r18, r18
    11e0:	21 f0       	breq	.+8      	; 0x11ea <log_is_data_valid+0x4a>
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	08 95       	ret
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	08 95       	ret

000011ec <log_init>:
    11ec:	6f 92       	push	r6
    11ee:	7f 92       	push	r7
    11f0:	8f 92       	push	r8
    11f2:	9f 92       	push	r9
    11f4:	af 92       	push	r10
    11f6:	bf 92       	push	r11
    11f8:	cf 92       	push	r12
    11fa:	df 92       	push	r13
    11fc:	ef 92       	push	r14
    11fe:	ff 92       	push	r15
    1200:	0f 93       	push	r16
    1202:	1f 93       	push	r17
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <eeprom_isbusy>
    120c:	89 2b       	or	r24, r25
    120e:	e1 f7       	brne	.-8      	; 0x1208 <log_init+0x1c>
    1210:	03 e5       	ldi	r16, 0x53	; 83
    1212:	12 e0       	ldi	r17, 0x02	; 2
    1214:	c0 e8       	ldi	r28, 0x80	; 128
    1216:	d0 e0       	ldi	r29, 0x00	; 0
    1218:	be 01       	movw	r22, r28
    121a:	6d 59       	subi	r22, 0x9D	; 157
    121c:	7e 4f       	sbci	r23, 0xFE	; 254
    121e:	47 e0       	ldi	r20, 0x07	; 7
    1220:	ce 01       	movw	r24, r28
    1222:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <eeprom_readbuf>
    1226:	f8 01       	movw	r30, r16
    1228:	11 92       	st	Z+, r1
    122a:	8f 01       	movw	r16, r30
    122c:	27 96       	adiw	r28, 0x07	; 7
    122e:	c0 3f       	cpi	r28, 0xF0	; 240
    1230:	d1 05       	cpc	r29, r1
    1232:	91 f7       	brne	.-28     	; 0x1218 <log_init+0x2c>
    1234:	43 ee       	ldi	r20, 0xE3	; 227
    1236:	e4 2e       	mov	r14, r20
    1238:	41 e0       	ldi	r20, 0x01	; 1
    123a:	f4 2e       	mov	r15, r20
    123c:	87 01       	movw	r16, r14
    123e:	c0 e0       	ldi	r28, 0x00	; 0
    1240:	d0 e0       	ldi	r29, 0x00	; 0
    1242:	d1 2c       	mov	r13, r1
    1244:	b1 2c       	mov	r11, r1
    1246:	77 24       	eor	r7, r7
    1248:	7a 94       	dec	r7
    124a:	ce 01       	movw	r24, r28
    124c:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <log_is_data_valid>
    1250:	89 2b       	or	r24, r25
    1252:	41 f0       	breq	.+16     	; 0x1264 <log_init+0x78>
    1254:	f8 01       	movw	r30, r16
    1256:	80 81       	ld	r24, Z
    1258:	87 15       	cp	r24, r7
    125a:	20 f4       	brcc	.+8      	; 0x1264 <log_init+0x78>
    125c:	bc 2e       	mov	r11, r28
    125e:	78 2e       	mov	r7, r24
    1260:	dd 24       	eor	r13, r13
    1262:	d3 94       	inc	r13
    1264:	21 96       	adiw	r28, 0x01	; 1
    1266:	09 5f       	subi	r16, 0xF9	; 249
    1268:	1f 4f       	sbci	r17, 0xFF	; 255
    126a:	c0 31       	cpi	r28, 0x10	; 16
    126c:	d1 05       	cpc	r29, r1
    126e:	69 f7       	brne	.-38     	; 0x124a <log_init+0x5e>
    1270:	dd 20       	and	r13, r13
    1272:	09 f4       	brne	.+2      	; 0x1276 <log_init+0x8a>
    1274:	6a c0       	rjmp	.+212    	; 0x134a <log_init+0x15e>
    1276:	b0 92 e2 01 	sts	0x01E2, r11	; 0x8001e2 <last_written>
    127a:	70 92 e1 01 	sts	0x01E1, r7	; 0x8001e1 <last_transaction_written>
    127e:	cb 2d       	mov	r28, r11
    1280:	d0 e0       	ldi	r29, 0x00	; 0
    1282:	8e 01       	movw	r16, r28
    1284:	0f 5f       	subi	r16, 0xFF	; 255
    1286:	1f 4f       	sbci	r17, 0xFF	; 255
    1288:	87 2c       	mov	r8, r7
    128a:	2f e0       	ldi	r18, 0x0F	; 15
    128c:	a2 2e       	mov	r10, r18
    128e:	37 e0       	ldi	r19, 0x07	; 7
    1290:	93 2e       	mov	r9, r19
    1292:	68 01       	movw	r12, r16
    1294:	ff e0       	ldi	r31, 0x0F	; 15
    1296:	cf 22       	and	r12, r31
    1298:	dd 24       	eor	r13, r13
    129a:	c6 01       	movw	r24, r12
    129c:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <log_is_data_valid>
    12a0:	89 2b       	or	r24, r25
    12a2:	61 f4       	brne	.+24     	; 0x12bc <log_init+0xd0>
    12a4:	b0 92 e0 01 	sts	0x01E0, r11	; 0x8001e0 <tail>
    12a8:	8e 01       	movw	r16, r28
    12aa:	01 50       	subi	r16, 0x01	; 1
    12ac:	11 09       	sbc	r17, r1
    12ae:	60 97       	sbiw	r28, 0x10	; 16
    12b0:	80 e1       	ldi	r24, 0x10	; 16
    12b2:	a8 2e       	mov	r10, r24
    12b4:	b1 2c       	mov	r11, r1
    12b6:	97 e0       	ldi	r25, 0x07	; 7
    12b8:	69 2e       	mov	r6, r25
    12ba:	3a c0       	rjmp	.+116    	; 0x1330 <log_init+0x144>
    12bc:	9c 9c       	mul	r9, r12
    12be:	f0 01       	movw	r30, r0
    12c0:	9d 9c       	mul	r9, r13
    12c2:	f0 0d       	add	r31, r0
    12c4:	11 24       	eor	r1, r1
    12c6:	ed 51       	subi	r30, 0x1D	; 29
    12c8:	fe 4f       	sbci	r31, 0xFE	; 254
    12ca:	40 81       	ld	r20, Z
    12cc:	24 2f       	mov	r18, r20
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	88 2d       	mov	r24, r8
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	01 96       	adiw	r24, 0x01	; 1
    12d6:	8f 71       	andi	r24, 0x1F	; 31
    12d8:	99 27       	eor	r25, r25
    12da:	28 17       	cp	r18, r24
    12dc:	39 07       	cpc	r19, r25
    12de:	11 f7       	brne	.-60     	; 0x12a4 <log_init+0xb8>
    12e0:	c0 92 e2 01 	sts	0x01E2, r12	; 0x8001e2 <last_written>
    12e4:	40 93 e1 01 	sts	0x01E1, r20	; 0x8001e1 <last_transaction_written>
    12e8:	aa 94       	dec	r10
    12ea:	0f 5f       	subi	r16, 0xFF	; 255
    12ec:	1f 4f       	sbci	r17, 0xFF	; 255
    12ee:	aa 20       	and	r10, r10
    12f0:	c9 f2       	breq	.-78     	; 0x12a4 <log_init+0xb8>
    12f2:	84 2e       	mov	r8, r20
    12f4:	ce cf       	rjmp	.-100    	; 0x1292 <log_init+0xa6>
    12f6:	f7 01       	movw	r30, r14
    12f8:	20 81       	ld	r18, Z
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	87 2d       	mov	r24, r7
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	4f 96       	adiw	r24, 0x1f	; 31
    1302:	8f 71       	andi	r24, 0x1F	; 31
    1304:	99 27       	eor	r25, r25
    1306:	28 17       	cp	r18, r24
    1308:	39 07       	cpc	r19, r25
    130a:	31 f5       	brne	.+76     	; 0x1358 <log_init+0x16c>
    130c:	c0 92 e0 01 	sts	0x01E0, r12	; 0x8001e0 <tail>
    1310:	68 9c       	mul	r6, r8
    1312:	f0 01       	movw	r30, r0
    1314:	69 9c       	mul	r6, r9
    1316:	f0 0d       	add	r31, r0
    1318:	11 24       	eor	r1, r1
    131a:	ed 51       	subi	r30, 0x1D	; 29
    131c:	fe 4f       	sbci	r31, 0xFE	; 254
    131e:	70 80       	ld	r7, Z
    1320:	01 50       	subi	r16, 0x01	; 1
    1322:	11 09       	sbc	r17, r1
    1324:	f7 e0       	ldi	r31, 0x07	; 7
    1326:	ef 0e       	add	r14, r31
    1328:	f1 1c       	adc	r15, r1
    132a:	0c 17       	cp	r16, r28
    132c:	1d 07       	cpc	r17, r29
    132e:	a1 f0       	breq	.+40     	; 0x1358 <log_init+0x16c>
    1330:	c8 01       	movw	r24, r16
    1332:	b5 01       	movw	r22, r10
    1334:	0e 94 15 14 	call	0x282a	; 0x282a <__divmodhi4>
    1338:	6c 01       	movw	r12, r24
    133a:	4c 01       	movw	r8, r24
    133c:	99 24       	eor	r9, r9
    133e:	c4 01       	movw	r24, r8
    1340:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <log_is_data_valid>
    1344:	89 2b       	or	r24, r25
    1346:	b9 f6       	brne	.-82     	; 0x12f6 <log_init+0x10a>
    1348:	07 c0       	rjmp	.+14     	; 0x1358 <log_init+0x16c>
    134a:	8f e0       	ldi	r24, 0x0F	; 15
    134c:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <last_written>
    1350:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <last_transaction_written>
    1354:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <tail>
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	1f 91       	pop	r17
    135e:	0f 91       	pop	r16
    1360:	ff 90       	pop	r15
    1362:	ef 90       	pop	r14
    1364:	df 90       	pop	r13
    1366:	cf 90       	pop	r12
    1368:	bf 90       	pop	r11
    136a:	af 90       	pop	r10
    136c:	9f 90       	pop	r9
    136e:	8f 90       	pop	r8
    1370:	7f 90       	pop	r7
    1372:	6f 90       	pop	r6
    1374:	08 95       	ret

00001376 <log_update>:
    1376:	ef 92       	push	r14
    1378:	ff 92       	push	r15
    137a:	1f 93       	push	r17
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <eeprom_isbusy>
    1384:	89 2b       	or	r24, r25
    1386:	39 f5       	brne	.+78     	; 0x13d6 <log_update+0x60>
    1388:	e3 e5       	ldi	r30, 0x53	; 83
    138a:	f2 e0       	ldi	r31, 0x02	; 2
    138c:	c0 e0       	ldi	r28, 0x00	; 0
    138e:	d0 e0       	ldi	r29, 0x00	; 0
    1390:	81 91       	ld	r24, Z+
    1392:	88 23       	and	r24, r24
    1394:	e1 f0       	breq	.+56     	; 0x13ce <log_update+0x58>
    1396:	17 e0       	ldi	r17, 0x07	; 7
    1398:	1c 9f       	mul	r17, r28
    139a:	c0 01       	movw	r24, r0
    139c:	1d 9f       	mul	r17, r29
    139e:	90 0d       	add	r25, r0
    13a0:	11 24       	eor	r1, r1
    13a2:	9c 01       	movw	r18, r24
    13a4:	2d 51       	subi	r18, 0x1D	; 29
    13a6:	3e 4f       	sbci	r19, 0xFE	; 254
    13a8:	79 01       	movw	r14, r18
    13aa:	67 e0       	ldi	r22, 0x07	; 7
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	c9 01       	movw	r24, r18
    13b0:	0e 94 45 07 	call	0xe8a	; 0xe8a <update_checksum>
    13b4:	c1 9f       	mul	r28, r17
    13b6:	c0 01       	movw	r24, r0
    13b8:	11 24       	eor	r1, r1
    13ba:	47 e0       	ldi	r20, 0x07	; 7
    13bc:	b7 01       	movw	r22, r14
    13be:	80 58       	subi	r24, 0x80	; 128
    13c0:	9f 4f       	sbci	r25, 0xFF	; 255
    13c2:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <eeprom_writebuf>
    13c6:	cd 5a       	subi	r28, 0xAD	; 173
    13c8:	dd 4f       	sbci	r29, 0xFD	; 253
    13ca:	18 82       	st	Y, r1
    13cc:	04 c0       	rjmp	.+8      	; 0x13d6 <log_update+0x60>
    13ce:	21 96       	adiw	r28, 0x01	; 1
    13d0:	c0 31       	cpi	r28, 0x10	; 16
    13d2:	d1 05       	cpc	r29, r1
    13d4:	e9 f6       	brne	.-70     	; 0x1390 <log_update+0x1a>
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	1f 91       	pop	r17
    13dc:	ff 90       	pop	r15
    13de:	ef 90       	pop	r14
    13e0:	08 95       	ret

000013e2 <log_add_record>:
    13e2:	ef 92       	push	r14
    13e4:	ff 92       	push	r15
    13e6:	0f 93       	push	r16
    13e8:	1f 93       	push	r17
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    13ee:	e8 2e       	mov	r14, r24
    13f0:	c0 91 e2 01 	lds	r28, 0x01E2	; 0x8001e2 <last_written>
    13f4:	d0 e0       	ldi	r29, 0x00	; 0
    13f6:	21 96       	adiw	r28, 0x01	; 1
    13f8:	cf 70       	andi	r28, 0x0F	; 15
    13fa:	dd 27       	eor	r29, r29
    13fc:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <tail>
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <log_is_data_valid>
    1406:	f8 2e       	mov	r15, r24
    1408:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <last_transaction_written>
    140c:	8f 5f       	subi	r24, 0xFF	; 255
    140e:	81 32       	cpi	r24, 0x21	; 33
    1410:	18 f4       	brcc	.+6      	; 0x1418 <log_add_record+0x36>
    1412:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <last_transaction_written>
    1416:	02 c0       	rjmp	.+4      	; 0x141c <log_add_record+0x3a>
    1418:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <last_transaction_written>
    141c:	87 e0       	ldi	r24, 0x07	; 7
    141e:	8c 9f       	mul	r24, r28
    1420:	80 01       	movw	r16, r0
    1422:	8d 9f       	mul	r24, r29
    1424:	10 0d       	add	r17, r0
    1426:	11 24       	eor	r1, r1
    1428:	0d 51       	subi	r16, 0x1D	; 29
    142a:	1e 4f       	sbci	r17, 0xFE	; 254
    142c:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <last_transaction_written>
    1430:	f8 01       	movw	r30, r16
    1432:	80 83       	st	Z, r24
    1434:	0e 94 be 0a 	call	0x157c	; 0x157c <rtc_get_date>
    1438:	f8 01       	movw	r30, r16
    143a:	61 83       	std	Z+1, r22	; 0x01
    143c:	72 83       	std	Z+2, r23	; 0x02
    143e:	83 83       	std	Z+3, r24	; 0x03
    1440:	94 83       	std	Z+4, r25	; 0x04
    1442:	e5 82       	std	Z+5, r14	; 0x05
    1444:	c0 93 e2 01 	sts	0x01E2, r28	; 0x8001e2 <last_written>
    1448:	67 e0       	ldi	r22, 0x07	; 7
    144a:	70 e0       	ldi	r23, 0x00	; 0
    144c:	c8 01       	movw	r24, r16
    144e:	0e 94 45 07 	call	0xe8a	; 0xe8a <update_checksum>
    1452:	cd 5a       	subi	r28, 0xAD	; 173
    1454:	dd 4f       	sbci	r29, 0xFD	; 253
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	88 83       	st	Y, r24
    145a:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <last_written>
    145e:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <tail>
    1462:	89 13       	cpse	r24, r25
    1464:	08 c0       	rjmp	.+16     	; 0x1476 <log_add_record+0x94>
    1466:	ff 20       	and	r15, r15
    1468:	31 f0       	breq	.+12     	; 0x1476 <log_add_record+0x94>
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	01 96       	adiw	r24, 0x01	; 1
    146e:	8f 70       	andi	r24, 0x0F	; 15
    1470:	99 27       	eor	r25, r25
    1472:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <tail>
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	1f 91       	pop	r17
    147c:	0f 91       	pop	r16
    147e:	ff 90       	pop	r15
    1480:	ef 90       	pop	r14
    1482:	08 95       	ret

00001484 <log_clear>:
    1484:	e3 ee       	ldi	r30, 0xE3	; 227
    1486:	f1 e0       	ldi	r31, 0x01	; 1
    1488:	a3 e5       	ldi	r26, 0x53	; 83
    148a:	b2 e0       	ldi	r27, 0x02	; 2
    148c:	8f ef       	ldi	r24, 0xFF	; 255
    148e:	4f ef       	ldi	r20, 0xFF	; 255
    1490:	5f ef       	ldi	r21, 0xFF	; 255
    1492:	ba 01       	movw	r22, r20
    1494:	91 e0       	ldi	r25, 0x01	; 1
    1496:	80 83       	st	Z, r24
    1498:	85 83       	std	Z+5, r24	; 0x05
    149a:	41 83       	std	Z+1, r20	; 0x01
    149c:	52 83       	std	Z+2, r21	; 0x02
    149e:	63 83       	std	Z+3, r22	; 0x03
    14a0:	74 83       	std	Z+4, r23	; 0x04
    14a2:	9d 93       	st	X+, r25
    14a4:	37 96       	adiw	r30, 0x07	; 7
    14a6:	22 e0       	ldi	r18, 0x02	; 2
    14a8:	e3 35       	cpi	r30, 0x53	; 83
    14aa:	f2 07       	cpc	r31, r18
    14ac:	a1 f7       	brne	.-24     	; 0x1496 <log_clear+0x12>
    14ae:	8f e0       	ldi	r24, 0x0F	; 15
    14b0:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <last_written>
    14b4:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <tail>
    14b8:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <last_transaction_written>
    14bc:	08 95       	ret

000014be <log_get_num_entries>:
    14be:	0f 93       	push	r16
    14c0:	1f 93       	push	r17
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	00 91 e0 01 	lds	r16, 0x01E0	; 0x8001e0 <tail>
    14ca:	c0 2f       	mov	r28, r16
    14cc:	10 e0       	ldi	r17, 0x00	; 0
    14ce:	d0 e0       	ldi	r29, 0x00	; 0
    14d0:	ce 01       	movw	r24, r28
    14d2:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <log_is_data_valid>
    14d6:	89 2b       	or	r24, r25
    14d8:	29 f0       	breq	.+10     	; 0x14e4 <log_get_num_entries+0x26>
    14da:	21 96       	adiw	r28, 0x01	; 1
    14dc:	cf 70       	andi	r28, 0x0F	; 15
    14de:	1f 5f       	subi	r17, 0xFF	; 255
    14e0:	0c 13       	cpse	r16, r28
    14e2:	f5 cf       	rjmp	.-22     	; 0x14ce <log_get_num_entries+0x10>
    14e4:	81 2f       	mov	r24, r17
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	1f 91       	pop	r17
    14ec:	0f 91       	pop	r16
    14ee:	08 95       	ret

000014f0 <log_get_record>:
    14f0:	af 92       	push	r10
    14f2:	bf 92       	push	r11
    14f4:	cf 92       	push	r12
    14f6:	df 92       	push	r13
    14f8:	ef 92       	push	r14
    14fa:	ff 92       	push	r15
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	6b 01       	movw	r12, r22
    1506:	7c 01       	movw	r14, r24
    1508:	8a 01       	movw	r16, r20
    150a:	59 01       	movw	r10, r18
    150c:	0e 94 5f 0a 	call	0x14be	; 0x14be <log_get_num_entries>
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	a0 e0       	ldi	r26, 0x00	; 0
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	c8 16       	cp	r12, r24
    1518:	d9 06       	cpc	r13, r25
    151a:	ea 06       	cpc	r14, r26
    151c:	fb 06       	cpc	r15, r27
    151e:	f8 f4       	brcc	.+62     	; 0x155e <log_get_record+0x6e>
    1520:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <tail>
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	c8 0e       	add	r12, r24
    1528:	d9 1e       	adc	r13, r25
    152a:	8f e0       	ldi	r24, 0x0F	; 15
    152c:	c8 22       	and	r12, r24
    152e:	dd 24       	eor	r13, r13
    1530:	87 e0       	ldi	r24, 0x07	; 7
    1532:	8c 9d       	mul	r24, r12
    1534:	f0 01       	movw	r30, r0
    1536:	8d 9d       	mul	r24, r13
    1538:	f0 0d       	add	r31, r0
    153a:	11 24       	eor	r1, r1
    153c:	ed 51       	subi	r30, 0x1D	; 29
    153e:	fe 4f       	sbci	r31, 0xFE	; 254
    1540:	81 81       	ldd	r24, Z+1	; 0x01
    1542:	92 81       	ldd	r25, Z+2	; 0x02
    1544:	a3 81       	ldd	r26, Z+3	; 0x03
    1546:	b4 81       	ldd	r27, Z+4	; 0x04
    1548:	e8 01       	movw	r28, r16
    154a:	88 83       	st	Y, r24
    154c:	99 83       	std	Y+1, r25	; 0x01
    154e:	aa 83       	std	Y+2, r26	; 0x02
    1550:	bb 83       	std	Y+3, r27	; 0x03
    1552:	85 81       	ldd	r24, Z+5	; 0x05
    1554:	f5 01       	movw	r30, r10
    1556:	80 83       	st	Z, r24
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <log_get_record+0x72>
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	1f 91       	pop	r17
    1568:	0f 91       	pop	r16
    156a:	ff 90       	pop	r15
    156c:	ef 90       	pop	r14
    156e:	df 90       	pop	r13
    1570:	cf 90       	pop	r12
    1572:	bf 90       	pop	r11
    1574:	af 90       	pop	r10
    1576:	08 95       	ret

00001578 <rtc_init>:
    1578:	0c 94 25 06 	jmp	0xc4a	; 0xc4a <timer1_init>

0000157c <rtc_get_date>:
    157c:	0f 93       	push	r16
    157e:	1f 93       	push	r17
    1580:	0e 94 61 06 	call	0xcc2	; 0xcc2 <timer1_get>
    1584:	00 91 08 03 	lds	r16, 0x0308	; 0x800308 <rtc_base>
    1588:	10 91 09 03 	lds	r17, 0x0309	; 0x800309 <rtc_base+0x1>
    158c:	20 91 0a 03 	lds	r18, 0x030A	; 0x80030a <rtc_base+0x2>
    1590:	30 91 0b 03 	lds	r19, 0x030B	; 0x80030b <rtc_base+0x3>
    1594:	60 0f       	add	r22, r16
    1596:	71 1f       	adc	r23, r17
    1598:	82 1f       	adc	r24, r18
    159a:	93 1f       	adc	r25, r19
    159c:	1f 91       	pop	r17
    159e:	0f 91       	pop	r16
    15a0:	08 95       	ret

000015a2 <is_leapyear>:
    15a2:	9c 01       	movw	r18, r24
    15a4:	60 e9       	ldi	r22, 0x90	; 144
    15a6:	71 e0       	ldi	r23, 0x01	; 1
    15a8:	0e 94 01 14 	call	0x2802	; 0x2802 <__udivmodhi4>
    15ac:	89 2b       	or	r24, r25
    15ae:	79 f0       	breq	.+30     	; 0x15ce <is_leapyear+0x2c>
    15b0:	c9 01       	movw	r24, r18
    15b2:	83 70       	andi	r24, 0x03	; 3
    15b4:	99 27       	eor	r25, r25
    15b6:	89 2b       	or	r24, r25
    15b8:	61 f4       	brne	.+24     	; 0x15d2 <is_leapyear+0x30>
    15ba:	c9 01       	movw	r24, r18
    15bc:	64 e6       	ldi	r22, 0x64	; 100
    15be:	70 e0       	ldi	r23, 0x00	; 0
    15c0:	0e 94 01 14 	call	0x2802	; 0x2802 <__udivmodhi4>
    15c4:	9c 01       	movw	r18, r24
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	23 2b       	or	r18, r19
    15ca:	21 f4       	brne	.+8      	; 0x15d4 <is_leapyear+0x32>
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <is_leapyear+0x30>
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	08 95       	ret
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	08 95       	ret

000015d6 <rtc_set_by_datestr>:
    15d6:	2f 92       	push	r2
    15d8:	3f 92       	push	r3
    15da:	4f 92       	push	r4
    15dc:	5f 92       	push	r5
    15de:	6f 92       	push	r6
    15e0:	7f 92       	push	r7
    15e2:	8f 92       	push	r8
    15e4:	9f 92       	push	r9
    15e6:	af 92       	push	r10
    15e8:	bf 92       	push	r11
    15ea:	cf 92       	push	r12
    15ec:	df 92       	push	r13
    15ee:	ef 92       	push	r14
    15f0:	ff 92       	push	r15
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	67 97       	sbiw	r28, 0x17	; 23
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	2c e0       	ldi	r18, 0x0C	; 12
    160c:	eb ea       	ldi	r30, 0xAB	; 171
    160e:	f1 e0       	ldi	r31, 0x01	; 1
    1610:	ae 01       	movw	r20, r28
    1612:	4f 5f       	subi	r20, 0xFF	; 255
    1614:	5f 4f       	sbci	r21, 0xFF	; 255
    1616:	1a 01       	movw	r2, r20
    1618:	da 01       	movw	r26, r20
    161a:	01 90       	ld	r0, Z+
    161c:	0d 92       	st	X+, r0
    161e:	2a 95       	dec	r18
    1620:	e1 f7       	brne	.-8      	; 0x161a <rtc_set_by_datestr+0x44>
    1622:	dc 01       	movw	r26, r24
    1624:	2c 91       	ld	r18, X
    1626:	22 0f       	add	r18, r18
    1628:	20 56       	subi	r18, 0x60	; 96
    162a:	32 2f       	mov	r19, r18
    162c:	33 0f       	add	r19, r19
    162e:	33 0f       	add	r19, r19
    1630:	23 0f       	add	r18, r19
    1632:	11 96       	adiw	r26, 0x01	; 1
    1634:	3c 91       	ld	r19, X
    1636:	11 97       	sbiw	r26, 0x01	; 1
    1638:	31 53       	subi	r19, 0x31	; 49
    163a:	23 0f       	add	r18, r19
    163c:	2d 87       	std	Y+13, r18	; 0x0d
    163e:	13 96       	adiw	r26, 0x03	; 3
    1640:	2c 91       	ld	r18, X
    1642:	13 97       	sbiw	r26, 0x03	; 3
    1644:	02 2e       	mov	r0, r18
    1646:	00 0c       	add	r0, r0
    1648:	33 0b       	sbc	r19, r19
    164a:	20 53       	subi	r18, 0x30	; 48
    164c:	31 09       	sbc	r19, r1
    164e:	6a e0       	ldi	r22, 0x0A	; 10
    1650:	62 9f       	mul	r22, r18
    1652:	a0 01       	movw	r20, r0
    1654:	63 9f       	mul	r22, r19
    1656:	50 0d       	add	r21, r0
    1658:	11 24       	eor	r1, r1
    165a:	14 96       	adiw	r26, 0x04	; 4
    165c:	cc 90       	ld	r12, X
    165e:	0c 2c       	mov	r0, r12
    1660:	00 0c       	add	r0, r0
    1662:	dd 08       	sbc	r13, r13
    1664:	b0 e3       	ldi	r27, 0x30	; 48
    1666:	cb 1a       	sub	r12, r27
    1668:	d1 08       	sbc	r13, r1
    166a:	c4 0e       	add	r12, r20
    166c:	d5 1e       	adc	r13, r21
    166e:	86 01       	movw	r16, r12
    1670:	01 50       	subi	r16, 0x01	; 1
    1672:	11 09       	sbc	r17, r1
    1674:	fc 01       	movw	r30, r24
    1676:	26 81       	ldd	r18, Z+6	; 0x06
    1678:	02 2e       	mov	r0, r18
    167a:	00 0c       	add	r0, r0
    167c:	33 0b       	sbc	r19, r19
    167e:	20 53       	subi	r18, 0x30	; 48
    1680:	31 09       	sbc	r19, r1
    1682:	e8 ee       	ldi	r30, 0xE8	; 232
    1684:	f3 e0       	ldi	r31, 0x03	; 3
    1686:	2e 9f       	mul	r18, r30
    1688:	a0 01       	movw	r20, r0
    168a:	2f 9f       	mul	r18, r31
    168c:	50 0d       	add	r21, r0
    168e:	3e 9f       	mul	r19, r30
    1690:	50 0d       	add	r21, r0
    1692:	11 24       	eor	r1, r1
    1694:	dc 01       	movw	r26, r24
    1696:	17 96       	adiw	r26, 0x07	; 7
    1698:	2c 91       	ld	r18, X
    169a:	17 97       	sbiw	r26, 0x07	; 7
    169c:	02 2e       	mov	r0, r18
    169e:	00 0c       	add	r0, r0
    16a0:	33 0b       	sbc	r19, r19
    16a2:	20 53       	subi	r18, 0x30	; 48
    16a4:	31 09       	sbc	r19, r1
    16a6:	74 e6       	ldi	r23, 0x64	; 100
    16a8:	72 9f       	mul	r23, r18
    16aa:	70 01       	movw	r14, r0
    16ac:	73 9f       	mul	r23, r19
    16ae:	f0 0c       	add	r15, r0
    16b0:	11 24       	eor	r1, r1
    16b2:	e4 0e       	add	r14, r20
    16b4:	f5 1e       	adc	r15, r21
    16b6:	18 96       	adiw	r26, 0x08	; 8
    16b8:	4c 91       	ld	r20, X
    16ba:	18 97       	sbiw	r26, 0x08	; 8
    16bc:	04 2e       	mov	r0, r20
    16be:	00 0c       	add	r0, r0
    16c0:	55 0b       	sbc	r21, r21
    16c2:	40 53       	subi	r20, 0x30	; 48
    16c4:	51 09       	sbc	r21, r1
    16c6:	64 9f       	mul	r22, r20
    16c8:	90 01       	movw	r18, r0
    16ca:	65 9f       	mul	r22, r21
    16cc:	30 0d       	add	r19, r0
    16ce:	11 24       	eor	r1, r1
    16d0:	e2 0e       	add	r14, r18
    16d2:	f3 1e       	adc	r15, r19
    16d4:	19 96       	adiw	r26, 0x09	; 9
    16d6:	2c 91       	ld	r18, X
    16d8:	19 97       	sbiw	r26, 0x09	; 9
    16da:	f7 01       	movw	r30, r14
    16dc:	e2 0f       	add	r30, r18
    16de:	f1 1d       	adc	r31, r1
    16e0:	27 fd       	sbrc	r18, 7
    16e2:	fa 95       	dec	r31
    16e4:	af 01       	movw	r20, r30
    16e6:	58 50       	subi	r21, 0x08	; 8
    16e8:	7a 01       	movw	r14, r20
    16ea:	1b 96       	adiw	r26, 0x0b	; 11
    16ec:	2c 91       	ld	r18, X
    16ee:	1b 97       	sbiw	r26, 0x0b	; 11
    16f0:	22 0f       	add	r18, r18
    16f2:	20 56       	subi	r18, 0x60	; 96
    16f4:	32 2f       	mov	r19, r18
    16f6:	33 0f       	add	r19, r19
    16f8:	33 0f       	add	r19, r19
    16fa:	23 0f       	add	r18, r19
    16fc:	1c 96       	adiw	r26, 0x0c	; 12
    16fe:	3c 91       	ld	r19, X
    1700:	1c 97       	sbiw	r26, 0x0c	; 12
    1702:	30 53       	subi	r19, 0x30	; 48
    1704:	23 0f       	add	r18, r19
    1706:	29 8b       	std	Y+17, r18	; 0x11
    1708:	1e 96       	adiw	r26, 0x0e	; 14
    170a:	2c 91       	ld	r18, X
    170c:	1e 97       	sbiw	r26, 0x0e	; 14
    170e:	22 0f       	add	r18, r18
    1710:	20 56       	subi	r18, 0x60	; 96
    1712:	32 2f       	mov	r19, r18
    1714:	33 0f       	add	r19, r19
    1716:	33 0f       	add	r19, r19
    1718:	23 0f       	add	r18, r19
    171a:	1f 96       	adiw	r26, 0x0f	; 15
    171c:	3c 91       	ld	r19, X
    171e:	1f 97       	sbiw	r26, 0x0f	; 15
    1720:	30 53       	subi	r19, 0x30	; 48
    1722:	23 0f       	add	r18, r19
    1724:	2a 8b       	std	Y+18, r18	; 0x12
    1726:	51 96       	adiw	r26, 0x11	; 17
    1728:	2c 91       	ld	r18, X
    172a:	51 97       	sbiw	r26, 0x11	; 17
    172c:	22 0f       	add	r18, r18
    172e:	20 56       	subi	r18, 0x60	; 96
    1730:	32 2f       	mov	r19, r18
    1732:	33 0f       	add	r19, r19
    1734:	33 0f       	add	r19, r19
    1736:	23 0f       	add	r18, r19
    1738:	52 96       	adiw	r26, 0x12	; 18
    173a:	8c 91       	ld	r24, X
    173c:	80 53       	subi	r24, 0x30	; 48
    173e:	28 0f       	add	r18, r24
    1740:	2b 8b       	std	Y+19, r18	; 0x13
    1742:	ca 01       	movw	r24, r20
    1744:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <is_leapyear>
    1748:	88 23       	and	r24, r24
    174a:	21 f0       	breq	.+8      	; 0x1754 <rtc_set_by_datestr+0x17e>
    174c:	5d 85       	ldd	r21, Y+13	; 0x0d
    174e:	52 30       	cpi	r21, 0x02	; 2
    1750:	08 f0       	brcs	.+2      	; 0x1754 <rtc_set_by_datestr+0x17e>
    1752:	86 01       	movw	r16, r12
    1754:	c7 01       	movw	r24, r14
    1756:	60 e9       	ldi	r22, 0x90	; 144
    1758:	71 e0       	ldi	r23, 0x01	; 1
    175a:	0e 94 01 14 	call	0x2802	; 0x2802 <__udivmodhi4>
    175e:	fc 01       	movw	r30, r24
    1760:	db 01       	movw	r26, r22
    1762:	20 e8       	ldi	r18, 0x80	; 128
    1764:	39 e5       	ldi	r19, 0x59	; 89
    1766:	40 e6       	ldi	r20, 0x60	; 96
    1768:	50 ef       	ldi	r21, 0xF0	; 240
    176a:	0e 94 79 14 	call	0x28f2	; 0x28f2 <__muluhisi3>
    176e:	2b 01       	movw	r4, r22
    1770:	3c 01       	movw	r6, r24
    1772:	cf 01       	movw	r24, r30
    1774:	64 e6       	ldi	r22, 0x64	; 100
    1776:	70 e0       	ldi	r23, 0x00	; 0
    1778:	0e 94 01 14 	call	0x2802	; 0x2802 <__udivmodhi4>
    177c:	fc 01       	movw	r30, r24
    177e:	db 01       	movw	r26, r22
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	32 ec       	ldi	r19, 0xC2	; 194
    1784:	47 e1       	ldi	r20, 0x17	; 23
    1786:	5c eb       	ldi	r21, 0xBC	; 188
    1788:	0e 94 79 14 	call	0x28f2	; 0x28f2 <__muluhisi3>
    178c:	4b 01       	movw	r8, r22
    178e:	5c 01       	movw	r10, r24
    1790:	df 01       	movw	r26, r30
    1792:	b6 95       	lsr	r27
    1794:	a7 95       	ror	r26
    1796:	b6 95       	lsr	r27
    1798:	a7 95       	ror	r26
    179a:	20 e8       	ldi	r18, 0x80	; 128
    179c:	3f e1       	ldi	r19, 0x1F	; 31
    179e:	46 e8       	ldi	r20, 0x86	; 134
    17a0:	57 e0       	ldi	r21, 0x07	; 7
    17a2:	0e 94 79 14 	call	0x28f2	; 0x28f2 <__muluhisi3>
    17a6:	6b 01       	movw	r12, r22
    17a8:	7c 01       	movw	r14, r24
    17aa:	df 01       	movw	r26, r30
    17ac:	a3 70       	andi	r26, 0x03	; 3
    17ae:	bb 27       	eor	r27, r27
    17b0:	20 e8       	ldi	r18, 0x80	; 128
    17b2:	33 e3       	ldi	r19, 0x33	; 51
    17b4:	41 ee       	ldi	r20, 0xE1	; 225
    17b6:	51 e0       	ldi	r21, 0x01	; 1
    17b8:	0e 94 79 14 	call	0x28f2	; 0x28f2 <__muluhisi3>
    17bc:	6c 8b       	std	Y+20, r22	; 0x14
    17be:	7d 8b       	std	Y+21, r23	; 0x15
    17c0:	8e 8b       	std	Y+22, r24	; 0x16
    17c2:	9f 8b       	std	Y+23, r25	; 0x17
    17c4:	f1 01       	movw	r30, r2
    17c6:	8e 2f       	mov	r24, r30
    17c8:	82 19       	sub	r24, r2
    17ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    17cc:	89 17       	cp	r24, r25
    17ce:	20 f4       	brcc	.+8      	; 0x17d8 <rtc_set_by_datestr+0x202>
    17d0:	81 91       	ld	r24, Z+
    17d2:	08 0f       	add	r16, r24
    17d4:	11 1d       	adc	r17, r1
    17d6:	f7 cf       	rjmp	.-18     	; 0x17c6 <rtc_set_by_datestr+0x1f0>
    17d8:	a9 89       	ldd	r26, Y+17	; 0x11
    17da:	2a 2f       	mov	r18, r26
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	a0 e1       	ldi	r26, 0x10	; 16
    17e0:	be e0       	ldi	r27, 0x0E	; 14
    17e2:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__umulhisi3>
    17e6:	6d 87       	std	Y+13, r22	; 0x0d
    17e8:	7e 87       	std	Y+14, r23	; 0x0e
    17ea:	8f 87       	std	Y+15, r24	; 0x0f
    17ec:	98 8b       	std	Y+16, r25	; 0x10
    17ee:	ba 89       	ldd	r27, Y+18	; 0x12
    17f0:	2b 2f       	mov	r18, r27
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	ac e3       	ldi	r26, 0x3C	; 60
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__umulhisi3>
    17fc:	2d 85       	ldd	r18, Y+13	; 0x0d
    17fe:	3e 85       	ldd	r19, Y+14	; 0x0e
    1800:	4f 85       	ldd	r20, Y+15	; 0x0f
    1802:	58 89       	ldd	r21, Y+16	; 0x10
    1804:	26 0f       	add	r18, r22
    1806:	37 1f       	adc	r19, r23
    1808:	48 1f       	adc	r20, r24
    180a:	59 1f       	adc	r21, r25
    180c:	da 01       	movw	r26, r20
    180e:	c9 01       	movw	r24, r18
    1810:	3b 89       	ldd	r19, Y+19	; 0x13
    1812:	83 0f       	add	r24, r19
    1814:	91 1d       	adc	r25, r1
    1816:	a1 1d       	adc	r26, r1
    1818:	b1 1d       	adc	r27, r1
    181a:	48 0e       	add	r4, r24
    181c:	59 1e       	adc	r5, r25
    181e:	6a 1e       	adc	r6, r26
    1820:	7b 1e       	adc	r7, r27
    1822:	84 0c       	add	r8, r4
    1824:	95 1c       	adc	r9, r5
    1826:	a6 1c       	adc	r10, r6
    1828:	b7 1c       	adc	r11, r7
    182a:	c8 0c       	add	r12, r8
    182c:	d9 1c       	adc	r13, r9
    182e:	ea 1c       	adc	r14, r10
    1830:	fb 1c       	adc	r15, r11
    1832:	8c 89       	ldd	r24, Y+20	; 0x14
    1834:	9d 89       	ldd	r25, Y+21	; 0x15
    1836:	ae 89       	ldd	r26, Y+22	; 0x16
    1838:	bf 89       	ldd	r27, Y+23	; 0x17
    183a:	c8 0e       	add	r12, r24
    183c:	d9 1e       	adc	r13, r25
    183e:	ea 1e       	adc	r14, r26
    1840:	fb 1e       	adc	r15, r27
    1842:	d8 01       	movw	r26, r16
    1844:	20 e8       	ldi	r18, 0x80	; 128
    1846:	31 e5       	ldi	r19, 0x51	; 81
    1848:	41 e0       	ldi	r20, 0x01	; 1
    184a:	50 e0       	ldi	r21, 0x00	; 0
    184c:	0e 94 79 14 	call	0x28f2	; 0x28f2 <__muluhisi3>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	8c 0d       	add	r24, r12
    1856:	9d 1d       	adc	r25, r13
    1858:	ae 1d       	adc	r26, r14
    185a:	bf 1d       	adc	r27, r15
    185c:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <rtc_base>
    1860:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <rtc_base+0x1>
    1864:	a0 93 0a 03 	sts	0x030A, r26	; 0x80030a <rtc_base+0x2>
    1868:	b0 93 0b 03 	sts	0x030B, r27	; 0x80030b <rtc_base+0x3>
    186c:	67 96       	adiw	r28, 0x17	; 23
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	f8 94       	cli
    1872:	de bf       	out	0x3e, r29	; 62
    1874:	0f be       	out	0x3f, r0	; 63
    1876:	cd bf       	out	0x3d, r28	; 61
    1878:	df 91       	pop	r29
    187a:	cf 91       	pop	r28
    187c:	1f 91       	pop	r17
    187e:	0f 91       	pop	r16
    1880:	ff 90       	pop	r15
    1882:	ef 90       	pop	r14
    1884:	df 90       	pop	r13
    1886:	cf 90       	pop	r12
    1888:	bf 90       	pop	r11
    188a:	af 90       	pop	r10
    188c:	9f 90       	pop	r9
    188e:	8f 90       	pop	r8
    1890:	7f 90       	pop	r7
    1892:	6f 90       	pop	r6
    1894:	5f 90       	pop	r5
    1896:	4f 90       	pop	r4
    1898:	3f 90       	pop	r3
    189a:	2f 90       	pop	r2
    189c:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <timer1_clear>

000018a0 <get_month>:
    18a0:	ef 92       	push	r14
    18a2:	ff 92       	push	r15
    18a4:	0f 93       	push	r16
    18a6:	1f 93       	push	r17
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	68 97       	sbiw	r28, 0x18	; 24
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	7b 01       	movw	r14, r22
    18be:	2c e0       	ldi	r18, 0x0C	; 12
    18c0:	eb ea       	ldi	r30, 0xAB	; 171
    18c2:	f1 e0       	ldi	r31, 0x01	; 1
    18c4:	de 01       	movw	r26, r28
    18c6:	1d 96       	adiw	r26, 0x0d	; 13
    18c8:	01 90       	ld	r0, Z+
    18ca:	0d 92       	st	X+, r0
    18cc:	2a 95       	dec	r18
    18ce:	e1 f7       	brne	.-8      	; 0x18c8 <get_month+0x28>
    18d0:	8e 01       	movw	r16, r28
    18d2:	0f 5f       	subi	r16, 0xFF	; 255
    18d4:	1f 4f       	sbci	r17, 0xFF	; 255
    18d6:	2c e0       	ldi	r18, 0x0C	; 12
    18d8:	f8 01       	movw	r30, r16
    18da:	11 92       	st	Z+, r1
    18dc:	2a 95       	dec	r18
    18de:	e9 f7       	brne	.-6      	; 0x18da <get_month+0x3a>
    18e0:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <is_leapyear>
    18e4:	8a 83       	std	Y+2, r24	; 0x02
    18e6:	de 01       	movw	r26, r28
    18e8:	1d 96       	adiw	r26, 0x0d	; 13
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	f7 01       	movw	r30, r14
    18ee:	40 81       	ld	r20, Z
    18f0:	51 81       	ldd	r21, Z+1	; 0x01
    18f2:	9d 91       	ld	r25, X+
    18f4:	f8 01       	movw	r30, r16
    18f6:	21 91       	ld	r18, Z+
    18f8:	8f 01       	movw	r16, r30
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	29 0f       	add	r18, r25
    18fe:	31 1d       	adc	r19, r1
    1900:	42 17       	cp	r20, r18
    1902:	53 07       	cpc	r21, r19
    1904:	40 f0       	brcs	.+16     	; 0x1916 <get_month+0x76>
    1906:	42 1b       	sub	r20, r18
    1908:	53 0b       	sbc	r21, r19
    190a:	f7 01       	movw	r30, r14
    190c:	51 83       	std	Z+1, r21	; 0x01
    190e:	40 83       	st	Z, r20
    1910:	8f 5f       	subi	r24, 0xFF	; 255
    1912:	8c 30       	cpi	r24, 0x0C	; 12
    1914:	59 f7       	brne	.-42     	; 0x18ec <get_month+0x4c>
    1916:	68 96       	adiw	r28, 0x18	; 24
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	df 91       	pop	r29
    1924:	cf 91       	pop	r28
    1926:	1f 91       	pop	r17
    1928:	0f 91       	pop	r16
    192a:	ff 90       	pop	r15
    192c:	ef 90       	pop	r14
    192e:	08 95       	ret

00001930 <rtc_num2datestr>:
    1930:	4f 92       	push	r4
    1932:	5f 92       	push	r5
    1934:	6f 92       	push	r6
    1936:	7f 92       	push	r7
    1938:	8f 92       	push	r8
    193a:	9f 92       	push	r9
    193c:	af 92       	push	r10
    193e:	bf 92       	push	r11
    1940:	cf 92       	push	r12
    1942:	df 92       	push	r13
    1944:	ef 92       	push	r14
    1946:	ff 92       	push	r15
    1948:	cf 93       	push	r28
    194a:	df 93       	push	r29
    194c:	00 d0       	rcall	.+0      	; 0x194e <rtc_num2datestr+0x1e>
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	2b 01       	movw	r4, r22
    1954:	3c 01       	movw	r6, r24
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	a0 e0       	ldi	r26, 0x00	; 0
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	20 e8       	ldi	r18, 0x80	; 128
    1960:	42 16       	cp	r4, r18
    1962:	29 e5       	ldi	r18, 0x59	; 89
    1964:	52 06       	cpc	r5, r18
    1966:	20 e6       	ldi	r18, 0x60	; 96
    1968:	62 06       	cpc	r6, r18
    196a:	20 ef       	ldi	r18, 0xF0	; 240
    196c:	72 06       	cpc	r7, r18
    196e:	18 f4       	brcc	.+6      	; 0x1976 <rtc_num2datestr+0x46>
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	dc 01       	movw	r26, r24
    1976:	20 e9       	ldi	r18, 0x90	; 144
    1978:	31 e0       	ldi	r19, 0x01	; 1
    197a:	82 9f       	mul	r24, r18
    197c:	50 01       	movw	r10, r0
    197e:	83 9f       	mul	r24, r19
    1980:	b0 0c       	add	r11, r0
    1982:	92 9f       	mul	r25, r18
    1984:	b0 0c       	add	r11, r0
    1986:	11 24       	eor	r1, r1
    1988:	80 e3       	ldi	r24, 0x30	; 48
    198a:	a8 1a       	sub	r10, r24
    198c:	88 ef       	ldi	r24, 0xF8	; 248
    198e:	b8 0a       	sbc	r11, r24
    1990:	c1 2c       	mov	r12, r1
    1992:	d1 2c       	mov	r13, r1
    1994:	76 01       	movw	r14, r12
    1996:	c3 94       	inc	r12
    1998:	20 e8       	ldi	r18, 0x80	; 128
    199a:	42 16       	cp	r4, r18
    199c:	29 e5       	ldi	r18, 0x59	; 89
    199e:	52 06       	cpc	r5, r18
    19a0:	20 e6       	ldi	r18, 0x60	; 96
    19a2:	62 06       	cpc	r6, r18
    19a4:	20 ef       	ldi	r18, 0xF0	; 240
    19a6:	72 06       	cpc	r7, r18
    19a8:	18 f4       	brcc	.+6      	; 0x19b0 <rtc_num2datestr+0x80>
    19aa:	c1 2c       	mov	r12, r1
    19ac:	d1 2c       	mov	r13, r1
    19ae:	76 01       	movw	r14, r12
    19b0:	a7 01       	movw	r20, r14
    19b2:	96 01       	movw	r18, r12
    19b4:	60 e8       	ldi	r22, 0x80	; 128
    19b6:	79 e5       	ldi	r23, 0x59	; 89
    19b8:	80 e6       	ldi	r24, 0x60	; 96
    19ba:	90 ef       	ldi	r25, 0xF0	; 240
    19bc:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__mulsi3>
    19c0:	73 01       	movw	r14, r6
    19c2:	62 01       	movw	r12, r4
    19c4:	c6 1a       	sub	r12, r22
    19c6:	d7 0a       	sbc	r13, r23
    19c8:	e8 0a       	sbc	r14, r24
    19ca:	f9 0a       	sbc	r15, r25
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	a0 e0       	ldi	r26, 0x00	; 0
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	c1 14       	cp	r12, r1
    19d6:	22 ec       	ldi	r18, 0xC2	; 194
    19d8:	d2 06       	cpc	r13, r18
    19da:	27 e1       	ldi	r18, 0x17	; 23
    19dc:	e2 06       	cpc	r14, r18
    19de:	2c eb       	ldi	r18, 0xBC	; 188
    19e0:	f2 06       	cpc	r15, r18
    19e2:	18 f4       	brcc	.+6      	; 0x19ea <rtc_num2datestr+0xba>
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	dc 01       	movw	r26, r24
    19ea:	44 e6       	ldi	r20, 0x64	; 100
    19ec:	48 9f       	mul	r20, r24
    19ee:	90 01       	movw	r18, r0
    19f0:	49 9f       	mul	r20, r25
    19f2:	30 0d       	add	r19, r0
    19f4:	11 24       	eor	r1, r1
    19f6:	a2 0e       	add	r10, r18
    19f8:	b3 1e       	adc	r11, r19
    19fa:	21 e0       	ldi	r18, 0x01	; 1
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	40 e0       	ldi	r20, 0x00	; 0
    1a00:	50 e0       	ldi	r21, 0x00	; 0
    1a02:	c1 14       	cp	r12, r1
    1a04:	82 ec       	ldi	r24, 0xC2	; 194
    1a06:	d8 06       	cpc	r13, r24
    1a08:	87 e1       	ldi	r24, 0x17	; 23
    1a0a:	e8 06       	cpc	r14, r24
    1a0c:	8c eb       	ldi	r24, 0xBC	; 188
    1a0e:	f8 06       	cpc	r15, r24
    1a10:	18 f4       	brcc	.+6      	; 0x1a18 <rtc_num2datestr+0xe8>
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	a9 01       	movw	r20, r18
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	72 ec       	ldi	r23, 0xC2	; 194
    1a1c:	87 e1       	ldi	r24, 0x17	; 23
    1a1e:	9c eb       	ldi	r25, 0xBC	; 188
    1a20:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__mulsi3>
    1a24:	a7 01       	movw	r20, r14
    1a26:	96 01       	movw	r18, r12
    1a28:	26 1b       	sub	r18, r22
    1a2a:	37 0b       	sbc	r19, r23
    1a2c:	48 0b       	sbc	r20, r24
    1a2e:	59 0b       	sbc	r21, r25
    1a30:	ca 01       	movw	r24, r20
    1a32:	b9 01       	movw	r22, r18
    1a34:	20 e8       	ldi	r18, 0x80	; 128
    1a36:	3f e1       	ldi	r19, 0x1F	; 31
    1a38:	46 e8       	ldi	r20, 0x86	; 134
    1a3a:	57 e0       	ldi	r21, 0x07	; 7
    1a3c:	0e 94 29 14 	call	0x2852	; 0x2852 <__udivmodsi4>
    1a40:	22 0f       	add	r18, r18
    1a42:	33 1f       	adc	r19, r19
    1a44:	22 0f       	add	r18, r18
    1a46:	33 1f       	adc	r19, r19
    1a48:	a2 0e       	add	r10, r18
    1a4a:	b3 1e       	adc	r11, r19
    1a4c:	20 e8       	ldi	r18, 0x80	; 128
    1a4e:	33 e3       	ldi	r19, 0x33	; 51
    1a50:	41 ee       	ldi	r20, 0xE1	; 225
    1a52:	51 e0       	ldi	r21, 0x01	; 1
    1a54:	0e 94 29 14 	call	0x2852	; 0x2852 <__udivmodsi4>
    1a58:	75 01       	movw	r14, r10
    1a5a:	e2 0e       	add	r14, r18
    1a5c:	f3 1e       	adc	r15, r19
    1a5e:	20 e8       	ldi	r18, 0x80	; 128
    1a60:	31 e5       	ldi	r19, 0x51	; 81
    1a62:	41 e0       	ldi	r20, 0x01	; 1
    1a64:	50 e0       	ldi	r21, 0x00	; 0
    1a66:	0e 94 29 14 	call	0x2852	; 0x2852 <__udivmodsi4>
    1a6a:	4b 01       	movw	r8, r22
    1a6c:	5c 01       	movw	r10, r24
    1a6e:	3a 83       	std	Y+2, r19	; 0x02
    1a70:	29 83       	std	Y+1, r18	; 0x01
    1a72:	be 01       	movw	r22, r28
    1a74:	6f 5f       	subi	r22, 0xFF	; 255
    1a76:	7f 4f       	sbci	r23, 0xFF	; 255
    1a78:	c7 01       	movw	r24, r14
    1a7a:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <get_month>
    1a7e:	d8 2e       	mov	r13, r24
    1a80:	c5 01       	movw	r24, r10
    1a82:	b4 01       	movw	r22, r8
    1a84:	20 e1       	ldi	r18, 0x10	; 16
    1a86:	3e e0       	ldi	r19, 0x0E	; 14
    1a88:	40 e0       	ldi	r20, 0x00	; 0
    1a8a:	50 e0       	ldi	r21, 0x00	; 0
    1a8c:	0e 94 29 14 	call	0x2852	; 0x2852 <__udivmodsi4>
    1a90:	29 01       	movw	r4, r18
    1a92:	3a 01       	movw	r6, r20
    1a94:	4b 01       	movw	r8, r22
    1a96:	5c 01       	movw	r10, r24
    1a98:	67 eb       	ldi	r22, 0xB7	; 183
    1a9a:	71 e0       	ldi	r23, 0x01	; 1
    1a9c:	89 e4       	ldi	r24, 0x49	; 73
    1a9e:	91 e0       	ldi	r25, 0x01	; 1
    1aa0:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <str_cpy>
    1aa4:	6d 2d       	mov	r22, r13
    1aa6:	70 e0       	ldi	r23, 0x00	; 0
    1aa8:	6f 5f       	subi	r22, 0xFF	; 255
    1aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    1aac:	42 e0       	ldi	r20, 0x02	; 2
    1aae:	89 e4       	ldi	r24, 0x49	; 73
    1ab0:	91 e0       	ldi	r25, 0x01	; 1
    1ab2:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <str_writeudec16>
    1ab6:	69 81       	ldd	r22, Y+1	; 0x01
    1ab8:	7a 81       	ldd	r23, Y+2	; 0x02
    1aba:	6f 5f       	subi	r22, 0xFF	; 255
    1abc:	7f 4f       	sbci	r23, 0xFF	; 255
    1abe:	42 e0       	ldi	r20, 0x02	; 2
    1ac0:	8c e4       	ldi	r24, 0x4C	; 76
    1ac2:	91 e0       	ldi	r25, 0x01	; 1
    1ac4:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <str_writeudec16>
    1ac8:	44 e0       	ldi	r20, 0x04	; 4
    1aca:	b7 01       	movw	r22, r14
    1acc:	8f e4       	ldi	r24, 0x4F	; 79
    1ace:	91 e0       	ldi	r25, 0x01	; 1
    1ad0:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <str_writeudec16>
    1ad4:	42 e0       	ldi	r20, 0x02	; 2
    1ad6:	b2 01       	movw	r22, r4
    1ad8:	84 e5       	ldi	r24, 0x54	; 84
    1ada:	91 e0       	ldi	r25, 0x01	; 1
    1adc:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <str_writeudec16>
    1ae0:	c5 01       	movw	r24, r10
    1ae2:	b4 01       	movw	r22, r8
    1ae4:	2c e3       	ldi	r18, 0x3C	; 60
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	40 e0       	ldi	r20, 0x00	; 0
    1aea:	50 e0       	ldi	r21, 0x00	; 0
    1aec:	0e 94 29 14 	call	0x2852	; 0x2852 <__udivmodsi4>
    1af0:	49 01       	movw	r8, r18
    1af2:	5a 01       	movw	r10, r20
    1af4:	6b 01       	movw	r12, r22
    1af6:	7c 01       	movw	r14, r24
    1af8:	42 e0       	ldi	r20, 0x02	; 2
    1afa:	b4 01       	movw	r22, r8
    1afc:	87 e5       	ldi	r24, 0x57	; 87
    1afe:	91 e0       	ldi	r25, 0x01	; 1
    1b00:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <str_writeudec16>
    1b04:	42 e0       	ldi	r20, 0x02	; 2
    1b06:	b6 01       	movw	r22, r12
    1b08:	8a e5       	ldi	r24, 0x5A	; 90
    1b0a:	91 e0       	ldi	r25, 0x01	; 1
    1b0c:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <str_writeudec16>
    1b10:	89 e4       	ldi	r24, 0x49	; 73
    1b12:	91 e0       	ldi	r25, 0x01	; 1
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	ff 90       	pop	r15
    1b1e:	ef 90       	pop	r14
    1b20:	df 90       	pop	r13
    1b22:	cf 90       	pop	r12
    1b24:	bf 90       	pop	r11
    1b26:	af 90       	pop	r10
    1b28:	9f 90       	pop	r9
    1b2a:	8f 90       	pop	r8
    1b2c:	7f 90       	pop	r7
    1b2e:	6f 90       	pop	r6
    1b30:	5f 90       	pop	r5
    1b32:	4f 90       	pop	r4
    1b34:	08 95       	ret

00001b36 <rtc_get_date_string>:
    1b36:	0f 93       	push	r16
    1b38:	1f 93       	push	r17
    1b3a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <timer1_get>
    1b3e:	00 91 08 03 	lds	r16, 0x0308	; 0x800308 <rtc_base>
    1b42:	10 91 09 03 	lds	r17, 0x0309	; 0x800309 <rtc_base+0x1>
    1b46:	20 91 0a 03 	lds	r18, 0x030A	; 0x80030a <rtc_base+0x2>
    1b4a:	30 91 0b 03 	lds	r19, 0x030B	; 0x80030b <rtc_base+0x3>
    1b4e:	60 0f       	add	r22, r16
    1b50:	71 1f       	adc	r23, r17
    1b52:	82 1f       	adc	r24, r18
    1b54:	93 1f       	adc	r25, r19
    1b56:	1f 91       	pop	r17
    1b58:	0f 91       	pop	r16
    1b5a:	0c 94 98 0c 	jmp	0x1930	; 0x1930 <rtc_num2datestr>

00001b5e <str_cpy>:
    1b5e:	fc 01       	movw	r30, r24
    1b60:	db 01       	movw	r26, r22
    1b62:	8d 91       	ld	r24, X+
    1b64:	bd 01       	movw	r22, r26
    1b66:	88 23       	and	r24, r24
    1b68:	11 f0       	breq	.+4      	; 0x1b6e <str_cpy+0x10>
    1b6a:	81 93       	st	Z+, r24
    1b6c:	f9 cf       	rjmp	.-14     	; 0x1b60 <str_cpy+0x2>
    1b6e:	10 82       	st	Z, r1
    1b70:	08 95       	ret

00001b72 <str_writeudec16>:
    1b72:	9f 92       	push	r9
    1b74:	af 92       	push	r10
    1b76:	bf 92       	push	r11
    1b78:	cf 92       	push	r12
    1b7a:	df 92       	push	r13
    1b7c:	ef 92       	push	r14
    1b7e:	ff 92       	push	r15
    1b80:	0f 93       	push	r16
    1b82:	1f 93       	push	r17
    1b84:	cf 93       	push	r28
    1b86:	df 93       	push	r29
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <str_writeudec16+0x18>
    1b8a:	00 d0       	rcall	.+0      	; 0x1b8c <str_writeudec16+0x1a>
    1b8c:	1f 92       	push	r1
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
    1b92:	fc 01       	movw	r30, r24
    1b94:	6b 01       	movw	r12, r22
    1b96:	9e 01       	movw	r18, r28
    1b98:	2f 5f       	subi	r18, 0xFF	; 255
    1b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9c:	8e 01       	movw	r16, r28
    1b9e:	0a 5f       	subi	r16, 0xFA	; 250
    1ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba2:	ee 24       	eor	r14, r14
    1ba4:	e3 94       	inc	r14
    1ba6:	f1 2c       	mov	r15, r1
    1ba8:	9a e0       	ldi	r25, 0x0A	; 10
    1baa:	99 2e       	mov	r9, r25
    1bac:	9e 9c       	mul	r9, r14
    1bae:	50 01       	movw	r10, r0
    1bb0:	9f 9c       	mul	r9, r15
    1bb2:	b0 0c       	add	r11, r0
    1bb4:	11 24       	eor	r1, r1
    1bb6:	c6 01       	movw	r24, r12
    1bb8:	b5 01       	movw	r22, r10
    1bba:	0e 94 01 14 	call	0x2802	; 0x2802 <__udivmodhi4>
    1bbe:	b7 01       	movw	r22, r14
    1bc0:	0e 94 01 14 	call	0x2802	; 0x2802 <__udivmodhi4>
    1bc4:	d9 01       	movw	r26, r18
    1bc6:	6d 93       	st	X+, r22
    1bc8:	9d 01       	movw	r18, r26
    1bca:	c6 1a       	sub	r12, r22
    1bcc:	d1 08       	sbc	r13, r1
    1bce:	67 fd       	sbrc	r22, 7
    1bd0:	d3 94       	inc	r13
    1bd2:	75 01       	movw	r14, r10
    1bd4:	a0 17       	cp	r26, r16
    1bd6:	b1 07       	cpc	r27, r17
    1bd8:	49 f7       	brne	.-46     	; 0x1bac <str_writeudec16+0x3a>
    1bda:	60 e0       	ldi	r22, 0x00	; 0
    1bdc:	70 e0       	ldi	r23, 0x00	; 0
    1bde:	84 e0       	ldi	r24, 0x04	; 4
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	50 e0       	ldi	r21, 0x00	; 0
    1be4:	d8 01       	movw	r26, r16
    1be6:	2e 91       	ld	r18, -X
    1be8:	8d 01       	movw	r16, r26
    1bea:	21 11       	cpse	r18, r1
    1bec:	05 c0       	rjmp	.+10     	; 0x1bf8 <str_writeudec16+0x86>
    1bee:	61 15       	cp	r22, r1
    1bf0:	71 05       	cpc	r23, r1
    1bf2:	11 f4       	brne	.+4      	; 0x1bf8 <str_writeudec16+0x86>
    1bf4:	00 97       	sbiw	r24, 0x00	; 0
    1bf6:	41 f4       	brne	.+16     	; 0x1c08 <str_writeudec16+0x96>
    1bf8:	84 17       	cp	r24, r20
    1bfa:	95 07       	cpc	r25, r21
    1bfc:	2c f4       	brge	.+10     	; 0x1c08 <str_writeudec16+0x96>
    1bfe:	20 5d       	subi	r18, 0xD0	; 208
    1c00:	21 93       	st	Z+, r18
    1c02:	61 e0       	ldi	r22, 0x01	; 1
    1c04:	70 e0       	ldi	r23, 0x00	; 0
    1c06:	04 c0       	rjmp	.+8      	; 0x1c10 <str_writeudec16+0x9e>
    1c08:	84 17       	cp	r24, r20
    1c0a:	95 07       	cpc	r25, r21
    1c0c:	0c f4       	brge	.+2      	; 0x1c10 <str_writeudec16+0x9e>
    1c0e:	31 96       	adiw	r30, 0x01	; 1
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	40 f7       	brcc	.-48     	; 0x1be4 <str_writeudec16+0x72>
    1c14:	0f 90       	pop	r0
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	1f 91       	pop	r17
    1c24:	0f 91       	pop	r16
    1c26:	ff 90       	pop	r15
    1c28:	ef 90       	pop	r14
    1c2a:	df 90       	pop	r13
    1c2c:	cf 90       	pop	r12
    1c2e:	bf 90       	pop	r11
    1c30:	af 90       	pop	r10
    1c32:	9f 90       	pop	r9
    1c34:	08 95       	ret

00001c36 <uart_init>:
    1c36:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <serial_init>
    1c3a:	78 94       	sei
    1c3c:	08 95       	ret

00001c3e <uart_writechar>:
    1c3e:	0c 94 47 10 	jmp	0x208e	; 0x208e <serial_writechar>

00001c42 <uart_writestr>:
    1c42:	cf 93       	push	r28
    1c44:	df 93       	push	r29
    1c46:	ec 01       	movw	r28, r24
    1c48:	89 91       	ld	r24, Y+
    1c4a:	88 23       	and	r24, r24
    1c4c:	19 f0       	breq	.+6      	; 0x1c54 <uart_writestr+0x12>
    1c4e:	0e 94 47 10 	call	0x208e	; 0x208e <serial_writechar>
    1c52:	fa cf       	rjmp	.-12     	; 0x1c48 <uart_writestr+0x6>
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	08 95       	ret

00001c5a <uart_writehex8>:
    1c5a:	cf 93       	push	r28
    1c5c:	c8 2f       	mov	r28, r24
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	24 e0       	ldi	r18, 0x04	; 4
    1c62:	95 95       	asr	r25
    1c64:	87 95       	ror	r24
    1c66:	2a 95       	dec	r18
    1c68:	e1 f7       	brne	.-8      	; 0x1c62 <uart_writehex8+0x8>
    1c6a:	8a 30       	cpi	r24, 0x0A	; 10
    1c6c:	10 f4       	brcc	.+4      	; 0x1c72 <uart_writehex8+0x18>
    1c6e:	80 5d       	subi	r24, 0xD0	; 208
    1c70:	01 c0       	rjmp	.+2      	; 0x1c74 <uart_writehex8+0x1a>
    1c72:	89 5c       	subi	r24, 0xC9	; 201
    1c74:	0e 94 47 10 	call	0x208e	; 0x208e <serial_writechar>
    1c78:	8c 2f       	mov	r24, r28
    1c7a:	8f 70       	andi	r24, 0x0F	; 15
    1c7c:	8a 30       	cpi	r24, 0x0A	; 10
    1c7e:	10 f0       	brcs	.+4      	; 0x1c84 <uart_writehex8+0x2a>
    1c80:	89 5c       	subi	r24, 0xC9	; 201
    1c82:	01 c0       	rjmp	.+2      	; 0x1c86 <uart_writehex8+0x2c>
    1c84:	80 5d       	subi	r24, 0xD0	; 208
    1c86:	cf 91       	pop	r28
    1c88:	0c 94 47 10 	jmp	0x208e	; 0x208e <serial_writechar>

00001c8c <uart_writehex16>:
    1c8c:	cf 93       	push	r28
    1c8e:	c8 2f       	mov	r28, r24
    1c90:	89 2f       	mov	r24, r25
    1c92:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <uart_writehex8>
    1c96:	8c 2f       	mov	r24, r28
    1c98:	cf 91       	pop	r28
    1c9a:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <uart_writehex8>

00001c9e <uart_writedec32>:
    1c9e:	2f 92       	push	r2
    1ca0:	3f 92       	push	r3
    1ca2:	4f 92       	push	r4
    1ca4:	5f 92       	push	r5
    1ca6:	6f 92       	push	r6
    1ca8:	7f 92       	push	r7
    1caa:	8f 92       	push	r8
    1cac:	9f 92       	push	r9
    1cae:	af 92       	push	r10
    1cb0:	bf 92       	push	r11
    1cb2:	cf 92       	push	r12
    1cb4:	df 92       	push	r13
    1cb6:	ef 92       	push	r14
    1cb8:	ff 92       	push	r15
    1cba:	0f 93       	push	r16
    1cbc:	1f 93       	push	r17
    1cbe:	cf 93       	push	r28
    1cc0:	df 93       	push	r29
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
    1cc6:	63 97       	sbiw	r28, 0x13	; 19
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	f8 94       	cli
    1ccc:	de bf       	out	0x3e, r29	; 62
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	cd bf       	out	0x3d, r28	; 61
    1cd2:	6b 01       	movw	r12, r22
    1cd4:	7c 01       	movw	r14, r24
    1cd6:	97 ff       	sbrs	r25, 7
    1cd8:	0d c0       	rjmp	.+26     	; 0x1cf4 <uart_writedec32+0x56>
    1cda:	f0 94       	com	r15
    1cdc:	e0 94       	com	r14
    1cde:	d0 94       	com	r13
    1ce0:	c0 94       	com	r12
    1ce2:	c1 1c       	adc	r12, r1
    1ce4:	d1 1c       	adc	r13, r1
    1ce6:	e1 1c       	adc	r14, r1
    1ce8:	f1 1c       	adc	r15, r1
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	9b 8b       	std	Y+19, r25	; 0x13
    1cf0:	8a 8b       	std	Y+18, r24	; 0x12
    1cf2:	02 c0       	rjmp	.+4      	; 0x1cf8 <uart_writedec32+0x5a>
    1cf4:	1b 8a       	std	Y+19, r1	; 0x13
    1cf6:	1a 8a       	std	Y+18, r1	; 0x12
    1cf8:	fe 01       	movw	r30, r28
    1cfa:	31 96       	adiw	r30, 0x01	; 1
    1cfc:	5f 01       	movw	r10, r30
    1cfe:	8e 01       	movw	r16, r28
    1d00:	05 5f       	subi	r16, 0xF5	; 245
    1d02:	1f 4f       	sbci	r17, 0xFF	; 255
    1d04:	f9 8b       	std	Y+17, r31	; 0x11
    1d06:	e8 8b       	std	Y+16, r30	; 0x10
    1d08:	66 24       	eor	r6, r6
    1d0a:	63 94       	inc	r6
    1d0c:	71 2c       	mov	r7, r1
    1d0e:	81 2c       	mov	r8, r1
    1d10:	91 2c       	mov	r9, r1
    1d12:	aa e0       	ldi	r26, 0x0A	; 10
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	93 01       	movw	r18, r6
    1d18:	a4 01       	movw	r20, r8
    1d1a:	0e 94 79 14 	call	0x28f2	; 0x28f2 <__muluhisi3>
    1d1e:	1b 01       	movw	r2, r22
    1d20:	2c 01       	movw	r4, r24
    1d22:	c7 01       	movw	r24, r14
    1d24:	b6 01       	movw	r22, r12
    1d26:	91 01       	movw	r18, r2
    1d28:	a2 01       	movw	r20, r4
    1d2a:	0e 94 4b 14 	call	0x2896	; 0x2896 <__divmodsi4>
    1d2e:	93 01       	movw	r18, r6
    1d30:	a4 01       	movw	r20, r8
    1d32:	0e 94 4b 14 	call	0x2896	; 0x2896 <__divmodsi4>
    1d36:	e8 89       	ldd	r30, Y+16	; 0x10
    1d38:	f9 89       	ldd	r31, Y+17	; 0x11
    1d3a:	21 93       	st	Z+, r18
    1d3c:	f9 8b       	std	Y+17, r31	; 0x11
    1d3e:	e8 8b       	std	Y+16, r30	; 0x10
    1d40:	82 2f       	mov	r24, r18
    1d42:	22 0f       	add	r18, r18
    1d44:	99 0b       	sbc	r25, r25
    1d46:	aa 0b       	sbc	r26, r26
    1d48:	bb 0b       	sbc	r27, r27
    1d4a:	c8 1a       	sub	r12, r24
    1d4c:	d9 0a       	sbc	r13, r25
    1d4e:	ea 0a       	sbc	r14, r26
    1d50:	fb 0a       	sbc	r15, r27
    1d52:	31 01       	movw	r6, r2
    1d54:	42 01       	movw	r8, r4
    1d56:	0e 17       	cp	r16, r30
    1d58:	1f 07       	cpc	r17, r31
    1d5a:	d9 f6       	brne	.-74     	; 0x1d12 <uart_writedec32+0x74>
    1d5c:	8a 89       	ldd	r24, Y+18	; 0x12
    1d5e:	9b 89       	ldd	r25, Y+19	; 0x13
    1d60:	89 2b       	or	r24, r25
    1d62:	11 f0       	breq	.+4      	; 0x1d68 <uart_writedec32+0xca>
    1d64:	8d e2       	ldi	r24, 0x2D	; 45
    1d66:	01 c0       	rjmp	.+2      	; 0x1d6a <uart_writedec32+0xcc>
    1d68:	80 e2       	ldi	r24, 0x20	; 32
    1d6a:	0e 94 47 10 	call	0x208e	; 0x208e <serial_writechar>
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	f8 01       	movw	r30, r16
    1d74:	82 91       	ld	r24, -Z
    1d76:	8f 01       	movw	r16, r30
    1d78:	81 11       	cpse	r24, r1
    1d7a:	06 c0       	rjmp	.+12     	; 0x1d88 <uart_writedec32+0xea>
    1d7c:	21 15       	cp	r18, r1
    1d7e:	31 05       	cpc	r19, r1
    1d80:	19 f4       	brne	.+6      	; 0x1d88 <uart_writedec32+0xea>
    1d82:	ea 15       	cp	r30, r10
    1d84:	fb 05       	cpc	r31, r11
    1d86:	29 f4       	brne	.+10     	; 0x1d92 <uart_writedec32+0xf4>
    1d88:	80 5d       	subi	r24, 0xD0	; 208
    1d8a:	0e 94 47 10 	call	0x208e	; 0x208e <serial_writechar>
    1d8e:	21 e0       	ldi	r18, 0x01	; 1
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	0a 15       	cp	r16, r10
    1d94:	1b 05       	cpc	r17, r11
    1d96:	69 f7       	brne	.-38     	; 0x1d72 <uart_writedec32+0xd4>
    1d98:	63 96       	adiw	r28, 0x13	; 19
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	f8 94       	cli
    1d9e:	de bf       	out	0x3e, r29	; 62
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	cd bf       	out	0x3d, r28	; 61
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	ff 90       	pop	r15
    1dae:	ef 90       	pop	r14
    1db0:	df 90       	pop	r13
    1db2:	cf 90       	pop	r12
    1db4:	bf 90       	pop	r11
    1db6:	af 90       	pop	r10
    1db8:	9f 90       	pop	r9
    1dba:	8f 90       	pop	r8
    1dbc:	7f 90       	pop	r7
    1dbe:	6f 90       	pop	r6
    1dc0:	5f 90       	pop	r5
    1dc2:	4f 90       	pop	r4
    1dc4:	3f 90       	pop	r3
    1dc6:	2f 90       	pop	r2
    1dc8:	08 95       	ret

00001dca <dump_eeprom>:
    1dca:	2f 92       	push	r2
    1dcc:	3f 92       	push	r3
    1dce:	4f 92       	push	r4
    1dd0:	5f 92       	push	r5
    1dd2:	6f 92       	push	r6
    1dd4:	7f 92       	push	r7
    1dd6:	8f 92       	push	r8
    1dd8:	9f 92       	push	r9
    1dda:	af 92       	push	r10
    1ddc:	bf 92       	push	r11
    1dde:	cf 92       	push	r12
    1de0:	df 92       	push	r13
    1de2:	ef 92       	push	r14
    1de4:	ff 92       	push	r15
    1de6:	0f 93       	push	r16
    1de8:	1f 93       	push	r17
    1dea:	cf 93       	push	r28
    1dec:	df 93       	push	r29
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
    1df2:	64 97       	sbiw	r28, 0x14	; 20
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	f8 94       	cli
    1df8:	de bf       	out	0x3e, r29	; 62
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	cd bf       	out	0x3d, r28	; 61
    1dfe:	8c 01       	movw	r16, r24
    1e00:	61 15       	cp	r22, r1
    1e02:	71 05       	cpc	r23, r1
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <dump_eeprom+0x3e>
    1e06:	92 c0       	rjmp	.+292    	; 0x1f2c <dump_eeprom+0x162>
    1e08:	81 2c       	mov	r8, r1
    1e0a:	91 2c       	mov	r9, r1
    1e0c:	54 01       	movw	r10, r8
    1e0e:	cb 01       	movw	r24, r22
    1e10:	a0 e0       	ldi	r26, 0x00	; 0
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	89 8b       	std	Y+17, r24	; 0x11
    1e16:	9a 8b       	std	Y+18, r25	; 0x12
    1e18:	ab 8b       	std	Y+19, r26	; 0x13
    1e1a:	bc 8b       	std	Y+20, r27	; 0x14
    1e1c:	de 01       	movw	r26, r28
    1e1e:	11 96       	adiw	r26, 0x01	; 1
    1e20:	1d 01       	movw	r2, r26
    1e22:	89 89       	ldd	r24, Y+17	; 0x11
    1e24:	9a 89       	ldd	r25, Y+18	; 0x12
    1e26:	ab 89       	ldd	r26, Y+19	; 0x13
    1e28:	bc 89       	ldd	r27, Y+20	; 0x14
    1e2a:	88 16       	cp	r8, r24
    1e2c:	99 06       	cpc	r9, r25
    1e2e:	aa 06       	cpc	r10, r26
    1e30:	bb 06       	cpc	r11, r27
    1e32:	08 f0       	brcs	.+2      	; 0x1e36 <dump_eeprom+0x6c>
    1e34:	7b c0       	rjmp	.+246    	; 0x1f2c <dump_eeprom+0x162>
    1e36:	81 2f       	mov	r24, r17
    1e38:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <uart_writehex8>
    1e3c:	80 2f       	mov	r24, r16
    1e3e:	80 7f       	andi	r24, 0xF0	; 240
    1e40:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <uart_writehex8>
    1e44:	80 e2       	ldi	r24, 0x20	; 32
    1e46:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <uart_writechar>
    1e4a:	61 01       	movw	r12, r2
    1e4c:	78 01       	movw	r14, r16
    1e4e:	41 2c       	mov	r4, r1
    1e50:	51 2c       	mov	r5, r1
    1e52:	32 01       	movw	r6, r4
    1e54:	41 e0       	ldi	r20, 0x01	; 1
    1e56:	b6 01       	movw	r22, r12
    1e58:	c7 01       	movw	r24, r14
    1e5a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <eeprom_readbuf>
    1e5e:	bf ef       	ldi	r27, 0xFF	; 255
    1e60:	eb 1a       	sub	r14, r27
    1e62:	fb 0a       	sbc	r15, r27
    1e64:	ef ef       	ldi	r30, 0xFF	; 255
    1e66:	4e 1a       	sub	r4, r30
    1e68:	5e 0a       	sbc	r5, r30
    1e6a:	6e 0a       	sbc	r6, r30
    1e6c:	7e 0a       	sbc	r7, r30
    1e6e:	ff ef       	ldi	r31, 0xFF	; 255
    1e70:	8f 1a       	sub	r8, r31
    1e72:	9f 0a       	sbc	r9, r31
    1e74:	af 0a       	sbc	r10, r31
    1e76:	bf 0a       	sbc	r11, r31
    1e78:	89 89       	ldd	r24, Y+17	; 0x11
    1e7a:	9a 89       	ldd	r25, Y+18	; 0x12
    1e7c:	ab 89       	ldd	r26, Y+19	; 0x13
    1e7e:	bc 89       	ldd	r27, Y+20	; 0x14
    1e80:	88 16       	cp	r8, r24
    1e82:	99 06       	cpc	r9, r25
    1e84:	aa 06       	cpc	r10, r26
    1e86:	bb 06       	cpc	r11, r27
    1e88:	50 f0       	brcs	.+20     	; 0x1e9e <dump_eeprom+0xd4>
    1e8a:	68 01       	movw	r12, r16
    1e8c:	9f e0       	ldi	r25, 0x0F	; 15
    1e8e:	c9 22       	and	r12, r25
    1e90:	dd 24       	eor	r13, r13
    1e92:	00 e0       	ldi	r16, 0x00	; 0
    1e94:	10 e0       	ldi	r17, 0x00	; 0
    1e96:	32 01       	movw	r6, r4
    1e98:	6c 0c       	add	r6, r12
    1e9a:	7d 1c       	adc	r7, r13
    1e9c:	09 c0       	rjmp	.+18     	; 0x1eb0 <dump_eeprom+0xe6>
    1e9e:	af ef       	ldi	r26, 0xFF	; 255
    1ea0:	ca 1a       	sub	r12, r26
    1ea2:	da 0a       	sbc	r13, r26
    1ea4:	c7 01       	movw	r24, r14
    1ea6:	8f 70       	andi	r24, 0x0F	; 15
    1ea8:	99 27       	eor	r25, r25
    1eaa:	89 2b       	or	r24, r25
    1eac:	99 f6       	brne	.-90     	; 0x1e54 <dump_eeprom+0x8a>
    1eae:	ed cf       	rjmp	.-38     	; 0x1e8a <dump_eeprom+0xc0>
    1eb0:	0c 15       	cp	r16, r12
    1eb2:	1d 05       	cpc	r17, r13
    1eb4:	18 f0       	brcs	.+6      	; 0x1ebc <dump_eeprom+0xf2>
    1eb6:	06 15       	cp	r16, r6
    1eb8:	17 05       	cpc	r17, r7
    1eba:	28 f0       	brcs	.+10     	; 0x1ec6 <dump_eeprom+0xfc>
    1ebc:	8b ec       	ldi	r24, 0xCB	; 203
    1ebe:	91 e0       	ldi	r25, 0x01	; 1
    1ec0:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <uart_writestr>
    1ec4:	0b c0       	rjmp	.+22     	; 0x1edc <dump_eeprom+0x112>
    1ec6:	f8 01       	movw	r30, r16
    1ec8:	ec 19       	sub	r30, r12
    1eca:	fd 09       	sbc	r31, r13
    1ecc:	e2 0d       	add	r30, r2
    1ece:	f3 1d       	adc	r31, r3
    1ed0:	80 81       	ld	r24, Z
    1ed2:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <uart_writehex8>
    1ed6:	80 e2       	ldi	r24, 0x20	; 32
    1ed8:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <uart_writechar>
    1edc:	0f 5f       	subi	r16, 0xFF	; 255
    1ede:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee0:	00 31       	cpi	r16, 0x10	; 16
    1ee2:	11 05       	cpc	r17, r1
    1ee4:	29 f7       	brne	.-54     	; 0x1eb0 <dump_eeprom+0xe6>
    1ee6:	00 e0       	ldi	r16, 0x00	; 0
    1ee8:	10 e0       	ldi	r17, 0x00	; 0
    1eea:	c0 16       	cp	r12, r16
    1eec:	d1 06       	cpc	r13, r17
    1eee:	31 f0       	breq	.+12     	; 0x1efc <dump_eeprom+0x132>
    1ef0:	80 e2       	ldi	r24, 0x20	; 32
    1ef2:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <uart_writechar>
    1ef6:	0f 5f       	subi	r16, 0xFF	; 255
    1ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    1efa:	f7 cf       	rjmp	.-18     	; 0x1eea <dump_eeprom+0x120>
    1efc:	81 01       	movw	r16, r2
    1efe:	c8 01       	movw	r24, r16
    1f00:	82 19       	sub	r24, r2
    1f02:	93 09       	sbc	r25, r3
    1f04:	84 15       	cp	r24, r4
    1f06:	95 05       	cpc	r25, r5
    1f08:	58 f4       	brcc	.+22     	; 0x1f20 <dump_eeprom+0x156>
    1f0a:	f8 01       	movw	r30, r16
    1f0c:	81 91       	ld	r24, Z+
    1f0e:	8f 01       	movw	r16, r30
    1f10:	90 ee       	ldi	r25, 0xE0	; 224
    1f12:	98 0f       	add	r25, r24
    1f14:	90 36       	cpi	r25, 0x60	; 96
    1f16:	08 f0       	brcs	.+2      	; 0x1f1a <dump_eeprom+0x150>
    1f18:	8e e2       	ldi	r24, 0x2E	; 46
    1f1a:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <uart_writechar>
    1f1e:	ef cf       	rjmp	.-34     	; 0x1efe <dump_eeprom+0x134>
    1f20:	8f ec       	ldi	r24, 0xCF	; 207
    1f22:	91 e0       	ldi	r25, 0x01	; 1
    1f24:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <uart_writestr>
    1f28:	87 01       	movw	r16, r14
    1f2a:	7b cf       	rjmp	.-266    	; 0x1e22 <dump_eeprom+0x58>
    1f2c:	64 96       	adiw	r28, 0x14	; 20
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	f8 94       	cli
    1f32:	de bf       	out	0x3e, r29	; 62
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	cd bf       	out	0x3d, r28	; 61
    1f38:	df 91       	pop	r29
    1f3a:	cf 91       	pop	r28
    1f3c:	1f 91       	pop	r17
    1f3e:	0f 91       	pop	r16
    1f40:	ff 90       	pop	r15
    1f42:	ef 90       	pop	r14
    1f44:	df 90       	pop	r13
    1f46:	cf 90       	pop	r12
    1f48:	bf 90       	pop	r11
    1f4a:	af 90       	pop	r10
    1f4c:	9f 90       	pop	r9
    1f4e:	8f 90       	pop	r8
    1f50:	7f 90       	pop	r7
    1f52:	6f 90       	pop	r6
    1f54:	5f 90       	pop	r5
    1f56:	4f 90       	pop	r4
    1f58:	3f 90       	pop	r3
    1f5a:	2f 90       	pop	r2
    1f5c:	08 95       	ret

00001f5e <serial_init>:
    1f5e:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1f62:	87 e6       	ldi	r24, 0x67	; 103
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1f6a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1f6e:	e1 ec       	ldi	r30, 0xC1	; 193
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	88 e1       	ldi	r24, 0x18	; 24
    1f74:	80 83       	st	Z, r24
    1f76:	86 e0       	ldi	r24, 0x06	; 6
    1f78:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    1f7c:	80 81       	ld	r24, Z
    1f7e:	80 6a       	ori	r24, 0xA0	; 160
    1f80:	80 83       	st	Z, r24
    1f82:	08 95       	ret

00001f84 <__vector_18>:
    1f84:	1f 92       	push	r1
    1f86:	0f 92       	push	r0
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	0f 92       	push	r0
    1f8c:	11 24       	eor	r1, r1
    1f8e:	2f 93       	push	r18
    1f90:	8f 93       	push	r24
    1f92:	9f 93       	push	r25
    1f94:	ef 93       	push	r30
    1f96:	ff 93       	push	r31
    1f98:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <rxtail>
    1f9c:	20 91 66 02 	lds	r18, 0x0266	; 0x800266 <rxhead>
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	82 1b       	sub	r24, r18
    1fa4:	91 09       	sbc	r25, r1
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	8f 73       	andi	r24, 0x3F	; 63
    1faa:	99 27       	eor	r25, r25
    1fac:	89 2b       	or	r24, r25
    1fae:	79 f0       	breq	.+30     	; 0x1fce <__vector_18+0x4a>
    1fb0:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <rxhead>
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1fba:	e4 5f       	subi	r30, 0xF4	; 244
    1fbc:	fc 4f       	sbci	r31, 0xFC	; 252
    1fbe:	80 83       	st	Z, r24
    1fc0:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <rxhead>
    1fc4:	8f 5f       	subi	r24, 0xFF	; 255
    1fc6:	8f 73       	andi	r24, 0x3F	; 63
    1fc8:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <rxhead>
    1fcc:	02 c0       	rjmp	.+4      	; 0x1fd2 <__vector_18+0x4e>
    1fce:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1fd2:	ff 91       	pop	r31
    1fd4:	ef 91       	pop	r30
    1fd6:	9f 91       	pop	r25
    1fd8:	8f 91       	pop	r24
    1fda:	2f 91       	pop	r18
    1fdc:	0f 90       	pop	r0
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	0f 90       	pop	r0
    1fe2:	1f 90       	pop	r1
    1fe4:	18 95       	reti

00001fe6 <__vector_19>:
    1fe6:	1f 92       	push	r1
    1fe8:	0f 92       	push	r0
    1fea:	0f b6       	in	r0, 0x3f	; 63
    1fec:	0f 92       	push	r0
    1fee:	11 24       	eor	r1, r1
    1ff0:	2f 93       	push	r18
    1ff2:	8f 93       	push	r24
    1ff4:	9f 93       	push	r25
    1ff6:	ef 93       	push	r30
    1ff8:	ff 93       	push	r31
    1ffa:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <txhead>
    1ffe:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <txtail>
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	82 1b       	sub	r24, r18
    2006:	91 09       	sbc	r25, r1
    2008:	8f 73       	andi	r24, 0x3F	; 63
    200a:	99 27       	eor	r25, r25
    200c:	89 2b       	or	r24, r25
    200e:	79 f0       	breq	.+30     	; 0x202e <__vector_19+0x48>
    2010:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <txtail>
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	e4 5b       	subi	r30, 0xB4	; 180
    2018:	fc 4f       	sbci	r31, 0xFC	; 252
    201a:	80 81       	ld	r24, Z
    201c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2020:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <txtail>
    2024:	8f 5f       	subi	r24, 0xFF	; 255
    2026:	8f 73       	andi	r24, 0x3F	; 63
    2028:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <txtail>
    202c:	05 c0       	rjmp	.+10     	; 0x2038 <__vector_19+0x52>
    202e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2032:	8f 7d       	andi	r24, 0xDF	; 223
    2034:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2038:	ff 91       	pop	r31
    203a:	ef 91       	pop	r30
    203c:	9f 91       	pop	r25
    203e:	8f 91       	pop	r24
    2040:	2f 91       	pop	r18
    2042:	0f 90       	pop	r0
    2044:	0f be       	out	0x3f, r0	; 63
    2046:	0f 90       	pop	r0
    2048:	1f 90       	pop	r1
    204a:	18 95       	reti

0000204c <serial_rxchars>:
    204c:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <rxhead>
    2050:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <rxtail>
    2054:	89 1b       	sub	r24, r25
    2056:	8f 73       	andi	r24, 0x3F	; 63
    2058:	08 95       	ret

0000205a <serial_popchar>:
    205a:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <rxhead>
    205e:	20 91 65 02 	lds	r18, 0x0265	; 0x800265 <rxtail>
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	82 1b       	sub	r24, r18
    2066:	91 09       	sbc	r25, r1
    2068:	8f 73       	andi	r24, 0x3F	; 63
    206a:	99 27       	eor	r25, r25
    206c:	89 2b       	or	r24, r25
    206e:	69 f0       	breq	.+26     	; 0x208a <serial_popchar+0x30>
    2070:	e0 91 65 02 	lds	r30, 0x0265	; 0x800265 <rxtail>
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	e4 5f       	subi	r30, 0xF4	; 244
    2078:	fc 4f       	sbci	r31, 0xFC	; 252
    207a:	80 81       	ld	r24, Z
    207c:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <rxtail>
    2080:	9f 5f       	subi	r25, 0xFF	; 255
    2082:	9f 73       	andi	r25, 0x3F	; 63
    2084:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <rxtail>
    2088:	08 95       	ret
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	08 95       	ret

0000208e <serial_writechar>:
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	07 fe       	sbrs	r0, 7
    2092:	0e c0       	rjmp	.+28     	; 0x20b0 <serial_writechar+0x22>
    2094:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <txtail>
    2098:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <txhead>
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	29 1b       	sub	r18, r25
    20a0:	31 09       	sbc	r19, r1
    20a2:	21 50       	subi	r18, 0x01	; 1
    20a4:	31 09       	sbc	r19, r1
    20a6:	2f 73       	andi	r18, 0x3F	; 63
    20a8:	33 27       	eor	r19, r19
    20aa:	23 2b       	or	r18, r19
    20ac:	99 f3       	breq	.-26     	; 0x2094 <serial_writechar+0x6>
    20ae:	0d c0       	rjmp	.+26     	; 0x20ca <serial_writechar+0x3c>
    20b0:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <txtail>
    20b4:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <txhead>
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	29 1b       	sub	r18, r25
    20bc:	31 09       	sbc	r19, r1
    20be:	21 50       	subi	r18, 0x01	; 1
    20c0:	31 09       	sbc	r19, r1
    20c2:	2f 73       	andi	r18, 0x3F	; 63
    20c4:	33 27       	eor	r19, r19
    20c6:	23 2b       	or	r18, r19
    20c8:	61 f0       	breq	.+24     	; 0x20e2 <serial_writechar+0x54>
    20ca:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <txhead>
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	e4 5b       	subi	r30, 0xB4	; 180
    20d2:	fc 4f       	sbci	r31, 0xFC	; 252
    20d4:	80 83       	st	Z, r24
    20d6:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <txhead>
    20da:	8f 5f       	subi	r24, 0xFF	; 255
    20dc:	8f 73       	andi	r24, 0x3F	; 63
    20de:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <txhead>
    20e2:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    20e6:	80 62       	ori	r24, 0x20	; 32
    20e8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    20ec:	08 95       	ret

000020ee <serial_writestr>:
    20ee:	1f 93       	push	r17
    20f0:	cf 93       	push	r28
    20f2:	df 93       	push	r29
    20f4:	ec 01       	movw	r28, r24
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	11 e0       	ldi	r17, 0x01	; 1
    20fa:	18 0f       	add	r17, r24
    20fc:	fe 01       	movw	r30, r28
    20fe:	e8 0f       	add	r30, r24
    2100:	f1 1d       	adc	r31, r1
    2102:	80 81       	ld	r24, Z
    2104:	88 23       	and	r24, r24
    2106:	21 f0       	breq	.+8      	; 0x2110 <serial_writestr+0x22>
    2108:	0e 94 47 10 	call	0x208e	; 0x208e <serial_writechar>
    210c:	81 2f       	mov	r24, r17
    210e:	f4 cf       	rjmp	.-24     	; 0x20f8 <serial_writestr+0xa>
    2110:	df 91       	pop	r29
    2112:	cf 91       	pop	r28
    2114:	1f 91       	pop	r17
    2116:	08 95       	ret

00002118 <serial_writestr_P>:
    2118:	1f 93       	push	r17
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
    211e:	ec 01       	movw	r28, r24
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	11 e0       	ldi	r17, 0x01	; 1
    2124:	18 0f       	add	r17, r24
    2126:	fe 01       	movw	r30, r28
    2128:	e8 0f       	add	r30, r24
    212a:	f1 1d       	adc	r31, r1
    212c:	84 91       	lpm	r24, Z
    212e:	88 23       	and	r24, r24
    2130:	21 f0       	breq	.+8      	; 0x213a <serial_writestr_P+0x22>
    2132:	0e 94 47 10 	call	0x208e	; 0x208e <serial_writechar>
    2136:	81 2f       	mov	r24, r17
    2138:	f4 cf       	rjmp	.-24     	; 0x2122 <serial_writestr_P+0xa>
    213a:	df 91       	pop	r29
    213c:	cf 91       	pop	r28
    213e:	1f 91       	pop	r17
    2140:	08 95       	ret

00002142 <_Z10delay_initv>:
    2142:	cf 93       	push	r28
    2144:	df 93       	push	r29
    2146:	00 d0       	rcall	.+0      	; 0x2148 <_Z10delay_initv+0x6>
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <_ZL11initialized>
    2150:	88 23       	and	r24, r24
    2152:	89 f5       	brne	.+98     	; 0x21b6 <_Z10delay_initv+0x74>
    2154:	8a ef       	ldi	r24, 0xFA	; 250
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	9a 83       	std	Y+2, r25	; 0x02
    215a:	89 83       	std	Y+1, r24	; 0x01
    215c:	87 e4       	ldi	r24, 0x47	; 71
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	29 81       	ldd	r18, Y+1	; 0x01
    2162:	21 50       	subi	r18, 0x01	; 1
    2164:	fc 01       	movw	r30, r24
    2166:	20 83       	st	Z, r18
    2168:	84 e4       	ldi	r24, 0x44	; 68
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	24 e4       	ldi	r18, 0x44	; 68
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	f9 01       	movw	r30, r18
    2172:	20 81       	ld	r18, Z
    2174:	22 60       	ori	r18, 0x02	; 2
    2176:	fc 01       	movw	r30, r24
    2178:	20 83       	st	Z, r18
    217a:	85 e4       	ldi	r24, 0x45	; 69
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	25 e4       	ldi	r18, 0x45	; 69
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	f9 01       	movw	r30, r18
    2184:	20 81       	ld	r18, Z
    2186:	23 60       	ori	r18, 0x03	; 3
    2188:	fc 01       	movw	r30, r24
    218a:	20 83       	st	Z, r18
    218c:	8f e5       	ldi	r24, 0x5F	; 95
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	2f e5       	ldi	r18, 0x5F	; 95
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	f9 01       	movw	r30, r18
    2196:	20 81       	ld	r18, Z
    2198:	20 68       	ori	r18, 0x80	; 128
    219a:	fc 01       	movw	r30, r24
    219c:	20 83       	st	Z, r18
    219e:	8e e6       	ldi	r24, 0x6E	; 110
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	2e e6       	ldi	r18, 0x6E	; 110
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	f9 01       	movw	r30, r18
    21a8:	20 81       	ld	r18, Z
    21aa:	22 60       	ori	r18, 0x02	; 2
    21ac:	fc 01       	movw	r30, r24
    21ae:	20 83       	st	Z, r18
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <_ZL11initialized>
    21b6:	00 00       	nop
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	df 91       	pop	r29
    21be:	cf 91       	pop	r28
    21c0:	08 95       	ret

000021c2 <_Z9delay_getj>:
    21c2:	cf 93       	push	r28
    21c4:	df 93       	push	r29
    21c6:	00 d0       	rcall	.+0      	; 0x21c8 <_Z9delay_getj+0x6>
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <_Z9delay_getj+0x8>
    21ca:	00 d0       	rcall	.+0      	; 0x21cc <_Z9delay_getj+0xa>
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	9e 83       	std	Y+6, r25	; 0x06
    21d2:	8d 83       	std	Y+5, r24	; 0x05
    21d4:	8f e5       	ldi	r24, 0x5F	; 95
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	fc 01       	movw	r30, r24
    21da:	80 81       	ld	r24, Z
    21dc:	08 2e       	mov	r0, r24
    21de:	00 0c       	add	r0, r0
    21e0:	99 0b       	sbc	r25, r25
    21e2:	80 78       	andi	r24, 0x80	; 128
    21e4:	99 27       	eor	r25, r25
    21e6:	9a 83       	std	Y+2, r25	; 0x02
    21e8:	89 83       	std	Y+1, r24	; 0x01
    21ea:	8f e5       	ldi	r24, 0x5F	; 95
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	2f e5       	ldi	r18, 0x5F	; 95
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	f9 01       	movw	r30, r18
    21f4:	20 81       	ld	r18, Z
    21f6:	2f 77       	andi	r18, 0x7F	; 127
    21f8:	fc 01       	movw	r30, r24
    21fa:	20 83       	st	Z, r18
    21fc:	8d 81       	ldd	r24, Y+5	; 0x05
    21fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2200:	88 0f       	add	r24, r24
    2202:	99 1f       	adc	r25, r25
    2204:	89 59       	subi	r24, 0x99	; 153
    2206:	9d 4f       	sbci	r25, 0xFD	; 253
    2208:	fc 01       	movw	r30, r24
    220a:	80 81       	ld	r24, Z
    220c:	91 81       	ldd	r25, Z+1	; 0x01
    220e:	9c 83       	std	Y+4, r25	; 0x04
    2210:	8b 83       	std	Y+3, r24	; 0x03
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	9a 81       	ldd	r25, Y+2	; 0x02
    2216:	89 2b       	or	r24, r25
    2218:	49 f0       	breq	.+18     	; 0x222c <_Z9delay_getj+0x6a>
    221a:	8f e5       	ldi	r24, 0x5F	; 95
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	2f e5       	ldi	r18, 0x5F	; 95
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	f9 01       	movw	r30, r18
    2224:	20 81       	ld	r18, Z
    2226:	20 68       	ori	r18, 0x80	; 128
    2228:	fc 01       	movw	r30, r24
    222a:	20 83       	st	Z, r18
    222c:	8b 81       	ldd	r24, Y+3	; 0x03
    222e:	9c 81       	ldd	r25, Y+4	; 0x04
    2230:	26 96       	adiw	r28, 0x06	; 6
    2232:	0f b6       	in	r0, 0x3f	; 63
    2234:	f8 94       	cli
    2236:	de bf       	out	0x3e, r29	; 62
    2238:	0f be       	out	0x3f, r0	; 63
    223a:	cd bf       	out	0x3d, r28	; 61
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	08 95       	ret

00002242 <_Z9delay_setjj>:
    2242:	cf 93       	push	r28
    2244:	df 93       	push	r29
    2246:	00 d0       	rcall	.+0      	; 0x2248 <_Z9delay_setjj+0x6>
    2248:	00 d0       	rcall	.+0      	; 0x224a <_Z9delay_setjj+0x8>
    224a:	00 d0       	rcall	.+0      	; 0x224c <_Z9delay_setjj+0xa>
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	9c 83       	std	Y+4, r25	; 0x04
    2252:	8b 83       	std	Y+3, r24	; 0x03
    2254:	7e 83       	std	Y+6, r23	; 0x06
    2256:	6d 83       	std	Y+5, r22	; 0x05
    2258:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <_ZL11initialized>
    225c:	88 23       	and	r24, r24
    225e:	11 f4       	brne	.+4      	; 0x2264 <_Z9delay_setjj+0x22>
    2260:	0e 94 a1 10 	call	0x2142	; 0x2142 <_Z10delay_initv>
    2264:	8f e5       	ldi	r24, 0x5F	; 95
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	fc 01       	movw	r30, r24
    226a:	80 81       	ld	r24, Z
    226c:	08 2e       	mov	r0, r24
    226e:	00 0c       	add	r0, r0
    2270:	99 0b       	sbc	r25, r25
    2272:	80 78       	andi	r24, 0x80	; 128
    2274:	99 27       	eor	r25, r25
    2276:	9a 83       	std	Y+2, r25	; 0x02
    2278:	89 83       	std	Y+1, r24	; 0x01
    227a:	8f e5       	ldi	r24, 0x5F	; 95
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	2f e5       	ldi	r18, 0x5F	; 95
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	f9 01       	movw	r30, r18
    2284:	20 81       	ld	r18, Z
    2286:	2f 77       	andi	r18, 0x7F	; 127
    2288:	fc 01       	movw	r30, r24
    228a:	20 83       	st	Z, r18
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	9c 81       	ldd	r25, Y+4	; 0x04
    2290:	88 0f       	add	r24, r24
    2292:	99 1f       	adc	r25, r25
    2294:	85 59       	subi	r24, 0x95	; 149
    2296:	9d 4f       	sbci	r25, 0xFD	; 253
    2298:	2d 81       	ldd	r18, Y+5	; 0x05
    229a:	3e 81       	ldd	r19, Y+6	; 0x06
    229c:	fc 01       	movw	r30, r24
    229e:	31 83       	std	Z+1, r19	; 0x01
    22a0:	20 83       	st	Z, r18
    22a2:	8b 81       	ldd	r24, Y+3	; 0x03
    22a4:	9c 81       	ldd	r25, Y+4	; 0x04
    22a6:	88 0f       	add	r24, r24
    22a8:	99 1f       	adc	r25, r25
    22aa:	89 59       	subi	r24, 0x99	; 153
    22ac:	9d 4f       	sbci	r25, 0xFD	; 253
    22ae:	fc 01       	movw	r30, r24
    22b0:	11 82       	std	Z+1, r1	; 0x01
    22b2:	10 82       	st	Z, r1
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	9a 81       	ldd	r25, Y+2	; 0x02
    22b8:	89 2b       	or	r24, r25
    22ba:	49 f0       	breq	.+18     	; 0x22ce <_Z9delay_setjj+0x8c>
    22bc:	8f e5       	ldi	r24, 0x5F	; 95
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	2f e5       	ldi	r18, 0x5F	; 95
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	f9 01       	movw	r30, r18
    22c6:	20 81       	ld	r18, Z
    22c8:	20 68       	ori	r18, 0x80	; 128
    22ca:	fc 01       	movw	r30, r24
    22cc:	20 83       	st	Z, r18
    22ce:	00 00       	nop
    22d0:	26 96       	adiw	r28, 0x06	; 6
    22d2:	0f b6       	in	r0, 0x3f	; 63
    22d4:	f8 94       	cli
    22d6:	de bf       	out	0x3e, r29	; 62
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	cd bf       	out	0x3d, r28	; 61
    22dc:	df 91       	pop	r29
    22de:	cf 91       	pop	r28
    22e0:	08 95       	ret

000022e2 <_Z12delay_isdonej>:
    22e2:	cf 93       	push	r28
    22e4:	df 93       	push	r29
    22e6:	00 d0       	rcall	.+0      	; 0x22e8 <_Z12delay_isdonej+0x6>
    22e8:	00 d0       	rcall	.+0      	; 0x22ea <_Z12delay_isdonej+0x8>
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	9c 83       	std	Y+4, r25	; 0x04
    22f0:	8b 83       	std	Y+3, r24	; 0x03
    22f2:	1a 82       	std	Y+2, r1	; 0x02
    22f4:	19 82       	std	Y+1, r1	; 0x01
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	9c 81       	ldd	r25, Y+4	; 0x04
    22fa:	88 0f       	add	r24, r24
    22fc:	99 1f       	adc	r25, r25
    22fe:	89 59       	subi	r24, 0x99	; 153
    2300:	9d 4f       	sbci	r25, 0xFD	; 253
    2302:	fc 01       	movw	r30, r24
    2304:	20 81       	ld	r18, Z
    2306:	31 81       	ldd	r19, Z+1	; 0x01
    2308:	8b 81       	ldd	r24, Y+3	; 0x03
    230a:	9c 81       	ldd	r25, Y+4	; 0x04
    230c:	88 0f       	add	r24, r24
    230e:	99 1f       	adc	r25, r25
    2310:	85 59       	subi	r24, 0x95	; 149
    2312:	9d 4f       	sbci	r25, 0xFD	; 253
    2314:	fc 01       	movw	r30, r24
    2316:	80 81       	ld	r24, Z
    2318:	91 81       	ldd	r25, Z+1	; 0x01
    231a:	41 e0       	ldi	r20, 0x01	; 1
    231c:	28 17       	cp	r18, r24
    231e:	39 07       	cpc	r19, r25
    2320:	09 f0       	breq	.+2      	; 0x2324 <_Z12delay_isdonej+0x42>
    2322:	40 e0       	ldi	r20, 0x00	; 0
    2324:	44 23       	and	r20, r20
    2326:	21 f0       	breq	.+8      	; 0x2330 <_Z12delay_isdonej+0x4e>
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	9a 83       	std	Y+2, r25	; 0x02
    232e:	89 83       	std	Y+1, r24	; 0x01
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	9a 81       	ldd	r25, Y+2	; 0x02
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	df 91       	pop	r29
    233e:	cf 91       	pop	r28
    2340:	08 95       	ret

00002342 <_Z11__vector_14v>:
    2342:	1f 92       	push	r1
    2344:	0f 92       	push	r0
    2346:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    234a:	0f 92       	push	r0
    234c:	11 24       	eor	r1, r1
    234e:	2f 93       	push	r18
    2350:	3f 93       	push	r19
    2352:	4f 93       	push	r20
    2354:	8f 93       	push	r24
    2356:	9f 93       	push	r25
    2358:	ef 93       	push	r30
    235a:	ff 93       	push	r31
    235c:	cf 93       	push	r28
    235e:	df 93       	push	r29
    2360:	00 d0       	rcall	.+0      	; 0x2362 <_Z11__vector_14v+0x20>
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	1a 82       	std	Y+2, r1	; 0x02
    2368:	19 82       	std	Y+1, r1	; 0x01
    236a:	22 e0       	ldi	r18, 0x02	; 2
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	9a 81       	ldd	r25, Y+2	; 0x02
    2372:	82 17       	cp	r24, r18
    2374:	93 07       	cpc	r25, r19
    2376:	a0 f5       	brcc	.+104    	; 0x23e0 <_Z11__vector_14v+0x9e>
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	9a 81       	ldd	r25, Y+2	; 0x02
    237c:	88 0f       	add	r24, r24
    237e:	99 1f       	adc	r25, r25
    2380:	89 59       	subi	r24, 0x99	; 153
    2382:	9d 4f       	sbci	r25, 0xFD	; 253
    2384:	fc 01       	movw	r30, r24
    2386:	20 81       	ld	r18, Z
    2388:	31 81       	ldd	r19, Z+1	; 0x01
    238a:	89 81       	ldd	r24, Y+1	; 0x01
    238c:	9a 81       	ldd	r25, Y+2	; 0x02
    238e:	88 0f       	add	r24, r24
    2390:	99 1f       	adc	r25, r25
    2392:	85 59       	subi	r24, 0x95	; 149
    2394:	9d 4f       	sbci	r25, 0xFD	; 253
    2396:	fc 01       	movw	r30, r24
    2398:	80 81       	ld	r24, Z
    239a:	91 81       	ldd	r25, Z+1	; 0x01
    239c:	41 e0       	ldi	r20, 0x01	; 1
    239e:	28 17       	cp	r18, r24
    23a0:	39 07       	cpc	r19, r25
    23a2:	08 f0       	brcs	.+2      	; 0x23a6 <_Z11__vector_14v+0x64>
    23a4:	40 e0       	ldi	r20, 0x00	; 0
    23a6:	44 23       	and	r20, r20
    23a8:	a9 f0       	breq	.+42     	; 0x23d4 <_Z11__vector_14v+0x92>
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	9a 81       	ldd	r25, Y+2	; 0x02
    23ae:	88 0f       	add	r24, r24
    23b0:	99 1f       	adc	r25, r25
    23b2:	89 59       	subi	r24, 0x99	; 153
    23b4:	9d 4f       	sbci	r25, 0xFD	; 253
    23b6:	fc 01       	movw	r30, r24
    23b8:	80 81       	ld	r24, Z
    23ba:	91 81       	ldd	r25, Z+1	; 0x01
    23bc:	9c 01       	movw	r18, r24
    23be:	2f 5f       	subi	r18, 0xFF	; 255
    23c0:	3f 4f       	sbci	r19, 0xFF	; 255
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	9a 81       	ldd	r25, Y+2	; 0x02
    23c6:	88 0f       	add	r24, r24
    23c8:	99 1f       	adc	r25, r25
    23ca:	89 59       	subi	r24, 0x99	; 153
    23cc:	9d 4f       	sbci	r25, 0xFD	; 253
    23ce:	fc 01       	movw	r30, r24
    23d0:	31 83       	std	Z+1, r19	; 0x01
    23d2:	20 83       	st	Z, r18
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
    23d6:	9a 81       	ldd	r25, Y+2	; 0x02
    23d8:	01 96       	adiw	r24, 0x01	; 1
    23da:	9a 83       	std	Y+2, r25	; 0x02
    23dc:	89 83       	std	Y+1, r24	; 0x01
    23de:	c5 cf       	rjmp	.-118    	; 0x236a <_Z11__vector_14v+0x28>
    23e0:	00 00       	nop
    23e2:	0f 90       	pop	r0
    23e4:	0f 90       	pop	r0
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	ff 91       	pop	r31
    23ec:	ef 91       	pop	r30
    23ee:	9f 91       	pop	r25
    23f0:	8f 91       	pop	r24
    23f2:	4f 91       	pop	r20
    23f4:	3f 91       	pop	r19
    23f6:	2f 91       	pop	r18
    23f8:	0f 90       	pop	r0
    23fa:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    23fe:	0f 90       	pop	r0
    2400:	1f 90       	pop	r1
    2402:	18 95       	reti

00002404 <_Z8led_initv>:
    2404:	cf 93       	push	r28
    2406:	df 93       	push	r29
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    240c:	84 e2       	ldi	r24, 0x24	; 36
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	24 e2       	ldi	r18, 0x24	; 36
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	f9 01       	movw	r30, r18
    2416:	20 81       	ld	r18, Z
    2418:	22 60       	ori	r18, 0x02	; 2
    241a:	fc 01       	movw	r30, r24
    241c:	20 83       	st	Z, r18
    241e:	85 e2       	ldi	r24, 0x25	; 37
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	25 e2       	ldi	r18, 0x25	; 37
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	f9 01       	movw	r30, r18
    2428:	20 81       	ld	r18, Z
    242a:	2d 7f       	andi	r18, 0xFD	; 253
    242c:	fc 01       	movw	r30, r24
    242e:	20 83       	st	Z, r18
    2430:	00 00       	nop
    2432:	df 91       	pop	r29
    2434:	cf 91       	pop	r28
    2436:	08 95       	ret

00002438 <_Z6led_onv>:
    2438:	cf 93       	push	r28
    243a:	df 93       	push	r29
    243c:	cd b7       	in	r28, 0x3d	; 61
    243e:	de b7       	in	r29, 0x3e	; 62
    2440:	85 e2       	ldi	r24, 0x25	; 37
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	25 e2       	ldi	r18, 0x25	; 37
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	f9 01       	movw	r30, r18
    244a:	20 81       	ld	r18, Z
    244c:	22 60       	ori	r18, 0x02	; 2
    244e:	fc 01       	movw	r30, r24
    2450:	20 83       	st	Z, r18
    2452:	00 00       	nop
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    2458:	08 95       	ret

0000245a <_Z7led_offv>:
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	cd b7       	in	r28, 0x3d	; 61
    2460:	de b7       	in	r29, 0x3e	; 62
    2462:	85 e2       	ldi	r24, 0x25	; 37
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	25 e2       	ldi	r18, 0x25	; 37
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	f9 01       	movw	r30, r18
    246c:	20 81       	ld	r18, Z
    246e:	2d 7f       	andi	r18, 0xFD	; 253
    2470:	fc 01       	movw	r30, r24
    2472:	20 83       	st	Z, r18
    2474:	00 00       	nop
    2476:	df 91       	pop	r29
    2478:	cf 91       	pop	r28
    247a:	08 95       	ret

0000247c <_Z9led_is_onv>:
    247c:	cf 93       	push	r28
    247e:	df 93       	push	r29
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
    2484:	85 e2       	ldi	r24, 0x25	; 37
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	fc 01       	movw	r30, r24
    248a:	80 81       	ld	r24, Z
    248c:	88 2f       	mov	r24, r24
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	82 70       	andi	r24, 0x02	; 2
    2492:	99 27       	eor	r25, r25
    2494:	89 2b       	or	r24, r25
    2496:	19 f0       	breq	.+6      	; 0x249e <_Z9led_is_onv+0x22>
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	02 c0       	rjmp	.+4      	; 0x24a2 <_Z9led_is_onv+0x26>
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	df 91       	pop	r29
    24a4:	cf 91       	pop	r28
    24a6:	08 95       	ret

000024a8 <_Z13led_set_blinkPc>:
    24a8:	cf 93       	push	r28
    24aa:	df 93       	push	r29
    24ac:	00 d0       	rcall	.+0      	; 0x24ae <_Z13led_set_blinkPc+0x6>
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
    24b2:	9a 83       	std	Y+2, r25	; 0x02
    24b4:	89 83       	std	Y+1, r24	; 0x01
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ba:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <Blink_msg+0x1>
    24be:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <Blink_msg>
    24c2:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <Blink_pos+0x1>
    24c6:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <Blink_pos>
    24ca:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <blink_state+0x1>
    24ce:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <blink_state>
    24d2:	60 e0       	ldi	r22, 0x00	; 0
    24d4:	70 e0       	ldi	r23, 0x00	; 0
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	0e 94 21 11 	call	0x2242	; 0x2242 <_Z9delay_setjj>
    24de:	0e 94 2d 12 	call	0x245a	; 0x245a <_Z7led_offv>
    24e2:	00 00       	nop
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	df 91       	pop	r29
    24ea:	cf 91       	pop	r28
    24ec:	08 95       	ret

000024ee <_Z10led_updatev>:
    24ee:	cf 93       	push	r28
    24f0:	df 93       	push	r29
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
    24f6:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <blink_state>
    24fa:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <blink_state+0x1>
    24fe:	00 97       	sbiw	r24, 0x00	; 0
    2500:	21 f0       	breq	.+8      	; 0x250a <_Z10led_updatev+0x1c>
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	09 f4       	brne	.+2      	; 0x2508 <_Z10led_updatev+0x1a>
    2506:	55 c0       	rjmp	.+170    	; 0x25b2 <_Z10led_updatev+0xc4>
    2508:	89 c0       	rjmp	.+274    	; 0x261c <_Z10led_updatev+0x12e>
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	0e 94 71 11 	call	0x22e2	; 0x22e2 <_Z12delay_isdonej>
    2512:	21 e0       	ldi	r18, 0x01	; 1
    2514:	89 2b       	or	r24, r25
    2516:	09 f4       	brne	.+2      	; 0x251a <_Z10led_updatev+0x2c>
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	22 23       	and	r18, r18
    251c:	09 f4       	brne	.+2      	; 0x2520 <_Z10led_updatev+0x32>
    251e:	7b c0       	rjmp	.+246    	; 0x2616 <_Z10led_updatev+0x128>
    2520:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <Blink_msg>
    2524:	30 91 71 02 	lds	r19, 0x0271	; 0x800271 <Blink_msg+0x1>
    2528:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <Blink_pos>
    252c:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <Blink_pos+0x1>
    2530:	82 0f       	add	r24, r18
    2532:	93 1f       	adc	r25, r19
    2534:	fc 01       	movw	r30, r24
    2536:	80 81       	ld	r24, Z
    2538:	08 2e       	mov	r0, r24
    253a:	00 0c       	add	r0, r0
    253c:	99 0b       	sbc	r25, r25
    253e:	8d 32       	cpi	r24, 0x2D	; 45
    2540:	91 05       	cpc	r25, r1
    2542:	31 f0       	breq	.+12     	; 0x2550 <_Z10led_updatev+0x62>
    2544:	8e 32       	cpi	r24, 0x2E	; 46
    2546:	91 05       	cpc	r25, r1
    2548:	91 f0       	breq	.+36     	; 0x256e <_Z10led_updatev+0x80>
    254a:	80 97       	sbiw	r24, 0x20	; 32
    254c:	f9 f0       	breq	.+62     	; 0x258c <_Z10led_updatev+0x9e>
    254e:	27 c0       	rjmp	.+78     	; 0x259e <_Z10led_updatev+0xb0>
    2550:	0e 94 1c 12 	call	0x2438	; 0x2438 <_Z6led_onv>
    2554:	6e ee       	ldi	r22, 0xEE	; 238
    2556:	72 e0       	ldi	r23, 0x02	; 2
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	0e 94 21 11 	call	0x2242	; 0x2242 <_Z9delay_setjj>
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <blink_state+0x1>
    2568:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <blink_state>
    256c:	21 c0       	rjmp	.+66     	; 0x25b0 <_Z10led_updatev+0xc2>
    256e:	0e 94 1c 12 	call	0x2438	; 0x2438 <_Z6led_onv>
    2572:	6a ef       	ldi	r22, 0xFA	; 250
    2574:	70 e0       	ldi	r23, 0x00	; 0
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	0e 94 21 11 	call	0x2242	; 0x2242 <_Z9delay_setjj>
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <blink_state+0x1>
    2586:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <blink_state>
    258a:	12 c0       	rjmp	.+36     	; 0x25b0 <_Z10led_updatev+0xc2>
    258c:	0e 94 2d 12 	call	0x245a	; 0x245a <_Z7led_offv>
    2590:	68 ee       	ldi	r22, 0xE8	; 232
    2592:	73 e0       	ldi	r23, 0x03	; 3
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	0e 94 21 11 	call	0x2242	; 0x2242 <_Z9delay_setjj>
    259c:	09 c0       	rjmp	.+18     	; 0x25b0 <_Z10led_updatev+0xc2>
    259e:	0e 94 2d 12 	call	0x245a	; 0x245a <_Z7led_offv>
    25a2:	60 e0       	ldi	r22, 0x00	; 0
    25a4:	70 e0       	ldi	r23, 0x00	; 0
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	0e 94 21 11 	call	0x2242	; 0x2242 <_Z9delay_setjj>
    25ae:	00 00       	nop
    25b0:	32 c0       	rjmp	.+100    	; 0x2616 <_Z10led_updatev+0x128>
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	0e 94 71 11 	call	0x22e2	; 0x22e2 <_Z12delay_isdonej>
    25ba:	21 e0       	ldi	r18, 0x01	; 1
    25bc:	89 2b       	or	r24, r25
    25be:	09 f4       	brne	.+2      	; 0x25c2 <_Z10led_updatev+0xd4>
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	22 23       	and	r18, r18
    25c4:	51 f1       	breq	.+84     	; 0x261a <_Z10led_updatev+0x12c>
    25c6:	0e 94 2d 12 	call	0x245a	; 0x245a <_Z7led_offv>
    25ca:	64 e6       	ldi	r22, 0x64	; 100
    25cc:	70 e0       	ldi	r23, 0x00	; 0
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	0e 94 21 11 	call	0x2242	; 0x2242 <_Z9delay_setjj>
    25d6:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <Blink_pos>
    25da:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <Blink_pos+0x1>
    25de:	01 96       	adiw	r24, 0x01	; 1
    25e0:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <Blink_pos+0x1>
    25e4:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <Blink_pos>
    25e8:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <Blink_msg>
    25ec:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <Blink_msg+0x1>
    25f0:	0e 94 84 14 	call	0x2908	; 0x2908 <strlen>
    25f4:	9c 01       	movw	r18, r24
    25f6:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <Blink_pos>
    25fa:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <Blink_pos+0x1>
    25fe:	82 17       	cp	r24, r18
    2600:	93 07       	cpc	r25, r19
    2602:	20 f0       	brcs	.+8      	; 0x260c <_Z10led_updatev+0x11e>
    2604:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <Blink_pos+0x1>
    2608:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <Blink_pos>
    260c:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <blink_state+0x1>
    2610:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <blink_state>
    2614:	02 c0       	rjmp	.+4      	; 0x261a <_Z10led_updatev+0x12c>
    2616:	00 00       	nop
    2618:	01 c0       	rjmp	.+2      	; 0x261c <_Z10led_updatev+0x12e>
    261a:	00 00       	nop
    261c:	00 00       	nop
    261e:	df 91       	pop	r29
    2620:	cf 91       	pop	r28
    2622:	08 95       	ret

00002624 <_Z11timer1_initv>:
    2624:	cf 93       	push	r28
    2626:	df 93       	push	r29
    2628:	00 d0       	rcall	.+0      	; 0x262a <_Z11timer1_initv+0x6>
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	89 e0       	ldi	r24, 0x09	; 9
    2630:	9d e3       	ldi	r25, 0x3D	; 61
    2632:	9a 83       	std	Y+2, r25	; 0x02
    2634:	89 83       	std	Y+1, r24	; 0x01
    2636:	81 e8       	ldi	r24, 0x81	; 129
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	21 e8       	ldi	r18, 0x81	; 129
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	f9 01       	movw	r30, r18
    2640:	20 81       	ld	r18, Z
    2642:	28 60       	ori	r18, 0x08	; 8
    2644:	fc 01       	movw	r30, r24
    2646:	20 83       	st	Z, r18
    2648:	81 e8       	ldi	r24, 0x81	; 129
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	21 e8       	ldi	r18, 0x81	; 129
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	f9 01       	movw	r30, r18
    2652:	20 81       	ld	r18, Z
    2654:	25 60       	ori	r18, 0x05	; 5
    2656:	fc 01       	movw	r30, r24
    2658:	20 83       	st	Z, r18
    265a:	88 e8       	ldi	r24, 0x88	; 136
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	29 81       	ldd	r18, Y+1	; 0x01
    2660:	3a 81       	ldd	r19, Y+2	; 0x02
    2662:	21 50       	subi	r18, 0x01	; 1
    2664:	31 09       	sbc	r19, r1
    2666:	fc 01       	movw	r30, r24
    2668:	31 83       	std	Z+1, r19	; 0x01
    266a:	20 83       	st	Z, r18
    266c:	8f e6       	ldi	r24, 0x6F	; 111
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	2f e6       	ldi	r18, 0x6F	; 111
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	f9 01       	movw	r30, r18
    2676:	20 81       	ld	r18, Z
    2678:	22 60       	ori	r18, 0x02	; 2
    267a:	fc 01       	movw	r30, r24
    267c:	20 83       	st	Z, r18
    267e:	8f e5       	ldi	r24, 0x5F	; 95
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	2f e5       	ldi	r18, 0x5F	; 95
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	f9 01       	movw	r30, r18
    2688:	20 81       	ld	r18, Z
    268a:	20 68       	ori	r18, 0x80	; 128
    268c:	fc 01       	movw	r30, r24
    268e:	20 83       	st	Z, r18
    2690:	00 00       	nop
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	df 91       	pop	r29
    2698:	cf 91       	pop	r28
    269a:	08 95       	ret

0000269c <_Z10timer1_getv>:
    269c:	cf 93       	push	r28
    269e:	df 93       	push	r29
    26a0:	00 d0       	rcall	.+0      	; 0x26a2 <_Z10timer1_getv+0x6>
    26a2:	00 d0       	rcall	.+0      	; 0x26a4 <_Z10timer1_getv+0x8>
    26a4:	00 d0       	rcall	.+0      	; 0x26a6 <_Z10timer1_getv+0xa>
    26a6:	cd b7       	in	r28, 0x3d	; 61
    26a8:	de b7       	in	r29, 0x3e	; 62
    26aa:	8f e5       	ldi	r24, 0x5F	; 95
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	fc 01       	movw	r30, r24
    26b0:	80 81       	ld	r24, Z
    26b2:	88 2f       	mov	r24, r24
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	80 78       	andi	r24, 0x80	; 128
    26b8:	99 27       	eor	r25, r25
    26ba:	9a 83       	std	Y+2, r25	; 0x02
    26bc:	89 83       	std	Y+1, r24	; 0x01
    26be:	8f e5       	ldi	r24, 0x5F	; 95
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	2f e5       	ldi	r18, 0x5F	; 95
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	f9 01       	movw	r30, r18
    26c8:	20 81       	ld	r18, Z
    26ca:	2f 77       	andi	r18, 0x7F	; 127
    26cc:	fc 01       	movw	r30, r24
    26ce:	20 83       	st	Z, r18
    26d0:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <_ZL5count>
    26d4:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <_ZL5count+0x1>
    26d8:	a0 91 78 02 	lds	r26, 0x0278	; 0x800278 <_ZL5count+0x2>
    26dc:	b0 91 79 02 	lds	r27, 0x0279	; 0x800279 <_ZL5count+0x3>
    26e0:	8b 83       	std	Y+3, r24	; 0x03
    26e2:	9c 83       	std	Y+4, r25	; 0x04
    26e4:	ad 83       	std	Y+5, r26	; 0x05
    26e6:	be 83       	std	Y+6, r27	; 0x06
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	9a 81       	ldd	r25, Y+2	; 0x02
    26ec:	89 2b       	or	r24, r25
    26ee:	49 f0       	breq	.+18     	; 0x2702 <_Z10timer1_getv+0x66>
    26f0:	8f e5       	ldi	r24, 0x5F	; 95
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	2f e5       	ldi	r18, 0x5F	; 95
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	f9 01       	movw	r30, r18
    26fa:	20 81       	ld	r18, Z
    26fc:	20 68       	ori	r18, 0x80	; 128
    26fe:	fc 01       	movw	r30, r24
    2700:	20 83       	st	Z, r18
    2702:	8b 81       	ldd	r24, Y+3	; 0x03
    2704:	9c 81       	ldd	r25, Y+4	; 0x04
    2706:	ad 81       	ldd	r26, Y+5	; 0x05
    2708:	be 81       	ldd	r27, Y+6	; 0x06
    270a:	bc 01       	movw	r22, r24
    270c:	cd 01       	movw	r24, r26
    270e:	26 96       	adiw	r28, 0x06	; 6
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	f8 94       	cli
    2714:	de bf       	out	0x3e, r29	; 62
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	cd bf       	out	0x3d, r28	; 61
    271a:	df 91       	pop	r29
    271c:	cf 91       	pop	r28
    271e:	08 95       	ret

00002720 <_Z12timer1_clearv>:
    2720:	cf 93       	push	r28
    2722:	df 93       	push	r29
    2724:	00 d0       	rcall	.+0      	; 0x2726 <_Z12timer1_clearv+0x6>
    2726:	cd b7       	in	r28, 0x3d	; 61
    2728:	de b7       	in	r29, 0x3e	; 62
    272a:	8f e5       	ldi	r24, 0x5F	; 95
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	fc 01       	movw	r30, r24
    2730:	80 81       	ld	r24, Z
    2732:	88 2f       	mov	r24, r24
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	80 78       	andi	r24, 0x80	; 128
    2738:	99 27       	eor	r25, r25
    273a:	9a 83       	std	Y+2, r25	; 0x02
    273c:	89 83       	std	Y+1, r24	; 0x01
    273e:	8f e5       	ldi	r24, 0x5F	; 95
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	2f e5       	ldi	r18, 0x5F	; 95
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	f9 01       	movw	r30, r18
    2748:	20 81       	ld	r18, Z
    274a:	2f 77       	andi	r18, 0x7F	; 127
    274c:	fc 01       	movw	r30, r24
    274e:	20 83       	st	Z, r18
    2750:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <_ZL5count>
    2754:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <_ZL5count+0x1>
    2758:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <_ZL5count+0x2>
    275c:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <_ZL5count+0x3>
    2760:	89 81       	ldd	r24, Y+1	; 0x01
    2762:	9a 81       	ldd	r25, Y+2	; 0x02
    2764:	89 2b       	or	r24, r25
    2766:	49 f0       	breq	.+18     	; 0x277a <_Z12timer1_clearv+0x5a>
    2768:	8f e5       	ldi	r24, 0x5F	; 95
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	2f e5       	ldi	r18, 0x5F	; 95
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	f9 01       	movw	r30, r18
    2772:	20 81       	ld	r18, Z
    2774:	20 68       	ori	r18, 0x80	; 128
    2776:	fc 01       	movw	r30, r24
    2778:	20 83       	st	Z, r18
    277a:	00 00       	nop
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	df 91       	pop	r29
    2782:	cf 91       	pop	r28
    2784:	08 95       	ret

00002786 <_Z11__vector_11v>:
    2786:	1f 92       	push	r1
    2788:	0f 92       	push	r0
    278a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    278e:	0f 92       	push	r0
    2790:	11 24       	eor	r1, r1
    2792:	8f 93       	push	r24
    2794:	9f 93       	push	r25
    2796:	af 93       	push	r26
    2798:	bf 93       	push	r27
    279a:	cf 93       	push	r28
    279c:	df 93       	push	r29
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
    27a2:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <_ZL5count>
    27a6:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <_ZL5count+0x1>
    27aa:	a0 91 78 02 	lds	r26, 0x0278	; 0x800278 <_ZL5count+0x2>
    27ae:	b0 91 79 02 	lds	r27, 0x0279	; 0x800279 <_ZL5count+0x3>
    27b2:	01 96       	adiw	r24, 0x01	; 1
    27b4:	a1 1d       	adc	r26, r1
    27b6:	b1 1d       	adc	r27, r1
    27b8:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <_ZL5count>
    27bc:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <_ZL5count+0x1>
    27c0:	a0 93 78 02 	sts	0x0278, r26	; 0x800278 <_ZL5count+0x2>
    27c4:	b0 93 79 02 	sts	0x0279, r27	; 0x800279 <_ZL5count+0x3>
    27c8:	00 00       	nop
    27ca:	df 91       	pop	r29
    27cc:	cf 91       	pop	r28
    27ce:	bf 91       	pop	r27
    27d0:	af 91       	pop	r26
    27d2:	9f 91       	pop	r25
    27d4:	8f 91       	pop	r24
    27d6:	0f 90       	pop	r0
    27d8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    27dc:	0f 90       	pop	r0
    27de:	1f 90       	pop	r1
    27e0:	18 95       	reti

000027e2 <__mulsi3>:
    27e2:	db 01       	movw	r26, r22
    27e4:	8f 93       	push	r24
    27e6:	9f 93       	push	r25
    27e8:	0e 94 79 14 	call	0x28f2	; 0x28f2 <__muluhisi3>
    27ec:	bf 91       	pop	r27
    27ee:	af 91       	pop	r26
    27f0:	a2 9f       	mul	r26, r18
    27f2:	80 0d       	add	r24, r0
    27f4:	91 1d       	adc	r25, r1
    27f6:	a3 9f       	mul	r26, r19
    27f8:	90 0d       	add	r25, r0
    27fa:	b2 9f       	mul	r27, r18
    27fc:	90 0d       	add	r25, r0
    27fe:	11 24       	eor	r1, r1
    2800:	08 95       	ret

00002802 <__udivmodhi4>:
    2802:	aa 1b       	sub	r26, r26
    2804:	bb 1b       	sub	r27, r27
    2806:	51 e1       	ldi	r21, 0x11	; 17
    2808:	07 c0       	rjmp	.+14     	; 0x2818 <__udivmodhi4_ep>

0000280a <__udivmodhi4_loop>:
    280a:	aa 1f       	adc	r26, r26
    280c:	bb 1f       	adc	r27, r27
    280e:	a6 17       	cp	r26, r22
    2810:	b7 07       	cpc	r27, r23
    2812:	10 f0       	brcs	.+4      	; 0x2818 <__udivmodhi4_ep>
    2814:	a6 1b       	sub	r26, r22
    2816:	b7 0b       	sbc	r27, r23

00002818 <__udivmodhi4_ep>:
    2818:	88 1f       	adc	r24, r24
    281a:	99 1f       	adc	r25, r25
    281c:	5a 95       	dec	r21
    281e:	a9 f7       	brne	.-22     	; 0x280a <__udivmodhi4_loop>
    2820:	80 95       	com	r24
    2822:	90 95       	com	r25
    2824:	bc 01       	movw	r22, r24
    2826:	cd 01       	movw	r24, r26
    2828:	08 95       	ret

0000282a <__divmodhi4>:
    282a:	97 fb       	bst	r25, 7
    282c:	07 2e       	mov	r0, r23
    282e:	16 f4       	brtc	.+4      	; 0x2834 <__divmodhi4+0xa>
    2830:	00 94       	com	r0
    2832:	07 d0       	rcall	.+14     	; 0x2842 <__divmodhi4_neg1>
    2834:	77 fd       	sbrc	r23, 7
    2836:	09 d0       	rcall	.+18     	; 0x284a <__divmodhi4_neg2>
    2838:	0e 94 01 14 	call	0x2802	; 0x2802 <__udivmodhi4>
    283c:	07 fc       	sbrc	r0, 7
    283e:	05 d0       	rcall	.+10     	; 0x284a <__divmodhi4_neg2>
    2840:	3e f4       	brtc	.+14     	; 0x2850 <__divmodhi4_exit>

00002842 <__divmodhi4_neg1>:
    2842:	90 95       	com	r25
    2844:	81 95       	neg	r24
    2846:	9f 4f       	sbci	r25, 0xFF	; 255
    2848:	08 95       	ret

0000284a <__divmodhi4_neg2>:
    284a:	70 95       	com	r23
    284c:	61 95       	neg	r22
    284e:	7f 4f       	sbci	r23, 0xFF	; 255

00002850 <__divmodhi4_exit>:
    2850:	08 95       	ret

00002852 <__udivmodsi4>:
    2852:	a1 e2       	ldi	r26, 0x21	; 33
    2854:	1a 2e       	mov	r1, r26
    2856:	aa 1b       	sub	r26, r26
    2858:	bb 1b       	sub	r27, r27
    285a:	fd 01       	movw	r30, r26
    285c:	0d c0       	rjmp	.+26     	; 0x2878 <__udivmodsi4_ep>

0000285e <__udivmodsi4_loop>:
    285e:	aa 1f       	adc	r26, r26
    2860:	bb 1f       	adc	r27, r27
    2862:	ee 1f       	adc	r30, r30
    2864:	ff 1f       	adc	r31, r31
    2866:	a2 17       	cp	r26, r18
    2868:	b3 07       	cpc	r27, r19
    286a:	e4 07       	cpc	r30, r20
    286c:	f5 07       	cpc	r31, r21
    286e:	20 f0       	brcs	.+8      	; 0x2878 <__udivmodsi4_ep>
    2870:	a2 1b       	sub	r26, r18
    2872:	b3 0b       	sbc	r27, r19
    2874:	e4 0b       	sbc	r30, r20
    2876:	f5 0b       	sbc	r31, r21

00002878 <__udivmodsi4_ep>:
    2878:	66 1f       	adc	r22, r22
    287a:	77 1f       	adc	r23, r23
    287c:	88 1f       	adc	r24, r24
    287e:	99 1f       	adc	r25, r25
    2880:	1a 94       	dec	r1
    2882:	69 f7       	brne	.-38     	; 0x285e <__udivmodsi4_loop>
    2884:	60 95       	com	r22
    2886:	70 95       	com	r23
    2888:	80 95       	com	r24
    288a:	90 95       	com	r25
    288c:	9b 01       	movw	r18, r22
    288e:	ac 01       	movw	r20, r24
    2890:	bd 01       	movw	r22, r26
    2892:	cf 01       	movw	r24, r30
    2894:	08 95       	ret

00002896 <__divmodsi4>:
    2896:	05 2e       	mov	r0, r21
    2898:	97 fb       	bst	r25, 7
    289a:	1e f4       	brtc	.+6      	; 0x28a2 <__divmodsi4+0xc>
    289c:	00 94       	com	r0
    289e:	0e 94 62 14 	call	0x28c4	; 0x28c4 <__negsi2>
    28a2:	57 fd       	sbrc	r21, 7
    28a4:	07 d0       	rcall	.+14     	; 0x28b4 <__divmodsi4_neg2>
    28a6:	0e 94 29 14 	call	0x2852	; 0x2852 <__udivmodsi4>
    28aa:	07 fc       	sbrc	r0, 7
    28ac:	03 d0       	rcall	.+6      	; 0x28b4 <__divmodsi4_neg2>
    28ae:	4e f4       	brtc	.+18     	; 0x28c2 <__divmodsi4_exit>
    28b0:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__negsi2>

000028b4 <__divmodsi4_neg2>:
    28b4:	50 95       	com	r21
    28b6:	40 95       	com	r20
    28b8:	30 95       	com	r19
    28ba:	21 95       	neg	r18
    28bc:	3f 4f       	sbci	r19, 0xFF	; 255
    28be:	4f 4f       	sbci	r20, 0xFF	; 255
    28c0:	5f 4f       	sbci	r21, 0xFF	; 255

000028c2 <__divmodsi4_exit>:
    28c2:	08 95       	ret

000028c4 <__negsi2>:
    28c4:	90 95       	com	r25
    28c6:	80 95       	com	r24
    28c8:	70 95       	com	r23
    28ca:	61 95       	neg	r22
    28cc:	7f 4f       	sbci	r23, 0xFF	; 255
    28ce:	8f 4f       	sbci	r24, 0xFF	; 255
    28d0:	9f 4f       	sbci	r25, 0xFF	; 255
    28d2:	08 95       	ret

000028d4 <__umulhisi3>:
    28d4:	a2 9f       	mul	r26, r18
    28d6:	b0 01       	movw	r22, r0
    28d8:	b3 9f       	mul	r27, r19
    28da:	c0 01       	movw	r24, r0
    28dc:	a3 9f       	mul	r26, r19
    28de:	70 0d       	add	r23, r0
    28e0:	81 1d       	adc	r24, r1
    28e2:	11 24       	eor	r1, r1
    28e4:	91 1d       	adc	r25, r1
    28e6:	b2 9f       	mul	r27, r18
    28e8:	70 0d       	add	r23, r0
    28ea:	81 1d       	adc	r24, r1
    28ec:	11 24       	eor	r1, r1
    28ee:	91 1d       	adc	r25, r1
    28f0:	08 95       	ret

000028f2 <__muluhisi3>:
    28f2:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__umulhisi3>
    28f6:	a5 9f       	mul	r26, r21
    28f8:	90 0d       	add	r25, r0
    28fa:	b4 9f       	mul	r27, r20
    28fc:	90 0d       	add	r25, r0
    28fe:	a4 9f       	mul	r26, r20
    2900:	80 0d       	add	r24, r0
    2902:	91 1d       	adc	r25, r1
    2904:	11 24       	eor	r1, r1
    2906:	08 95       	ret

00002908 <strlen>:
    2908:	fc 01       	movw	r30, r24
    290a:	01 90       	ld	r0, Z+
    290c:	00 20       	and	r0, r0
    290e:	e9 f7       	brne	.-6      	; 0x290a <strlen+0x2>
    2910:	80 95       	com	r24
    2912:	90 95       	com	r25
    2914:	8e 0f       	add	r24, r30
    2916:	9f 1f       	adc	r25, r31
    2918:	08 95       	ret

0000291a <_exit>:
    291a:	f8 94       	cli

0000291c <__stop_program>:
    291c:	ff cf       	rjmp	.-2      	; 0x291c <__stop_program>
